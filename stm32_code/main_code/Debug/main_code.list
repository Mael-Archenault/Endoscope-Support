
main_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a83c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800a9d0  0800a9d0  0000b9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2ac  0800b2ac  0000d838  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2ac  0800b2ac  0000c2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2b4  0800b2b4  0000d838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2b4  0800b2b4  0000c2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2b8  0800b2b8  0000c2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000838  20000000  0800b2bc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000838  0800baf4  0000d838  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c44  0800baf4  0000dc44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d838  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f49  00000000  00000000  0000d868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003084  00000000  00000000  000217b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00024838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d79  00000000  00000000  000259a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c2b  00000000  00000000  00026721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016790  00000000  00000000  0004f34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f51d8  00000000  00000000  00065adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015acb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a50  00000000  00000000  0015acf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00160748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000838 	.word	0x20000838
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9b4 	.word	0x0800a9b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000083c 	.word	0x2000083c
 80001cc:	0800a9b4 	.word	0x0800a9b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_UART_RxCpltCallback>:
extern int argc;
extern char* argv[10];



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0a4      	sub	sp, #144	@ 0x90
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Check which UART triggered the callback
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a58      	ldr	r2, [pc, #352]	@ (8001028 <HAL_UART_RxCpltCallback+0x170>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f040 8171 	bne.w	80011ae <HAL_UART_RxCpltCallback+0x2f6>
        // Process received data
    	char* token;
        argc = 0;
 8000ecc:	4b57      	ldr	r3, [pc, #348]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
        const char delim[] = " ";
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

        // Storing the command name
        token = strtok(command, delim);
 8000ed8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000edc:	4619      	mov	r1, r3
 8000ede:	4854      	ldr	r0, [pc, #336]	@ (8001030 <HAL_UART_RxCpltCallback+0x178>)
 8000ee0:	f007 fc4c 	bl	800877c <strtok>
 8000ee4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
        argv[argc] = token;
 8000ee8:	4b50      	ldr	r3, [pc, #320]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4951      	ldr	r1, [pc, #324]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000eee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        argc++;
 8000ef6:	4b4d      	ldr	r3, [pc, #308]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a4b      	ldr	r2, [pc, #300]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000efe:	6013      	str	r3, [r2, #0]

        // Storing the command parameters
        while(token!=NULL){
 8000f00:	e013      	b.n	8000f2a <HAL_UART_RxCpltCallback+0x72>
            token = strtok(NULL, delim);
 8000f02:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000f06:	4619      	mov	r1, r3
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f007 fc37 	bl	800877c <strtok>
 8000f0e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
            argv[argc] = token;
 8000f12:	4b46      	ldr	r3, [pc, #280]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4947      	ldr	r1, [pc, #284]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f18:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            argc++;
 8000f20:	4b42      	ldr	r3, [pc, #264]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	4a41      	ldr	r2, [pc, #260]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000f28:	6013      	str	r3, [r2, #0]
        while(token!=NULL){
 8000f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1e7      	bne.n	8000f02 <HAL_UART_RxCpltCallback+0x4a>
        }

        
        if (state==LISTENING_STATE){
 8000f32:	4b41      	ldr	r3, [pc, #260]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 809e 	bne.w	8001078 <HAL_UART_RxCpltCallback+0x1c0>

            if (strcmp(argv[0],"move")==0){
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	493e      	ldr	r1, [pc, #248]	@ (800103c <HAL_UART_RxCpltCallback+0x184>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff f944 	bl	80001d0 <strcmp>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d103      	bne.n	8000f56 <HAL_UART_RxCpltCallback+0x9e>
                state = MOVING_STATE;
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f50:	2203      	movs	r2, #3
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e090      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"turn")==0){
 8000f56:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4939      	ldr	r1, [pc, #228]	@ (8001040 <HAL_UART_RxCpltCallback+0x188>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f937 	bl	80001d0 <strcmp>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d103      	bne.n	8000f70 <HAL_UART_RxCpltCallback+0xb8>
                state = TURNING_STATE;
 8000f68:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e083      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"change")==0){
 8000f70:	4b30      	ldr	r3, [pc, #192]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4933      	ldr	r1, [pc, #204]	@ (8001044 <HAL_UART_RxCpltCallback+0x18c>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff f92a 	bl	80001d0 <strcmp>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <HAL_UART_RxCpltCallback+0xd2>
                state = VARIABLE_CHANGE_STATE;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f84:	2206      	movs	r2, #6
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e076      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"home")==0){
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	492e      	ldr	r1, [pc, #184]	@ (8001048 <HAL_UART_RxCpltCallback+0x190>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f91d 	bl	80001d0 <strcmp>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d103      	bne.n	8000fa4 <HAL_UART_RxCpltCallback+0xec>
                state = HOMING_STATE;
 8000f9c:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e069      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }
            else if (strcmp(argv[0],"picture")==0){
 8000fa4:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4928      	ldr	r1, [pc, #160]	@ (800104c <HAL_UART_RxCpltCallback+0x194>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff f910 	bl	80001d0 <strcmp>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d103      	bne.n	8000fbe <HAL_UART_RxCpltCallback+0x106>
                state = PICTURING_STATE;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000fb8:	2208      	movs	r2, #8
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e05c      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"getFirmware")==0){
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4923      	ldr	r1, [pc, #140]	@ (8001050 <HAL_UART_RxCpltCallback+0x198>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f903 	bl	80001d0 <strcmp>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <HAL_UART_RxCpltCallback+0x120>
                state = FIRMWARE_SENDING_STATE;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000fd2:	2209      	movs	r2, #9
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e04f      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"moveTo")==0){
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	491d      	ldr	r1, [pc, #116]	@ (8001054 <HAL_UART_RxCpltCallback+0x19c>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f8f6 	bl	80001d0 <strcmp>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <HAL_UART_RxCpltCallback+0x13a>
                state = MOVING_TO_STATE;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000fec:	2205      	movs	r2, #5
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e042      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }
            
            else if (strcmp(argv[0],"computeStep")==0){
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4918      	ldr	r1, [pc, #96]	@ (8001058 <HAL_UART_RxCpltCallback+0x1a0>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8e9 	bl	80001d0 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <HAL_UART_RxCpltCallback+0x154>
                state = STEP_COMPUTING_STATE;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8001006:	2207      	movs	r2, #7
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e035      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }
            else if (strcmp(argv[0],"play")==0){
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4912      	ldr	r1, [pc, #72]	@ (800105c <HAL_UART_RxCpltCallback+0x1a4>)
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f8dc 	bl	80001d0 <strcmp>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d120      	bne.n	8001060 <HAL_UART_RxCpltCallback+0x1a8>
                state = CAPTURING_STATE;
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8001020:	220c      	movs	r2, #12
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e028      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	20000a94 	.word	0x20000a94
 8001030:	20000a14 	.word	0x20000a14
 8001034:	20000a98 	.word	0x20000a98
 8001038:	20000ac0 	.word	0x20000ac0
 800103c:	0800a9d0 	.word	0x0800a9d0
 8001040:	0800a9d8 	.word	0x0800a9d8
 8001044:	0800a9e0 	.word	0x0800a9e0
 8001048:	0800a9e8 	.word	0x0800a9e8
 800104c:	0800a9f0 	.word	0x0800a9f0
 8001050:	0800a9f8 	.word	0x0800a9f8
 8001054:	0800aa04 	.word	0x0800aa04
 8001058:	0800aa0c 	.word	0x0800aa0c
 800105c:	0800aa18 	.word	0x0800aa18
                
            }
            else if (strcmp(argv[0], "playTestSequence")== 0){
 8001060:	4b55      	ldr	r3, [pc, #340]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4955      	ldr	r1, [pc, #340]	@ (80011bc <HAL_UART_RxCpltCallback+0x304>)
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f8b2 	bl	80001d0 <strcmp>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
                state = TESTING_SEQUENCE_STATE; 
 8001072:	4b53      	ldr	r3, [pc, #332]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001074:	220d      	movs	r2, #13
 8001076:	601a      	str	r2, [r3, #0]
            }

    
        }

        if (state == CAPTURING_STATE){
 8001078:	4b51      	ldr	r3, [pc, #324]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d12c      	bne.n	80010da <HAL_UART_RxCpltCallback+0x222>
            if (strcmp(argv[0],"stop")==0){
 8001080:	4b4d      	ldr	r3, [pc, #308]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	494f      	ldr	r1, [pc, #316]	@ (80011c4 <HAL_UART_RxCpltCallback+0x30c>)
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8a2 	bl	80001d0 <strcmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_UART_RxCpltCallback+0x1e0>
                state = STOPPING_STATE;
 8001092:	4b4b      	ldr	r3, [pc, #300]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001094:	220a      	movs	r2, #10
 8001096:	601a      	str	r2, [r3, #0]
            }
            if (strcmp(argv[0],"pause")==0){
 8001098:	4b47      	ldr	r3, [pc, #284]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	494a      	ldr	r1, [pc, #296]	@ (80011c8 <HAL_UART_RxCpltCallback+0x310>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f896 	bl	80001d0 <strcmp>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d117      	bne.n	80010da <HAL_UART_RxCpltCallback+0x222>
                // Notifying pc of the change of steps
                char message[BUFF_SIZE] = {" "};
 80010aa:	2320      	movs	r3, #32
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	227c      	movs	r2, #124	@ 0x7c
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f007 fb45 	bl	8008746 <memset>
                snprintf(message, sizeof(message), "logCapture Paused capture");
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	4a42      	ldr	r2, [pc, #264]	@ (80011cc <HAL_UART_RxCpltCallback+0x314>)
 80010c2:	2180      	movs	r1, #128	@ 0x80
 80010c4:	4618      	mov	r0, r3
 80010c6:	f007 fac7 	bl	8008658 <sniprintf>
                transmit_to_pc(&message);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f88a 	bl	80011e8 <transmit_to_pc>
                state = PAUSED_STATE;
 80010d4:	4b3a      	ldr	r3, [pc, #232]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
            }
    
        }
        if (state == TESTING_SEQUENCE_STATE){
 80010da:	4b39      	ldr	r3, [pc, #228]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b0d      	cmp	r3, #13
 80010e0:	d12c      	bne.n	800113c <HAL_UART_RxCpltCallback+0x284>
            if (strcmp(argv[0],"stopTestSequence")==0){
 80010e2:	4b35      	ldr	r3, [pc, #212]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	493a      	ldr	r1, [pc, #232]	@ (80011d0 <HAL_UART_RxCpltCallback+0x318>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f871 	bl	80001d0 <strcmp>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <HAL_UART_RxCpltCallback+0x242>
                state = STOPPING_SEQUENCE_STATE;
 80010f4:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 80010f6:	220b      	movs	r2, #11
 80010f8:	601a      	str	r2, [r3, #0]
            }
            if (strcmp(argv[0],"pauseTestSequence")==0){
 80010fa:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4935      	ldr	r1, [pc, #212]	@ (80011d4 <HAL_UART_RxCpltCallback+0x31c>)
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f865 	bl	80001d0 <strcmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d117      	bne.n	800113c <HAL_UART_RxCpltCallback+0x284>
                // Notifying pc of the change of steps
                char message[BUFF_SIZE] = {" "};
 800110c:	2320      	movs	r3, #32
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	227c      	movs	r2, #124	@ 0x7c
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f007 fb14 	bl	8008746 <memset>
                snprintf(message, sizeof(message), "logTest Paused the test of the capture sequence");
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <HAL_UART_RxCpltCallback+0x320>)
 8001124:	2180      	movs	r1, #128	@ 0x80
 8001126:	4618      	mov	r0, r3
 8001128:	f007 fa96 	bl	8008658 <sniprintf>
                transmit_to_pc(&message);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f859 	bl	80011e8 <transmit_to_pc>
                state = PAUSED_STATE;
 8001136:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
            }
    
        }
        if (state == PAUSED_STATE){
 800113c:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d12f      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x2ec>
            if (strcmp(argv[0],"play")==0){
 8001144:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4924      	ldr	r1, [pc, #144]	@ (80011dc <HAL_UART_RxCpltCallback+0x324>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f840 	bl	80001d0 <strcmp>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <HAL_UART_RxCpltCallback+0x2a4>
                state = CAPTURING_STATE;
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001158:	220c      	movs	r2, #12
 800115a:	601a      	str	r2, [r3, #0]
            }
            if (strcmp(argv[0],"stop")==0){
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4918      	ldr	r1, [pc, #96]	@ (80011c4 <HAL_UART_RxCpltCallback+0x30c>)
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f834 	bl	80001d0 <strcmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <HAL_UART_RxCpltCallback+0x2bc>
                state = STOPPING_STATE;
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001170:	220a      	movs	r2, #10
 8001172:	601a      	str	r2, [r3, #0]
            }

            if (strcmp(argv[0],"playTestSequence")==0){
 8001174:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4910      	ldr	r1, [pc, #64]	@ (80011bc <HAL_UART_RxCpltCallback+0x304>)
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f828 	bl	80001d0 <strcmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <HAL_UART_RxCpltCallback+0x2d4>
                state = TESTING_SEQUENCE_STATE;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001188:	220d      	movs	r2, #13
 800118a:	601a      	str	r2, [r3, #0]
            }
            if (strcmp(argv[0],"stopTestSequence")==0){
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	490f      	ldr	r1, [pc, #60]	@ (80011d0 <HAL_UART_RxCpltCallback+0x318>)
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f81c 	bl	80001d0 <strcmp>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x2ec>
                state = STOPPING_SEQUENCE_STATE;
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 80011a0:	220b      	movs	r2, #11
 80011a2:	601a      	str	r2, [r3, #0]
            }
        }
        


        HAL_UART_Receive_IT(&huart2, &command, BUFF_SIZE);  // Restart reception
 80011a4:	2280      	movs	r2, #128	@ 0x80
 80011a6:	490e      	ldr	r1, [pc, #56]	@ (80011e0 <HAL_UART_RxCpltCallback+0x328>)
 80011a8:	480e      	ldr	r0, [pc, #56]	@ (80011e4 <HAL_UART_RxCpltCallback+0x32c>)
 80011aa:	f005 f9a1 	bl	80064f0 <HAL_UART_Receive_IT>

    }
}
 80011ae:	bf00      	nop
 80011b0:	3790      	adds	r7, #144	@ 0x90
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000a98 	.word	0x20000a98
 80011bc:	0800aa20 	.word	0x0800aa20
 80011c0:	20000ac0 	.word	0x20000ac0
 80011c4:	0800aa34 	.word	0x0800aa34
 80011c8:	0800aa3c 	.word	0x0800aa3c
 80011cc:	0800aa44 	.word	0x0800aa44
 80011d0:	0800aa60 	.word	0x0800aa60
 80011d4:	0800aa74 	.word	0x0800aa74
 80011d8:	0800aa88 	.word	0x0800aa88
 80011dc:	0800aa18 	.word	0x0800aa18
 80011e0:	20000a14 	.word	0x20000a14
 80011e4:	2000098c 	.word	0x2000098c

080011e8 <transmit_to_pc>:

void transmit_to_pc(char** message){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, message, BUFF_SIZE, 1000);
 80011f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <transmit_to_pc+0x20>)
 80011fa:	f005 f8ef 	bl	80063dc <HAL_UART_Transmit>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000098c 	.word	0x2000098c

0800120c <send1Pulse>:
int r_pulse_nb = 1; //number of pulse to move 1°

int current_x = 0;
int current_theta = 0;

void send1Pulse(int n_driver){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	uint16_t GPIO_PIN;
	GPIO_PIN = (n_driver==T_MOTOR)?GPIO_PIN_5:GPIO_PIN_7;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d101      	bne.n	800121e <send1Pulse+0x12>
 800121a:	2320      	movs	r3, #32
 800121c:	e000      	b.n	8001220 <send1Pulse+0x14>
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN, 1);
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122c:	f002 fb72 	bl	8003914 <HAL_GPIO_WritePin>
	delayMicroseconds(step_time_us);
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <send1Pulse+0x44>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f001 ff3f 	bl	80030b8 <delayMicroseconds>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN, 0);
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001244:	f002 fb66 	bl	8003914 <HAL_GPIO_WritePin>

}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000

08001254 <sendNPulse>:

void sendNPulse(int N, int n_driver){
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i<N; i++){
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e00a      	b.n	800127a <sendNPulse+0x26>
		send1Pulse(n_driver);
 8001264:	6838      	ldr	r0, [r7, #0]
 8001266:	f7ff ffd1 	bl	800120c <send1Pulse>
		delayMicroseconds(t_wait_between_steps_us);
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <sendNPulse+0x38>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f001 ff22 	bl	80030b8 <delayMicroseconds>
	for (int i = 0; i<N; i++){
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbf0      	blt.n	8001264 <sendNPulse+0x10>
	}
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000004 	.word	0x20000004

08001290 <translate>:


// ------------ Moving functions ---------------------------
void translate(int dx){
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

	int coeff;
	if (dx >= 0){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db06      	blt.n	80012ac <translate+0x1c>
        coeff = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
        setDirection(T_MOTOR, FORWARD);
 80012a2:	2101      	movs	r1, #1
 80012a4:	2002      	movs	r0, #2
 80012a6:	f000 f9b1 	bl	800160c <setDirection>
 80012aa:	e006      	b.n	80012ba <translate+0x2a>
    }
	else {
        coeff = -1;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	60fb      	str	r3, [r7, #12]
		setDirection(T_MOTOR, BACKWARD);
 80012b2:	2100      	movs	r1, #0
 80012b4:	2002      	movs	r0, #2
 80012b6:	f000 f9a9 	bl	800160c <setDirection>
    }
	
	int nb_pulses = coeff*dx*t_pulse_nb;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	4a09      	ldr	r2, [pc, #36]	@ (80012e8 <translate+0x58>)
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	60bb      	str	r3, [r7, #8]
	sendNPulse(nb_pulses, T_MOTOR);
 80012cc:	2102      	movs	r1, #2
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	f7ff ffc0 	bl	8001254 <sendNPulse>


	current_x += dx;
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <translate+0x5c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	4a03      	ldr	r2, [pc, #12]	@ (80012ec <translate+0x5c>)
 80012de:	6013      	str	r3, [r2, #0]

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	20000854 	.word	0x20000854

080012f0 <rotate>:

void rotate(int dtheta){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	int coeff;
	if (dtheta >= 0){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db06      	blt.n	800130c <rotate+0x1c>
        coeff = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
        setDirection(R_MOTOR, FORWARD);
 8001302:	2101      	movs	r1, #1
 8001304:	2001      	movs	r0, #1
 8001306:	f000 f981 	bl	800160c <setDirection>
 800130a:	e006      	b.n	800131a <rotate+0x2a>
    } else {
		coeff = -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	60fb      	str	r3, [r7, #12]
		setDirection(R_MOTOR, BACKWARD);
 8001312:	2100      	movs	r1, #0
 8001314:	2001      	movs	r0, #1
 8001316:	f000 f979 	bl	800160c <setDirection>
    }
	
	int nb_pulses = coeff*dtheta*r_pulse_nb;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	4a09      	ldr	r2, [pc, #36]	@ (8001348 <rotate+0x58>)
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	60bb      	str	r3, [r7, #8]
	sendNPulse(nb_pulses, R_MOTOR);
 800132c:	2101      	movs	r1, #1
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f7ff ff90 	bl	8001254 <sendNPulse>

	current_theta += dtheta;
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <rotate+0x5c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	4a03      	ldr	r2, [pc, #12]	@ (800134c <rotate+0x5c>)
 800133e:	6013      	str	r3, [r2, #0]

}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000010 	.word	0x20000010
 800134c:	20000858 	.word	0x20000858

08001350 <move>:

void move(int dx, int dtheta, int capture){
 8001350:	b580      	push	{r7, lr}
 8001352:	b0a8      	sub	sp, #160	@ 0xa0
 8001354:	af04      	add	r7, sp, #16
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
	setSleep(T_MOTOR, ENABLE);
 800135c:	2101      	movs	r1, #1
 800135e:	2002      	movs	r0, #2
 8001360:	f000 f9be 	bl	80016e0 <setSleep>
	setSleep(R_MOTOR, ENABLE);
 8001364:	2101      	movs	r1, #1
 8001366:	2001      	movs	r0, #1
 8001368:	f000 f9ba 	bl	80016e0 <setSleep>
	translate(dx);
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff ff8f 	bl	8001290 <translate>
	rotate(dtheta);
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	f7ff ffbc 	bl	80012f0 <rotate>
	setSleep(T_MOTOR, DISABLE);
 8001378:	2100      	movs	r1, #0
 800137a:	2002      	movs	r0, #2
 800137c:	f000 f9b0 	bl	80016e0 <setSleep>
	setSleep(R_MOTOR, DISABLE);
 8001380:	2100      	movs	r1, #0
 8001382:	2001      	movs	r0, #1
 8001384:	f000 f9ac 	bl	80016e0 <setSleep>

	char message[BUFF_SIZE] = {" "};
 8001388:	2320      	movs	r3, #32
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	227c      	movs	r2, #124	@ 0x7c
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f007 f9d6 	bl	8008746 <memset>
	snprintf(message, sizeof(message), "position %d %d", current_x, current_theta);
 800139a:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <move+0xf8>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b2b      	ldr	r3, [pc, #172]	@ (800144c <move+0xfc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f107 0010 	add.w	r0, r7, #16
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4613      	mov	r3, r2
 80013aa:	4a29      	ldr	r2, [pc, #164]	@ (8001450 <move+0x100>)
 80013ac:	2180      	movs	r1, #128	@ 0x80
 80013ae:	f007 f953 	bl	8008658 <sniprintf>
	transmit_to_pc(&message);
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff16 	bl	80011e8 <transmit_to_pc>
	memset(message, 0, BUFF_SIZE);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f007 f9be 	bl	8008746 <memset>
	
	if (capture == 1){
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d11b      	bne.n	8001408 <move+0xb8>
		snprintf(message, sizeof(message), "logCapture Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <move+0xf8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <move+0xfc>)
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	f107 0010 	add.w	r0, r7, #16
 80013dc:	9202      	str	r2, [sp, #8]
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001454 <move+0x104>)
 80013e8:	2180      	movs	r1, #128	@ 0x80
 80013ea:	f007 f935 	bl	8008658 <sniprintf>
		transmit_to_pc(&message);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fef8 	bl	80011e8 <transmit_to_pc>
		memset(message, 0, BUFF_SIZE);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f007 f9a0 	bl	8008746 <memset>
		transmit_to_pc(&message);
		memset(message, 0, BUFF_SIZE);
	}
	
	
}
 8001406:	e01a      	b.n	800143e <move+0xee>
		snprintf(message, sizeof(message), "logTest Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <move+0xf8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <move+0xfc>)
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	f107 0010 	add.w	r0, r7, #16
 8001414:	9202      	str	r2, [sp, #8]
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <move+0x108>)
 8001420:	2180      	movs	r1, #128	@ 0x80
 8001422:	f007 f919 	bl	8008658 <sniprintf>
		transmit_to_pc(&message);
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fedc 	bl	80011e8 <transmit_to_pc>
		memset(message, 0, BUFF_SIZE);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f007 f984 	bl	8008746 <memset>
}
 800143e:	bf00      	nop
 8001440:	3790      	adds	r7, #144	@ 0x90
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000854 	.word	0x20000854
 800144c:	20000858 	.word	0x20000858
 8001450:	0800aab8 	.word	0x0800aab8
 8001454:	0800aac8 	.word	0x0800aac8
 8001458:	0800ab08 	.word	0x0800ab08

0800145c <move_to>:

void move_to(int x, int theta, int capture){
 800145c:	b580      	push	{r7, lr}
 800145e:	b0aa      	sub	sp, #168	@ 0xa8
 8001460:	af04      	add	r7, sp, #16
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	int dx = x - current_x;
 8001468:	4b46      	ldr	r3, [pc, #280]	@ (8001584 <move_to+0x128>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int dtheta = theta - current_theta;
 8001474:	4b44      	ldr	r3, [pc, #272]	@ (8001588 <move_to+0x12c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    setSleep(T_MOTOR, ENABLE);
 8001480:	2101      	movs	r1, #1
 8001482:	2002      	movs	r0, #2
 8001484:	f000 f92c 	bl	80016e0 <setSleep>
	setSleep(R_MOTOR, ENABLE);
 8001488:	2101      	movs	r1, #1
 800148a:	2001      	movs	r0, #1
 800148c:	f000 f928 	bl	80016e0 <setSleep>
	translate(dx);
 8001490:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001494:	f7ff fefc 	bl	8001290 <translate>
	rotate(dtheta);
 8001498:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800149c:	f7ff ff28 	bl	80012f0 <rotate>
	setSleep(T_MOTOR, DISABLE);
 80014a0:	2100      	movs	r1, #0
 80014a2:	2002      	movs	r0, #2
 80014a4:	f000 f91c 	bl	80016e0 <setSleep>
	setSleep(R_MOTOR, DISABLE);
 80014a8:	2100      	movs	r1, #0
 80014aa:	2001      	movs	r0, #1
 80014ac:	f000 f918 	bl	80016e0 <setSleep>

	current_x = x;
 80014b0:	4a34      	ldr	r2, [pc, #208]	@ (8001584 <move_to+0x128>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6013      	str	r3, [r2, #0]
	current_theta = theta;
 80014b6:	4a34      	ldr	r2, [pc, #208]	@ (8001588 <move_to+0x12c>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	6013      	str	r3, [r2, #0]

	char message[BUFF_SIZE] = {" "};
 80014bc:	2320      	movs	r3, #32
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	227c      	movs	r2, #124	@ 0x7c
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f007 f93c 	bl	8008746 <memset>
	snprintf(message, sizeof(message), "position %d %d", current_x, current_theta);
 80014ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <move_to+0x128>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <move_to+0x12c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f107 0010 	add.w	r0, r7, #16
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	4a2b      	ldr	r2, [pc, #172]	@ (800158c <move_to+0x130>)
 80014e0:	2180      	movs	r1, #128	@ 0x80
 80014e2:	f007 f8b9 	bl	8008658 <sniprintf>
	transmit_to_pc(&message);
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fe7c 	bl	80011e8 <transmit_to_pc>
	memset(message, 0, BUFF_SIZE);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	2280      	movs	r2, #128	@ 0x80
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f007 f924 	bl	8008746 <memset>

	if (capture == 1){
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d11d      	bne.n	8001540 <move_to+0xe4>
		snprintf(message, sizeof(message), "logCapture Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <move_to+0x128>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1f      	ldr	r2, [pc, #124]	@ (8001588 <move_to+0x12c>)
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	f107 0010 	add.w	r0, r7, #16
 8001510:	9202      	str	r2, [sp, #8]
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <move_to+0x134>)
 8001520:	2180      	movs	r1, #128	@ 0x80
 8001522:	f007 f899 	bl	8008658 <sniprintf>
		transmit_to_pc(&message);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fe5c 	bl	80011e8 <transmit_to_pc>
		memset(message, 0, BUFF_SIZE);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2280      	movs	r2, #128	@ 0x80
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f007 f904 	bl	8008746 <memset>
	else{
		snprintf(message, sizeof(message), "logTest Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
		transmit_to_pc(&message);
		memset(message, 0, BUFF_SIZE);
	}
}
 800153e:	e01c      	b.n	800157a <move_to+0x11e>
		snprintf(message, sizeof(message), "logTest Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <move_to+0x128>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a10      	ldr	r2, [pc, #64]	@ (8001588 <move_to+0x12c>)
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	f107 0010 	add.w	r0, r7, #16
 800154c:	9202      	str	r2, [sp, #8]
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <move_to+0x138>)
 800155c:	2180      	movs	r1, #128	@ 0x80
 800155e:	f007 f87b 	bl	8008658 <sniprintf>
		transmit_to_pc(&message);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fe3e 	bl	80011e8 <transmit_to_pc>
		memset(message, 0, BUFF_SIZE);
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	2280      	movs	r2, #128	@ 0x80
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f007 f8e6 	bl	8008746 <memset>
}
 800157a:	bf00      	nop
 800157c:	3798      	adds	r7, #152	@ 0x98
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000854 	.word	0x20000854
 8001588:	20000858 	.word	0x20000858
 800158c:	0800aab8 	.word	0x0800aab8
 8001590:	0800aac8 	.word	0x0800aac8
 8001594:	0800ab08 	.word	0x0800ab08

08001598 <setMicrosteppingMode>:


// ------------ Mode functions ---------------------------

void setMicrosteppingMode(int stepping_mode){
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	   |  H  |  H  |  L  | Eighth Step          | 2W1-2 Phase      |
	   |  H  |  H  |  H  | Sixteenth Step       | 4W1-2 Phase      |

	   Note: by setting the stepping mode in {0,1,2,3,4}, MSx is just the x-th bits of the stepping mode
	*/
	int MS1 = stepping_mode&0x1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
	int MS2 = (stepping_mode&0x2)>>1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	105b      	asrs	r3, r3, #1
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
	int MS3 = (stepping_mode&0x4)>>2;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	109b      	asrs	r3, r3, #2
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]

	if (stepping_mode==SIXTEENTH_STEP){
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d105      	bne.n	80015ce <setMicrosteppingMode+0x36>
		MS1 = 1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
		MS2 = 1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
		MS3 = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]

	// PA9 -> MS1
	// PC7 -> MS2
	// PB6 -> MS3

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, MS1);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015dc:	f002 f99a 	bl	8003914 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, MS2);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	2180      	movs	r1, #128	@ 0x80
 80015e8:	4806      	ldr	r0, [pc, #24]	@ (8001604 <setMicrosteppingMode+0x6c>)
 80015ea:	f002 f993 	bl	8003914 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, MS3);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	2140      	movs	r1, #64	@ 0x40
 80015f6:	4804      	ldr	r0, [pc, #16]	@ (8001608 <setMicrosteppingMode+0x70>)
 80015f8:	f002 f98c 	bl	8003914 <HAL_GPIO_WritePin>


}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	48000800 	.word	0x48000800
 8001608:	48000400 	.word	0x48000400

0800160c <setDirection>:

void setDirection(int n_driver, int direction){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]

	if (n_driver==T_MOTOR){
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d109      	bne.n	8001630 <setDirection+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, direction);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162a:	f002 f973 	bl	8003914 <HAL_GPIO_WritePin>
 800162e:	e00a      	b.n	8001646 <setDirection+0x3a>
	}

	else if (n_driver==R_MOTOR){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <setDirection+0x3a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, direction);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <setDirection+0x48>)
 8001642:	f002 f967 	bl	8003914 <HAL_GPIO_WritePin>
	}

	// Required time to wait before sending a step : 200 ns
	delayMicroseconds(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f001 fd36 	bl	80030b8 <delayMicroseconds>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	48000400 	.word	0x48000400

08001658 <setEnable>:

void setEnable(int n_driver, int state){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	if (n_driver==R_MOTOR){
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d108      	bne.n	800167a <setEnable+0x22>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, state);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	2101      	movs	r1, #1
 8001670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001674:	f002 f94e 	bl	8003914 <HAL_GPIO_WritePin>
    }

    else if (n_driver==T_MOTOR){
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, state);
    }
}
 8001678:	e00a      	b.n	8001690 <setEnable+0x38>
    else if (n_driver==T_MOTOR){
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d107      	bne.n	8001690 <setEnable+0x38>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, state);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	2102      	movs	r1, #2
 8001688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168c:	f002 f942 	bl	8003914 <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <setReset>:

void setReset(int n_driver, int state){
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	if (n_driver==R_MOTOR){
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <setReset+0x20>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, state);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	2120      	movs	r1, #32
 80016b0:	480a      	ldr	r0, [pc, #40]	@ (80016dc <setReset+0x44>)
 80016b2:	f002 f92f 	bl	8003914 <HAL_GPIO_WritePin>
 80016b6:	e009      	b.n	80016cc <setReset+0x34>
    }

    else if (n_driver==T_MOTOR){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d106      	bne.n	80016cc <setReset+0x34>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, state);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	2110      	movs	r1, #16
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <setReset+0x44>)
 80016c8:	f002 f924 	bl	8003914 <HAL_GPIO_WritePin>
    }

	// Required time to wait before sending a step : 200 ns
	delayMicroseconds(1);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f001 fcf3 	bl	80030b8 <delayMicroseconds>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	48000400 	.word	0x48000400

080016e0 <setSleep>:

void setSleep(int n_driver, int state){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	if (n_driver==R_MOTOR){
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d109      	bne.n	8001704 <setSleep+0x24>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, state);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fe:	f002 f909 	bl	8003914 <HAL_GPIO_WritePin>
 8001702:	e009      	b.n	8001718 <setSleep+0x38>
    }

    else if (n_driver==T_MOTOR){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d106      	bne.n	8001718 <setSleep+0x38>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, state);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	2108      	movs	r1, #8
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <setSleep+0x48>)
 8001714:	f002 f8fe 	bl	8003914 <HAL_GPIO_WritePin>
    }
	
	// Required time to wait before sending a step : 1 ms
	delayMicroseconds(2000);
 8001718:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800171c:	f001 fccc 	bl	80030b8 <delayMicroseconds>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	48000400 	.word	0x48000400

0800172c <initializeDrivers>:


// ------------ Initialization functions ---------------------------

void initializeDrivers(){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	setMicrosteppingMode(SIXTEENTH_STEP);
 8001730:	2004      	movs	r0, #4
 8001732:	f7ff ff31 	bl	8001598 <setMicrosteppingMode>


	setReset(T_MOTOR, ENABLE);
 8001736:	2101      	movs	r1, #1
 8001738:	2002      	movs	r0, #2
 800173a:	f7ff ffad 	bl	8001698 <setReset>
	setReset(R_MOTOR, ENABLE);
 800173e:	2101      	movs	r1, #1
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffa9 	bl	8001698 <setReset>

	setSleep(T_MOTOR, DISABLE);
 8001746:	2100      	movs	r1, #0
 8001748:	2002      	movs	r0, #2
 800174a:	f7ff ffc9 	bl	80016e0 <setSleep>
	setSleep(R_MOTOR, DISABLE);
 800174e:	2100      	movs	r1, #0
 8001750:	2001      	movs	r0, #1
 8001752:	f7ff ffc5 	bl	80016e0 <setSleep>

	setDirection(T_MOTOR, FORWARD);
 8001756:	2101      	movs	r1, #1
 8001758:	2002      	movs	r0, #2
 800175a:	f7ff ff57 	bl	800160c <setDirection>
	setDirection(R_MOTOR, FORWARD);
 800175e:	2101      	movs	r1, #1
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff ff53 	bl	800160c <setDirection>

	setEnable(T_MOTOR, DISABLE);
 8001766:	2100      	movs	r1, #0
 8001768:	2002      	movs	r0, #2
 800176a:	f7ff ff75 	bl	8001658 <setEnable>
	setEnable(R_MOTOR, DISABLE);
 800176e:	2100      	movs	r1, #0
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff ff71 	bl	8001658 <setEnable>

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <home_motors>:

void home_motors(){
 800177c:	b580      	push	{r7, lr}
 800177e:	b0a4      	sub	sp, #144	@ 0x90
 8001780:	af02      	add	r7, sp, #8
	setDirection(T_MOTOR, BACKWARD);
 8001782:	2100      	movs	r1, #0
 8001784:	2002      	movs	r0, #2
 8001786:	f7ff ff41 	bl	800160c <setDirection>

	int flag = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	setSleep(T_MOTOR, ENABLE);
 8001790:	2101      	movs	r1, #1
 8001792:	2002      	movs	r0, #2
 8001794:	f7ff ffa4 	bl	80016e0 <setSleep>
	setSleep(R_MOTOR, ENABLE);
 8001798:	2101      	movs	r1, #1
 800179a:	2001      	movs	r0, #1
 800179c:	f7ff ffa0 	bl	80016e0 <setSleep>



    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0){
 80017a0:	e007      	b.n	80017b2 <home_motors+0x36>
		send1Pulse(T_MOTOR);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f7ff fd32 	bl	800120c <send1Pulse>
		delayMicroseconds(t_wait_between_steps_us);
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <home_motors+0x9c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 fc83 	bl	80030b8 <delayMicroseconds>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0){
 80017b2:	2110      	movs	r1, #16
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b8:	f002 f894 	bl	80038e4 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ef      	bne.n	80017a2 <home_motors+0x26>
	}

    setSleep(T_MOTOR, DISABLE);
 80017c2:	2100      	movs	r1, #0
 80017c4:	2002      	movs	r0, #2
 80017c6:	f7ff ff8b 	bl	80016e0 <setSleep>
    setSleep(R_MOTOR, DISABLE);
 80017ca:	2100      	movs	r1, #0
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff ff87 	bl	80016e0 <setSleep>


	current_x = 0;
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <home_motors+0xa0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
	current_theta = 0;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <home_motors+0xa4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

	char message[BUFF_SIZE] = {" "};
 80017de:	2320      	movs	r3, #32
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	227c      	movs	r2, #124	@ 0x7c
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f006 ffab 	bl	8008746 <memset>
	snprintf(message, sizeof(message), "position %d %d", current_x, current_theta);
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <home_motors+0xa0>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <home_motors+0xa4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	1d38      	adds	r0, r7, #4
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4613      	mov	r3, r2
 80017fe:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <home_motors+0xa8>)
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	f006 ff29 	bl	8008658 <sniprintf>
	transmit_to_pc(&message);
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fced 	bl	80011e8 <transmit_to_pc>

}
 800180e:	bf00      	nop
 8001810:	3788      	adds	r7, #136	@ 0x88
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000004 	.word	0x20000004
 800181c:	20000854 	.word	0x20000854
 8001820:	20000858 	.word	0x20000858
 8001824:	0800aab8 	.word	0x0800aab8

08001828 <get_translation_time>:


int get_translation_time(int dx){
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	int nb_pulses = t_pulse_nb*dx; // number of pulses to move of dx
 8001830:	4b12      	ldr	r3, [pc, #72]	@ (800187c <get_translation_time+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	fb02 f303 	mul.w	r3, r2, r3
 800183a:	60fb      	str	r3, [r7, #12]

	int pulse_time_us = step_time_us + t_wait_between_steps_us;
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <get_translation_time+0x58>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <get_translation_time+0x5c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4413      	add	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]

	return (int)(float)(pulse_time_us*nb_pulses)/(float)(1000000);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001860:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001888 <get_translation_time+0x60>
 8001864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186c:	ee17 3a90 	vmov	r3, s15
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	2000000c 	.word	0x2000000c
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004
 8001888:	49742400 	.word	0x49742400

0800188c <get_rotation_time>:

int get_rotation_time(int dtheta){
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	int nb_pulses = r_pulse_nb*dtheta; // number of pulses to rotate of dtheta
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <get_rotation_time+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	60fb      	str	r3, [r7, #12]

    int pulse_time_us = step_time_us + r_wait_between_steps_us;
 80018a0:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <get_rotation_time+0x58>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <get_rotation_time+0x5c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]

    return (int)(float)(pulse_time_us*nb_pulses)/(float)(1000000);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c4:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80018ec <get_rotation_time+0x60>
 80018c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d0:	ee17 3a90 	vmov	r3, s15
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	20000010 	.word	0x20000010
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000008 	.word	0x20000008
 80018ec:	49742400 	.word	0x49742400

080018f0 <update_speeds>:


void update_speeds(int t_speed, int r_speed){
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	t_wait_between_steps_us = TRANSLATION_MAX_WAITING_TIME + (float)(t_speed)/(float)(100)*(TRANSLATION_MIN_WAITING_TIME-TRANSLATION_MAX_WAITING_TIME);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001904:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001964 <update_speeds+0x74>
 8001908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001968 <update_speeds+0x78>
 8001910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001914:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800196c <update_speeds+0x7c>
 8001918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800191c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001920:	ee17 2a90 	vmov	r2, s15
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <update_speeds+0x80>)
 8001926:	601a      	str	r2, [r3, #0]
	r_wait_between_steps_us = ROTATION_MAX_WAITING_TIME + (float)(r_speed)/(float)(100)*(ROTATION_MIN_WAITING_TIME-ROTATION_MAX_WAITING_TIME);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001932:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001964 <update_speeds+0x74>
 8001936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001968 <update_speeds+0x78>
 800193e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001942:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800196c <update_speeds+0x7c>
 8001946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194e:	ee17 2a90 	vmov	r2, s15
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <update_speeds+0x84>)
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	42c80000 	.word	0x42c80000
 8001968:	c7c15c00 	.word	0xc7c15c00
 800196c:	47c35000 	.word	0x47c35000
 8001970:	20000004 	.word	0x20000004
 8001974:	20000008 	.word	0x20000008

08001978 <find_value>:
        {"saving_time",0, "s"},
        {"margin_time",0,"s"},
        {"mode", 0, ""}
    };

int find_value(char* name){
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < NB_VAR; i++){
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e01a      	b.n	80019bc <find_value+0x44>
        if (strcmp(name, variables[i].name) == 0){
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <find_value+0x54>)
 8001992:	4413      	add	r3, r2
 8001994:	4619      	mov	r1, r3
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe fc1a 	bl	80001d0 <strcmp>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <find_value+0x3e>
            return variables[i].value;
 80019a2:	490a      	ldr	r1, [pc, #40]	@ (80019cc <find_value+0x54>)
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	440b      	add	r3, r1
 80019b0:	3340      	adds	r3, #64	@ 0x40
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	e005      	b.n	80019c2 <find_value+0x4a>
    for (int i = 0; i < NB_VAR; i++){
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b13      	cmp	r3, #19
 80019c0:	dde1      	ble.n	8001986 <find_value+0xe>
        }
    }
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000014 	.word	0x20000014

080019d0 <init>:


void init(){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    // Initializing the time reference counter
    __HAL_TIM_SET_COUNTER(&htim5, 0);  // Reset the counter to 0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <init+0x34>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim5);
 80019dc:	4809      	ldr	r0, [pc, #36]	@ (8001a04 <init+0x34>)
 80019de:	f003 fb29 	bl	8005034 <HAL_TIM_Base_Start>
   
    // Initializing the IR emmition timer
    HAL_TIM_Base_Start(&htim16);
 80019e2:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <init+0x38>)
 80019e4:	f003 fb26 	bl	8005034 <HAL_TIM_Base_Start>
    TIM16->CCR1 = 1000; // setting the compare register to half the period (to generate a square signal)
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <init+0x3c>)
 80019ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019ee:	635a      	str	r2, [r3, #52]	@ 0x34
    //HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
   
   
    // Initializing the command buffer and receiving command over UART
    HAL_UART_Receive_IT(&huart2, command, BUFF_SIZE);
 80019f0:	2280      	movs	r2, #128	@ 0x80
 80019f2:	4907      	ldr	r1, [pc, #28]	@ (8001a10 <init+0x40>)
 80019f4:	4807      	ldr	r0, [pc, #28]	@ (8001a14 <init+0x44>)
 80019f6:	f004 fd7b 	bl	80064f0 <HAL_UART_Receive_IT>
   
    initializeDrivers();
 80019fa:	f7ff fe97 	bl	800172c <initializeDrivers>


}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200008f4 	.word	0x200008f4
 8001a08:	20000940 	.word	0x20000940
 8001a0c:	40014400 	.word	0x40014400
 8001a10:	20000a14 	.word	0x20000a14
 8001a14:	2000098c 	.word	0x2000098c

08001a18 <sendBit1>:
#include "communication.h"

extern TIM_HandleTypeDef htim16;

// IR CODE //
void sendBit1() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
    // Start PWM for 1200 µs for logic "1" pulse
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <sendBit1+0x28>)
 8001a20:	f003 fbd2 	bl	80051c8 <HAL_TIM_PWM_Start>
    delayMicroseconds(1200);
 8001a24:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001a28:	f001 fb46 	bl	80030b8 <delayMicroseconds>

    // Stop PWM to represent "off" period of 600 µs
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <sendBit1+0x28>)
 8001a30:	f003 fcd0 	bl	80053d4 <HAL_TIM_PWM_Stop>
    delayMicroseconds(600);
 8001a34:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a38:	f001 fb3e 	bl	80030b8 <delayMicroseconds>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000940 	.word	0x20000940

08001a44 <sendBit0>:

void sendBit0() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    // Start PWM for 600 µs for logic "0" pulse
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4808      	ldr	r0, [pc, #32]	@ (8001a6c <sendBit0+0x28>)
 8001a4c:	f003 fbbc 	bl	80051c8 <HAL_TIM_PWM_Start>
    delayMicroseconds(600);  // Custom microsecond delay function
 8001a50:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a54:	f001 fb30 	bl	80030b8 <delayMicroseconds>

    // Stop PWM to represent "off" period of 600 µs
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4804      	ldr	r0, [pc, #16]	@ (8001a6c <sendBit0+0x28>)
 8001a5c:	f003 fcba 	bl	80053d4 <HAL_TIM_PWM_Stop>
    delayMicroseconds(600);  // Same low duration as the pulse for "0"
 8001a60:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a64:	f001 fb28 	bl	80030b8 <delayMicroseconds>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000940 	.word	0x20000940

08001a70 <sendSIRCSData>:

void sendSIRCSData(int data) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

	// Start pulse
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4816      	ldr	r0, [pc, #88]	@ (8001ad4 <sendSIRCSData+0x64>)
 8001a7c:	f003 fba4 	bl	80051c8 <HAL_TIM_PWM_Start>
    delayMicroseconds(2400);  // 2.4 ms "on" for start pulse
 8001a80:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001a84:	f001 fb18 	bl	80030b8 <delayMicroseconds>
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4812      	ldr	r0, [pc, #72]	@ (8001ad4 <sendSIRCSData+0x64>)
 8001a8c:	f003 fca2 	bl	80053d4 <HAL_TIM_PWM_Stop>
    delayMicroseconds(600);  // 0.6 ms "off" period
 8001a90:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a94:	f001 fb10 	bl	80030b8 <delayMicroseconds>

    // Transmit 32 bits of data
    for (int i = 0; i < 20; i++) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e011      	b.n	8001ac2 <sendSIRCSData+0x52>

        if (data & (1UL << (19 - i))) {
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f1c3 0313 	rsb	r3, r3, #19
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <sendSIRCSData+0x48>

            sendBit1();
 8001ab2:	f7ff ffb1 	bl	8001a18 <sendBit1>
 8001ab6:	e001      	b.n	8001abc <sendSIRCSData+0x4c>

        } else {

            sendBit0();
 8001ab8:	f7ff ffc4 	bl	8001a44 <sendBit0>
    for (int i = 0; i < 20; i++) {
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b13      	cmp	r3, #19
 8001ac6:	ddea      	ble.n	8001a9e <sendSIRCSData+0x2e>

        }
    }

}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000940 	.word	0x20000940

08001ad8 <takePicture>:

void takePicture(int capture){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0a4      	sub	sp, #144	@ 0x90
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	int data = 0b10110100101110001111;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <takePicture+0x94>)
 8001ae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	for (int i = 0; i<3; i++){
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001aec:	e008      	b.n	8001b00 <takePicture+0x28>
	  sendSIRCSData(data);
 8001aee:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001af2:	f7ff ffbd 	bl	8001a70 <sendSIRCSData>
	for (int i = 0; i<3; i++){
 8001af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001afa:	3301      	adds	r3, #1
 8001afc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	ddf2      	ble.n	8001aee <takePicture+0x16>
	}

    if (capture == 1){
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d115      	bne.n	8001b3a <takePicture+0x62>
        char message[BUFF_SIZE] = {" "};
 8001b0e:	2320      	movs	r3, #32
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	227c      	movs	r2, #124	@ 0x7c
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f006 fe13 	bl	8008746 <memset>
        snprintf(message, sizeof(message), "logCapture Picture taken");
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <takePicture+0x98>)
 8001b26:	2180      	movs	r1, #128	@ 0x80
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f006 fd95 	bl	8008658 <sniprintf>
        transmit_to_pc(&message);
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fb58 	bl	80011e8 <transmit_to_pc>
        snprintf(message, sizeof(message), "logTest Picture taken");
        transmit_to_pc(&message);
    }


}
 8001b38:	e014      	b.n	8001b64 <takePicture+0x8c>
        char message[BUFF_SIZE] = {" "};
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	227c      	movs	r2, #124	@ 0x7c
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f006 fdfd 	bl	8008746 <memset>
        snprintf(message, sizeof(message), "logTest Picture taken");
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	4a08      	ldr	r2, [pc, #32]	@ (8001b74 <takePicture+0x9c>)
 8001b52:	2180      	movs	r1, #128	@ 0x80
 8001b54:	4618      	mov	r0, r3
 8001b56:	f006 fd7f 	bl	8008658 <sniprintf>
        transmit_to_pc(&message);
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb42 	bl	80011e8 <transmit_to_pc>
}
 8001b64:	bf00      	nop
 8001b66:	3790      	adds	r7, #144	@ 0x90
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	000b4b8f 	.word	0x000b4b8f
 8001b70:	0800ab44 	.word	0x0800ab44
 8001b74:	0800ab60 	.word	0x0800ab60

08001b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b7c:	f001 fafc 	bl	8003178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b80:	f000 f812 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b84:	f000 f9f4 	bl	8001f70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b88:	f000 f9c2 	bl	8001f10 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001b8c:	f000 f948 	bl	8001e20 <MX_TIM16_Init>
  MX_TIM5_Init();
 8001b90:	f000 f8f8 	bl	8001d84 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001b94:	f000 f85a 	bl	8001c4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b98:	f000 f8a6 	bl	8001ce8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  init();
 8001b9c:	f7ff ff18 	bl	80019d0 <init>
  run();
 8001ba0:	f000 fa8c 	bl	80020bc <run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <main+0x2c>

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b096      	sub	sp, #88	@ 0x58
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2244      	movs	r2, #68	@ 0x44
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f006 fdc5 	bl	8008746 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bce:	f001 fec7 	bl	8003960 <HAL_PWREx_ControlVoltageScaling>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bd8:	f000 fa6a 	bl	80020b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be6:	2310      	movs	r3, #16
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fefe 	bl	8003a0c <HAL_RCC_OscConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c16:	f000 fa4b 	bl	80020b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2104      	movs	r1, #4
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fac6 	bl	80041c4 <HAL_RCC_ClockConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c3e:	f000 fa37 	bl	80020b0 <Error_Handler>
  }
}
 8001c42:	bf00      	nop
 8001c44:	3758      	adds	r7, #88	@ 0x58
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <MX_TIM2_Init+0x98>)
 8001c6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <MX_TIM2_Init+0x98>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <MX_TIM2_Init+0x98>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <MX_TIM2_Init+0x98>)
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <MX_TIM2_Init+0x98>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <MX_TIM2_Init+0x98>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c92:	4814      	ldr	r0, [pc, #80]	@ (8001ce4 <MX_TIM2_Init+0x98>)
 8001c94:	f003 f976 	bl	8004f84 <HAL_TIM_Base_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c9e:	f000 fa07 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <MX_TIM2_Init+0x98>)
 8001cb0:	f003 fd3a 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001cba:	f000 f9f9 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <MX_TIM2_Init+0x98>)
 8001ccc:	f004 fa32 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cd6:	f000 f9eb 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000085c 	.word	0x2000085c

08001ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d06:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <MX_TIM3_Init+0x94>)
 8001d08:	4a1d      	ldr	r2, [pc, #116]	@ (8001d80 <MX_TIM3_Init+0x98>)
 8001d0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <MX_TIM3_Init+0x94>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <MX_TIM3_Init+0x94>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d18:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <MX_TIM3_Init+0x94>)
 8001d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <MX_TIM3_Init+0x94>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <MX_TIM3_Init+0x94>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d2c:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <MX_TIM3_Init+0x94>)
 8001d2e:	f003 f929 	bl	8004f84 <HAL_TIM_Base_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d38:	f000 f9ba 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <MX_TIM3_Init+0x94>)
 8001d4a:	f003 fced 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001d54:	f000 f9ac 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <MX_TIM3_Init+0x94>)
 8001d66:	f004 f9e5 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d70:	f000 f99e 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200008a8 	.word	0x200008a8
 8001d80:	40000400 	.word	0x40000400

08001d84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <MX_TIM5_Init+0x94>)
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <MX_TIM5_Init+0x98>)
 8001da6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <MX_TIM5_Init+0x94>)
 8001daa:	224f      	movs	r2, #79	@ 0x4f
 8001dac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <MX_TIM5_Init+0x94>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001db4:	4b18      	ldr	r3, [pc, #96]	@ (8001e18 <MX_TIM5_Init+0x94>)
 8001db6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <MX_TIM5_Init+0x94>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <MX_TIM5_Init+0x94>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dc8:	4813      	ldr	r0, [pc, #76]	@ (8001e18 <MX_TIM5_Init+0x94>)
 8001dca:	f003 f8db 	bl	8004f84 <HAL_TIM_Base_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001dd4:	f000 f96c 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <MX_TIM5_Init+0x94>)
 8001de6:	f003 fc9f 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001df0:	f000 f95e 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <MX_TIM5_Init+0x94>)
 8001e02:	f004 f997 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001e0c:	f000 f950 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200008f4 	.word	0x200008f4
 8001e1c:	40000c00 	.word	0x40000c00

08001e20 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b092      	sub	sp, #72	@ 0x48
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]
 8001e36:	615a      	str	r2, [r3, #20]
 8001e38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	222c      	movs	r2, #44	@ 0x2c
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f006 fc80 	bl	8008746 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e46:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001e48:	4a30      	ldr	r2, [pc, #192]	@ (8001f0c <MX_TIM16_Init+0xec>)
 8001e4a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000-1;
 8001e58:	4b2b      	ldr	r3, [pc, #172]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001e5a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001e5e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e60:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e66:	4b28      	ldr	r3, [pc, #160]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6c:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e72:	4825      	ldr	r0, [pc, #148]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001e74:	f003 f886 	bl	8004f84 <HAL_TIM_Base_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001e7e:	f000 f917 	bl	80020b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001e82:	4821      	ldr	r0, [pc, #132]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001e84:	f003 f93e 	bl	8005104 <HAL_TIM_PWM_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001e8e:	f000 f90f 	bl	80020b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e92:	2360      	movs	r3, #96	@ 0x60
 8001e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4814      	ldr	r0, [pc, #80]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001eb8:	f003 fb22 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001ec2:	f000 f8f5 	bl	80020b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ede:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4807      	ldr	r0, [pc, #28]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001eea:	f004 f9ab 	bl	8006244 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001ef4:	f000 f8dc 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001ef8:	4803      	ldr	r0, [pc, #12]	@ (8001f08 <MX_TIM16_Init+0xe8>)
 8001efa:	f000 ff31 	bl	8002d60 <HAL_TIM_MspPostInit>

}
 8001efe:	bf00      	nop
 8001f00:	3748      	adds	r7, #72	@ 0x48
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000940 	.word	0x20000940
 8001f0c:	40014400 	.word	0x40014400

08001f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f16:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <MX_USART2_UART_Init+0x5c>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f54:	f004 f9f4 	bl	8006340 <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f5e:	f000 f8a7 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000098c 	.word	0x2000098c
 8001f6c:	40004400 	.word	0x40004400

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	@ 0x28
 8001f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8a:	4a46      	ldr	r2, [pc, #280]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f92:	4b44      	ldr	r3, [pc, #272]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9e:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	4a40      	ldr	r2, [pc, #256]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001faa:	4b3e      	ldr	r3, [pc, #248]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	4a3a      	ldr	r2, [pc, #232]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc2:	4b38      	ldr	r3, [pc, #224]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	4b35      	ldr	r3, [pc, #212]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	4a34      	ldr	r2, [pc, #208]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fda:	4b32      	ldr	r3, [pc, #200]	@ (80020a4 <MX_GPIO_Init+0x134>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f240 71a3 	movw	r1, #1955	@ 0x7a3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff0:	f001 fc90 	bl	8003914 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8001ffa:	482b      	ldr	r0, [pc, #172]	@ (80020a8 <MX_GPIO_Init+0x138>)
 8001ffc:	f001 fc8a 	bl	8003914 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	2180      	movs	r1, #128	@ 0x80
 8002004:	4829      	ldr	r0, [pc, #164]	@ (80020ac <MX_GPIO_Init+0x13c>)
 8002006:	f001 fc85 	bl	8003914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800200a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800200e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002010:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	4822      	ldr	r0, [pc, #136]	@ (80020ac <MX_GPIO_Init+0x13c>)
 8002022:	f001 fab5 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA7
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7
 8002026:	f240 73a3 	movw	r3, #1955	@ 0x7a3
 800202a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002042:	f001 faa5 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002046:	2310      	movs	r3, #16
 8002048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205c:	f001 fa98 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002060:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 8002064:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	480b      	ldr	r0, [pc, #44]	@ (80020a8 <MX_GPIO_Init+0x138>)
 800207a:	f001 fa89 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002082:	2301      	movs	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	@ (80020ac <MX_GPIO_Init+0x13c>)
 8002096:	f001 fa7b 	bl	8003590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800209a:	bf00      	nop
 800209c:	3728      	adds	r7, #40	@ 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	48000400 	.word	0x48000400
 80020ac:	48000800 	.word	0x48000800

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <Error_Handler+0x8>

080020bc <run>:

int translation_index = 0;
int rotation_index = 0;


void run(){
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	ed2d 8b02 	vpush	{d8}
 80020c2:	b0bf      	sub	sp, #252	@ 0xfc
 80020c4:	af04      	add	r7, sp, #16
    while (1){
        if (state == MOVING_STATE){
 80020c6:	4b85      	ldr	r3, [pc, #532]	@ (80022dc <run+0x220>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d110      	bne.n	80020f0 <run+0x34>
            int distance = atoi(argv[1]);
 80020ce:	4b84      	ldr	r3, [pc, #528]	@ (80022e0 <run+0x224>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f005 fd1e 	bl	8007b14 <atoi>
 80020d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
            move(distance, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80020e4:	f7ff f934 	bl	8001350 <move>

            state = LISTENING_STATE;
 80020e8:	4b7c      	ldr	r3, [pc, #496]	@ (80022dc <run+0x220>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e7ea      	b.n	80020c6 <run+0xa>
            
        }
      
        else if (state == TURNING_STATE){
 80020f0:	4b7a      	ldr	r3, [pc, #488]	@ (80022dc <run+0x220>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d110      	bne.n	800211a <run+0x5e>
            int angle = atoi(argv[1]);
 80020f8:	4b79      	ldr	r3, [pc, #484]	@ (80022e0 <run+0x224>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f005 fd09 	bl	8007b14 <atoi>
 8002102:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
            move(0, angle, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff f91f 	bl	8001350 <move>

            state = LISTENING_STATE;
 8002112:	4b72      	ldr	r3, [pc, #456]	@ (80022dc <run+0x220>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e7d5      	b.n	80020c6 <run+0xa>
        }

        else if (state == VARIABLE_CHANGE_STATE){
 800211a:	4b70      	ldr	r3, [pc, #448]	@ (80022dc <run+0x220>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d160      	bne.n	80021e4 <run+0x128>
            char unit[64];
            for (int i = 0; i < NB_VAR; i++){
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002128:	e034      	b.n	8002194 <run+0xd8>
                if (strcmp(argv[1], variables[i].name) == 0){
 800212a:	4b6d      	ldr	r3, [pc, #436]	@ (80022e0 <run+0x224>)
 800212c:	6858      	ldr	r0, [r3, #4]
 800212e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4a6a      	ldr	r2, [pc, #424]	@ (80022e4 <run+0x228>)
 800213c:	4413      	add	r3, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f7fe f846 	bl	80001d0 <strcmp>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11f      	bne.n	800218a <run+0xce>
                    variables[i].value = atoi(argv[2]);
 800214a:	4b65      	ldr	r3, [pc, #404]	@ (80022e0 <run+0x224>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4618      	mov	r0, r3
 8002150:	f005 fce0 	bl	8007b14 <atoi>
 8002154:	4601      	mov	r1, r0
 8002156:	4863      	ldr	r0, [pc, #396]	@ (80022e4 <run+0x228>)
 8002158:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4403      	add	r3, r0
 8002166:	3340      	adds	r3, #64	@ 0x40
 8002168:	6019      	str	r1, [r3, #0]
                    strncpy(unit, variables[i].unit, sizeof(unit));
 800216a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	3340      	adds	r3, #64	@ 0x40
 8002178:	4a5a      	ldr	r2, [pc, #360]	@ (80022e4 <run+0x228>)
 800217a:	4413      	add	r3, r2
 800217c:	1d19      	adds	r1, r3, #4
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2240      	movs	r2, #64	@ 0x40
 8002182:	4618      	mov	r0, r3
 8002184:	f006 fae7 	bl	8008756 <strncpy>
                    break;
 8002188:	e008      	b.n	800219c <run+0xe0>
            for (int i = 0; i < NB_VAR; i++){
 800218a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800218e:	3301      	adds	r3, #1
 8002190:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002198:	2b13      	cmp	r3, #19
 800219a:	ddc6      	ble.n	800212a <run+0x6e>
                }
            }

            // Notifying pc of the successful variable change
            char message[BUFF_SIZE] = {" "};
 800219c:	2320      	movs	r3, #32
 800219e:	647b      	str	r3, [r7, #68]	@ 0x44
 80021a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021a4:	227c      	movs	r2, #124	@ 0x7c
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f006 facc 	bl	8008746 <memset>
            snprintf(message, sizeof(message), "logSettings Variable : %s set to : %d %s", argv[1], atoi(argv[2]), unit);
 80021ae:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <run+0x224>)
 80021b0:	685c      	ldr	r4, [r3, #4]
 80021b2:	4b4b      	ldr	r3, [pc, #300]	@ (80022e0 <run+0x224>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f005 fcac 	bl	8007b14 <atoi>
 80021bc:	4602      	mov	r2, r0
 80021be:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	9200      	str	r2, [sp, #0]
 80021c8:	4623      	mov	r3, r4
 80021ca:	4a47      	ldr	r2, [pc, #284]	@ (80022e8 <run+0x22c>)
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	f006 fa43 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 80021d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f806 	bl	80011e8 <transmit_to_pc>

            state = LISTENING_STATE;
 80021dc:	4b3f      	ldr	r3, [pc, #252]	@ (80022dc <run+0x220>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e770      	b.n	80020c6 <run+0xa>
        }

        else if (state == CAPTURING_STATE){
 80021e4:	4b3d      	ldr	r3, [pc, #244]	@ (80022dc <run+0x220>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b0c      	cmp	r3, #12
 80021ea:	f040 8195 	bne.w	8002518 <run+0x45c>

            char message[BUFF_SIZE] = {" "};
 80021ee:	2320      	movs	r3, #32
 80021f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021f6:	227c      	movs	r2, #124	@ 0x7c
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f006 faa3 	bl	8008746 <memset>
            snprintf(message, sizeof(message), "progress %d %d %d", pictures_taken, pictures_taken_for_this_packet, packets_completed);
 8002200:	4b3a      	ldr	r3, [pc, #232]	@ (80022ec <run+0x230>)
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	4b3a      	ldr	r3, [pc, #232]	@ (80022f0 <run+0x234>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a3a      	ldr	r2, [pc, #232]	@ (80022f4 <run+0x238>)
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002210:	9201      	str	r2, [sp, #4]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	460b      	mov	r3, r1
 8002216:	4a38      	ldr	r2, [pc, #224]	@ (80022f8 <run+0x23c>)
 8002218:	2180      	movs	r1, #128	@ 0x80
 800221a:	f006 fa1d 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 800221e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe ffe0 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 8002228:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800222c:	2280      	movs	r2, #128	@ 0x80
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f006 fa88 	bl	8008746 <memset>

            int x = find_value("translation_starting_point") + (int)(translation_index*t_step);
 8002236:	4831      	ldr	r0, [pc, #196]	@ (80022fc <run+0x240>)
 8002238:	f7ff fb9e 	bl	8001978 <find_value>
 800223c:	4603      	mov	r3, r0
 800223e:	4a30      	ldr	r2, [pc, #192]	@ (8002300 <run+0x244>)
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	ee07 2a90 	vmov	s15, r2
 8002246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224a:	4a2e      	ldr	r2, [pc, #184]	@ (8002304 <run+0x248>)
 800224c:	edd2 7a00 	vldr	s15, [r2]
 8002250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002258:	ee17 2a90 	vmov	r2, s15
 800225c:	4413      	add	r3, r2
 800225e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            int theta = find_value("rotation_starting_point")+ (int)(rotation_index*t_step);
 8002262:	4829      	ldr	r0, [pc, #164]	@ (8002308 <run+0x24c>)
 8002264:	f7ff fb88 	bl	8001978 <find_value>
 8002268:	4603      	mov	r3, r0
 800226a:	4a28      	ldr	r2, [pc, #160]	@ (800230c <run+0x250>)
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	ee07 2a90 	vmov	s15, r2
 8002272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002276:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <run+0x248>)
 8002278:	edd2 7a00 	vldr	s15, [r2]
 800227c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002284:	ee17 2a90 	vmov	r2, s15
 8002288:	4413      	add	r3, r2
 800228a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            move_to(x, theta,1);
 800228e:	2201      	movs	r2, #1
 8002290:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002294:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8002298:	f7ff f8e0 	bl	800145c <move_to>

            if (find_value("mode")==TRANSLATION_FIRST){
 800229c:	481c      	ldr	r0, [pc, #112]	@ (8002310 <run+0x254>)
 800229e:	f7ff fb6b 	bl	8001978 <find_value>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d145      	bne.n	8002334 <run+0x278>
                translation_index ++;
 80022a8:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <run+0x244>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <run+0x244>)
 80022b0:	6013      	str	r3, [r2, #0]
                var1 = current_x;
 80022b2:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <run+0x258>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a18      	ldr	r2, [pc, #96]	@ (8002318 <run+0x25c>)
 80022b8:	6013      	str	r3, [r2, #0]
                verif1 = find_value("translation_ending_point");
 80022ba:	4818      	ldr	r0, [pc, #96]	@ (800231c <run+0x260>)
 80022bc:	f7ff fb5c 	bl	8001978 <find_value>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <run+0x264>)
 80022c4:	6013      	str	r3, [r2, #0]
                var2 = current_theta;
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <run+0x268>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <run+0x26c>)
 80022cc:	6013      	str	r3, [r2, #0]
                verif2 = find_value("rotation_ending_point");
 80022ce:	4817      	ldr	r0, [pc, #92]	@ (800232c <run+0x270>)
 80022d0:	f7ff fb52 	bl	8001978 <find_value>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4a16      	ldr	r2, [pc, #88]	@ (8002330 <run+0x274>)
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e044      	b.n	8002366 <run+0x2aa>
 80022dc:	20000ac0 	.word	0x20000ac0
 80022e0:	20000a98 	.word	0x20000a98
 80022e4:	20000014 	.word	0x20000014
 80022e8:	0800ab78 	.word	0x0800ab78
 80022ec:	20000adc 	.word	0x20000adc
 80022f0:	20000ae0 	.word	0x20000ae0
 80022f4:	20000ae4 	.word	0x20000ae4
 80022f8:	0800aba4 	.word	0x0800aba4
 80022fc:	0800abb8 	.word	0x0800abb8
 8002300:	20000ae8 	.word	0x20000ae8
 8002304:	2000065c 	.word	0x2000065c
 8002308:	0800abd4 	.word	0x0800abd4
 800230c:	20000aec 	.word	0x20000aec
 8002310:	0800abec 	.word	0x0800abec
 8002314:	20000854 	.word	0x20000854
 8002318:	20000ac4 	.word	0x20000ac4
 800231c:	0800abf4 	.word	0x0800abf4
 8002320:	20000acc 	.word	0x20000acc
 8002324:	20000858 	.word	0x20000858
 8002328:	20000ac8 	.word	0x20000ac8
 800232c:	0800ac10 	.word	0x0800ac10
 8002330:	20000ad0 	.word	0x20000ad0

            }
            else {
                rotation_index ++;
 8002334:	4ba9      	ldr	r3, [pc, #676]	@ (80025dc <run+0x520>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4aa8      	ldr	r2, [pc, #672]	@ (80025dc <run+0x520>)
 800233c:	6013      	str	r3, [r2, #0]
                var1 = current_theta;
 800233e:	4ba8      	ldr	r3, [pc, #672]	@ (80025e0 <run+0x524>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4aa8      	ldr	r2, [pc, #672]	@ (80025e4 <run+0x528>)
 8002344:	6013      	str	r3, [r2, #0]
                verif1 = find_value("rotation_ending_point");
 8002346:	48a8      	ldr	r0, [pc, #672]	@ (80025e8 <run+0x52c>)
 8002348:	f7ff fb16 	bl	8001978 <find_value>
 800234c:	4603      	mov	r3, r0
 800234e:	4aa7      	ldr	r2, [pc, #668]	@ (80025ec <run+0x530>)
 8002350:	6013      	str	r3, [r2, #0]
                var2 = current_x;
 8002352:	4ba7      	ldr	r3, [pc, #668]	@ (80025f0 <run+0x534>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4aa7      	ldr	r2, [pc, #668]	@ (80025f4 <run+0x538>)
 8002358:	6013      	str	r3, [r2, #0]
                verif2 = find_value("translation_ending_point");
 800235a:	48a7      	ldr	r0, [pc, #668]	@ (80025f8 <run+0x53c>)
 800235c:	f7ff fb0c 	bl	8001978 <find_value>
 8002360:	4603      	mov	r3, r0
 8002362:	4aa6      	ldr	r2, [pc, #664]	@ (80025fc <run+0x540>)
 8002364:	6013      	str	r3, [r2, #0]
            }
            

            delayMicroseconds(500000); // waiting 0.5s after the movement to take the picture
 8002366:	48a6      	ldr	r0, [pc, #664]	@ (8002600 <run+0x544>)
 8002368:	f000 fea6 	bl	80030b8 <delayMicroseconds>
            takePicture(1);
 800236c:	2001      	movs	r0, #1
 800236e:	f7ff fbb3 	bl	8001ad8 <takePicture>
            pictures_taken++;
 8002372:	4ba4      	ldr	r3, [pc, #656]	@ (8002604 <run+0x548>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	4aa2      	ldr	r2, [pc, #648]	@ (8002604 <run+0x548>)
 800237a:	6013      	str	r3, [r2, #0]
            pictures_taken_for_this_packet++;
 800237c:	4ba2      	ldr	r3, [pc, #648]	@ (8002608 <run+0x54c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	4aa1      	ldr	r2, [pc, #644]	@ (8002608 <run+0x54c>)
 8002384:	6013      	str	r3, [r2, #0]

            // Notifying pc of the progress of the capture
           
            snprintf(message, sizeof(message), "progress %d %d %d", pictures_taken, pictures_taken_for_this_packet, packets_completed);
 8002386:	4b9f      	ldr	r3, [pc, #636]	@ (8002604 <run+0x548>)
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	4b9f      	ldr	r3, [pc, #636]	@ (8002608 <run+0x54c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a9f      	ldr	r2, [pc, #636]	@ (800260c <run+0x550>)
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002396:	9201      	str	r2, [sp, #4]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	460b      	mov	r3, r1
 800239c:	4a9c      	ldr	r2, [pc, #624]	@ (8002610 <run+0x554>)
 800239e:	2180      	movs	r1, #128	@ 0x80
 80023a0:	f006 f95a 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 80023a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe ff1d 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 80023ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023b2:	2280      	movs	r2, #128	@ 0x80
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f006 f9c5 	bl	8008746 <memset>

            int total_time = find_value("exposure_time")+find_value("saving_time")+find_value("margin_time");
 80023bc:	4895      	ldr	r0, [pc, #596]	@ (8002614 <run+0x558>)
 80023be:	f7ff fadb 	bl	8001978 <find_value>
 80023c2:	4604      	mov	r4, r0
 80023c4:	4894      	ldr	r0, [pc, #592]	@ (8002618 <run+0x55c>)
 80023c6:	f7ff fad7 	bl	8001978 <find_value>
 80023ca:	4603      	mov	r3, r0
 80023cc:	441c      	add	r4, r3
 80023ce:	4893      	ldr	r0, [pc, #588]	@ (800261c <run+0x560>)
 80023d0:	f7ff fad2 	bl	8001978 <find_value>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4423      	add	r3, r4
 80023d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            delayMicroseconds(total_time*1000000);
 80023dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023e0:	4a8f      	ldr	r2, [pc, #572]	@ (8002620 <run+0x564>)
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fe66 	bl	80030b8 <delayMicroseconds>

            if (var1 >= verif1){
 80023ec:	4b7d      	ldr	r3, [pc, #500]	@ (80025e4 <run+0x528>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b7e      	ldr	r3, [pc, #504]	@ (80025ec <run+0x530>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f6ff ae66 	blt.w	80020c6 <run+0xa>
                if (var2 >= verif2){
 80023fa:	4b7e      	ldr	r3, [pc, #504]	@ (80025f4 <run+0x538>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b7f      	ldr	r3, [pc, #508]	@ (80025fc <run+0x540>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	db70      	blt.n	80024e8 <run+0x42c>
                    snprintf(message, sizeof(message), "logCapture End of the Capture");
 8002406:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800240a:	4a86      	ldr	r2, [pc, #536]	@ (8002624 <run+0x568>)
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	4618      	mov	r0, r3
 8002410:	f006 f922 	bl	8008658 <sniprintf>
                    transmit_to_pc(&message);
 8002414:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fee5 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 800241e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f006 f98d 	bl	8008746 <memset>
                    
                    snprintf(message, sizeof(message), "logCapture Return to the home position");
 800242c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002430:	4a7d      	ldr	r2, [pc, #500]	@ (8002628 <run+0x56c>)
 8002432:	2180      	movs	r1, #128	@ 0x80
 8002434:	4618      	mov	r0, r3
 8002436:	f006 f90f 	bl	8008658 <sniprintf>
                    transmit_to_pc(&message);
 800243a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fed2 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 8002444:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002448:	2280      	movs	r2, #128	@ 0x80
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f006 f97a 	bl	8008746 <memset>
                    
                    packets_completed ++;
 8002452:	4b6e      	ldr	r3, [pc, #440]	@ (800260c <run+0x550>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	4a6c      	ldr	r2, [pc, #432]	@ (800260c <run+0x550>)
 800245a:	6013      	str	r3, [r2, #0]
                    snprintf(message, sizeof(message), "progress %d %d %d", pictures_taken, pictures_taken_for_this_packet, packets_completed);
 800245c:	4b69      	ldr	r3, [pc, #420]	@ (8002604 <run+0x548>)
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	4b69      	ldr	r3, [pc, #420]	@ (8002608 <run+0x54c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a69      	ldr	r2, [pc, #420]	@ (800260c <run+0x550>)
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800246c:	9201      	str	r2, [sp, #4]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	460b      	mov	r3, r1
 8002472:	4a67      	ldr	r2, [pc, #412]	@ (8002610 <run+0x554>)
 8002474:	2180      	movs	r1, #128	@ 0x80
 8002476:	f006 f8ef 	bl	8008658 <sniprintf>
                    transmit_to_pc(&message);
 800247a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe feb2 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 8002484:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002488:	2280      	movs	r2, #128	@ 0x80
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f006 f95a 	bl	8008746 <memset>

                    move_to(0,0,1);
 8002492:	2201      	movs	r2, #1
 8002494:	2100      	movs	r1, #0
 8002496:	2000      	movs	r0, #0
 8002498:	f7fe ffe0 	bl	800145c <move_to>
                    packets_completed = 0;
 800249c:	4b5b      	ldr	r3, [pc, #364]	@ (800260c <run+0x550>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
                    pictures_taken = 0;
 80024a2:	4b58      	ldr	r3, [pc, #352]	@ (8002604 <run+0x548>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
                    pictures_taken_for_this_packet = 0;
 80024a8:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <run+0x54c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

                    translation_index = 0;
 80024ae:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <run+0x570>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
                    rotation_index = 0;
 80024b4:	4b49      	ldr	r3, [pc, #292]	@ (80025dc <run+0x520>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]

                    snprintf(message, sizeof(message), "end capture");
 80024ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024be:	4a5c      	ldr	r2, [pc, #368]	@ (8002630 <run+0x574>)
 80024c0:	2180      	movs	r1, #128	@ 0x80
 80024c2:	4618      	mov	r0, r3
 80024c4:	f006 f8c8 	bl	8008658 <sniprintf>
                    transmit_to_pc(&message);
 80024c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fe8b 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 80024d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024d6:	2280      	movs	r2, #128	@ 0x80
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f006 f933 	bl	8008746 <memset>
                    
                    
                    state = LISTENING_STATE;
 80024e0:	4b54      	ldr	r3, [pc, #336]	@ (8002634 <run+0x578>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e5ee      	b.n	80020c6 <run+0xa>
                }
                else {

                    if (find_value("mode")==TRANSLATION_FIRST){
 80024e8:	4853      	ldr	r0, [pc, #332]	@ (8002638 <run+0x57c>)
 80024ea:	f7ff fa45 	bl	8001978 <find_value>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d108      	bne.n	8002506 <run+0x44a>
                        translation_index = 0;
 80024f4:	4b4d      	ldr	r3, [pc, #308]	@ (800262c <run+0x570>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
                        rotation_index++;
 80024fa:	4b38      	ldr	r3, [pc, #224]	@ (80025dc <run+0x520>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a36      	ldr	r2, [pc, #216]	@ (80025dc <run+0x520>)
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e5df      	b.n	80020c6 <run+0xa>

                    }
                    else {
                        rotation_index = 0;
 8002506:	4b35      	ldr	r3, [pc, #212]	@ (80025dc <run+0x520>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
                        translation_index++;
 800250c:	4b47      	ldr	r3, [pc, #284]	@ (800262c <run+0x570>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4a46      	ldr	r2, [pc, #280]	@ (800262c <run+0x570>)
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e5d6      	b.n	80020c6 <run+0xa>
                }
            }  

        }

        else if (state == TESTING_SEQUENCE_STATE){
 8002518:	4b46      	ldr	r3, [pc, #280]	@ (8002634 <run+0x578>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b0d      	cmp	r3, #13
 800251e:	f040 8124 	bne.w	800276a <run+0x6ae>

            int x = find_value("translation_starting_point") + (int)(translation_index*t_step);
 8002522:	4846      	ldr	r0, [pc, #280]	@ (800263c <run+0x580>)
 8002524:	f7ff fa28 	bl	8001978 <find_value>
 8002528:	4603      	mov	r3, r0
 800252a:	4a40      	ldr	r2, [pc, #256]	@ (800262c <run+0x570>)
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	ee07 2a90 	vmov	s15, r2
 8002532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002536:	4a42      	ldr	r2, [pc, #264]	@ (8002640 <run+0x584>)
 8002538:	edd2 7a00 	vldr	s15, [r2]
 800253c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002544:	ee17 2a90 	vmov	r2, s15
 8002548:	4413      	add	r3, r2
 800254a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            int theta = find_value("rotation_starting_point")+ (int)(rotation_index*t_step);
 800254e:	483d      	ldr	r0, [pc, #244]	@ (8002644 <run+0x588>)
 8002550:	f7ff fa12 	bl	8001978 <find_value>
 8002554:	4603      	mov	r3, r0
 8002556:	4a21      	ldr	r2, [pc, #132]	@ (80025dc <run+0x520>)
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	ee07 2a90 	vmov	s15, r2
 800255e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002562:	4a37      	ldr	r2, [pc, #220]	@ (8002640 <run+0x584>)
 8002564:	edd2 7a00 	vldr	s15, [r2]
 8002568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002570:	ee17 2a90 	vmov	r2, s15
 8002574:	4413      	add	r3, r2
 8002576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            move_to(x, theta,0);
 800257a:	2200      	movs	r2, #0
 800257c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8002580:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8002584:	f7fe ff6a 	bl	800145c <move_to>

            char message[BUFF_SIZE] = {0};
 8002588:	2300      	movs	r3, #0
 800258a:	647b      	str	r3, [r7, #68]	@ 0x44
 800258c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002590:	227c      	movs	r2, #124	@ 0x7c
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f006 f8d6 	bl	8008746 <memset>

            if (find_value("mode")==TRANSLATION_FIRST){
 800259a:	4827      	ldr	r0, [pc, #156]	@ (8002638 <run+0x57c>)
 800259c:	f7ff f9ec 	bl	8001978 <find_value>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d150      	bne.n	8002648 <run+0x58c>
                translation_index ++;
 80025a6:	4b21      	ldr	r3, [pc, #132]	@ (800262c <run+0x570>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4a1f      	ldr	r2, [pc, #124]	@ (800262c <run+0x570>)
 80025ae:	6013      	str	r3, [r2, #0]
                var1 = current_x;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <run+0x534>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0b      	ldr	r2, [pc, #44]	@ (80025e4 <run+0x528>)
 80025b6:	6013      	str	r3, [r2, #0]
                verif1 = find_value("translation_ending_point");
 80025b8:	480f      	ldr	r0, [pc, #60]	@ (80025f8 <run+0x53c>)
 80025ba:	f7ff f9dd 	bl	8001978 <find_value>
 80025be:	4603      	mov	r3, r0
 80025c0:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <run+0x530>)
 80025c2:	6013      	str	r3, [r2, #0]
                var2 = current_theta;
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <run+0x524>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <run+0x538>)
 80025ca:	6013      	str	r3, [r2, #0]
                verif2 = find_value("rotation_ending_point");
 80025cc:	4806      	ldr	r0, [pc, #24]	@ (80025e8 <run+0x52c>)
 80025ce:	f7ff f9d3 	bl	8001978 <find_value>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a09      	ldr	r2, [pc, #36]	@ (80025fc <run+0x540>)
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e04f      	b.n	800267a <run+0x5be>
 80025da:	bf00      	nop
 80025dc:	20000aec 	.word	0x20000aec
 80025e0:	20000858 	.word	0x20000858
 80025e4:	20000ac4 	.word	0x20000ac4
 80025e8:	0800ac10 	.word	0x0800ac10
 80025ec:	20000acc 	.word	0x20000acc
 80025f0:	20000854 	.word	0x20000854
 80025f4:	20000ac8 	.word	0x20000ac8
 80025f8:	0800abf4 	.word	0x0800abf4
 80025fc:	20000ad0 	.word	0x20000ad0
 8002600:	0007a120 	.word	0x0007a120
 8002604:	20000adc 	.word	0x20000adc
 8002608:	20000ae0 	.word	0x20000ae0
 800260c:	20000ae4 	.word	0x20000ae4
 8002610:	0800aba4 	.word	0x0800aba4
 8002614:	0800ac28 	.word	0x0800ac28
 8002618:	0800ac38 	.word	0x0800ac38
 800261c:	0800ac44 	.word	0x0800ac44
 8002620:	000f4240 	.word	0x000f4240
 8002624:	0800ac50 	.word	0x0800ac50
 8002628:	0800ac70 	.word	0x0800ac70
 800262c:	20000ae8 	.word	0x20000ae8
 8002630:	0800ac98 	.word	0x0800ac98
 8002634:	20000ac0 	.word	0x20000ac0
 8002638:	0800abec 	.word	0x0800abec
 800263c:	0800abb8 	.word	0x0800abb8
 8002640:	2000065c 	.word	0x2000065c
 8002644:	0800abd4 	.word	0x0800abd4

            }
            else {
                rotation_index ++;
 8002648:	4bb3      	ldr	r3, [pc, #716]	@ (8002918 <run+0x85c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4ab2      	ldr	r2, [pc, #712]	@ (8002918 <run+0x85c>)
 8002650:	6013      	str	r3, [r2, #0]
                var1 = current_theta;
 8002652:	4bb2      	ldr	r3, [pc, #712]	@ (800291c <run+0x860>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4ab2      	ldr	r2, [pc, #712]	@ (8002920 <run+0x864>)
 8002658:	6013      	str	r3, [r2, #0]
                verif1 = find_value("rotation_ending_point");
 800265a:	48b2      	ldr	r0, [pc, #712]	@ (8002924 <run+0x868>)
 800265c:	f7ff f98c 	bl	8001978 <find_value>
 8002660:	4603      	mov	r3, r0
 8002662:	4ab1      	ldr	r2, [pc, #708]	@ (8002928 <run+0x86c>)
 8002664:	6013      	str	r3, [r2, #0]
                var2 = current_x;
 8002666:	4bb1      	ldr	r3, [pc, #708]	@ (800292c <run+0x870>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4ab1      	ldr	r2, [pc, #708]	@ (8002930 <run+0x874>)
 800266c:	6013      	str	r3, [r2, #0]
                verif2 = find_value("translation_ending_point");
 800266e:	48b1      	ldr	r0, [pc, #708]	@ (8002934 <run+0x878>)
 8002670:	f7ff f982 	bl	8001978 <find_value>
 8002674:	4603      	mov	r3, r0
 8002676:	4ab0      	ldr	r2, [pc, #704]	@ (8002938 <run+0x87c>)
 8002678:	6013      	str	r3, [r2, #0]
            }
            
            int total_time = 1;
 800267a:	2301      	movs	r3, #1
 800267c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            delayMicroseconds(total_time*1000000);
 8002680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002684:	4aad      	ldr	r2, [pc, #692]	@ (800293c <run+0x880>)
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fd14 	bl	80030b8 <delayMicroseconds>

            if (var1 >= verif1){
 8002690:	4ba3      	ldr	r3, [pc, #652]	@ (8002920 <run+0x864>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4ba4      	ldr	r3, [pc, #656]	@ (8002928 <run+0x86c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	f6ff ad14 	blt.w	80020c6 <run+0xa>
                if (var2 >= verif2){
 800269e:	4ba4      	ldr	r3, [pc, #656]	@ (8002930 <run+0x874>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4ba5      	ldr	r3, [pc, #660]	@ (8002938 <run+0x87c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	db47      	blt.n	800273a <run+0x67e>
                    
                    snprintf(message, sizeof(message), "logTest End of the Sequence Test");
 80026aa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026ae:	4aa4      	ldr	r2, [pc, #656]	@ (8002940 <run+0x884>)
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	4618      	mov	r0, r3
 80026b4:	f005 ffd0 	bl	8008658 <sniprintf>
                    transmit_to_pc(&message);
 80026b8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fd93 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 80026c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f006 f83b 	bl	8008746 <memset>
                    
                    snprintf(message, sizeof(message), "logTest Return to the home position");
 80026d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026d4:	4a9b      	ldr	r2, [pc, #620]	@ (8002944 <run+0x888>)
 80026d6:	2180      	movs	r1, #128	@ 0x80
 80026d8:	4618      	mov	r0, r3
 80026da:	f005 ffbd 	bl	8008658 <sniprintf>
                    transmit_to_pc(&message);
 80026de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fd80 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 80026e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026ec:	2280      	movs	r2, #128	@ 0x80
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f006 f828 	bl	8008746 <memset>
                    
                    move_to(0,0,0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fe feae 	bl	800145c <move_to>

                    

                    translation_index = 0;
 8002700:	4b91      	ldr	r3, [pc, #580]	@ (8002948 <run+0x88c>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
                    rotation_index = 0;
 8002706:	4b84      	ldr	r3, [pc, #528]	@ (8002918 <run+0x85c>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

                    snprintf(message, sizeof(message), "end testSequence");
 800270c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002710:	4a8e      	ldr	r2, [pc, #568]	@ (800294c <run+0x890>)
 8002712:	2180      	movs	r1, #128	@ 0x80
 8002714:	4618      	mov	r0, r3
 8002716:	f005 ff9f 	bl	8008658 <sniprintf>
                    transmit_to_pc(&message);
 800271a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fd62 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 8002724:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002728:	2280      	movs	r2, #128	@ 0x80
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f006 f80a 	bl	8008746 <memset>
                    
                    state = LISTENING_STATE;
 8002732:	4b87      	ldr	r3, [pc, #540]	@ (8002950 <run+0x894>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e4c5      	b.n	80020c6 <run+0xa>
                }
                else {

                    if (find_value("mode")==TRANSLATION_FIRST){
 800273a:	4886      	ldr	r0, [pc, #536]	@ (8002954 <run+0x898>)
 800273c:	f7ff f91c 	bl	8001978 <find_value>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <run+0x69c>
                        translation_index = 0;
 8002746:	4b80      	ldr	r3, [pc, #512]	@ (8002948 <run+0x88c>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
                        rotation_index++;
 800274c:	4b72      	ldr	r3, [pc, #456]	@ (8002918 <run+0x85c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	4a71      	ldr	r2, [pc, #452]	@ (8002918 <run+0x85c>)
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e4b6      	b.n	80020c6 <run+0xa>

                    }
                    else {
                        rotation_index = 0;
 8002758:	4b6f      	ldr	r3, [pc, #444]	@ (8002918 <run+0x85c>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
                        translation_index++;
 800275e:	4b7a      	ldr	r3, [pc, #488]	@ (8002948 <run+0x88c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	4a78      	ldr	r2, [pc, #480]	@ (8002948 <run+0x88c>)
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e4ad      	b.n	80020c6 <run+0xa>
                }
            }

        }

        else if (state == HOMING_STATE){
 800276a:	4b79      	ldr	r3, [pc, #484]	@ (8002950 <run+0x894>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d11a      	bne.n	80027a8 <run+0x6ec>
            home_motors();
 8002772:	f7ff f803 	bl	800177c <home_motors>

            // Notifying pc of the successful homing
            char message[BUFF_SIZE] = {" "};
 8002776:	2320      	movs	r3, #32
 8002778:	647b      	str	r3, [r7, #68]	@ 0x44
 800277a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800277e:	227c      	movs	r2, #124	@ 0x7c
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f005 ffdf 	bl	8008746 <memset>
            snprintf(message, sizeof(message), "logTest Homed motors | Position (0 mm, 0°)");
 8002788:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800278c:	4a72      	ldr	r2, [pc, #456]	@ (8002958 <run+0x89c>)
 800278e:	2180      	movs	r1, #128	@ 0x80
 8002790:	4618      	mov	r0, r3
 8002792:	f005 ff61 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 8002796:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fd24 	bl	80011e8 <transmit_to_pc>

            state = LISTENING_STATE;
 80027a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002950 <run+0x894>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e48e      	b.n	80020c6 <run+0xa>
        }

        else if (state == STOPPING_STATE){
 80027a8:	4b69      	ldr	r3, [pc, #420]	@ (8002950 <run+0x894>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b0a      	cmp	r3, #10
 80027ae:	d146      	bne.n	800283e <run+0x782>
            // Notifying pc of the successful homing
            char message[BUFF_SIZE] = {" "};
 80027b0:	2320      	movs	r3, #32
 80027b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027b8:	227c      	movs	r2, #124	@ 0x7c
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 ffc2 	bl	8008746 <memset>
            snprintf(message, sizeof(message), "logCapture Stopped capture | return to home position");
 80027c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027c6:	4a65      	ldr	r2, [pc, #404]	@ (800295c <run+0x8a0>)
 80027c8:	2180      	movs	r1, #128	@ 0x80
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 ff44 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 80027d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fd07 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 80027da:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027de:	2280      	movs	r2, #128	@ 0x80
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 ffaf 	bl	8008746 <memset>

            

            move_to(0,0,1);
 80027e8:	2201      	movs	r2, #1
 80027ea:	2100      	movs	r1, #0
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fe35 	bl	800145c <move_to>

            snprintf(message, sizeof(message), "end capture");
 80027f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002960 <run+0x8a4>)
 80027f8:	2180      	movs	r1, #128	@ 0x80
 80027fa:	4618      	mov	r0, r3
 80027fc:	f005 ff2c 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 8002800:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fcef 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 800280a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f005 ff97 	bl	8008746 <memset>

            packets_completed = 0;
 8002818:	4b52      	ldr	r3, [pc, #328]	@ (8002964 <run+0x8a8>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
            pictures_taken = 0;
 800281e:	4b52      	ldr	r3, [pc, #328]	@ (8002968 <run+0x8ac>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
            pictures_taken_for_this_packet = 0;
 8002824:	4b51      	ldr	r3, [pc, #324]	@ (800296c <run+0x8b0>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

            translation_index = 0;
 800282a:	4b47      	ldr	r3, [pc, #284]	@ (8002948 <run+0x88c>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
            rotation_index = 0;
 8002830:	4b39      	ldr	r3, [pc, #228]	@ (8002918 <run+0x85c>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

            state = LISTENING_STATE;
 8002836:	4b46      	ldr	r3, [pc, #280]	@ (8002950 <run+0x894>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e443      	b.n	80020c6 <run+0xa>
        }

        else if (state == STOPPING_SEQUENCE_STATE){
 800283e:	4b44      	ldr	r3, [pc, #272]	@ (8002950 <run+0x894>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b0b      	cmp	r3, #11
 8002844:	d13d      	bne.n	80028c2 <run+0x806>
            // Notifying pc of the successful homing
            char message[BUFF_SIZE] = {" "};
 8002846:	2320      	movs	r3, #32
 8002848:	647b      	str	r3, [r7, #68]	@ 0x44
 800284a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800284e:	227c      	movs	r2, #124	@ 0x7c
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f005 ff77 	bl	8008746 <memset>
            snprintf(message, sizeof(message), "logTest Stopped the test of the capture sequence | return to home position");
 8002858:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800285c:	4a44      	ldr	r2, [pc, #272]	@ (8002970 <run+0x8b4>)
 800285e:	2180      	movs	r1, #128	@ 0x80
 8002860:	4618      	mov	r0, r3
 8002862:	f005 fef9 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 8002866:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fcbc 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 8002870:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002874:	2280      	movs	r2, #128	@ 0x80
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f005 ff64 	bl	8008746 <memset>

            


            move_to(0,0,0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe fdea 	bl	800145c <move_to>

            snprintf(message, sizeof(message), "end testSequence");
 8002888:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800288c:	4a2f      	ldr	r2, [pc, #188]	@ (800294c <run+0x890>)
 800288e:	2180      	movs	r1, #128	@ 0x80
 8002890:	4618      	mov	r0, r3
 8002892:	f005 fee1 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 8002896:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fca4 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 80028a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f005 ff4c 	bl	8008746 <memset>

            translation_index = 0;
 80028ae:	4b26      	ldr	r3, [pc, #152]	@ (8002948 <run+0x88c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
            rotation_index = 0;
 80028b4:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <run+0x85c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]

            state = LISTENING_STATE;
 80028ba:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <run+0x894>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e401      	b.n	80020c6 <run+0xa>
        }

        else if (state == PICTURING_STATE) {
 80028c2:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <run+0x894>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d107      	bne.n	80028da <run+0x81e>
            takePicture(0);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7ff f904 	bl	8001ad8 <takePicture>
            state = LISTENING_STATE;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <run+0x894>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f7ff bbf6 	b.w	80020c6 <run+0xa>
        }

        else if (state == FIRMWARE_SENDING_STATE) {
 80028da:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <run+0x894>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b09      	cmp	r3, #9
 80028e0:	d14c      	bne.n	800297c <run+0x8c0>

            // Notifying pc of the firmware version
            char message[BUFF_SIZE] = {" "};
 80028e2:	2320      	movs	r3, #32
 80028e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028ea:	227c      	movs	r2, #124	@ 0x7c
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f005 ff29 	bl	8008746 <memset>
            snprintf(message, sizeof(message), "firmware %s", firmware);
 80028f4:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80028f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002974 <run+0x8b8>)
 80028fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002978 <run+0x8bc>)
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	f005 feab 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 8002902:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fc6e 	bl	80011e8 <transmit_to_pc>
            state = LISTENING_STATE;
 800290c:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <run+0x894>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f7ff bbd8 	b.w	80020c6 <run+0xa>
 8002916:	bf00      	nop
 8002918:	20000aec 	.word	0x20000aec
 800291c:	20000858 	.word	0x20000858
 8002920:	20000ac4 	.word	0x20000ac4
 8002924:	0800ac10 	.word	0x0800ac10
 8002928:	20000acc 	.word	0x20000acc
 800292c:	20000854 	.word	0x20000854
 8002930:	20000ac8 	.word	0x20000ac8
 8002934:	0800abf4 	.word	0x0800abf4
 8002938:	20000ad0 	.word	0x20000ad0
 800293c:	000f4240 	.word	0x000f4240
 8002940:	0800aca4 	.word	0x0800aca4
 8002944:	0800acc8 	.word	0x0800acc8
 8002948:	20000ae8 	.word	0x20000ae8
 800294c:	0800acec 	.word	0x0800acec
 8002950:	20000ac0 	.word	0x20000ac0
 8002954:	0800abec 	.word	0x0800abec
 8002958:	0800ad00 	.word	0x0800ad00
 800295c:	0800ad2c 	.word	0x0800ad2c
 8002960:	0800ac98 	.word	0x0800ac98
 8002964:	20000ae4 	.word	0x20000ae4
 8002968:	20000adc 	.word	0x20000adc
 800296c:	20000ae0 	.word	0x20000ae0
 8002970:	0800ad64 	.word	0x0800ad64
 8002974:	20000654 	.word	0x20000654
 8002978:	0800adb0 	.word	0x0800adb0
        }

        else if (state == MOVING_TO_STATE) {
 800297c:	4ba4      	ldr	r3, [pc, #656]	@ (8002c10 <run+0xb54>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d115      	bne.n	80029b0 <run+0x8f4>

            move_to(atoi(argv[1]), atoi(argv[2]), 0);
 8002984:	4ba3      	ldr	r3, [pc, #652]	@ (8002c14 <run+0xb58>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	f005 f8c3 	bl	8007b14 <atoi>
 800298e:	4604      	mov	r4, r0
 8002990:	4ba0      	ldr	r3, [pc, #640]	@ (8002c14 <run+0xb58>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4618      	mov	r0, r3
 8002996:	f005 f8bd 	bl	8007b14 <atoi>
 800299a:	4603      	mov	r3, r0
 800299c:	2200      	movs	r2, #0
 800299e:	4619      	mov	r1, r3
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7fe fd5b 	bl	800145c <move_to>

            state = LISTENING_STATE;
 80029a6:	4b9a      	ldr	r3, [pc, #616]	@ (8002c10 <run+0xb54>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f7ff bb8b 	b.w	80020c6 <run+0xa>
        }

        else if (state == STEP_COMPUTING_STATE){
 80029b0:	4b97      	ldr	r3, [pc, #604]	@ (8002c10 <run+0xb54>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b07      	cmp	r3, #7
 80029b6:	f47f ab86 	bne.w	80020c6 <run+0xa>

            t_step = (float)(find_value("translation_ending_point")-find_value("translation_starting_point"))/(float)(find_value("translation_number_of_points")-1);
 80029ba:	4897      	ldr	r0, [pc, #604]	@ (8002c18 <run+0xb5c>)
 80029bc:	f7fe ffdc 	bl	8001978 <find_value>
 80029c0:	4604      	mov	r4, r0
 80029c2:	4896      	ldr	r0, [pc, #600]	@ (8002c1c <run+0xb60>)
 80029c4:	f7fe ffd8 	bl	8001978 <find_value>
 80029c8:	4603      	mov	r3, r0
 80029ca:	1ae3      	subs	r3, r4, r3
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80029d4:	4892      	ldr	r0, [pc, #584]	@ (8002c20 <run+0xb64>)
 80029d6:	f7fe ffcf 	bl	8001978 <find_value>
 80029da:	4603      	mov	r3, r0
 80029dc:	3b01      	subs	r3, #1
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80029ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002c24 <run+0xb68>)
 80029ec:	edc3 7a00 	vstr	s15, [r3]
            r_step = (float)(find_value("rotation_ending_point")-find_value("rotation_starting_point"))/(float)(find_value("rotation_number_of_points")-1);
 80029f0:	488d      	ldr	r0, [pc, #564]	@ (8002c28 <run+0xb6c>)
 80029f2:	f7fe ffc1 	bl	8001978 <find_value>
 80029f6:	4604      	mov	r4, r0
 80029f8:	488c      	ldr	r0, [pc, #560]	@ (8002c2c <run+0xb70>)
 80029fa:	f7fe ffbd 	bl	8001978 <find_value>
 80029fe:	4603      	mov	r3, r0
 8002a00:	1ae3      	subs	r3, r4, r3
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002a0a:	4889      	ldr	r0, [pc, #548]	@ (8002c30 <run+0xb74>)
 8002a0c:	f7fe ffb4 	bl	8001978 <find_value>
 8002a10:	4603      	mov	r3, r0
 8002a12:	3b01      	subs	r3, #1
 8002a14:	ee07 3a90 	vmov	s15, r3
 8002a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a1c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002a20:	4b84      	ldr	r3, [pc, #528]	@ (8002c34 <run+0xb78>)
 8002a22:	edc3 7a00 	vstr	s15, [r3]

            total_picture_number = find_value("translation_number_of_points")*find_value("rotation_number_of_points");
 8002a26:	487e      	ldr	r0, [pc, #504]	@ (8002c20 <run+0xb64>)
 8002a28:	f7fe ffa6 	bl	8001978 <find_value>
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	4880      	ldr	r0, [pc, #512]	@ (8002c30 <run+0xb74>)
 8002a30:	f7fe ffa2 	bl	8001978 <find_value>
 8002a34:	4603      	mov	r3, r0
 8002a36:	fb04 f303 	mul.w	r3, r4, r3
 8002a3a:	4a7f      	ldr	r2, [pc, #508]	@ (8002c38 <run+0xb7c>)
 8002a3c:	6013      	str	r3, [r2, #0]
            update_speeds(find_value("translation_speed"), find_value("rotation_speed"));
 8002a3e:	487f      	ldr	r0, [pc, #508]	@ (8002c3c <run+0xb80>)
 8002a40:	f7fe ff9a 	bl	8001978 <find_value>
 8002a44:	4604      	mov	r4, r0
 8002a46:	487e      	ldr	r0, [pc, #504]	@ (8002c40 <run+0xb84>)
 8002a48:	f7fe ff96 	bl	8001978 <find_value>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4620      	mov	r0, r4
 8002a52:	f7fe ff4d 	bl	80018f0 <update_speeds>

            /////////////////// Evaluating the capture time //////////////////////////////////
            total_time_seconds = 0;
 8002a56:	4b7b      	ldr	r3, [pc, #492]	@ (8002c44 <run+0xb88>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
            // time of translations
            total_time_seconds += 2*get_translation_time((int)t_step)*(find_value("translation_number_of_points")-1)*find_value("rotation_number_of_points");
 8002a5c:	4b71      	ldr	r3, [pc, #452]	@ (8002c24 <run+0xb68>)
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a66:	ee17 0a90 	vmov	r0, s15
 8002a6a:	f7fe fedd 	bl	8001828 <get_translation_time>
 8002a6e:	4604      	mov	r4, r0
 8002a70:	486b      	ldr	r0, [pc, #428]	@ (8002c20 <run+0xb64>)
 8002a72:	f7fe ff81 	bl	8001978 <find_value>
 8002a76:	4603      	mov	r3, r0
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	fb03 f404 	mul.w	r4, r3, r4
 8002a7e:	486c      	ldr	r0, [pc, #432]	@ (8002c30 <run+0xb74>)
 8002a80:	f7fe ff7a 	bl	8001978 <find_value>
 8002a84:	4603      	mov	r3, r0
 8002a86:	fb04 f303 	mul.w	r3, r4, r3
 8002a8a:	005a      	lsls	r2, r3, #1
 8002a8c:	4b6d      	ldr	r3, [pc, #436]	@ (8002c44 <run+0xb88>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	4a6c      	ldr	r2, [pc, #432]	@ (8002c44 <run+0xb88>)
 8002a94:	6013      	str	r3, [r2, #0]
            
            // time of rotations
            total_time_seconds += 2*get_rotation_time((int)r_step)*(find_value("rotation_number_of_points")-1);
 8002a96:	4b67      	ldr	r3, [pc, #412]	@ (8002c34 <run+0xb78>)
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa0:	ee17 0a90 	vmov	r0, s15
 8002aa4:	f7fe fef2 	bl	800188c <get_rotation_time>
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	4861      	ldr	r0, [pc, #388]	@ (8002c30 <run+0xb74>)
 8002aac:	f7fe ff64 	bl	8001978 <find_value>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	fb04 f303 	mul.w	r3, r4, r3
 8002ab8:	005a      	lsls	r2, r3, #1
 8002aba:	4b62      	ldr	r3, [pc, #392]	@ (8002c44 <run+0xb88>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a60      	ldr	r2, [pc, #384]	@ (8002c44 <run+0xb88>)
 8002ac2:	6013      	str	r3, [r2, #0]
            
            // time of waiting
            total_time_seconds += (find_value("exposure_time")+find_value("saving_time")+find_value("margin_time")+0.5)*total_picture_number;
 8002ac4:	4860      	ldr	r0, [pc, #384]	@ (8002c48 <run+0xb8c>)
 8002ac6:	f7fe ff57 	bl	8001978 <find_value>
 8002aca:	4604      	mov	r4, r0
 8002acc:	485f      	ldr	r0, [pc, #380]	@ (8002c4c <run+0xb90>)
 8002ace:	f7fe ff53 	bl	8001978 <find_value>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	441c      	add	r4, r3
 8002ad6:	485e      	ldr	r0, [pc, #376]	@ (8002c50 <run+0xb94>)
 8002ad8:	f7fe ff4e 	bl	8001978 <find_value>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4423      	add	r3, r4
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd2f 	bl	8000544 <__aeabi_i2d>
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	4b5a      	ldr	r3, [pc, #360]	@ (8002c54 <run+0xb98>)
 8002aec:	f7fd fbde 	bl	80002ac <__adddf3>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	4b4f      	ldr	r3, [pc, #316]	@ (8002c38 <run+0xb7c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd21 	bl	8000544 <__aeabi_i2d>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4620      	mov	r0, r4
 8002b08:	4629      	mov	r1, r5
 8002b0a:	f7fd fd85 	bl	8000618 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4614      	mov	r4, r2
 8002b14:	461d      	mov	r5, r3
 8002b16:	4b4b      	ldr	r3, [pc, #300]	@ (8002c44 <run+0xb88>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fd12 	bl	8000544 <__aeabi_i2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4620      	mov	r0, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	f7fd fbc0 	bl	80002ac <__adddf3>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fe f820 	bl	8000b78 <__aeabi_d2iz>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a42      	ldr	r2, [pc, #264]	@ (8002c44 <run+0xb88>)
 8002b3c:	6013      	str	r3, [r2, #0]

            // Notifying pc of the change of steps

            char message[BUFF_SIZE] = {" "};
 8002b3e:	2320      	movs	r3, #32
 8002b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b46:	227c      	movs	r2, #124	@ 0x7c
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f005 fdfb 	bl	8008746 <memset>
            snprintf(message, sizeof(message), "estimatedTime %d",total_time_seconds);
 8002b50:	4b3c      	ldr	r3, [pc, #240]	@ (8002c44 <run+0xb88>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002b58:	4a3f      	ldr	r2, [pc, #252]	@ (8002c58 <run+0xb9c>)
 8002b5a:	2180      	movs	r1, #128	@ 0x80
 8002b5c:	f005 fd7c 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 8002b60:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fb3f 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, sizeof(message));
 8002b6a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b6e:	2280      	movs	r2, #128	@ 0x80
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 fde7 	bl	8008746 <memset>

            
            snprintf(message, sizeof(message), "logSettings Changed steps | Translation step : %f mm, Rotation step : %f°", t_step, r_step);
 8002b78:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <run+0xb68>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fcf3 	bl	8000568 <__aeabi_f2d>
 8002b82:	4604      	mov	r4, r0
 8002b84:	460d      	mov	r5, r1
 8002b86:	4b2b      	ldr	r3, [pc, #172]	@ (8002c34 <run+0xb78>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fcec 	bl	8000568 <__aeabi_f2d>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002b98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b9c:	e9cd 4500 	strd	r4, r5, [sp]
 8002ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c5c <run+0xba0>)
 8002ba2:	2180      	movs	r1, #128	@ 0x80
 8002ba4:	f005 fd58 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 8002ba8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe fb1b 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, sizeof(message));
 8002bb2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bb6:	2280      	movs	r2, #128	@ 0x80
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f005 fdc3 	bl	8008746 <memset>

            snprintf(message, sizeof(message), "total %d %d %d %d %d",find_value("translation_ending_point"),find_value("rotation_ending_point"), find_value("translation_number_of_points"), find_value("rotation_number_of_points"), total_picture_number);
 8002bc0:	4815      	ldr	r0, [pc, #84]	@ (8002c18 <run+0xb5c>)
 8002bc2:	f7fe fed9 	bl	8001978 <find_value>
 8002bc6:	4606      	mov	r6, r0
 8002bc8:	4817      	ldr	r0, [pc, #92]	@ (8002c28 <run+0xb6c>)
 8002bca:	f7fe fed5 	bl	8001978 <find_value>
 8002bce:	4604      	mov	r4, r0
 8002bd0:	4813      	ldr	r0, [pc, #76]	@ (8002c20 <run+0xb64>)
 8002bd2:	f7fe fed1 	bl	8001978 <find_value>
 8002bd6:	4605      	mov	r5, r0
 8002bd8:	4815      	ldr	r0, [pc, #84]	@ (8002c30 <run+0xb74>)
 8002bda:	f7fe fecd 	bl	8001978 <find_value>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <run+0xb7c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002be8:	9303      	str	r3, [sp, #12]
 8002bea:	9202      	str	r2, [sp, #8]
 8002bec:	9501      	str	r5, [sp, #4]
 8002bee:	9400      	str	r4, [sp, #0]
 8002bf0:	4633      	mov	r3, r6
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <run+0xba4>)
 8002bf4:	2180      	movs	r1, #128	@ 0x80
 8002bf6:	f005 fd2f 	bl	8008658 <sniprintf>
            transmit_to_pc(&message);
 8002bfa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe faf2 	bl	80011e8 <transmit_to_pc>

            state = LISTENING_STATE;
 8002c04:	4b02      	ldr	r3, [pc, #8]	@ (8002c10 <run+0xb54>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
        if (state == MOVING_STATE){
 8002c0a:	f7ff ba5c 	b.w	80020c6 <run+0xa>
 8002c0e:	bf00      	nop
 8002c10:	20000ac0 	.word	0x20000ac0
 8002c14:	20000a98 	.word	0x20000a98
 8002c18:	0800abf4 	.word	0x0800abf4
 8002c1c:	0800abb8 	.word	0x0800abb8
 8002c20:	0800adbc 	.word	0x0800adbc
 8002c24:	2000065c 	.word	0x2000065c
 8002c28:	0800ac10 	.word	0x0800ac10
 8002c2c:	0800abd4 	.word	0x0800abd4
 8002c30:	0800addc 	.word	0x0800addc
 8002c34:	20000660 	.word	0x20000660
 8002c38:	20000ad4 	.word	0x20000ad4
 8002c3c:	0800adf8 	.word	0x0800adf8
 8002c40:	0800ae0c 	.word	0x0800ae0c
 8002c44:	20000ad8 	.word	0x20000ad8
 8002c48:	0800ac28 	.word	0x0800ac28
 8002c4c:	0800ac38 	.word	0x0800ac38
 8002c50:	0800ac44 	.word	0x0800ac44
 8002c54:	3fe00000 	.word	0x3fe00000
 8002c58:	0800ae1c 	.word	0x0800ae1c
 8002c5c:	0800ae30 	.word	0x0800ae30
 8002c60:	0800ae7c 	.word	0x0800ae7c

08002c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <HAL_MspInit+0x44>)
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca8 <HAL_MspInit+0x44>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <HAL_MspInit+0x44>)
 8002c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <HAL_MspInit+0x44>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	4a08      	ldr	r2, [pc, #32]	@ (8002ca8 <HAL_MspInit+0x44>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_MspInit+0x44>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cbe:	4b24      	ldr	r3, [pc, #144]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	4a23      	ldr	r2, [pc, #140]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cca:	4b21      	ldr	r3, [pc, #132]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002cd6:	e034      	b.n	8002d42 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10c      	bne.n	8002cfc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cee:	4b18      	ldr	r3, [pc, #96]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
}
 8002cfa:	e022      	b.n	8002d42 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a15      	ldr	r2, [pc, #84]	@ (8002d58 <HAL_TIM_Base_MspInit+0xac>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10c      	bne.n	8002d20 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d06:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002d0c:	f043 0308 	orr.w	r3, r3, #8
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d12:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	e010      	b.n	8002d42 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0d      	ldr	r2, [pc, #52]	@ (8002d5c <HAL_TIM_Base_MspInit+0xb0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10b      	bne.n	8002d42 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d2a:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	4a08      	ldr	r2, [pc, #32]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_TIM_Base_MspInit+0xa4>)
 8002d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	40014400 	.word	0x40014400

08002d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <HAL_TIM_MspPostInit+0x64>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d11c      	bne.n	8002dbc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <HAL_TIM_MspPostInit+0x68>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d86:	4a10      	ldr	r2, [pc, #64]	@ (8002dc8 <HAL_TIM_MspPostInit+0x68>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_TIM_MspPostInit+0x68>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d9a:	2340      	movs	r3, #64	@ 0x40
 8002d9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002daa:	230e      	movs	r3, #14
 8002dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	4619      	mov	r1, r3
 8002db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002db8:	f000 fbea 	bl	8003590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002dbc:	bf00      	nop
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40014400 	.word	0x40014400
 8002dc8:	40021000 	.word	0x40021000

08002dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b0ac      	sub	sp, #176	@ 0xb0
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	2288      	movs	r2, #136	@ 0x88
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f005 fcaa 	bl	8008746 <memset>
  if(huart->Instance==USART2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a25      	ldr	r2, [pc, #148]	@ (8002e8c <HAL_UART_MspInit+0xc0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d143      	bne.n	8002e84 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fbff 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e14:	f7ff f94c 	bl	80020b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <HAL_UART_MspInit+0xc4>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002e90 <HAL_UART_MspInit+0xc4>)
 8002e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e24:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <HAL_UART_MspInit+0xc4>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e30:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <HAL_UART_MspInit+0xc4>)
 8002e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e34:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <HAL_UART_MspInit+0xc4>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e3c:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <HAL_UART_MspInit+0xc4>)
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e48:	230c      	movs	r3, #12
 8002e4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e60:	2307      	movs	r3, #7
 8002e62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e70:	f000 fb8e 	bl	8003590 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	2026      	movs	r0, #38	@ 0x26
 8002e7a:	f000 fad4 	bl	8003426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e7e:	2026      	movs	r0, #38	@ 0x26
 8002e80:	f000 faed 	bl	800345e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e84:	bf00      	nop
 8002e86:	37b0      	adds	r7, #176	@ 0xb0
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40004400 	.word	0x40004400
 8002e90:	40021000 	.word	0x40021000

08002e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <NMI_Handler+0x4>

08002e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <HardFault_Handler+0x4>

08002ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <MemManage_Handler+0x4>

08002eac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <BusFault_Handler+0x4>

08002eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <UsageFault_Handler+0x4>

08002ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eea:	f000 f9a1 	bl	8003230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <USART2_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ef8:	4802      	ldr	r0, [pc, #8]	@ (8002f04 <USART2_IRQHandler+0x10>)
 8002efa:	f003 fb45 	bl	8006588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	2000098c 	.word	0x2000098c

08002f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return 1;
 8002f0c:	2301      	movs	r3, #1
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_kill>:

int _kill(int pid, int sig)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f22:	f005 fcd1 	bl	80088c8 <__errno>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2216      	movs	r2, #22
 8002f2a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_exit>:

void _exit (int status)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ffe7 	bl	8002f18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f4a:	bf00      	nop
 8002f4c:	e7fd      	b.n	8002f4a <_exit+0x12>

08002f4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e00a      	b.n	8002f76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f60:	f3af 8000 	nop.w
 8002f64:	4601      	mov	r1, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	60ba      	str	r2, [r7, #8]
 8002f6c:	b2ca      	uxtb	r2, r1
 8002f6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3301      	adds	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	dbf0      	blt.n	8002f60 <_read+0x12>
  }

  return len;
 8002f7e:	687b      	ldr	r3, [r7, #4]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	e009      	b.n	8002fae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	60ba      	str	r2, [r7, #8]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3301      	adds	r3, #1
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	dbf1      	blt.n	8002f9a <_write+0x12>
  }
  return len;
 8002fb6:	687b      	ldr	r3, [r7, #4]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_close>:

int _close(int file)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fe8:	605a      	str	r2, [r3, #4]
  return 0;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_isatty>:

int _isatty(int file)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003000:	2301      	movs	r3, #1
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003030:	4a14      	ldr	r2, [pc, #80]	@ (8003084 <_sbrk+0x5c>)
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <_sbrk+0x60>)
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800303c:	4b13      	ldr	r3, [pc, #76]	@ (800308c <_sbrk+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <_sbrk+0x64>)
 8003046:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <_sbrk+0x68>)
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <_sbrk+0x64>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	429a      	cmp	r2, r3
 8003056:	d207      	bcs.n	8003068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003058:	f005 fc36 	bl	80088c8 <__errno>
 800305c:	4603      	mov	r3, r0
 800305e:	220c      	movs	r2, #12
 8003060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
 8003066:	e009      	b.n	800307c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003068:	4b08      	ldr	r3, [pc, #32]	@ (800308c <_sbrk+0x64>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800306e:	4b07      	ldr	r3, [pc, #28]	@ (800308c <_sbrk+0x64>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	4a05      	ldr	r2, [pc, #20]	@ (800308c <_sbrk+0x64>)
 8003078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20018000 	.word	0x20018000
 8003088:	00000400 	.word	0x00000400
 800308c:	20000af0 	.word	0x20000af0
 8003090:	20000c48 	.word	0x20000c48

08003094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <SystemInit+0x20>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	4a05      	ldr	r2, [pc, #20]	@ (80030b4 <SystemInit+0x20>)
 80030a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <delayMicroseconds>:
#include "stm32l4xx.h"

void delayMicroseconds(int delay){
 80030b8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
	int startingValue = TIM5->CNT;
 80030c2:	4917      	ldr	r1, [pc, #92]	@ (8003120 <delayMicroseconds+0x68>)
 80030c4:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80030c6:	60f9      	str	r1, [r7, #12]

	// Handling the timer overflow
	if (startingValue >= 4294967295-delay-1){
 80030c8:	68f9      	ldr	r1, [r7, #12]
 80030ca:	17c8      	asrs	r0, r1, #31
 80030cc:	460c      	mov	r4, r1
 80030ce:	4605      	mov	r5, r0
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	17c8      	asrs	r0, r1, #31
 80030d4:	4688      	mov	r8, r1
 80030d6:	4681      	mov	r9, r0
 80030d8:	f06f 0001 	mvn.w	r0, #1
 80030dc:	2100      	movs	r1, #0
 80030de:	ebb0 0208 	subs.w	r2, r0, r8
 80030e2:	eb61 0309 	sbc.w	r3, r1, r9
 80030e6:	4294      	cmp	r4, r2
 80030e8:	eb75 0303 	sbcs.w	r3, r5, r3
 80030ec:	db04      	blt.n	80030f8 <delayMicroseconds+0x40>
		TIM5->CNT = 0;
 80030ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <delayMicroseconds+0x68>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	625a      	str	r2, [r3, #36]	@ 0x24
		startingValue = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
	}

	int readValue = startingValue;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	60bb      	str	r3, [r7, #8]
	while(readValue-startingValue<delay){
 80030fc:	e002      	b.n	8003104 <delayMicroseconds+0x4c>
		readValue =TIM5->CNT;
 80030fe:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <delayMicroseconds+0x68>)
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	60bb      	str	r3, [r7, #8]
	while(readValue-startingValue<delay){
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	dcf6      	bgt.n	80030fe <delayMicroseconds+0x46>
	}
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40000c00 	.word	0x40000c00

08003124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800315c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003128:	f7ff ffb4 	bl	8003094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800312c:	480c      	ldr	r0, [pc, #48]	@ (8003160 <LoopForever+0x6>)
  ldr r1, =_edata
 800312e:	490d      	ldr	r1, [pc, #52]	@ (8003164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003130:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <LoopForever+0xe>)
  movs r3, #0
 8003132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003134:	e002      	b.n	800313c <LoopCopyDataInit>

08003136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313a:	3304      	adds	r3, #4

0800313c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800313c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800313e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003140:	d3f9      	bcc.n	8003136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003142:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003144:	4c0a      	ldr	r4, [pc, #40]	@ (8003170 <LoopForever+0x16>)
  movs r3, #0
 8003146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003148:	e001      	b.n	800314e <LoopFillZerobss>

0800314a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800314c:	3204      	adds	r2, #4

0800314e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800314e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003150:	d3fb      	bcc.n	800314a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003152:	f005 fbbf 	bl	80088d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003156:	f7fe fd0f 	bl	8001b78 <main>

0800315a <LoopForever>:

LoopForever:
    b LoopForever
 800315a:	e7fe      	b.n	800315a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800315c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003164:	20000838 	.word	0x20000838
  ldr r2, =_sidata
 8003168:	0800b2bc 	.word	0x0800b2bc
  ldr r2, =_sbss
 800316c:	20000838 	.word	0x20000838
  ldr r4, =_ebss
 8003170:	20000c44 	.word	0x20000c44

08003174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003174:	e7fe      	b.n	8003174 <ADC1_2_IRQHandler>
	...

08003178 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <HAL_Init+0x3c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a0b      	ldr	r2, [pc, #44]	@ (80031b4 <HAL_Init+0x3c>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800318c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800318e:	2003      	movs	r0, #3
 8003190:	f000 f93e 	bl	8003410 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003194:	2000      	movs	r0, #0
 8003196:	f000 f80f 	bl	80031b8 <HAL_InitTick>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	71fb      	strb	r3, [r7, #7]
 80031a4:	e001      	b.n	80031aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031a6:	f7ff fd5d 	bl	8002c64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031aa:	79fb      	ldrb	r3, [r7, #7]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40022000 	.word	0x40022000

080031b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80031c4:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <HAL_InitTick+0x6c>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d023      	beq.n	8003214 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031cc:	4b16      	ldr	r3, [pc, #88]	@ (8003228 <HAL_InitTick+0x70>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b14      	ldr	r3, [pc, #80]	@ (8003224 <HAL_InitTick+0x6c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	4619      	mov	r1, r3
 80031d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031da:	fbb3 f3f1 	udiv	r3, r3, r1
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f949 	bl	800347a <HAL_SYSTICK_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d809      	bhi.n	8003208 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f4:	2200      	movs	r2, #0
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	f000 f913 	bl	8003426 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003200:	4a0a      	ldr	r2, [pc, #40]	@ (800322c <HAL_InitTick+0x74>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e007      	b.n	8003218 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e004      	b.n	8003218 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	e001      	b.n	8003218 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000066c 	.word	0x2000066c
 8003228:	20000664 	.word	0x20000664
 800322c:	20000668 	.word	0x20000668

08003230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003234:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_IncTick+0x20>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_IncTick+0x24>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4413      	add	r3, r2
 8003240:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <HAL_IncTick+0x24>)
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	2000066c 	.word	0x2000066c
 8003254:	20000af4 	.word	0x20000af4

08003258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return uwTick;
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <HAL_GetTick+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000af4 	.word	0x20000af4

08003270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003280:	4b0c      	ldr	r3, [pc, #48]	@ (80032b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800328c:	4013      	ands	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800329c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a2:	4a04      	ldr	r2, [pc, #16]	@ (80032b4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	60d3      	str	r3, [r2, #12]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032bc:	4b04      	ldr	r3, [pc, #16]	@ (80032d0 <__NVIC_GetPriorityGrouping+0x18>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	f003 0307 	and.w	r3, r3, #7
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	db0b      	blt.n	80032fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	4907      	ldr	r1, [pc, #28]	@ (800330c <__NVIC_EnableIRQ+0x38>)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2001      	movs	r0, #1
 80032f6:	fa00 f202 	lsl.w	r2, r0, r2
 80032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000e100 	.word	0xe000e100

08003310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	2b00      	cmp	r3, #0
 8003322:	db0a      	blt.n	800333a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	490c      	ldr	r1, [pc, #48]	@ (800335c <__NVIC_SetPriority+0x4c>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	440b      	add	r3, r1
 8003334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003338:	e00a      	b.n	8003350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4908      	ldr	r1, [pc, #32]	@ (8003360 <__NVIC_SetPriority+0x50>)
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	3b04      	subs	r3, #4
 8003348:	0112      	lsls	r2, r2, #4
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	440b      	add	r3, r1
 800334e:	761a      	strb	r2, [r3, #24]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000e100 	.word	0xe000e100
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	@ 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f1c3 0307 	rsb	r3, r3, #7
 800337e:	2b04      	cmp	r3, #4
 8003380:	bf28      	it	cs
 8003382:	2304      	movcs	r3, #4
 8003384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3304      	adds	r3, #4
 800338a:	2b06      	cmp	r3, #6
 800338c:	d902      	bls.n	8003394 <NVIC_EncodePriority+0x30>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3b03      	subs	r3, #3
 8003392:	e000      	b.n	8003396 <NVIC_EncodePriority+0x32>
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	401a      	ands	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ac:	f04f 31ff 	mov.w	r1, #4294967295
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	43d9      	mvns	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	4313      	orrs	r3, r2
         );
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3724      	adds	r7, #36	@ 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033dc:	d301      	bcc.n	80033e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033de:	2301      	movs	r3, #1
 80033e0:	e00f      	b.n	8003402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033e2:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <SysTick_Config+0x40>)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ea:	210f      	movs	r1, #15
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	f7ff ff8e 	bl	8003310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f4:	4b05      	ldr	r3, [pc, #20]	@ (800340c <SysTick_Config+0x40>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033fa:	4b04      	ldr	r3, [pc, #16]	@ (800340c <SysTick_Config+0x40>)
 80033fc:	2207      	movs	r2, #7
 80033fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	e000e010 	.word	0xe000e010

08003410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff29 	bl	8003270 <__NVIC_SetPriorityGrouping>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	4603      	mov	r3, r0
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003438:	f7ff ff3e 	bl	80032b8 <__NVIC_GetPriorityGrouping>
 800343c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	6978      	ldr	r0, [r7, #20]
 8003444:	f7ff ff8e 	bl	8003364 <NVIC_EncodePriority>
 8003448:	4602      	mov	r2, r0
 800344a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff5d 	bl	8003310 <__NVIC_SetPriority>
}
 8003456:	bf00      	nop
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff31 	bl	80032d4 <__NVIC_EnableIRQ>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ffa2 	bl	80033cc <SysTick_Config>
 8003488:	4603      	mov	r3, r0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d008      	beq.n	80034bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2204      	movs	r2, #4
 80034ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e022      	b.n	8003502 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 020e 	bic.w	r2, r2, #14
 80034ca:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e0:	f003 021c 	and.w	r2, r3, #28
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d005      	beq.n	8003532 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2204      	movs	r2, #4
 800352a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e029      	b.n	8003586 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 020e 	bic.w	r2, r2, #14
 8003540:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003556:	f003 021c 	and.w	r2, r3, #28
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f202 	lsl.w	r2, r1, r2
 8003564:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
    }
  }
  return status;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800359e:	e17f      	b.n	80038a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2101      	movs	r1, #1
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8171 	beq.w	800389a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d005      	beq.n	80035d0 <HAL_GPIO_Init+0x40>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d130      	bne.n	8003632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4013      	ands	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003606:	2201      	movs	r2, #1
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 0201 	and.w	r2, r3, #1
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b03      	cmp	r3, #3
 800363c:	d118      	bne.n	8003670 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003644:	2201      	movs	r2, #1
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	f003 0201 	and.w	r2, r3, #1
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b03      	cmp	r3, #3
 800367a:	d017      	beq.n	80036ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d123      	bne.n	8003700 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	08da      	lsrs	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3208      	adds	r2, #8
 80036fa:	6939      	ldr	r1, [r7, #16]
 80036fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80ac 	beq.w	800389a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003742:	4b5f      	ldr	r3, [pc, #380]	@ (80038c0 <HAL_GPIO_Init+0x330>)
 8003744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003746:	4a5e      	ldr	r2, [pc, #376]	@ (80038c0 <HAL_GPIO_Init+0x330>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6613      	str	r3, [r2, #96]	@ 0x60
 800374e:	4b5c      	ldr	r3, [pc, #368]	@ (80038c0 <HAL_GPIO_Init+0x330>)
 8003750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800375a:	4a5a      	ldr	r2, [pc, #360]	@ (80038c4 <HAL_GPIO_Init+0x334>)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	089b      	lsrs	r3, r3, #2
 8003760:	3302      	adds	r3, #2
 8003762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003784:	d025      	beq.n	80037d2 <HAL_GPIO_Init+0x242>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4f      	ldr	r2, [pc, #316]	@ (80038c8 <HAL_GPIO_Init+0x338>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01f      	beq.n	80037ce <HAL_GPIO_Init+0x23e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4e      	ldr	r2, [pc, #312]	@ (80038cc <HAL_GPIO_Init+0x33c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d019      	beq.n	80037ca <HAL_GPIO_Init+0x23a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4d      	ldr	r2, [pc, #308]	@ (80038d0 <HAL_GPIO_Init+0x340>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_GPIO_Init+0x236>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4c      	ldr	r2, [pc, #304]	@ (80038d4 <HAL_GPIO_Init+0x344>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00d      	beq.n	80037c2 <HAL_GPIO_Init+0x232>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	@ (80038d8 <HAL_GPIO_Init+0x348>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <HAL_GPIO_Init+0x22e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4a      	ldr	r2, [pc, #296]	@ (80038dc <HAL_GPIO_Init+0x34c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_GPIO_Init+0x22a>
 80037b6:	2306      	movs	r3, #6
 80037b8:	e00c      	b.n	80037d4 <HAL_GPIO_Init+0x244>
 80037ba:	2307      	movs	r3, #7
 80037bc:	e00a      	b.n	80037d4 <HAL_GPIO_Init+0x244>
 80037be:	2305      	movs	r3, #5
 80037c0:	e008      	b.n	80037d4 <HAL_GPIO_Init+0x244>
 80037c2:	2304      	movs	r3, #4
 80037c4:	e006      	b.n	80037d4 <HAL_GPIO_Init+0x244>
 80037c6:	2303      	movs	r3, #3
 80037c8:	e004      	b.n	80037d4 <HAL_GPIO_Init+0x244>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e002      	b.n	80037d4 <HAL_GPIO_Init+0x244>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_GPIO_Init+0x244>
 80037d2:	2300      	movs	r3, #0
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	f002 0203 	and.w	r2, r2, #3
 80037da:	0092      	lsls	r2, r2, #2
 80037dc:	4093      	lsls	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037e4:	4937      	ldr	r1, [pc, #220]	@ (80038c4 <HAL_GPIO_Init+0x334>)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	3302      	adds	r3, #2
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037f2:	4b3b      	ldr	r3, [pc, #236]	@ (80038e0 <HAL_GPIO_Init+0x350>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003816:	4a32      	ldr	r2, [pc, #200]	@ (80038e0 <HAL_GPIO_Init+0x350>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800381c:	4b30      	ldr	r3, [pc, #192]	@ (80038e0 <HAL_GPIO_Init+0x350>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003840:	4a27      	ldr	r2, [pc, #156]	@ (80038e0 <HAL_GPIO_Init+0x350>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003846:	4b26      	ldr	r3, [pc, #152]	@ (80038e0 <HAL_GPIO_Init+0x350>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800386a:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <HAL_GPIO_Init+0x350>)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003870:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <HAL_GPIO_Init+0x350>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43db      	mvns	r3, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003894:	4a12      	ldr	r2, [pc, #72]	@ (80038e0 <HAL_GPIO_Init+0x350>)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	3301      	adds	r3, #1
 800389e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f47f ae78 	bne.w	80035a0 <HAL_GPIO_Init+0x10>
  }
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40010000 	.word	0x40010000
 80038c8:	48000400 	.word	0x48000400
 80038cc:	48000800 	.word	0x48000800
 80038d0:	48000c00 	.word	0x48000c00
 80038d4:	48001000 	.word	0x48001000
 80038d8:	48001400 	.word	0x48001400
 80038dc:	48001800 	.word	0x48001800
 80038e0:	40010400 	.word	0x40010400

080038e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e001      	b.n	8003906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
 8003920:	4613      	mov	r3, r2
 8003922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003924:	787b      	ldrb	r3, [r7, #1]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003930:	e002      	b.n	8003938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003948:	4b04      	ldr	r3, [pc, #16]	@ (800395c <HAL_PWREx_GetVoltageRange+0x18>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40007000 	.word	0x40007000

08003960 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800396e:	d130      	bne.n	80039d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003970:	4b23      	ldr	r3, [pc, #140]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800397c:	d038      	beq.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800397e:	4b20      	ldr	r3, [pc, #128]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003986:	4a1e      	ldr	r2, [pc, #120]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003988:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800398e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2232      	movs	r2, #50	@ 0x32
 8003994:	fb02 f303 	mul.w	r3, r2, r3
 8003998:	4a1b      	ldr	r2, [pc, #108]	@ (8003a08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0c9b      	lsrs	r3, r3, #18
 80039a0:	3301      	adds	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a4:	e002      	b.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ac:	4b14      	ldr	r3, [pc, #80]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b8:	d102      	bne.n	80039c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f2      	bne.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039cc:	d110      	bne.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e00f      	b.n	80039f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039de:	d007      	beq.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039e0:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039e8:	4a05      	ldr	r2, [pc, #20]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40007000 	.word	0x40007000
 8003a04:	20000664 	.word	0x20000664
 8003a08:	431bde83 	.word	0x431bde83

08003a0c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e3ca      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1e:	4b97      	ldr	r3, [pc, #604]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a28:	4b94      	ldr	r3, [pc, #592]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80e4 	beq.w	8003c08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_RCC_OscConfig+0x4a>
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b0c      	cmp	r3, #12
 8003a4a:	f040 808b 	bne.w	8003b64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f040 8087 	bne.w	8003b64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a56:	4b89      	ldr	r3, [pc, #548]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_RCC_OscConfig+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e3a2      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	4b82      	ldr	r3, [pc, #520]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <HAL_RCC_OscConfig+0x7c>
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a86:	e005      	b.n	8003a94 <HAL_RCC_OscConfig+0x88>
 8003a88:	4b7c      	ldr	r3, [pc, #496]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d223      	bcs.n	8003ae0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fd55 	bl	800454c <RCC_SetFlashLatencyFromMSIRange>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e383      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aac:	4b73      	ldr	r3, [pc, #460]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a72      	ldr	r2, [pc, #456]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003ab2:	f043 0308 	orr.w	r3, r3, #8
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b70      	ldr	r3, [pc, #448]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	496d      	ldr	r1, [pc, #436]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aca:	4b6c      	ldr	r3, [pc, #432]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	4968      	ldr	r1, [pc, #416]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
 8003ade:	e025      	b.n	8003b2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ae0:	4b66      	ldr	r3, [pc, #408]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a65      	ldr	r2, [pc, #404]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003ae6:	f043 0308 	orr.w	r3, r3, #8
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b63      	ldr	r3, [pc, #396]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4960      	ldr	r1, [pc, #384]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003afe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	495b      	ldr	r1, [pc, #364]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fd15 	bl	800454c <RCC_SetFlashLatencyFromMSIRange>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e343      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b2c:	f000 fc4a 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b52      	ldr	r3, [pc, #328]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	4950      	ldr	r1, [pc, #320]	@ (8003c80 <HAL_RCC_OscConfig+0x274>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
 8003b48:	4a4e      	ldr	r2, [pc, #312]	@ (8003c84 <HAL_RCC_OscConfig+0x278>)
 8003b4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fb31 	bl	80031b8 <HAL_InitTick>
 8003b56:	4603      	mov	r3, r0
 8003b58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d052      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	e327      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d032      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b6c:	4b43      	ldr	r3, [pc, #268]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a42      	ldr	r2, [pc, #264]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b78:	f7ff fb6e 	bl	8003258 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b80:	f7ff fb6a 	bl	8003258 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e310      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b92:	4b3a      	ldr	r3, [pc, #232]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a36      	ldr	r2, [pc, #216]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003ba4:	f043 0308 	orr.w	r3, r3, #8
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b34      	ldr	r3, [pc, #208]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4931      	ldr	r1, [pc, #196]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	492c      	ldr	r1, [pc, #176]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
 8003bd0:	e01a      	b.n	8003c08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a29      	ldr	r2, [pc, #164]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bde:	f7ff fb3b 	bl	8003258 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003be6:	f7ff fb37 	bl	8003258 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e2dd      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bf8:	4b20      	ldr	r3, [pc, #128]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x1da>
 8003c04:	e000      	b.n	8003c08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d074      	beq.n	8003cfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d005      	beq.n	8003c26 <HAL_RCC_OscConfig+0x21a>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d10e      	bne.n	8003c3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d10b      	bne.n	8003c3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c26:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d064      	beq.n	8003cfc <HAL_RCC_OscConfig+0x2f0>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d160      	bne.n	8003cfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e2ba      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x24a>
 8003c48:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	e026      	b.n	8003ca4 <HAL_RCC_OscConfig+0x298>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c5e:	d115      	bne.n	8003c8c <HAL_RCC_OscConfig+0x280>
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a05      	ldr	r2, [pc, #20]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003c66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b03      	ldr	r3, [pc, #12]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a02      	ldr	r2, [pc, #8]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	e014      	b.n	8003ca4 <HAL_RCC_OscConfig+0x298>
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	0800ae94 	.word	0x0800ae94
 8003c84:	20000664 	.word	0x20000664
 8003c88:	20000668 	.word	0x20000668
 8003c8c:	4ba0      	ldr	r3, [pc, #640]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a9f      	ldr	r2, [pc, #636]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b9d      	ldr	r3, [pc, #628]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a9c      	ldr	r2, [pc, #624]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7ff fad4 	bl	8003258 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7ff fad0 	bl	8003258 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	@ 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e276      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc6:	4b92      	ldr	r3, [pc, #584]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x2a8>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7ff fac0 	bl	8003258 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7ff fabc 	bl	8003258 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	@ 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e262      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cee:	4b88      	ldr	r3, [pc, #544]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x2d0>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d060      	beq.n	8003dcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_OscConfig+0x310>
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d119      	bne.n	8003d4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d116      	bne.n	8003d4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_OscConfig+0x328>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e23f      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b76      	ldr	r3, [pc, #472]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	061b      	lsls	r3, r3, #24
 8003d42:	4973      	ldr	r1, [pc, #460]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d48:	e040      	b.n	8003dcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d023      	beq.n	8003d9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d52:	4b6f      	ldr	r3, [pc, #444]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6e      	ldr	r2, [pc, #440]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7ff fa7b 	bl	8003258 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d66:	f7ff fa77 	bl	8003258 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e21d      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d78:	4b65      	ldr	r3, [pc, #404]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d84:	4b62      	ldr	r3, [pc, #392]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	495f      	ldr	r1, [pc, #380]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
 8003d98:	e018      	b.n	8003dcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5c      	ldr	r2, [pc, #368]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7ff fa57 	bl	8003258 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dae:	f7ff fa53 	bl	8003258 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e1f9      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dc0:	4b53      	ldr	r3, [pc, #332]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d03c      	beq.n	8003e52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01c      	beq.n	8003e1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de0:	4b4b      	ldr	r3, [pc, #300]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de6:	4a4a      	ldr	r2, [pc, #296]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7ff fa32 	bl	8003258 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df8:	f7ff fa2e 	bl	8003258 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e1d4      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e0a:	4b41      	ldr	r3, [pc, #260]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ef      	beq.n	8003df8 <HAL_RCC_OscConfig+0x3ec>
 8003e18:	e01b      	b.n	8003e52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e20:	4a3b      	ldr	r2, [pc, #236]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2a:	f7ff fa15 	bl	8003258 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e32:	f7ff fa11 	bl	8003258 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e1b7      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e44:	4b32      	ldr	r3, [pc, #200]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ef      	bne.n	8003e32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80a6 	beq.w	8003fac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e64:	4b2a      	ldr	r3, [pc, #168]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b27      	ldr	r3, [pc, #156]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e74:	4a26      	ldr	r2, [pc, #152]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e7c:	4b24      	ldr	r3, [pc, #144]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e8c:	4b21      	ldr	r3, [pc, #132]	@ (8003f14 <HAL_RCC_OscConfig+0x508>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d118      	bne.n	8003eca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e98:	4b1e      	ldr	r3, [pc, #120]	@ (8003f14 <HAL_RCC_OscConfig+0x508>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f14 <HAL_RCC_OscConfig+0x508>)
 8003e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea4:	f7ff f9d8 	bl	8003258 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eac:	f7ff f9d4 	bl	8003258 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e17a      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ebe:	4b15      	ldr	r3, [pc, #84]	@ (8003f14 <HAL_RCC_OscConfig+0x508>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d108      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4d8>
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ee2:	e029      	b.n	8003f38 <HAL_RCC_OscConfig+0x52c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d115      	bne.n	8003f18 <HAL_RCC_OscConfig+0x50c>
 8003eec:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef2:	4a07      	ldr	r2, [pc, #28]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f043 0304 	orr.w	r3, r3, #4
 8003ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003efc:	4b04      	ldr	r3, [pc, #16]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	4a03      	ldr	r2, [pc, #12]	@ (8003f10 <HAL_RCC_OscConfig+0x504>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f0c:	e014      	b.n	8003f38 <HAL_RCC_OscConfig+0x52c>
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40007000 	.word	0x40007000
 8003f18:	4b9c      	ldr	r3, [pc, #624]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1e:	4a9b      	ldr	r2, [pc, #620]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f28:	4b98      	ldr	r3, [pc, #608]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2e:	4a97      	ldr	r2, [pc, #604]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8003f30:	f023 0304 	bic.w	r3, r3, #4
 8003f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d016      	beq.n	8003f6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7ff f98a 	bl	8003258 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f48:	f7ff f986 	bl	8003258 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e12a      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ed      	beq.n	8003f48 <HAL_RCC_OscConfig+0x53c>
 8003f6c:	e015      	b.n	8003f9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6e:	f7ff f973 	bl	8003258 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7ff f96f 	bl	8003258 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e113      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f8c:	4b7f      	ldr	r3, [pc, #508]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ed      	bne.n	8003f76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9a:	7ffb      	ldrb	r3, [r7, #31]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d105      	bne.n	8003fac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa0:	4b7a      	ldr	r3, [pc, #488]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	4a79      	ldr	r2, [pc, #484]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8003fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80fe 	beq.w	80041b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	f040 80d0 	bne.w	8004160 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fc0:	4b72      	ldr	r3, [pc, #456]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 0203 	and.w	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d130      	bne.n	8004036 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d127      	bne.n	8004036 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d11f      	bne.n	8004036 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004000:	2a07      	cmp	r2, #7
 8004002:	bf14      	ite	ne
 8004004:	2201      	movne	r2, #1
 8004006:	2200      	moveq	r2, #0
 8004008:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800400a:	4293      	cmp	r3, r2
 800400c:	d113      	bne.n	8004036 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d109      	bne.n	8004036 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	3b01      	subs	r3, #1
 8004030:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d06e      	beq.n	8004114 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	d069      	beq.n	8004110 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800403c:	4b53      	ldr	r3, [pc, #332]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004048:	4b50      	ldr	r3, [pc, #320]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0ad      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004058:	4b4c      	ldr	r3, [pc, #304]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a4b      	ldr	r2, [pc, #300]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004064:	f7ff f8f8 	bl	8003258 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7ff f8f4 	bl	8003258 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e09a      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407e:	4b43      	ldr	r3, [pc, #268]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408a:	4b40      	ldr	r3, [pc, #256]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	4b40      	ldr	r3, [pc, #256]	@ (8004190 <HAL_RCC_OscConfig+0x784>)
 8004090:	4013      	ands	r3, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800409a:	3a01      	subs	r2, #1
 800409c:	0112      	lsls	r2, r2, #4
 800409e:	4311      	orrs	r1, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040a4:	0212      	lsls	r2, r2, #8
 80040a6:	4311      	orrs	r1, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040ac:	0852      	lsrs	r2, r2, #1
 80040ae:	3a01      	subs	r2, #1
 80040b0:	0552      	lsls	r2, r2, #21
 80040b2:	4311      	orrs	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040b8:	0852      	lsrs	r2, r2, #1
 80040ba:	3a01      	subs	r2, #1
 80040bc:	0652      	lsls	r2, r2, #25
 80040be:	4311      	orrs	r1, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040c4:	0912      	lsrs	r2, r2, #4
 80040c6:	0452      	lsls	r2, r2, #17
 80040c8:	430a      	orrs	r2, r1
 80040ca:	4930      	ldr	r1, [pc, #192]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040d0:	4b2e      	ldr	r3, [pc, #184]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2d      	ldr	r2, [pc, #180]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040dc:	4b2b      	ldr	r3, [pc, #172]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a2a      	ldr	r2, [pc, #168]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 80040e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e8:	f7ff f8b6 	bl	8003258 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7ff f8b2 	bl	8003258 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e058      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004102:	4b22      	ldr	r3, [pc, #136]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410e:	e050      	b.n	80041b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e04f      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004114:	4b1d      	ldr	r3, [pc, #116]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d148      	bne.n	80041b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004120:	4b1a      	ldr	r3, [pc, #104]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a19      	ldr	r2, [pc, #100]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800412c:	4b17      	ldr	r3, [pc, #92]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a16      	ldr	r2, [pc, #88]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004136:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004138:	f7ff f88e 	bl	8003258 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7ff f88a 	bl	8003258 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e030      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	4b0e      	ldr	r3, [pc, #56]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x734>
 800415e:	e028      	b.n	80041b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d023      	beq.n	80041ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b09      	ldr	r3, [pc, #36]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a08      	ldr	r2, [pc, #32]	@ (800418c <HAL_RCC_OscConfig+0x780>)
 800416c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7ff f871 	bl	8003258 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004178:	e00c      	b.n	8004194 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417a:	f7ff f86d 	bl	8003258 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d905      	bls.n	8004194 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e013      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
 800418c:	40021000 	.word	0x40021000
 8004190:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004194:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <HAL_RCC_OscConfig+0x7b0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ec      	bne.n	800417a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041a0:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <HAL_RCC_OscConfig+0x7b0>)
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	4905      	ldr	r1, [pc, #20]	@ (80041bc <HAL_RCC_OscConfig+0x7b0>)
 80041a6:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <HAL_RCC_OscConfig+0x7b4>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	60cb      	str	r3, [r1, #12]
 80041ac:	e001      	b.n	80041b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	feeefffc 	.word	0xfeeefffc

080041c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0e7      	b.n	80043a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b75      	ldr	r3, [pc, #468]	@ (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d910      	bls.n	8004208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b72      	ldr	r3, [pc, #456]	@ (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 0207 	bic.w	r2, r3, #7
 80041ee:	4970      	ldr	r1, [pc, #448]	@ (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b6e      	ldr	r3, [pc, #440]	@ (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0cf      	b.n	80043a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d010      	beq.n	8004236 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	4b66      	ldr	r3, [pc, #408]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004220:	429a      	cmp	r2, r3
 8004222:	d908      	bls.n	8004236 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004224:	4b63      	ldr	r3, [pc, #396]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4960      	ldr	r1, [pc, #384]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d04c      	beq.n	80042dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424a:	4b5a      	ldr	r3, [pc, #360]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d121      	bne.n	800429a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0a6      	b.n	80043a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004262:	4b54      	ldr	r3, [pc, #336]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d115      	bne.n	800429a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e09a      	b.n	80043a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800427a:	4b4e      	ldr	r3, [pc, #312]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e08e      	b.n	80043a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800428a:	4b4a      	ldr	r3, [pc, #296]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e086      	b.n	80043a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800429a:	4b46      	ldr	r3, [pc, #280]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4943      	ldr	r1, [pc, #268]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fe ffd4 	bl	8003258 <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fe ffd0 	bl	8003258 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e06e      	b.n	80043a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b3a      	ldr	r3, [pc, #232]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 020c 	and.w	r2, r3, #12
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1eb      	bne.n	80042b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d010      	beq.n	800430a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d208      	bcs.n	800430a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f8:	4b2e      	ldr	r3, [pc, #184]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	492b      	ldr	r1, [pc, #172]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800430a:	4b29      	ldr	r3, [pc, #164]	@ (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d210      	bcs.n	800433a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004318:	4b25      	ldr	r3, [pc, #148]	@ (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f023 0207 	bic.w	r2, r3, #7
 8004320:	4923      	ldr	r1, [pc, #140]	@ (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	4313      	orrs	r3, r2
 8004326:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004328:	4b21      	ldr	r3, [pc, #132]	@ (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d001      	beq.n	800433a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e036      	b.n	80043a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004346:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	4918      	ldr	r1, [pc, #96]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004364:	4b13      	ldr	r3, [pc, #76]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4910      	ldr	r1, [pc, #64]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004374:	4313      	orrs	r3, r2
 8004376:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004378:	f000 f824 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 800437c:	4602      	mov	r2, r0
 800437e:	4b0d      	ldr	r3, [pc, #52]	@ (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	091b      	lsrs	r3, r3, #4
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	490b      	ldr	r1, [pc, #44]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f4>)
 800438a:	5ccb      	ldrb	r3, [r1, r3]
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
 8004394:	4a09      	ldr	r2, [pc, #36]	@ (80043bc <HAL_RCC_ClockConfig+0x1f8>)
 8004396:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004398:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <HAL_RCC_ClockConfig+0x1fc>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f7fe ff0b 	bl	80031b8 <HAL_InitTick>
 80043a2:	4603      	mov	r3, r0
 80043a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80043a6:	7afb      	ldrb	r3, [r7, #11]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40022000 	.word	0x40022000
 80043b4:	40021000 	.word	0x40021000
 80043b8:	0800ae94 	.word	0x0800ae94
 80043bc:	20000664 	.word	0x20000664
 80043c0:	20000668 	.word	0x20000668

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	@ 0x24
 80043c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d2:	4b3e      	ldr	r3, [pc, #248]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x108>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043dc:	4b3b      	ldr	r3, [pc, #236]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x108>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x34>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b0c      	cmp	r3, #12
 80043f0:	d121      	bne.n	8004436 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d11e      	bne.n	8004436 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043f8:	4b34      	ldr	r3, [pc, #208]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x108>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d107      	bne.n	8004414 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004404:	4b31      	ldr	r3, [pc, #196]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e005      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004414:	4b2d      	ldr	r3, [pc, #180]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004420:	4a2b      	ldr	r2, [pc, #172]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004428:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10d      	bne.n	800444c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004434:	e00a      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b04      	cmp	r3, #4
 800443a:	d102      	bne.n	8004442 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800443c:	4b25      	ldr	r3, [pc, #148]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	e004      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d101      	bne.n	800444c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004448:	4b23      	ldr	r3, [pc, #140]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800444a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d134      	bne.n	80044bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004452:	4b1e      	ldr	r3, [pc, #120]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d003      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0xa6>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d003      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0xac>
 8004468:	e005      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800446a:	4b1a      	ldr	r3, [pc, #104]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800446c:	617b      	str	r3, [r7, #20]
      break;
 800446e:	e005      	b.n	800447c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004470:	4b19      	ldr	r3, [pc, #100]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004472:	617b      	str	r3, [r7, #20]
      break;
 8004474:	e002      	b.n	800447c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	617b      	str	r3, [r7, #20]
      break;
 800447a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800447c:	4b13      	ldr	r3, [pc, #76]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x108>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	3301      	adds	r3, #1
 8004488:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800448a:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x108>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	fb03 f202 	mul.w	r2, r3, r2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044a2:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x108>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	0e5b      	lsrs	r3, r3, #25
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	3301      	adds	r3, #1
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044bc:	69bb      	ldr	r3, [r7, #24]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3724      	adds	r7, #36	@ 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000
 80044d0:	0800aeac 	.word	0x0800aeac
 80044d4:	00f42400 	.word	0x00f42400
 80044d8:	007a1200 	.word	0x007a1200

080044dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e0:	4b03      	ldr	r3, [pc, #12]	@ (80044f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000664 	.word	0x20000664

080044f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044f8:	f7ff fff0 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4904      	ldr	r1, [pc, #16]	@ (800451c <HAL_RCC_GetPCLK1Freq+0x28>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000
 800451c:	0800aea4 	.word	0x0800aea4

08004520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004524:	f7ff ffda 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_GetPCLK2Freq+0x24>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0adb      	lsrs	r3, r3, #11
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4904      	ldr	r1, [pc, #16]	@ (8004548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	0800aea4 	.word	0x0800aea4

0800454c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004558:	4b2a      	ldr	r3, [pc, #168]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800455a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004564:	f7ff f9ee 	bl	8003944 <HAL_PWREx_GetVoltageRange>
 8004568:	6178      	str	r0, [r7, #20]
 800456a:	e014      	b.n	8004596 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800456c:	4b25      	ldr	r3, [pc, #148]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004570:	4a24      	ldr	r2, [pc, #144]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004576:	6593      	str	r3, [r2, #88]	@ 0x58
 8004578:	4b22      	ldr	r3, [pc, #136]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004584:	f7ff f9de 	bl	8003944 <HAL_PWREx_GetVoltageRange>
 8004588:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800458a:	4b1e      	ldr	r3, [pc, #120]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	4a1d      	ldr	r2, [pc, #116]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004594:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800459c:	d10b      	bne.n	80045b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b80      	cmp	r3, #128	@ 0x80
 80045a2:	d919      	bls.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80045a8:	d902      	bls.n	80045b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045aa:	2302      	movs	r3, #2
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e013      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045b0:	2301      	movs	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	e010      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b80      	cmp	r3, #128	@ 0x80
 80045ba:	d902      	bls.n	80045c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045bc:	2303      	movs	r3, #3
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e00a      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b80      	cmp	r3, #128	@ 0x80
 80045c6:	d102      	bne.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045c8:	2302      	movs	r3, #2
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	e004      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b70      	cmp	r3, #112	@ 0x70
 80045d2:	d101      	bne.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d4:	2301      	movs	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f023 0207 	bic.w	r2, r3, #7
 80045e0:	4909      	ldr	r1, [pc, #36]	@ (8004608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045e8:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d001      	beq.n	80045fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021000 	.word	0x40021000
 8004608:	40022000 	.word	0x40022000

0800460c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004614:	2300      	movs	r3, #0
 8004616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004618:	2300      	movs	r3, #0
 800461a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004624:	2b00      	cmp	r3, #0
 8004626:	d041      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800462c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004630:	d02a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004632:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004636:	d824      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004638:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800463c:	d008      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800463e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004642:	d81e      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004648:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800464c:	d010      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800464e:	e018      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004650:	4b86      	ldr	r3, [pc, #536]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4a85      	ldr	r2, [pc, #532]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800465a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800465c:	e015      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fabb 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800466e:	e00c      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3320      	adds	r3, #32
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fba6 	bl	8004dc8 <RCCEx_PLLSAI2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004680:	e003      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	74fb      	strb	r3, [r7, #19]
      break;
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004690:	4b76      	ldr	r3, [pc, #472]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004696:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800469e:	4973      	ldr	r1, [pc, #460]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046a6:	e001      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d041      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046c0:	d02a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046c6:	d824      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046cc:	d008      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046d2:	d81e      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046dc:	d010      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046de:	e018      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046e0:	4b62      	ldr	r3, [pc, #392]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a61      	ldr	r2, [pc, #388]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ec:	e015      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3304      	adds	r3, #4
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fa73 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046fe:	e00c      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3320      	adds	r3, #32
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fb5e 	bl	8004dc8 <RCCEx_PLLSAI2_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004710:	e003      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	74fb      	strb	r3, [r7, #19]
      break;
 8004716:	e000      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471a:	7cfb      	ldrb	r3, [r7, #19]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004720:	4b52      	ldr	r3, [pc, #328]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800472e:	494f      	ldr	r1, [pc, #316]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004736:	e001      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80a0 	beq.w	800488a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800474e:	4b47      	ldr	r3, [pc, #284]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004764:	4b41      	ldr	r3, [pc, #260]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004768:	4a40      	ldr	r2, [pc, #256]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004770:	4b3e      	ldr	r3, [pc, #248]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477c:	2301      	movs	r3, #1
 800477e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004780:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a3a      	ldr	r2, [pc, #232]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800478c:	f7fe fd64 	bl	8003258 <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004792:	e009      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004794:	f7fe fd60 	bl	8003258 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d902      	bls.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	74fb      	strb	r3, [r7, #19]
        break;
 80047a6:	e005      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047a8:	4b31      	ldr	r3, [pc, #196]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ef      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d15c      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047ba:	4b2c      	ldr	r3, [pc, #176]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01f      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d019      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047d8:	4b24      	ldr	r3, [pc, #144]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e4:	4b21      	ldr	r3, [pc, #132]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ea:	4a20      	ldr	r2, [pc, #128]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f4:	4b1d      	ldr	r3, [pc, #116]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fa:	4a1c      	ldr	r2, [pc, #112]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004804:	4a19      	ldr	r2, [pc, #100]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fe fd1f 	bl	8003258 <HAL_GetTick>
 800481a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481c:	e00b      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481e:	f7fe fd1b 	bl	8003258 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482c:	4293      	cmp	r3, r2
 800482e:	d902      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	74fb      	strb	r3, [r7, #19]
            break;
 8004834:	e006      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ec      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10c      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484a:	4b08      	ldr	r3, [pc, #32]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800485a:	4904      	ldr	r1, [pc, #16]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004862:	e009      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	74bb      	strb	r3, [r7, #18]
 8004868:	e006      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	7cfb      	ldrb	r3, [r7, #19]
 8004876:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004878:	7c7b      	ldrb	r3, [r7, #17]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4b9e      	ldr	r3, [pc, #632]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004882:	4a9d      	ldr	r2, [pc, #628]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004888:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004896:	4b98      	ldr	r3, [pc, #608]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489c:	f023 0203 	bic.w	r2, r3, #3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	4994      	ldr	r1, [pc, #592]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b8:	4b8f      	ldr	r3, [pc, #572]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048be:	f023 020c 	bic.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c6:	498c      	ldr	r1, [pc, #560]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048da:	4b87      	ldr	r3, [pc, #540]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e8:	4983      	ldr	r1, [pc, #524]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048fc:	4b7e      	ldr	r3, [pc, #504]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	497b      	ldr	r1, [pc, #492]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800491e:	4b76      	ldr	r3, [pc, #472]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004924:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492c:	4972      	ldr	r1, [pc, #456]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004940:	4b6d      	ldr	r3, [pc, #436]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494e:	496a      	ldr	r1, [pc, #424]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004962:	4b65      	ldr	r3, [pc, #404]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004968:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004970:	4961      	ldr	r1, [pc, #388]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004984:	4b5c      	ldr	r3, [pc, #368]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004992:	4959      	ldr	r1, [pc, #356]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a6:	4b54      	ldr	r3, [pc, #336]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b4:	4950      	ldr	r1, [pc, #320]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049c8:	4b4b      	ldr	r3, [pc, #300]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d6:	4948      	ldr	r1, [pc, #288]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ea:	4b43      	ldr	r3, [pc, #268]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f8:	493f      	ldr	r1, [pc, #252]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d028      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a1a:	4937      	ldr	r1, [pc, #220]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a2c:	4b32      	ldr	r3, [pc, #200]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4a31      	ldr	r2, [pc, #196]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a36:	60d3      	str	r3, [r2, #12]
 8004a38:	e011      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a42:	d10c      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	2101      	movs	r1, #1
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f8c8 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d028      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a6a:	4b23      	ldr	r3, [pc, #140]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a78:	491f      	ldr	r1, [pc, #124]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a88:	d106      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a94:	60d3      	str	r3, [r2, #12]
 8004a96:	e011      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f899 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02b      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ace:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad6:	4908      	ldr	r1, [pc, #32]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ae6:	d109      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a02      	ldr	r2, [pc, #8]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004af2:	60d3      	str	r3, [r2, #12]
 8004af4:	e014      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004af6:	bf00      	nop
 8004af8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 f867 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b16:	7cfb      	ldrb	r3, [r7, #19]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b1c:	7cfb      	ldrb	r3, [r7, #19]
 8004b1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02f      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b3a:	4928      	ldr	r1, [pc, #160]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b4a:	d10d      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	2102      	movs	r1, #2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f844 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b5c:	7cfb      	ldrb	r3, [r7, #19]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d014      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b62:	7cfb      	ldrb	r3, [r7, #19]
 8004b64:	74bb      	strb	r3, [r7, #18]
 8004b66:	e011      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3320      	adds	r3, #32
 8004b76:	2102      	movs	r1, #2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f925 	bl	8004dc8 <RCCEx_PLLSAI2_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b82:	7cfb      	ldrb	r3, [r7, #19]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b98:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba6:	490d      	ldr	r1, [pc, #52]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bba:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bca:	4904      	ldr	r1, [pc, #16]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40021000 	.word	0x40021000

08004be0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bee:	4b75      	ldr	r3, [pc, #468]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bfa:	4b72      	ldr	r3, [pc, #456]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0203 	and.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d10d      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c12:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
       ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d047      	beq.n	8004cb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e044      	b.n	8004cb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d018      	beq.n	8004c66 <RCCEx_PLLSAI1_Config+0x86>
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d825      	bhi.n	8004c84 <RCCEx_PLLSAI1_Config+0xa4>
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d002      	beq.n	8004c42 <RCCEx_PLLSAI1_Config+0x62>
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d009      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x74>
 8004c40:	e020      	b.n	8004c84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c42:	4b60      	ldr	r3, [pc, #384]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11d      	bne.n	8004c8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c52:	e01a      	b.n	8004c8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c54:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d116      	bne.n	8004c8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c64:	e013      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c66:	4b57      	ldr	r3, [pc, #348]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c72:	4b54      	ldr	r3, [pc, #336]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c82:	e006      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      break;
 8004c88:	e004      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	4944      	ldr	r1, [pc, #272]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d17d      	bne.n	8004db8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cbc:	4b41      	ldr	r3, [pc, #260]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a40      	ldr	r2, [pc, #256]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc8:	f7fe fac6 	bl	8003258 <HAL_GetTick>
 8004ccc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cce:	e009      	b.n	8004ce4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cd0:	f7fe fac2 	bl	8003258 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d902      	bls.n	8004ce4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ce2:	e005      	b.n	8004cf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ce4:	4b37      	ldr	r3, [pc, #220]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ef      	bne.n	8004cd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d160      	bne.n	8004db8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d111      	bne.n	8004d20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cfc:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6892      	ldr	r2, [r2, #8]
 8004d0c:	0211      	lsls	r1, r2, #8
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68d2      	ldr	r2, [r2, #12]
 8004d12:	0912      	lsrs	r2, r2, #4
 8004d14:	0452      	lsls	r2, r2, #17
 8004d16:	430a      	orrs	r2, r1
 8004d18:	492a      	ldr	r1, [pc, #168]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	610b      	str	r3, [r1, #16]
 8004d1e:	e027      	b.n	8004d70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d112      	bne.n	8004d4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d26:	4b27      	ldr	r3, [pc, #156]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6892      	ldr	r2, [r2, #8]
 8004d36:	0211      	lsls	r1, r2, #8
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6912      	ldr	r2, [r2, #16]
 8004d3c:	0852      	lsrs	r2, r2, #1
 8004d3e:	3a01      	subs	r2, #1
 8004d40:	0552      	lsls	r2, r2, #21
 8004d42:	430a      	orrs	r2, r1
 8004d44:	491f      	ldr	r1, [pc, #124]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	610b      	str	r3, [r1, #16]
 8004d4a:	e011      	b.n	8004d70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6892      	ldr	r2, [r2, #8]
 8004d5c:	0211      	lsls	r1, r2, #8
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6952      	ldr	r2, [r2, #20]
 8004d62:	0852      	lsrs	r2, r2, #1
 8004d64:	3a01      	subs	r2, #1
 8004d66:	0652      	lsls	r2, r2, #25
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	4916      	ldr	r1, [pc, #88]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d70:	4b14      	ldr	r3, [pc, #80]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a13      	ldr	r2, [pc, #76]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fe fa6c 	bl	8003258 <HAL_GetTick>
 8004d80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d82:	e009      	b.n	8004d98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d84:	f7fe fa68 	bl	8003258 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d902      	bls.n	8004d98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	73fb      	strb	r3, [r7, #15]
          break;
 8004d96:	e005      	b.n	8004da4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ef      	beq.n	8004d84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004daa:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	4904      	ldr	r1, [pc, #16]	@ (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000

08004dc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d018      	beq.n	8004e14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004de2:	4b67      	ldr	r3, [pc, #412]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0203 	and.w	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d10d      	bne.n	8004e0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
       ||
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dfa:	4b61      	ldr	r3, [pc, #388]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
       ||
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d047      	beq.n	8004e9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
 8004e12:	e044      	b.n	8004e9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d018      	beq.n	8004e4e <RCCEx_PLLSAI2_Config+0x86>
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d825      	bhi.n	8004e6c <RCCEx_PLLSAI2_Config+0xa4>
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d002      	beq.n	8004e2a <RCCEx_PLLSAI2_Config+0x62>
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d009      	beq.n	8004e3c <RCCEx_PLLSAI2_Config+0x74>
 8004e28:	e020      	b.n	8004e6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e2a:	4b55      	ldr	r3, [pc, #340]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d11d      	bne.n	8004e72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3a:	e01a      	b.n	8004e72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e3c:	4b50      	ldr	r3, [pc, #320]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d116      	bne.n	8004e76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4c:	e013      	b.n	8004e76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10f      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e5a:	4b49      	ldr	r3, [pc, #292]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e6a:	e006      	b.n	8004e7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e004      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10d      	bne.n	8004e9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e82:	4b3f      	ldr	r3, [pc, #252]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6819      	ldr	r1, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	430b      	orrs	r3, r1
 8004e98:	4939      	ldr	r1, [pc, #228]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d167      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ea4:	4b36      	ldr	r3, [pc, #216]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a35      	ldr	r2, [pc, #212]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb0:	f7fe f9d2 	bl	8003258 <HAL_GetTick>
 8004eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eb6:	e009      	b.n	8004ecc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004eb8:	f7fe f9ce 	bl	8003258 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d902      	bls.n	8004ecc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eca:	e005      	b.n	8004ed8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1ef      	bne.n	8004eb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d14a      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d111      	bne.n	8004f08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ee4:	4b26      	ldr	r3, [pc, #152]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6892      	ldr	r2, [r2, #8]
 8004ef4:	0211      	lsls	r1, r2, #8
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68d2      	ldr	r2, [r2, #12]
 8004efa:	0912      	lsrs	r2, r2, #4
 8004efc:	0452      	lsls	r2, r2, #17
 8004efe:	430a      	orrs	r2, r1
 8004f00:	491f      	ldr	r1, [pc, #124]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	614b      	str	r3, [r1, #20]
 8004f06:	e011      	b.n	8004f2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f08:	4b1d      	ldr	r3, [pc, #116]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	0211      	lsls	r1, r2, #8
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6912      	ldr	r2, [r2, #16]
 8004f1e:	0852      	lsrs	r2, r2, #1
 8004f20:	3a01      	subs	r2, #1
 8004f22:	0652      	lsls	r2, r2, #25
 8004f24:	430a      	orrs	r2, r1
 8004f26:	4916      	ldr	r1, [pc, #88]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f2c:	4b14      	ldr	r3, [pc, #80]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a13      	ldr	r2, [pc, #76]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fe f98e 	bl	8003258 <HAL_GetTick>
 8004f3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f3e:	e009      	b.n	8004f54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f40:	f7fe f98a 	bl	8003258 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d902      	bls.n	8004f54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	73fb      	strb	r3, [r7, #15]
          break;
 8004f52:	e005      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f54:	4b0a      	ldr	r3, [pc, #40]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ef      	beq.n	8004f40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f66:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	4904      	ldr	r1, [pc, #16]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000

08004f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e049      	b.n	800502a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fd fe7e 	bl	8002cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f000 fc7a 	bl	80058bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b01      	cmp	r3, #1
 8005046:	d001      	beq.n	800504c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e047      	b.n	80050dc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a23      	ldr	r2, [pc, #140]	@ (80050e8 <HAL_TIM_Base_Start+0xb4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01d      	beq.n	800509a <HAL_TIM_Base_Start+0x66>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005066:	d018      	beq.n	800509a <HAL_TIM_Base_Start+0x66>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1f      	ldr	r2, [pc, #124]	@ (80050ec <HAL_TIM_Base_Start+0xb8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <HAL_TIM_Base_Start+0x66>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1e      	ldr	r2, [pc, #120]	@ (80050f0 <HAL_TIM_Base_Start+0xbc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_TIM_Base_Start+0x66>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1c      	ldr	r2, [pc, #112]	@ (80050f4 <HAL_TIM_Base_Start+0xc0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_TIM_Base_Start+0x66>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1b      	ldr	r2, [pc, #108]	@ (80050f8 <HAL_TIM_Base_Start+0xc4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_TIM_Base_Start+0x66>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <HAL_TIM_Base_Start+0xc8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d115      	bne.n	80050c6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	4b17      	ldr	r3, [pc, #92]	@ (8005100 <HAL_TIM_Base_Start+0xcc>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b06      	cmp	r3, #6
 80050aa:	d015      	beq.n	80050d8 <HAL_TIM_Base_Start+0xa4>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b2:	d011      	beq.n	80050d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c4:	e008      	b.n	80050d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e000      	b.n	80050da <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40000c00 	.word	0x40000c00
 80050f8:	40013400 	.word	0x40013400
 80050fc:	40014000 	.word	0x40014000
 8005100:	00010007 	.word	0x00010007

08005104 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e049      	b.n	80051aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f841 	bl	80051b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f000 fbba 	bl	80058bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_TIM_PWM_Start+0x24>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e03c      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d109      	bne.n	8005206 <HAL_TIM_PWM_Start+0x3e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	bf14      	ite	ne
 80051fe:	2301      	movne	r3, #1
 8005200:	2300      	moveq	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	e02f      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d109      	bne.n	8005220 <HAL_TIM_PWM_Start+0x58>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e022      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b0c      	cmp	r3, #12
 8005224:	d109      	bne.n	800523a <HAL_TIM_PWM_Start+0x72>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	e015      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b10      	cmp	r3, #16
 800523e:	d109      	bne.n	8005254 <HAL_TIM_PWM_Start+0x8c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	e008      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	bf14      	ite	ne
 8005260:	2301      	movne	r3, #1
 8005262:	2300      	moveq	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e09c      	b.n	80053a8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <HAL_TIM_PWM_Start+0xb6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800527c:	e023      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b04      	cmp	r3, #4
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0xc6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800528c:	e01b      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Start+0xd6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800529c:	e013      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0xe6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052ac:	e00b      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Start+0xf6>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052bc:	e003      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2201      	movs	r2, #1
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 ff0a 	bl	80060e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a35      	ldr	r2, [pc, #212]	@ (80053b0 <HAL_TIM_PWM_Start+0x1e8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <HAL_TIM_PWM_Start+0x13e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a34      	ldr	r2, [pc, #208]	@ (80053b4 <HAL_TIM_PWM_Start+0x1ec>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00e      	beq.n	8005306 <HAL_TIM_PWM_Start+0x13e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a32      	ldr	r2, [pc, #200]	@ (80053b8 <HAL_TIM_PWM_Start+0x1f0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d009      	beq.n	8005306 <HAL_TIM_PWM_Start+0x13e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a31      	ldr	r2, [pc, #196]	@ (80053bc <HAL_TIM_PWM_Start+0x1f4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d004      	beq.n	8005306 <HAL_TIM_PWM_Start+0x13e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a2f      	ldr	r2, [pc, #188]	@ (80053c0 <HAL_TIM_PWM_Start+0x1f8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d101      	bne.n	800530a <HAL_TIM_PWM_Start+0x142>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_TIM_PWM_Start+0x144>
 800530a:	2300      	movs	r3, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800531e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a22      	ldr	r2, [pc, #136]	@ (80053b0 <HAL_TIM_PWM_Start+0x1e8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01d      	beq.n	8005366 <HAL_TIM_PWM_Start+0x19e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005332:	d018      	beq.n	8005366 <HAL_TIM_PWM_Start+0x19e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a22      	ldr	r2, [pc, #136]	@ (80053c4 <HAL_TIM_PWM_Start+0x1fc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <HAL_TIM_PWM_Start+0x19e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a21      	ldr	r2, [pc, #132]	@ (80053c8 <HAL_TIM_PWM_Start+0x200>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_TIM_PWM_Start+0x19e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1f      	ldr	r2, [pc, #124]	@ (80053cc <HAL_TIM_PWM_Start+0x204>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_TIM_PWM_Start+0x19e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a17      	ldr	r2, [pc, #92]	@ (80053b4 <HAL_TIM_PWM_Start+0x1ec>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_TIM_PWM_Start+0x19e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a15      	ldr	r2, [pc, #84]	@ (80053b8 <HAL_TIM_PWM_Start+0x1f0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d115      	bne.n	8005392 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	4b18      	ldr	r3, [pc, #96]	@ (80053d0 <HAL_TIM_PWM_Start+0x208>)
 800536e:	4013      	ands	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b06      	cmp	r3, #6
 8005376:	d015      	beq.n	80053a4 <HAL_TIM_PWM_Start+0x1dc>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537e:	d011      	beq.n	80053a4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005390:	e008      	b.n	80053a4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e000      	b.n	80053a6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40013400 	.word	0x40013400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	00010007 	.word	0x00010007

080053d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2200      	movs	r2, #0
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fe7e 	bl	80060e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3e      	ldr	r2, [pc, #248]	@ (80054ec <HAL_TIM_PWM_Stop+0x118>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <HAL_TIM_PWM_Stop+0x4a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3d      	ldr	r2, [pc, #244]	@ (80054f0 <HAL_TIM_PWM_Stop+0x11c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00e      	beq.n	800541e <HAL_TIM_PWM_Stop+0x4a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3b      	ldr	r2, [pc, #236]	@ (80054f4 <HAL_TIM_PWM_Stop+0x120>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d009      	beq.n	800541e <HAL_TIM_PWM_Stop+0x4a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3a      	ldr	r2, [pc, #232]	@ (80054f8 <HAL_TIM_PWM_Stop+0x124>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d004      	beq.n	800541e <HAL_TIM_PWM_Stop+0x4a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a38      	ldr	r2, [pc, #224]	@ (80054fc <HAL_TIM_PWM_Stop+0x128>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d101      	bne.n	8005422 <HAL_TIM_PWM_Stop+0x4e>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <HAL_TIM_PWM_Stop+0x50>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10f      	bne.n	8005458 <HAL_TIM_PWM_Stop+0x84>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6a1a      	ldr	r2, [r3, #32]
 800543e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d107      	bne.n	8005458 <HAL_TIM_PWM_Stop+0x84>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005456:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10f      	bne.n	8005488 <HAL_TIM_PWM_Stop+0xb4>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d107      	bne.n	8005488 <HAL_TIM_PWM_Stop+0xb4>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <HAL_TIM_PWM_Stop+0xc4>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005496:	e023      	b.n	80054e0 <HAL_TIM_PWM_Stop+0x10c>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b04      	cmp	r3, #4
 800549c:	d104      	bne.n	80054a8 <HAL_TIM_PWM_Stop+0xd4>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a6:	e01b      	b.n	80054e0 <HAL_TIM_PWM_Stop+0x10c>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d104      	bne.n	80054b8 <HAL_TIM_PWM_Stop+0xe4>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b6:	e013      	b.n	80054e0 <HAL_TIM_PWM_Stop+0x10c>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	d104      	bne.n	80054c8 <HAL_TIM_PWM_Stop+0xf4>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054c6:	e00b      	b.n	80054e0 <HAL_TIM_PWM_Stop+0x10c>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d104      	bne.n	80054d8 <HAL_TIM_PWM_Stop+0x104>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054d6:	e003      	b.n	80054e0 <HAL_TIM_PWM_Stop+0x10c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40013400 	.word	0x40013400
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800

08005500 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800551a:	2302      	movs	r3, #2
 800551c:	e0ff      	b.n	800571e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b14      	cmp	r3, #20
 800552a:	f200 80f0 	bhi.w	800570e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800552e:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005589 	.word	0x08005589
 8005538:	0800570f 	.word	0x0800570f
 800553c:	0800570f 	.word	0x0800570f
 8005540:	0800570f 	.word	0x0800570f
 8005544:	080055c9 	.word	0x080055c9
 8005548:	0800570f 	.word	0x0800570f
 800554c:	0800570f 	.word	0x0800570f
 8005550:	0800570f 	.word	0x0800570f
 8005554:	0800560b 	.word	0x0800560b
 8005558:	0800570f 	.word	0x0800570f
 800555c:	0800570f 	.word	0x0800570f
 8005560:	0800570f 	.word	0x0800570f
 8005564:	0800564b 	.word	0x0800564b
 8005568:	0800570f 	.word	0x0800570f
 800556c:	0800570f 	.word	0x0800570f
 8005570:	0800570f 	.word	0x0800570f
 8005574:	0800568d 	.word	0x0800568d
 8005578:	0800570f 	.word	0x0800570f
 800557c:	0800570f 	.word	0x0800570f
 8005580:	0800570f 	.word	0x0800570f
 8005584:	080056cd 	.word	0x080056cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fa3a 	bl	8005a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0208 	orr.w	r2, r2, #8
 80055a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0204 	bic.w	r2, r2, #4
 80055b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6999      	ldr	r1, [r3, #24]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	619a      	str	r2, [r3, #24]
      break;
 80055c6:	e0a5      	b.n	8005714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 faaa 	bl	8005b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6999      	ldr	r1, [r3, #24]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	619a      	str	r2, [r3, #24]
      break;
 8005608:	e084      	b.n	8005714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fb13 	bl	8005c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0208 	orr.w	r2, r2, #8
 8005624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0204 	bic.w	r2, r2, #4
 8005634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69d9      	ldr	r1, [r3, #28]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	61da      	str	r2, [r3, #28]
      break;
 8005648:	e064      	b.n	8005714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fb7b 	bl	8005d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69d9      	ldr	r1, [r3, #28]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	021a      	lsls	r2, r3, #8
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	61da      	str	r2, [r3, #28]
      break;
 800568a:	e043      	b.n	8005714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fbc4 	bl	8005e20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0204 	bic.w	r2, r2, #4
 80056b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056ca:	e023      	b.n	8005714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fc08 	bl	8005ee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800570c:	e002      	b.n	8005714 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
      break;
 8005712:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800571c:	7dfb      	ldrb	r3, [r7, #23]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop

08005728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_TIM_ConfigClockSource+0x1c>
 8005740:	2302      	movs	r3, #2
 8005742:	e0b6      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x18a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005762:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800576e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005780:	d03e      	beq.n	8005800 <HAL_TIM_ConfigClockSource+0xd8>
 8005782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005786:	f200 8087 	bhi.w	8005898 <HAL_TIM_ConfigClockSource+0x170>
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800578e:	f000 8086 	beq.w	800589e <HAL_TIM_ConfigClockSource+0x176>
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005796:	d87f      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x170>
 8005798:	2b70      	cmp	r3, #112	@ 0x70
 800579a:	d01a      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0xaa>
 800579c:	2b70      	cmp	r3, #112	@ 0x70
 800579e:	d87b      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x170>
 80057a0:	2b60      	cmp	r3, #96	@ 0x60
 80057a2:	d050      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x11e>
 80057a4:	2b60      	cmp	r3, #96	@ 0x60
 80057a6:	d877      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x170>
 80057a8:	2b50      	cmp	r3, #80	@ 0x50
 80057aa:	d03c      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0xfe>
 80057ac:	2b50      	cmp	r3, #80	@ 0x50
 80057ae:	d873      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x170>
 80057b0:	2b40      	cmp	r3, #64	@ 0x40
 80057b2:	d058      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x13e>
 80057b4:	2b40      	cmp	r3, #64	@ 0x40
 80057b6:	d86f      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x170>
 80057b8:	2b30      	cmp	r3, #48	@ 0x30
 80057ba:	d064      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15e>
 80057bc:	2b30      	cmp	r3, #48	@ 0x30
 80057be:	d86b      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x170>
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d060      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15e>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d867      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x170>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d05c      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15e>
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d05a      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15e>
 80057d0:	e062      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057e2:	f000 fc61 	bl	80060a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	609a      	str	r2, [r3, #8]
      break;
 80057fe:	e04f      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005810:	f000 fc4a 	bl	80060a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005822:	609a      	str	r2, [r3, #8]
      break;
 8005824:	e03c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005832:	461a      	mov	r2, r3
 8005834:	f000 fbbe 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2150      	movs	r1, #80	@ 0x50
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fc17 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005844:	e02c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005852:	461a      	mov	r2, r3
 8005854:	f000 fbdd 	bl	8006012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2160      	movs	r1, #96	@ 0x60
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fc07 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005864:	e01c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	461a      	mov	r2, r3
 8005874:	f000 fb9e 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2140      	movs	r1, #64	@ 0x40
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fbf7 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005884:	e00c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f000 fbee 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005896:	e003      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
      break;
 800589c:	e000      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800589e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a46      	ldr	r2, [pc, #280]	@ (80059e8 <TIM_Base_SetConfig+0x12c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d013      	beq.n	80058fc <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058da:	d00f      	beq.n	80058fc <TIM_Base_SetConfig+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a43      	ldr	r2, [pc, #268]	@ (80059ec <TIM_Base_SetConfig+0x130>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00b      	beq.n	80058fc <TIM_Base_SetConfig+0x40>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a42      	ldr	r2, [pc, #264]	@ (80059f0 <TIM_Base_SetConfig+0x134>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d007      	beq.n	80058fc <TIM_Base_SetConfig+0x40>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a41      	ldr	r2, [pc, #260]	@ (80059f4 <TIM_Base_SetConfig+0x138>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0x40>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a40      	ldr	r2, [pc, #256]	@ (80059f8 <TIM_Base_SetConfig+0x13c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d108      	bne.n	800590e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a35      	ldr	r2, [pc, #212]	@ (80059e8 <TIM_Base_SetConfig+0x12c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01f      	beq.n	8005956 <TIM_Base_SetConfig+0x9a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591c:	d01b      	beq.n	8005956 <TIM_Base_SetConfig+0x9a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a32      	ldr	r2, [pc, #200]	@ (80059ec <TIM_Base_SetConfig+0x130>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d017      	beq.n	8005956 <TIM_Base_SetConfig+0x9a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a31      	ldr	r2, [pc, #196]	@ (80059f0 <TIM_Base_SetConfig+0x134>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <TIM_Base_SetConfig+0x9a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a30      	ldr	r2, [pc, #192]	@ (80059f4 <TIM_Base_SetConfig+0x138>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00f      	beq.n	8005956 <TIM_Base_SetConfig+0x9a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2f      	ldr	r2, [pc, #188]	@ (80059f8 <TIM_Base_SetConfig+0x13c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00b      	beq.n	8005956 <TIM_Base_SetConfig+0x9a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2e      	ldr	r2, [pc, #184]	@ (80059fc <TIM_Base_SetConfig+0x140>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d007      	beq.n	8005956 <TIM_Base_SetConfig+0x9a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2d      	ldr	r2, [pc, #180]	@ (8005a00 <TIM_Base_SetConfig+0x144>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d003      	beq.n	8005956 <TIM_Base_SetConfig+0x9a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2c      	ldr	r2, [pc, #176]	@ (8005a04 <TIM_Base_SetConfig+0x148>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d108      	bne.n	8005968 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a16      	ldr	r2, [pc, #88]	@ (80059e8 <TIM_Base_SetConfig+0x12c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00f      	beq.n	80059b4 <TIM_Base_SetConfig+0xf8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a18      	ldr	r2, [pc, #96]	@ (80059f8 <TIM_Base_SetConfig+0x13c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00b      	beq.n	80059b4 <TIM_Base_SetConfig+0xf8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a17      	ldr	r2, [pc, #92]	@ (80059fc <TIM_Base_SetConfig+0x140>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d007      	beq.n	80059b4 <TIM_Base_SetConfig+0xf8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a16      	ldr	r2, [pc, #88]	@ (8005a00 <TIM_Base_SetConfig+0x144>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <TIM_Base_SetConfig+0xf8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a15      	ldr	r2, [pc, #84]	@ (8005a04 <TIM_Base_SetConfig+0x148>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d103      	bne.n	80059bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d105      	bne.n	80059da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f023 0201 	bic.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]
  }
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40000400 	.word	0x40000400
 80059f0:	40000800 	.word	0x40000800
 80059f4:	40000c00 	.word	0x40000c00
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40014400 	.word	0x40014400
 8005a04:	40014800 	.word	0x40014800

08005a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f023 0201 	bic.w	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f023 0302 	bic.w	r3, r3, #2
 8005a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a2c      	ldr	r2, [pc, #176]	@ (8005b14 <TIM_OC1_SetConfig+0x10c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00f      	beq.n	8005a88 <TIM_OC1_SetConfig+0x80>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b18 <TIM_OC1_SetConfig+0x110>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_OC1_SetConfig+0x80>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a2a      	ldr	r2, [pc, #168]	@ (8005b1c <TIM_OC1_SetConfig+0x114>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_OC1_SetConfig+0x80>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a29      	ldr	r2, [pc, #164]	@ (8005b20 <TIM_OC1_SetConfig+0x118>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC1_SetConfig+0x80>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a28      	ldr	r2, [pc, #160]	@ (8005b24 <TIM_OC1_SetConfig+0x11c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10c      	bne.n	8005aa2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0308 	bic.w	r3, r3, #8
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b14 <TIM_OC1_SetConfig+0x10c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00f      	beq.n	8005aca <TIM_OC1_SetConfig+0xc2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a1a      	ldr	r2, [pc, #104]	@ (8005b18 <TIM_OC1_SetConfig+0x110>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00b      	beq.n	8005aca <TIM_OC1_SetConfig+0xc2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a19      	ldr	r2, [pc, #100]	@ (8005b1c <TIM_OC1_SetConfig+0x114>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d007      	beq.n	8005aca <TIM_OC1_SetConfig+0xc2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a18      	ldr	r2, [pc, #96]	@ (8005b20 <TIM_OC1_SetConfig+0x118>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_OC1_SetConfig+0xc2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a17      	ldr	r2, [pc, #92]	@ (8005b24 <TIM_OC1_SetConfig+0x11c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d111      	bne.n	8005aee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	621a      	str	r2, [r3, #32]
}
 8005b08:	bf00      	nop
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40013400 	.word	0x40013400
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40014400 	.word	0x40014400
 8005b24:	40014800 	.word	0x40014800

08005b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f023 0210 	bic.w	r2, r3, #16
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0320 	bic.w	r3, r3, #32
 8005b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a28      	ldr	r2, [pc, #160]	@ (8005c28 <TIM_OC2_SetConfig+0x100>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC2_SetConfig+0x6c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a27      	ldr	r2, [pc, #156]	@ (8005c2c <TIM_OC2_SetConfig+0x104>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10d      	bne.n	8005bb0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <TIM_OC2_SetConfig+0x100>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00f      	beq.n	8005bd8 <TIM_OC2_SetConfig+0xb0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a1c      	ldr	r2, [pc, #112]	@ (8005c2c <TIM_OC2_SetConfig+0x104>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <TIM_OC2_SetConfig+0xb0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c30 <TIM_OC2_SetConfig+0x108>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d007      	beq.n	8005bd8 <TIM_OC2_SetConfig+0xb0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a1a      	ldr	r2, [pc, #104]	@ (8005c34 <TIM_OC2_SetConfig+0x10c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_OC2_SetConfig+0xb0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a19      	ldr	r2, [pc, #100]	@ (8005c38 <TIM_OC2_SetConfig+0x110>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d113      	bne.n	8005c00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40012c00 	.word	0x40012c00
 8005c2c:	40013400 	.word	0x40013400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800

08005c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a27      	ldr	r2, [pc, #156]	@ (8005d38 <TIM_OC3_SetConfig+0xfc>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC3_SetConfig+0x6a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a26      	ldr	r2, [pc, #152]	@ (8005d3c <TIM_OC3_SetConfig+0x100>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d10d      	bne.n	8005cc2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d38 <TIM_OC3_SetConfig+0xfc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00f      	beq.n	8005cea <TIM_OC3_SetConfig+0xae>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d3c <TIM_OC3_SetConfig+0x100>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00b      	beq.n	8005cea <TIM_OC3_SetConfig+0xae>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d40 <TIM_OC3_SetConfig+0x104>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d007      	beq.n	8005cea <TIM_OC3_SetConfig+0xae>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a19      	ldr	r2, [pc, #100]	@ (8005d44 <TIM_OC3_SetConfig+0x108>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d003      	beq.n	8005cea <TIM_OC3_SetConfig+0xae>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a18      	ldr	r2, [pc, #96]	@ (8005d48 <TIM_OC3_SetConfig+0x10c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d113      	bne.n	8005d12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40013400 	.word	0x40013400
 8005d40:	40014000 	.word	0x40014000
 8005d44:	40014400 	.word	0x40014400
 8005d48:	40014800 	.word	0x40014800

08005d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	031b      	lsls	r3, r3, #12
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a18      	ldr	r2, [pc, #96]	@ (8005e0c <TIM_OC4_SetConfig+0xc0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00f      	beq.n	8005dd0 <TIM_OC4_SetConfig+0x84>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <TIM_OC4_SetConfig+0xc4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00b      	beq.n	8005dd0 <TIM_OC4_SetConfig+0x84>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a16      	ldr	r2, [pc, #88]	@ (8005e14 <TIM_OC4_SetConfig+0xc8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_OC4_SetConfig+0x84>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a15      	ldr	r2, [pc, #84]	@ (8005e18 <TIM_OC4_SetConfig+0xcc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC4_SetConfig+0x84>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a14      	ldr	r2, [pc, #80]	@ (8005e1c <TIM_OC4_SetConfig+0xd0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d109      	bne.n	8005de4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	019b      	lsls	r3, r3, #6
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40013400 	.word	0x40013400
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40014400 	.word	0x40014400
 8005e1c:	40014800 	.word	0x40014800

08005e20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a17      	ldr	r2, [pc, #92]	@ (8005ed4 <TIM_OC5_SetConfig+0xb4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_OC5_SetConfig+0x7a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	@ (8005ed8 <TIM_OC5_SetConfig+0xb8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_OC5_SetConfig+0x7a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <TIM_OC5_SetConfig+0xbc>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_OC5_SetConfig+0x7a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ee0 <TIM_OC5_SetConfig+0xc0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_OC5_SetConfig+0x7a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a13      	ldr	r2, [pc, #76]	@ (8005ee4 <TIM_OC5_SetConfig+0xc4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d109      	bne.n	8005eae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40013400 	.word	0x40013400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40014400 	.word	0x40014400
 8005ee4:	40014800 	.word	0x40014800

08005ee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	051b      	lsls	r3, r3, #20
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a18      	ldr	r2, [pc, #96]	@ (8005fa0 <TIM_OC6_SetConfig+0xb8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00f      	beq.n	8005f64 <TIM_OC6_SetConfig+0x7c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a17      	ldr	r2, [pc, #92]	@ (8005fa4 <TIM_OC6_SetConfig+0xbc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00b      	beq.n	8005f64 <TIM_OC6_SetConfig+0x7c>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a16      	ldr	r2, [pc, #88]	@ (8005fa8 <TIM_OC6_SetConfig+0xc0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d007      	beq.n	8005f64 <TIM_OC6_SetConfig+0x7c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a15      	ldr	r2, [pc, #84]	@ (8005fac <TIM_OC6_SetConfig+0xc4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_OC6_SetConfig+0x7c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a14      	ldr	r2, [pc, #80]	@ (8005fb0 <TIM_OC6_SetConfig+0xc8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d109      	bne.n	8005f78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	029b      	lsls	r3, r3, #10
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800

08005fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f023 0201 	bic.w	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 030a 	bic.w	r3, r3, #10
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f023 0210 	bic.w	r2, r3, #16
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800603c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	031b      	lsls	r3, r3, #12
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800604e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	f043 0307 	orr.w	r3, r3, #7
 8006094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	021a      	lsls	r2, r3, #8
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	609a      	str	r2, [r3, #8]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2201      	movs	r2, #1
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1a      	ldr	r2, [r3, #32]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	43db      	mvns	r3, r3
 800610a:	401a      	ands	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	431a      	orrs	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006148:	2302      	movs	r3, #2
 800614a:	e068      	b.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a2e      	ldr	r2, [pc, #184]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a2d      	ldr	r2, [pc, #180]	@ (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d108      	bne.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006186:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1e      	ldr	r2, [pc, #120]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01d      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061be:	d018      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00e      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a18      	ldr	r2, [pc, #96]	@ (800623c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d009      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a13      	ldr	r2, [pc, #76]	@ (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d004      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a14      	ldr	r2, [pc, #80]	@ (8006240 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10c      	bne.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4313      	orrs	r3, r2
 8006202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40013400 	.word	0x40013400
 8006234:	40000400 	.word	0x40000400
 8006238:	40000800 	.word	0x40000800
 800623c:	40000c00 	.word	0x40000c00
 8006240:	40014000 	.word	0x40014000

08006244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800625c:	2302      	movs	r3, #2
 800625e:	e065      	b.n	800632c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	041b      	lsls	r3, r3, #16
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a16      	ldr	r2, [pc, #88]	@ (8006338 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a14      	ldr	r2, [pc, #80]	@ (800633c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d115      	bne.n	800631a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	051b      	lsls	r3, r3, #20
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40013400 	.word	0x40013400

08006340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e040      	b.n	80063d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fc fd32 	bl	8002dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2224      	movs	r2, #36	@ 0x24
 800636c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fedc 	bl	8007144 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fc21 	bl	8006bd4 <UART_SetConfig>
 8006392:	4603      	mov	r3, r0
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e01b      	b.n	80063d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 ff5b 	bl	8007288 <UART_CheckIdleState>
 80063d2:	4603      	mov	r3, r0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	@ 0x28
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d177      	bne.n	80064e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Transmit+0x24>
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e070      	b.n	80064e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2221      	movs	r2, #33	@ 0x21
 8006410:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006412:	f7fc ff21 	bl	8003258 <HAL_GetTick>
 8006416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006430:	d108      	bne.n	8006444 <HAL_UART_Transmit+0x68>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	e003      	b.n	800644c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800644c:	e02f      	b.n	80064ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2200      	movs	r2, #0
 8006456:	2180      	movs	r1, #128	@ 0x80
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 ffbd 	bl	80073d8 <UART_WaitOnFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e03b      	b.n	80064e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	881a      	ldrh	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006480:	b292      	uxth	r2, r2
 8006482:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	3302      	adds	r3, #2
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	e007      	b.n	800649c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	3301      	adds	r3, #1
 800649a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1c9      	bne.n	800644e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	2140      	movs	r1, #64	@ 0x40
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 ff87 	bl	80073d8 <UART_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e005      	b.n	80064e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e000      	b.n	80064e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3720      	adds	r7, #32
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	@ 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006504:	2b20      	cmp	r3, #32
 8006506:	d137      	bne.n	8006578 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_UART_Receive_IT+0x24>
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e030      	b.n	800657a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a18      	ldr	r2, [pc, #96]	@ (8006584 <HAL_UART_Receive_IT+0x94>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d01f      	beq.n	8006568 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d018      	beq.n	8006568 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	613b      	str	r3, [r7, #16]
   return(result);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	623b      	str	r3, [r7, #32]
 8006556:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	69f9      	ldr	r1, [r7, #28]
 800655a:	6a3a      	ldr	r2, [r7, #32]
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	61bb      	str	r3, [r7, #24]
   return(result);
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e6      	bne.n	8006536 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	461a      	mov	r2, r3
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 ffa0 	bl	80074b4 <UART_Start_Receive_IT>
 8006574:	4603      	mov	r3, r0
 8006576:	e000      	b.n	800657a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006578:	2302      	movs	r3, #2
  }
}
 800657a:	4618      	mov	r0, r3
 800657c:	3728      	adds	r7, #40	@ 0x28
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40008000 	.word	0x40008000

08006588 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b0ba      	sub	sp, #232	@ 0xe8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80065b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80065b6:	4013      	ands	r3, r2
 80065b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d115      	bne.n	80065f0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00f      	beq.n	80065f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d009      	beq.n	80065f0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 82ca 	beq.w	8006b7a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4798      	blx	r3
      }
      return;
 80065ee:	e2c4      	b.n	8006b7a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80065f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8117 	beq.w	8006828 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006606:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800660a:	4b85      	ldr	r3, [pc, #532]	@ (8006820 <HAL_UART_IRQHandler+0x298>)
 800660c:	4013      	ands	r3, r2
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 810a 	beq.w	8006828 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d011      	beq.n	8006644 <HAL_UART_IRQHandler+0xbc>
 8006620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2201      	movs	r2, #1
 8006632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800663a:	f043 0201 	orr.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d011      	beq.n	8006674 <HAL_UART_IRQHandler+0xec>
 8006650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2202      	movs	r2, #2
 8006662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800666a:	f043 0204 	orr.w	r2, r3, #4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d011      	beq.n	80066a4 <HAL_UART_IRQHandler+0x11c>
 8006680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2204      	movs	r2, #4
 8006692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800669a:	f043 0202 	orr.w	r2, r3, #2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d017      	beq.n	80066e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2208      	movs	r2, #8
 80066ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066d6:	f043 0208 	orr.w	r2, r3, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d012      	beq.n	8006712 <HAL_UART_IRQHandler+0x18a>
 80066ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00c      	beq.n	8006712 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006700:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006708:	f043 0220 	orr.w	r2, r3, #32
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8230 	beq.w	8006b7e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00d      	beq.n	8006746 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800672a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800674c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675a:	2b40      	cmp	r3, #64	@ 0x40
 800675c:	d005      	beq.n	800676a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800675e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006762:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006766:	2b00      	cmp	r3, #0
 8006768:	d04f      	beq.n	800680a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 ff68 	bl	8007640 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677a:	2b40      	cmp	r3, #64	@ 0x40
 800677c:	d141      	bne.n	8006802 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3308      	adds	r3, #8
 8006784:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006794:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800679c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3308      	adds	r3, #8
 80067a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1d9      	bne.n	800677e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d013      	beq.n	80067fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d6:	4a13      	ldr	r2, [pc, #76]	@ (8006824 <HAL_UART_IRQHandler+0x29c>)
 80067d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fc fe95 	bl	800350e <HAL_DMA_Abort_IT>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d017      	beq.n	800681a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067f4:	4610      	mov	r0, r2
 80067f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f8:	e00f      	b.n	800681a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f9d4 	bl	8006ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	e00b      	b.n	800681a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f9d0 	bl	8006ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	e007      	b.n	800681a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f9cc 	bl	8006ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006818:	e1b1      	b.n	8006b7e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681a:	bf00      	nop
    return;
 800681c:	e1af      	b.n	8006b7e <HAL_UART_IRQHandler+0x5f6>
 800681e:	bf00      	nop
 8006820:	04000120 	.word	0x04000120
 8006824:	08007709 	.word	0x08007709

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800682c:	2b01      	cmp	r3, #1
 800682e:	f040 816a 	bne.w	8006b06 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 8163 	beq.w	8006b06 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 815c 	beq.w	8006b06 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2210      	movs	r2, #16
 8006854:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	f040 80d4 	bne.w	8006a0e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006872:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 80ad 	beq.w	80069d6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006886:	429a      	cmp	r2, r3
 8006888:	f080 80a5 	bcs.w	80069d6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006892:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 8086 	bne.w	80069b4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1da      	bne.n	80068a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006902:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3308      	adds	r3, #8
 8006912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006916:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800691a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800691e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e1      	bne.n	80068f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3308      	adds	r3, #8
 8006934:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800693e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006952:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006954:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006958:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e3      	bne.n	800692e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006984:	f023 0310 	bic.w	r3, r3, #16
 8006988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006996:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006998:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800699c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e4      	bne.n	8006974 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fc fd6f 	bl	8003492 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8f4 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80069d4:	e0d5      	b.n	8006b82 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069e0:	429a      	cmp	r2, r3
 80069e2:	f040 80ce 	bne.w	8006b82 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	f040 80c5 	bne.w	8006b82 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f8d8 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
      return;
 8006a0c:	e0b9      	b.n	8006b82 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 80ab 	beq.w	8006b86 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80a6 	beq.w	8006b86 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e4      	bne.n	8006a3a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3308      	adds	r3, #8
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	f023 0301 	bic.w	r3, r3, #1
 8006a86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3308      	adds	r3, #8
 8006a90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a94:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e3      	bne.n	8006a70 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f023 0310 	bic.w	r3, r3, #16
 8006ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	69b9      	ldr	r1, [r7, #24]
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	617b      	str	r3, [r7, #20]
   return(result);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e4      	bne.n	8006abc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2202      	movs	r2, #2
 8006af6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f85c 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b04:	e03f      	b.n	8006b86 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00e      	beq.n	8006b30 <HAL_UART_IRQHandler+0x5a8>
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d008      	beq.n	8006b30 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 ffe9 	bl	8007b00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b2e:	e02d      	b.n	8006b8c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00e      	beq.n	8006b5a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01c      	beq.n	8006b8a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
    }
    return;
 8006b58:	e017      	b.n	8006b8a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d012      	beq.n	8006b8c <HAL_UART_IRQHandler+0x604>
 8006b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00c      	beq.n	8006b8c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fdde 	bl	8007734 <UART_EndTransmit_IT>
    return;
 8006b78:	e008      	b.n	8006b8c <HAL_UART_IRQHandler+0x604>
      return;
 8006b7a:	bf00      	nop
 8006b7c:	e006      	b.n	8006b8c <HAL_UART_IRQHandler+0x604>
    return;
 8006b7e:	bf00      	nop
 8006b80:	e004      	b.n	8006b8c <HAL_UART_IRQHandler+0x604>
      return;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <HAL_UART_IRQHandler+0x604>
      return;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <HAL_UART_IRQHandler+0x604>
    return;
 8006b8a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b8c:	37e8      	adds	r7, #232	@ 0xe8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop

08006b94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd8:	b08a      	sub	sp, #40	@ 0x28
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	431a      	orrs	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4ba4      	ldr	r3, [pc, #656]	@ (8006e94 <UART_SetConfig+0x2c0>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a99      	ldr	r2, [pc, #612]	@ (8006e98 <UART_SetConfig+0x2c4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	430a      	orrs	r2, r1
 8006c52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a90      	ldr	r2, [pc, #576]	@ (8006e9c <UART_SetConfig+0x2c8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d126      	bne.n	8006cac <UART_SetConfig+0xd8>
 8006c5e:	4b90      	ldr	r3, [pc, #576]	@ (8006ea0 <UART_SetConfig+0x2cc>)
 8006c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d81b      	bhi.n	8006ca4 <UART_SetConfig+0xd0>
 8006c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c74 <UART_SetConfig+0xa0>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006c95 	.word	0x08006c95
 8006c7c:	08006c8d 	.word	0x08006c8d
 8006c80:	08006c9d 	.word	0x08006c9d
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c8a:	e116      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c92:	e112      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006c94:	2304      	movs	r3, #4
 8006c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c9a:	e10e      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ca2:	e10a      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006caa:	e106      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a7c      	ldr	r2, [pc, #496]	@ (8006ea4 <UART_SetConfig+0x2d0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d138      	bne.n	8006d28 <UART_SetConfig+0x154>
 8006cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ea0 <UART_SetConfig+0x2cc>)
 8006cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cbc:	f003 030c 	and.w	r3, r3, #12
 8006cc0:	2b0c      	cmp	r3, #12
 8006cc2:	d82d      	bhi.n	8006d20 <UART_SetConfig+0x14c>
 8006cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ccc <UART_SetConfig+0xf8>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006d01 	.word	0x08006d01
 8006cd0:	08006d21 	.word	0x08006d21
 8006cd4:	08006d21 	.word	0x08006d21
 8006cd8:	08006d21 	.word	0x08006d21
 8006cdc:	08006d11 	.word	0x08006d11
 8006ce0:	08006d21 	.word	0x08006d21
 8006ce4:	08006d21 	.word	0x08006d21
 8006ce8:	08006d21 	.word	0x08006d21
 8006cec:	08006d09 	.word	0x08006d09
 8006cf0:	08006d21 	.word	0x08006d21
 8006cf4:	08006d21 	.word	0x08006d21
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d19 	.word	0x08006d19
 8006d00:	2300      	movs	r3, #0
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d06:	e0d8      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d0e:	e0d4      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d10:	2304      	movs	r3, #4
 8006d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d16:	e0d0      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d1e:	e0cc      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d20:	2310      	movs	r3, #16
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d26:	e0c8      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ea8 <UART_SetConfig+0x2d4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d125      	bne.n	8006d7e <UART_SetConfig+0x1aa>
 8006d32:	4b5b      	ldr	r3, [pc, #364]	@ (8006ea0 <UART_SetConfig+0x2cc>)
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d3c:	2b30      	cmp	r3, #48	@ 0x30
 8006d3e:	d016      	beq.n	8006d6e <UART_SetConfig+0x19a>
 8006d40:	2b30      	cmp	r3, #48	@ 0x30
 8006d42:	d818      	bhi.n	8006d76 <UART_SetConfig+0x1a2>
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d00a      	beq.n	8006d5e <UART_SetConfig+0x18a>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d814      	bhi.n	8006d76 <UART_SetConfig+0x1a2>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <UART_SetConfig+0x182>
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d008      	beq.n	8006d66 <UART_SetConfig+0x192>
 8006d54:	e00f      	b.n	8006d76 <UART_SetConfig+0x1a2>
 8006d56:	2300      	movs	r3, #0
 8006d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d5c:	e0ad      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d64:	e0a9      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d66:	2304      	movs	r3, #4
 8006d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6c:	e0a5      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d6e:	2308      	movs	r3, #8
 8006d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d74:	e0a1      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d76:	2310      	movs	r3, #16
 8006d78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d7c:	e09d      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a4a      	ldr	r2, [pc, #296]	@ (8006eac <UART_SetConfig+0x2d8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d125      	bne.n	8006dd4 <UART_SetConfig+0x200>
 8006d88:	4b45      	ldr	r3, [pc, #276]	@ (8006ea0 <UART_SetConfig+0x2cc>)
 8006d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d92:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d94:	d016      	beq.n	8006dc4 <UART_SetConfig+0x1f0>
 8006d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d98:	d818      	bhi.n	8006dcc <UART_SetConfig+0x1f8>
 8006d9a:	2b80      	cmp	r3, #128	@ 0x80
 8006d9c:	d00a      	beq.n	8006db4 <UART_SetConfig+0x1e0>
 8006d9e:	2b80      	cmp	r3, #128	@ 0x80
 8006da0:	d814      	bhi.n	8006dcc <UART_SetConfig+0x1f8>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <UART_SetConfig+0x1d8>
 8006da6:	2b40      	cmp	r3, #64	@ 0x40
 8006da8:	d008      	beq.n	8006dbc <UART_SetConfig+0x1e8>
 8006daa:	e00f      	b.n	8006dcc <UART_SetConfig+0x1f8>
 8006dac:	2300      	movs	r3, #0
 8006dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006db2:	e082      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006db4:	2302      	movs	r3, #2
 8006db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dba:	e07e      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc2:	e07a      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006dc4:	2308      	movs	r3, #8
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dca:	e076      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006dcc:	2310      	movs	r3, #16
 8006dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd2:	e072      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a35      	ldr	r2, [pc, #212]	@ (8006eb0 <UART_SetConfig+0x2dc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d12a      	bne.n	8006e34 <UART_SetConfig+0x260>
 8006dde:	4b30      	ldr	r3, [pc, #192]	@ (8006ea0 <UART_SetConfig+0x2cc>)
 8006de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dec:	d01a      	beq.n	8006e24 <UART_SetConfig+0x250>
 8006dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006df2:	d81b      	bhi.n	8006e2c <UART_SetConfig+0x258>
 8006df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df8:	d00c      	beq.n	8006e14 <UART_SetConfig+0x240>
 8006dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dfe:	d815      	bhi.n	8006e2c <UART_SetConfig+0x258>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <UART_SetConfig+0x238>
 8006e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e08:	d008      	beq.n	8006e1c <UART_SetConfig+0x248>
 8006e0a:	e00f      	b.n	8006e2c <UART_SetConfig+0x258>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e12:	e052      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e14:	2302      	movs	r3, #2
 8006e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e1a:	e04e      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e22:	e04a      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e24:	2308      	movs	r3, #8
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2a:	e046      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e2c:	2310      	movs	r3, #16
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e32:	e042      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a17      	ldr	r2, [pc, #92]	@ (8006e98 <UART_SetConfig+0x2c4>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d13a      	bne.n	8006eb4 <UART_SetConfig+0x2e0>
 8006e3e:	4b18      	ldr	r3, [pc, #96]	@ (8006ea0 <UART_SetConfig+0x2cc>)
 8006e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e4c:	d01a      	beq.n	8006e84 <UART_SetConfig+0x2b0>
 8006e4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e52:	d81b      	bhi.n	8006e8c <UART_SetConfig+0x2b8>
 8006e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e58:	d00c      	beq.n	8006e74 <UART_SetConfig+0x2a0>
 8006e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e5e:	d815      	bhi.n	8006e8c <UART_SetConfig+0x2b8>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <UART_SetConfig+0x298>
 8006e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e68:	d008      	beq.n	8006e7c <UART_SetConfig+0x2a8>
 8006e6a:	e00f      	b.n	8006e8c <UART_SetConfig+0x2b8>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e72:	e022      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e74:	2302      	movs	r3, #2
 8006e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7a:	e01e      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e82:	e01a      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e84:	2308      	movs	r3, #8
 8006e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8a:	e016      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e92:	e012      	b.n	8006eba <UART_SetConfig+0x2e6>
 8006e94:	efff69f3 	.word	0xefff69f3
 8006e98:	40008000 	.word	0x40008000
 8006e9c:	40013800 	.word	0x40013800
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	40004400 	.word	0x40004400
 8006ea8:	40004800 	.word	0x40004800
 8006eac:	40004c00 	.word	0x40004c00
 8006eb0:	40005000 	.word	0x40005000
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a9f      	ldr	r2, [pc, #636]	@ (800713c <UART_SetConfig+0x568>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d17a      	bne.n	8006fba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d824      	bhi.n	8006f16 <UART_SetConfig+0x342>
 8006ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed4 <UART_SetConfig+0x300>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006ef9 	.word	0x08006ef9
 8006ed8:	08006f17 	.word	0x08006f17
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f17 	.word	0x08006f17
 8006ee4:	08006f07 	.word	0x08006f07
 8006ee8:	08006f17 	.word	0x08006f17
 8006eec:	08006f17 	.word	0x08006f17
 8006ef0:	08006f17 	.word	0x08006f17
 8006ef4:	08006f0f 	.word	0x08006f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef8:	f7fd fafc 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 8006efc:	61f8      	str	r0, [r7, #28]
        break;
 8006efe:	e010      	b.n	8006f22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f00:	4b8f      	ldr	r3, [pc, #572]	@ (8007140 <UART_SetConfig+0x56c>)
 8006f02:	61fb      	str	r3, [r7, #28]
        break;
 8006f04:	e00d      	b.n	8006f22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f06:	f7fd fa5d 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8006f0a:	61f8      	str	r0, [r7, #28]
        break;
 8006f0c:	e009      	b.n	8006f22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f12:	61fb      	str	r3, [r7, #28]
        break;
 8006f14:	e005      	b.n	8006f22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80fb 	beq.w	8007120 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	4413      	add	r3, r2
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d305      	bcc.n	8006f46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d903      	bls.n	8006f4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f4c:	e0e8      	b.n	8007120 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	2200      	movs	r2, #0
 8006f52:	461c      	mov	r4, r3
 8006f54:	4615      	mov	r5, r2
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	022b      	lsls	r3, r5, #8
 8006f60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f64:	0222      	lsls	r2, r4, #8
 8006f66:	68f9      	ldr	r1, [r7, #12]
 8006f68:	6849      	ldr	r1, [r1, #4]
 8006f6a:	0849      	lsrs	r1, r1, #1
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	4688      	mov	r8, r1
 8006f70:	4681      	mov	r9, r0
 8006f72:	eb12 0a08 	adds.w	sl, r2, r8
 8006f76:	eb43 0b09 	adc.w	fp, r3, r9
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	603b      	str	r3, [r7, #0]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f88:	4650      	mov	r0, sl
 8006f8a:	4659      	mov	r1, fp
 8006f8c:	f7f9 fe1c 	bl	8000bc8 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4613      	mov	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f9e:	d308      	bcc.n	8006fb2 <UART_SetConfig+0x3de>
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa6:	d204      	bcs.n	8006fb2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	60da      	str	r2, [r3, #12]
 8006fb0:	e0b6      	b.n	8007120 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fb8:	e0b2      	b.n	8007120 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc2:	d15e      	bne.n	8007082 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d828      	bhi.n	800701e <UART_SetConfig+0x44a>
 8006fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd4 <UART_SetConfig+0x400>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	08007001 	.word	0x08007001
 8006fdc:	08007009 	.word	0x08007009
 8006fe0:	0800701f 	.word	0x0800701f
 8006fe4:	0800700f 	.word	0x0800700f
 8006fe8:	0800701f 	.word	0x0800701f
 8006fec:	0800701f 	.word	0x0800701f
 8006ff0:	0800701f 	.word	0x0800701f
 8006ff4:	08007017 	.word	0x08007017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff8:	f7fd fa7c 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 8006ffc:	61f8      	str	r0, [r7, #28]
        break;
 8006ffe:	e014      	b.n	800702a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007000:	f7fd fa8e 	bl	8004520 <HAL_RCC_GetPCLK2Freq>
 8007004:	61f8      	str	r0, [r7, #28]
        break;
 8007006:	e010      	b.n	800702a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007008:	4b4d      	ldr	r3, [pc, #308]	@ (8007140 <UART_SetConfig+0x56c>)
 800700a:	61fb      	str	r3, [r7, #28]
        break;
 800700c:	e00d      	b.n	800702a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800700e:	f7fd f9d9 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8007012:	61f8      	str	r0, [r7, #28]
        break;
 8007014:	e009      	b.n	800702a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800701a:	61fb      	str	r3, [r7, #28]
        break;
 800701c:	e005      	b.n	800702a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d077      	beq.n	8007120 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	005a      	lsls	r2, r3, #1
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	441a      	add	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	fbb2 f3f3 	udiv	r3, r2, r3
 8007044:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b0f      	cmp	r3, #15
 800704a:	d916      	bls.n	800707a <UART_SetConfig+0x4a6>
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007052:	d212      	bcs.n	800707a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f023 030f 	bic.w	r3, r3, #15
 800705c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	b29b      	uxth	r3, r3
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	b29a      	uxth	r2, r3
 800706a:	8afb      	ldrh	r3, [r7, #22]
 800706c:	4313      	orrs	r3, r2
 800706e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	8afa      	ldrh	r2, [r7, #22]
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	e052      	b.n	8007120 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007080:	e04e      	b.n	8007120 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007082:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007086:	2b08      	cmp	r3, #8
 8007088:	d827      	bhi.n	80070da <UART_SetConfig+0x506>
 800708a:	a201      	add	r2, pc, #4	@ (adr r2, 8007090 <UART_SetConfig+0x4bc>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	080070b5 	.word	0x080070b5
 8007094:	080070bd 	.word	0x080070bd
 8007098:	080070c5 	.word	0x080070c5
 800709c:	080070db 	.word	0x080070db
 80070a0:	080070cb 	.word	0x080070cb
 80070a4:	080070db 	.word	0x080070db
 80070a8:	080070db 	.word	0x080070db
 80070ac:	080070db 	.word	0x080070db
 80070b0:	080070d3 	.word	0x080070d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b4:	f7fd fa1e 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 80070b8:	61f8      	str	r0, [r7, #28]
        break;
 80070ba:	e014      	b.n	80070e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070bc:	f7fd fa30 	bl	8004520 <HAL_RCC_GetPCLK2Freq>
 80070c0:	61f8      	str	r0, [r7, #28]
        break;
 80070c2:	e010      	b.n	80070e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c4:	4b1e      	ldr	r3, [pc, #120]	@ (8007140 <UART_SetConfig+0x56c>)
 80070c6:	61fb      	str	r3, [r7, #28]
        break;
 80070c8:	e00d      	b.n	80070e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ca:	f7fd f97b 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 80070ce:	61f8      	str	r0, [r7, #28]
        break;
 80070d0:	e009      	b.n	80070e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070d6:	61fb      	str	r3, [r7, #28]
        break;
 80070d8:	e005      	b.n	80070e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070e4:	bf00      	nop
    }

    if (pclk != 0U)
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d019      	beq.n	8007120 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	085a      	lsrs	r2, r3, #1
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	441a      	add	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b0f      	cmp	r3, #15
 8007104:	d909      	bls.n	800711a <UART_SetConfig+0x546>
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800710c:	d205      	bcs.n	800711a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60da      	str	r2, [r3, #12]
 8007118:	e002      	b.n	8007120 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800712c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007130:	4618      	mov	r0, r3
 8007132:	3728      	adds	r7, #40	@ 0x28
 8007134:	46bd      	mov	sp, r7
 8007136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713a:	bf00      	nop
 800713c:	40008000 	.word	0x40008000
 8007140:	00f42400 	.word	0x00f42400

08007144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00a      	beq.n	800716e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01a      	beq.n	800725a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007242:	d10a      	bne.n	800725a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
  }
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b098      	sub	sp, #96	@ 0x60
 800728c:	af02      	add	r7, sp, #8
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007298:	f7fb ffde 	bl	8003258 <HAL_GetTick>
 800729c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d12e      	bne.n	800730a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b4:	2200      	movs	r2, #0
 80072b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f88c 	bl	80073d8 <UART_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d021      	beq.n	800730a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072da:	653b      	str	r3, [r7, #80]	@ 0x50
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e062      	b.n	80073d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b04      	cmp	r3, #4
 8007316:	d149      	bne.n	80073ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007318:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007320:	2200      	movs	r2, #0
 8007322:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f856 	bl	80073d8 <UART_WaitOnFlagUntilTimeout>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d03c      	beq.n	80073ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	623b      	str	r3, [r7, #32]
   return(result);
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007350:	633b      	str	r3, [r7, #48]	@ 0x30
 8007352:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e6      	bne.n	8007332 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	60fb      	str	r3, [r7, #12]
   return(result);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0301 	bic.w	r3, r3, #1
 800737a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3308      	adds	r3, #8
 8007382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007384:	61fa      	str	r2, [r7, #28]
 8007386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	69b9      	ldr	r1, [r7, #24]
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	617b      	str	r3, [r7, #20]
   return(result);
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e5      	bne.n	8007364 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e011      	b.n	80073d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3758      	adds	r7, #88	@ 0x58
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e8:	e04f      	b.n	800748a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f0:	d04b      	beq.n	800748a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f2:	f7fb ff31 	bl	8003258 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d302      	bcc.n	8007408 <UART_WaitOnFlagUntilTimeout+0x30>
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e04e      	b.n	80074aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	d037      	beq.n	800748a <UART_WaitOnFlagUntilTimeout+0xb2>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b80      	cmp	r3, #128	@ 0x80
 800741e:	d034      	beq.n	800748a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b40      	cmp	r3, #64	@ 0x40
 8007424:	d031      	beq.n	800748a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b08      	cmp	r3, #8
 8007432:	d110      	bne.n	8007456 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2208      	movs	r2, #8
 800743a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f8ff 	bl	8007640 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2208      	movs	r2, #8
 8007446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e029      	b.n	80074aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007464:	d111      	bne.n	800748a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800746e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f8e5 	bl	8007640 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2220      	movs	r2, #32
 800747a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e00f      	b.n	80074aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4013      	ands	r3, r2
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	429a      	cmp	r2, r3
 8007498:	bf0c      	ite	eq
 800749a:	2301      	moveq	r3, #1
 800749c:	2300      	movne	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d0a0      	beq.n	80073ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b097      	sub	sp, #92	@ 0x5c
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e6:	d10e      	bne.n	8007506 <UART_Start_Receive_IT+0x52>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d105      	bne.n	80074fc <UART_Start_Receive_IT+0x48>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074fa:	e02d      	b.n	8007558 <UART_Start_Receive_IT+0xa4>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	22ff      	movs	r2, #255	@ 0xff
 8007500:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007504:	e028      	b.n	8007558 <UART_Start_Receive_IT+0xa4>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10d      	bne.n	800752a <UART_Start_Receive_IT+0x76>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d104      	bne.n	8007520 <UART_Start_Receive_IT+0x6c>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	22ff      	movs	r2, #255	@ 0xff
 800751a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800751e:	e01b      	b.n	8007558 <UART_Start_Receive_IT+0xa4>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	227f      	movs	r2, #127	@ 0x7f
 8007524:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007528:	e016      	b.n	8007558 <UART_Start_Receive_IT+0xa4>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007532:	d10d      	bne.n	8007550 <UART_Start_Receive_IT+0x9c>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <UART_Start_Receive_IT+0x92>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	227f      	movs	r2, #127	@ 0x7f
 8007540:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007544:	e008      	b.n	8007558 <UART_Start_Receive_IT+0xa4>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	223f      	movs	r2, #63	@ 0x3f
 800754a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800754e:	e003      	b.n	8007558 <UART_Start_Receive_IT+0xa4>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2222      	movs	r2, #34	@ 0x22
 8007564:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3308      	adds	r3, #8
 800756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	f043 0301 	orr.w	r3, r3, #1
 800757e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3308      	adds	r3, #8
 8007586:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007588:	64ba      	str	r2, [r7, #72]	@ 0x48
 800758a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800758e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e5      	bne.n	8007568 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a4:	d107      	bne.n	80075b6 <UART_Start_Receive_IT+0x102>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d103      	bne.n	80075b6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4a21      	ldr	r2, [pc, #132]	@ (8007638 <UART_Start_Receive_IT+0x184>)
 80075b2:	669a      	str	r2, [r3, #104]	@ 0x68
 80075b4:	e002      	b.n	80075bc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4a20      	ldr	r2, [pc, #128]	@ (800763c <UART_Start_Receive_IT+0x188>)
 80075ba:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d019      	beq.n	80075f8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80075d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80075f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e6      	bne.n	80075c4 <UART_Start_Receive_IT+0x110>
 80075f6:	e018      	b.n	800762a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	613b      	str	r3, [r7, #16]
   return(result);
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f043 0320 	orr.w	r3, r3, #32
 800760c:	653b      	str	r3, [r7, #80]	@ 0x50
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007616:	623b      	str	r3, [r7, #32]
 8007618:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	69f9      	ldr	r1, [r7, #28]
 800761c:	6a3a      	ldr	r2, [r7, #32]
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	61bb      	str	r3, [r7, #24]
   return(result);
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e6      	bne.n	80075f8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	375c      	adds	r7, #92	@ 0x5c
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	08007945 	.word	0x08007945
 800763c:	08007789 	.word	0x08007789

08007640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007640:	b480      	push	{r7}
 8007642:	b095      	sub	sp, #84	@ 0x54
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800765c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007666:	643b      	str	r3, [r7, #64]	@ 0x40
 8007668:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800766c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e6      	bne.n	8007648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3308      	adds	r3, #8
 8007680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	61fb      	str	r3, [r7, #28]
   return(result);
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f023 0301 	bic.w	r3, r3, #1
 8007690:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800769a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800769c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e5      	bne.n	800767a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d118      	bne.n	80076e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f023 0310 	bic.w	r3, r3, #16
 80076ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6979      	ldr	r1, [r7, #20]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	613b      	str	r3, [r7, #16]
   return(result);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e6      	bne.n	80076b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80076fc:	bf00      	nop
 80076fe:	3754      	adds	r7, #84	@ 0x54
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff fa3e 	bl	8006ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800772c:	bf00      	nop
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	60bb      	str	r3, [r7, #8]
   return(result);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007750:	61fb      	str	r3, [r7, #28]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6979      	ldr	r1, [r7, #20]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	613b      	str	r3, [r7, #16]
   return(result);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e6      	bne.n	800773c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff fa0a 	bl	8006b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007780:	bf00      	nop
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b09c      	sub	sp, #112	@ 0x70
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007796:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077a0:	2b22      	cmp	r3, #34	@ 0x22
 80077a2:	f040 80be 	bne.w	8007922 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80077ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80077b4:	b2d9      	uxtb	r1, r3
 80077b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c0:	400a      	ands	r2, r1
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 80a3 	bne.w	8007936 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800780e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007810:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007814:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800781c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e6      	bne.n	80077f0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3308      	adds	r3, #8
 8007828:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782c:	e853 3f00 	ldrex	r3, [r3]
 8007830:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	667b      	str	r3, [r7, #100]	@ 0x64
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007842:	647a      	str	r2, [r7, #68]	@ 0x44
 8007844:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e5      	bne.n	8007822 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a34      	ldr	r2, [pc, #208]	@ (8007940 <UART_RxISR_8BIT+0x1b8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d01f      	beq.n	80078b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d018      	beq.n	80078b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	623b      	str	r3, [r7, #32]
   return(result);
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007896:	663b      	str	r3, [r7, #96]	@ 0x60
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80078a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e6      	bne.n	8007882 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d12e      	bne.n	800791a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0310 	bic.w	r3, r3, #16
 80078d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078e0:	61fb      	str	r3, [r7, #28]
 80078e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	69b9      	ldr	r1, [r7, #24]
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	617b      	str	r3, [r7, #20]
   return(result);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e6      	bne.n	80078c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f003 0310 	and.w	r3, r3, #16
 80078fe:	2b10      	cmp	r3, #16
 8007900:	d103      	bne.n	800790a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2210      	movs	r2, #16
 8007908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff f952 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007918:	e00d      	b.n	8007936 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7f9 facc 	bl	8000eb8 <HAL_UART_RxCpltCallback>
}
 8007920:	e009      	b.n	8007936 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	8b1b      	ldrh	r3, [r3, #24]
 8007928:	b29a      	uxth	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0208 	orr.w	r2, r2, #8
 8007932:	b292      	uxth	r2, r2
 8007934:	831a      	strh	r2, [r3, #24]
}
 8007936:	bf00      	nop
 8007938:	3770      	adds	r7, #112	@ 0x70
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	40008000 	.word	0x40008000

08007944 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b09c      	sub	sp, #112	@ 0x70
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007952:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800795c:	2b22      	cmp	r3, #34	@ 0x22
 800795e:	f040 80be 	bne.w	8007ade <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007968:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007970:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007972:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007976:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800797a:	4013      	ands	r3, r2
 800797c:	b29a      	uxth	r2, r3
 800797e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007980:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007986:	1c9a      	adds	r2, r3, #2
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f040 80a3 	bne.w	8007af2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80079cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e6      	bne.n	80079ac <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3308      	adds	r3, #8
 80079e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f0:	f023 0301 	bic.w	r3, r3, #1
 80079f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e5      	bne.n	80079de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a34      	ldr	r2, [pc, #208]	@ (8007afc <UART_RxISR_16BIT+0x1b8>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d01f      	beq.n	8007a70 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d018      	beq.n	8007a70 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a5e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d12e      	bne.n	8007ad6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f023 0310 	bic.w	r3, r3, #16
 8007a92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6979      	ldr	r1, [r7, #20]
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f003 0310 	and.w	r3, r3, #16
 8007aba:	2b10      	cmp	r3, #16
 8007abc:	d103      	bne.n	8007ac6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2210      	movs	r2, #16
 8007ac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff f874 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ad4:	e00d      	b.n	8007af2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7f9 f9ee 	bl	8000eb8 <HAL_UART_RxCpltCallback>
}
 8007adc:	e009      	b.n	8007af2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	8b1b      	ldrh	r3, [r3, #24]
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0208 	orr.w	r2, r2, #8
 8007aee:	b292      	uxth	r2, r2
 8007af0:	831a      	strh	r2, [r3, #24]
}
 8007af2:	bf00      	nop
 8007af4:	3770      	adds	r7, #112	@ 0x70
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40008000 	.word	0x40008000

08007b00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <atoi>:
 8007b14:	220a      	movs	r2, #10
 8007b16:	2100      	movs	r1, #0
 8007b18:	f000 b87a 	b.w	8007c10 <strtol>

08007b1c <_strtol_l.constprop.0>:
 8007b1c:	2b24      	cmp	r3, #36	@ 0x24
 8007b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b22:	4686      	mov	lr, r0
 8007b24:	4690      	mov	r8, r2
 8007b26:	d801      	bhi.n	8007b2c <_strtol_l.constprop.0+0x10>
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d106      	bne.n	8007b3a <_strtol_l.constprop.0+0x1e>
 8007b2c:	f000 fecc 	bl	80088c8 <__errno>
 8007b30:	2316      	movs	r3, #22
 8007b32:	6003      	str	r3, [r0, #0]
 8007b34:	2000      	movs	r0, #0
 8007b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3a:	4834      	ldr	r0, [pc, #208]	@ (8007c0c <_strtol_l.constprop.0+0xf0>)
 8007b3c:	460d      	mov	r5, r1
 8007b3e:	462a      	mov	r2, r5
 8007b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b44:	5d06      	ldrb	r6, [r0, r4]
 8007b46:	f016 0608 	ands.w	r6, r6, #8
 8007b4a:	d1f8      	bne.n	8007b3e <_strtol_l.constprop.0+0x22>
 8007b4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007b4e:	d12d      	bne.n	8007bac <_strtol_l.constprop.0+0x90>
 8007b50:	782c      	ldrb	r4, [r5, #0]
 8007b52:	2601      	movs	r6, #1
 8007b54:	1c95      	adds	r5, r2, #2
 8007b56:	f033 0210 	bics.w	r2, r3, #16
 8007b5a:	d109      	bne.n	8007b70 <_strtol_l.constprop.0+0x54>
 8007b5c:	2c30      	cmp	r4, #48	@ 0x30
 8007b5e:	d12a      	bne.n	8007bb6 <_strtol_l.constprop.0+0x9a>
 8007b60:	782a      	ldrb	r2, [r5, #0]
 8007b62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b66:	2a58      	cmp	r2, #88	@ 0x58
 8007b68:	d125      	bne.n	8007bb6 <_strtol_l.constprop.0+0x9a>
 8007b6a:	786c      	ldrb	r4, [r5, #1]
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	3502      	adds	r5, #2
 8007b70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007b74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b78:	2200      	movs	r2, #0
 8007b7a:	fbbc f9f3 	udiv	r9, ip, r3
 8007b7e:	4610      	mov	r0, r2
 8007b80:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007b88:	2f09      	cmp	r7, #9
 8007b8a:	d81b      	bhi.n	8007bc4 <_strtol_l.constprop.0+0xa8>
 8007b8c:	463c      	mov	r4, r7
 8007b8e:	42a3      	cmp	r3, r4
 8007b90:	dd27      	ble.n	8007be2 <_strtol_l.constprop.0+0xc6>
 8007b92:	1c57      	adds	r7, r2, #1
 8007b94:	d007      	beq.n	8007ba6 <_strtol_l.constprop.0+0x8a>
 8007b96:	4581      	cmp	r9, r0
 8007b98:	d320      	bcc.n	8007bdc <_strtol_l.constprop.0+0xc0>
 8007b9a:	d101      	bne.n	8007ba0 <_strtol_l.constprop.0+0x84>
 8007b9c:	45a2      	cmp	sl, r4
 8007b9e:	db1d      	blt.n	8007bdc <_strtol_l.constprop.0+0xc0>
 8007ba0:	fb00 4003 	mla	r0, r0, r3, r4
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007baa:	e7eb      	b.n	8007b84 <_strtol_l.constprop.0+0x68>
 8007bac:	2c2b      	cmp	r4, #43	@ 0x2b
 8007bae:	bf04      	itt	eq
 8007bb0:	782c      	ldrbeq	r4, [r5, #0]
 8007bb2:	1c95      	addeq	r5, r2, #2
 8007bb4:	e7cf      	b.n	8007b56 <_strtol_l.constprop.0+0x3a>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1da      	bne.n	8007b70 <_strtol_l.constprop.0+0x54>
 8007bba:	2c30      	cmp	r4, #48	@ 0x30
 8007bbc:	bf0c      	ite	eq
 8007bbe:	2308      	moveq	r3, #8
 8007bc0:	230a      	movne	r3, #10
 8007bc2:	e7d5      	b.n	8007b70 <_strtol_l.constprop.0+0x54>
 8007bc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007bc8:	2f19      	cmp	r7, #25
 8007bca:	d801      	bhi.n	8007bd0 <_strtol_l.constprop.0+0xb4>
 8007bcc:	3c37      	subs	r4, #55	@ 0x37
 8007bce:	e7de      	b.n	8007b8e <_strtol_l.constprop.0+0x72>
 8007bd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007bd4:	2f19      	cmp	r7, #25
 8007bd6:	d804      	bhi.n	8007be2 <_strtol_l.constprop.0+0xc6>
 8007bd8:	3c57      	subs	r4, #87	@ 0x57
 8007bda:	e7d8      	b.n	8007b8e <_strtol_l.constprop.0+0x72>
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007be0:	e7e1      	b.n	8007ba6 <_strtol_l.constprop.0+0x8a>
 8007be2:	1c53      	adds	r3, r2, #1
 8007be4:	d108      	bne.n	8007bf8 <_strtol_l.constprop.0+0xdc>
 8007be6:	2322      	movs	r3, #34	@ 0x22
 8007be8:	f8ce 3000 	str.w	r3, [lr]
 8007bec:	4660      	mov	r0, ip
 8007bee:	f1b8 0f00 	cmp.w	r8, #0
 8007bf2:	d0a0      	beq.n	8007b36 <_strtol_l.constprop.0+0x1a>
 8007bf4:	1e69      	subs	r1, r5, #1
 8007bf6:	e006      	b.n	8007c06 <_strtol_l.constprop.0+0xea>
 8007bf8:	b106      	cbz	r6, 8007bfc <_strtol_l.constprop.0+0xe0>
 8007bfa:	4240      	negs	r0, r0
 8007bfc:	f1b8 0f00 	cmp.w	r8, #0
 8007c00:	d099      	beq.n	8007b36 <_strtol_l.constprop.0+0x1a>
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	d1f6      	bne.n	8007bf4 <_strtol_l.constprop.0+0xd8>
 8007c06:	f8c8 1000 	str.w	r1, [r8]
 8007c0a:	e794      	b.n	8007b36 <_strtol_l.constprop.0+0x1a>
 8007c0c:	0800aedd 	.word	0x0800aedd

08007c10 <strtol>:
 8007c10:	4613      	mov	r3, r2
 8007c12:	460a      	mov	r2, r1
 8007c14:	4601      	mov	r1, r0
 8007c16:	4802      	ldr	r0, [pc, #8]	@ (8007c20 <strtol+0x10>)
 8007c18:	6800      	ldr	r0, [r0, #0]
 8007c1a:	f7ff bf7f 	b.w	8007b1c <_strtol_l.constprop.0>
 8007c1e:	bf00      	nop
 8007c20:	2000067c 	.word	0x2000067c

08007c24 <__cvt>:
 8007c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	ec57 6b10 	vmov	r6, r7, d0
 8007c2c:	2f00      	cmp	r7, #0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	4619      	mov	r1, r3
 8007c32:	463b      	mov	r3, r7
 8007c34:	bfbb      	ittet	lt
 8007c36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c3a:	461f      	movlt	r7, r3
 8007c3c:	2300      	movge	r3, #0
 8007c3e:	232d      	movlt	r3, #45	@ 0x2d
 8007c40:	700b      	strb	r3, [r1, #0]
 8007c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c48:	4691      	mov	r9, r2
 8007c4a:	f023 0820 	bic.w	r8, r3, #32
 8007c4e:	bfbc      	itt	lt
 8007c50:	4632      	movlt	r2, r6
 8007c52:	4616      	movlt	r6, r2
 8007c54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c58:	d005      	beq.n	8007c66 <__cvt+0x42>
 8007c5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c5e:	d100      	bne.n	8007c62 <__cvt+0x3e>
 8007c60:	3401      	adds	r4, #1
 8007c62:	2102      	movs	r1, #2
 8007c64:	e000      	b.n	8007c68 <__cvt+0x44>
 8007c66:	2103      	movs	r1, #3
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	ab02      	add	r3, sp, #8
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	ec47 6b10 	vmov	d0, r6, r7
 8007c74:	4653      	mov	r3, sl
 8007c76:	4622      	mov	r2, r4
 8007c78:	f000 fefa 	bl	8008a70 <_dtoa_r>
 8007c7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c80:	4605      	mov	r5, r0
 8007c82:	d119      	bne.n	8007cb8 <__cvt+0x94>
 8007c84:	f019 0f01 	tst.w	r9, #1
 8007c88:	d00e      	beq.n	8007ca8 <__cvt+0x84>
 8007c8a:	eb00 0904 	add.w	r9, r0, r4
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2300      	movs	r3, #0
 8007c92:	4630      	mov	r0, r6
 8007c94:	4639      	mov	r1, r7
 8007c96:	f7f8 ff27 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c9a:	b108      	cbz	r0, 8007ca0 <__cvt+0x7c>
 8007c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ca0:	2230      	movs	r2, #48	@ 0x30
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	454b      	cmp	r3, r9
 8007ca6:	d31e      	bcc.n	8007ce6 <__cvt+0xc2>
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cac:	1b5b      	subs	r3, r3, r5
 8007cae:	4628      	mov	r0, r5
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	b004      	add	sp, #16
 8007cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007cbc:	eb00 0904 	add.w	r9, r0, r4
 8007cc0:	d1e5      	bne.n	8007c8e <__cvt+0x6a>
 8007cc2:	7803      	ldrb	r3, [r0, #0]
 8007cc4:	2b30      	cmp	r3, #48	@ 0x30
 8007cc6:	d10a      	bne.n	8007cde <__cvt+0xba>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4630      	mov	r0, r6
 8007cce:	4639      	mov	r1, r7
 8007cd0:	f7f8 ff0a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cd4:	b918      	cbnz	r0, 8007cde <__cvt+0xba>
 8007cd6:	f1c4 0401 	rsb	r4, r4, #1
 8007cda:	f8ca 4000 	str.w	r4, [sl]
 8007cde:	f8da 3000 	ldr.w	r3, [sl]
 8007ce2:	4499      	add	r9, r3
 8007ce4:	e7d3      	b.n	8007c8e <__cvt+0x6a>
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	9103      	str	r1, [sp, #12]
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e7d9      	b.n	8007ca2 <__cvt+0x7e>

08007cee <__exponent>:
 8007cee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	bfba      	itte	lt
 8007cf4:	4249      	neglt	r1, r1
 8007cf6:	232d      	movlt	r3, #45	@ 0x2d
 8007cf8:	232b      	movge	r3, #43	@ 0x2b
 8007cfa:	2909      	cmp	r1, #9
 8007cfc:	7002      	strb	r2, [r0, #0]
 8007cfe:	7043      	strb	r3, [r0, #1]
 8007d00:	dd29      	ble.n	8007d56 <__exponent+0x68>
 8007d02:	f10d 0307 	add.w	r3, sp, #7
 8007d06:	461d      	mov	r5, r3
 8007d08:	270a      	movs	r7, #10
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d10:	fb07 1416 	mls	r4, r7, r6, r1
 8007d14:	3430      	adds	r4, #48	@ 0x30
 8007d16:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	2c63      	cmp	r4, #99	@ 0x63
 8007d1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d22:	4631      	mov	r1, r6
 8007d24:	dcf1      	bgt.n	8007d0a <__exponent+0x1c>
 8007d26:	3130      	adds	r1, #48	@ 0x30
 8007d28:	1e94      	subs	r4, r2, #2
 8007d2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d2e:	1c41      	adds	r1, r0, #1
 8007d30:	4623      	mov	r3, r4
 8007d32:	42ab      	cmp	r3, r5
 8007d34:	d30a      	bcc.n	8007d4c <__exponent+0x5e>
 8007d36:	f10d 0309 	add.w	r3, sp, #9
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	42ac      	cmp	r4, r5
 8007d3e:	bf88      	it	hi
 8007d40:	2300      	movhi	r3, #0
 8007d42:	3302      	adds	r3, #2
 8007d44:	4403      	add	r3, r0
 8007d46:	1a18      	subs	r0, r3, r0
 8007d48:	b003      	add	sp, #12
 8007d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d50:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d54:	e7ed      	b.n	8007d32 <__exponent+0x44>
 8007d56:	2330      	movs	r3, #48	@ 0x30
 8007d58:	3130      	adds	r1, #48	@ 0x30
 8007d5a:	7083      	strb	r3, [r0, #2]
 8007d5c:	70c1      	strb	r1, [r0, #3]
 8007d5e:	1d03      	adds	r3, r0, #4
 8007d60:	e7f1      	b.n	8007d46 <__exponent+0x58>
	...

08007d64 <_printf_float>:
 8007d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d68:	b08d      	sub	sp, #52	@ 0x34
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d70:	4616      	mov	r6, r2
 8007d72:	461f      	mov	r7, r3
 8007d74:	4605      	mov	r5, r0
 8007d76:	f000 fd5d 	bl	8008834 <_localeconv_r>
 8007d7a:	6803      	ldr	r3, [r0, #0]
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7f8 fa86 	bl	8000290 <strlen>
 8007d84:	2300      	movs	r3, #0
 8007d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d88:	f8d8 3000 	ldr.w	r3, [r8]
 8007d8c:	9005      	str	r0, [sp, #20]
 8007d8e:	3307      	adds	r3, #7
 8007d90:	f023 0307 	bic.w	r3, r3, #7
 8007d94:	f103 0208 	add.w	r2, r3, #8
 8007d98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d9c:	f8d4 b000 	ldr.w	fp, [r4]
 8007da0:	f8c8 2000 	str.w	r2, [r8]
 8007da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007da8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007dac:	9307      	str	r3, [sp, #28]
 8007dae:	f8cd 8018 	str.w	r8, [sp, #24]
 8007db2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dba:	4b9c      	ldr	r3, [pc, #624]	@ (800802c <_printf_float+0x2c8>)
 8007dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc0:	f7f8 fec4 	bl	8000b4c <__aeabi_dcmpun>
 8007dc4:	bb70      	cbnz	r0, 8007e24 <_printf_float+0xc0>
 8007dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dca:	4b98      	ldr	r3, [pc, #608]	@ (800802c <_printf_float+0x2c8>)
 8007dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd0:	f7f8 fe9e 	bl	8000b10 <__aeabi_dcmple>
 8007dd4:	bb30      	cbnz	r0, 8007e24 <_printf_float+0xc0>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	f7f8 fe8d 	bl	8000afc <__aeabi_dcmplt>
 8007de2:	b110      	cbz	r0, 8007dea <_printf_float+0x86>
 8007de4:	232d      	movs	r3, #45	@ 0x2d
 8007de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dea:	4a91      	ldr	r2, [pc, #580]	@ (8008030 <_printf_float+0x2cc>)
 8007dec:	4b91      	ldr	r3, [pc, #580]	@ (8008034 <_printf_float+0x2d0>)
 8007dee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007df2:	bf94      	ite	ls
 8007df4:	4690      	movls	r8, r2
 8007df6:	4698      	movhi	r8, r3
 8007df8:	2303      	movs	r3, #3
 8007dfa:	6123      	str	r3, [r4, #16]
 8007dfc:	f02b 0304 	bic.w	r3, fp, #4
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	f04f 0900 	mov.w	r9, #0
 8007e06:	9700      	str	r7, [sp, #0]
 8007e08:	4633      	mov	r3, r6
 8007e0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 f9d2 	bl	80081b8 <_printf_common>
 8007e14:	3001      	adds	r0, #1
 8007e16:	f040 808d 	bne.w	8007f34 <_printf_float+0x1d0>
 8007e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1e:	b00d      	add	sp, #52	@ 0x34
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	4640      	mov	r0, r8
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	f7f8 fe8e 	bl	8000b4c <__aeabi_dcmpun>
 8007e30:	b140      	cbz	r0, 8007e44 <_printf_float+0xe0>
 8007e32:	464b      	mov	r3, r9
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bfbc      	itt	lt
 8007e38:	232d      	movlt	r3, #45	@ 0x2d
 8007e3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8008038 <_printf_float+0x2d4>)
 8007e40:	4b7e      	ldr	r3, [pc, #504]	@ (800803c <_printf_float+0x2d8>)
 8007e42:	e7d4      	b.n	8007dee <_printf_float+0x8a>
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e4a:	9206      	str	r2, [sp, #24]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	d13b      	bne.n	8007ec8 <_printf_float+0x164>
 8007e50:	2306      	movs	r3, #6
 8007e52:	6063      	str	r3, [r4, #4]
 8007e54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e58:	2300      	movs	r3, #0
 8007e5a:	6022      	str	r2, [r4, #0]
 8007e5c:	9303      	str	r3, [sp, #12]
 8007e5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e64:	ab09      	add	r3, sp, #36	@ 0x24
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	6861      	ldr	r1, [r4, #4]
 8007e6a:	ec49 8b10 	vmov	d0, r8, r9
 8007e6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7ff fed6 	bl	8007c24 <__cvt>
 8007e78:	9b06      	ldr	r3, [sp, #24]
 8007e7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e7c:	2b47      	cmp	r3, #71	@ 0x47
 8007e7e:	4680      	mov	r8, r0
 8007e80:	d129      	bne.n	8007ed6 <_printf_float+0x172>
 8007e82:	1cc8      	adds	r0, r1, #3
 8007e84:	db02      	blt.n	8007e8c <_printf_float+0x128>
 8007e86:	6863      	ldr	r3, [r4, #4]
 8007e88:	4299      	cmp	r1, r3
 8007e8a:	dd41      	ble.n	8007f10 <_printf_float+0x1ac>
 8007e8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e90:	fa5f fa8a 	uxtb.w	sl, sl
 8007e94:	3901      	subs	r1, #1
 8007e96:	4652      	mov	r2, sl
 8007e98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e9e:	f7ff ff26 	bl	8007cee <__exponent>
 8007ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ea4:	1813      	adds	r3, r2, r0
 8007ea6:	2a01      	cmp	r2, #1
 8007ea8:	4681      	mov	r9, r0
 8007eaa:	6123      	str	r3, [r4, #16]
 8007eac:	dc02      	bgt.n	8007eb4 <_printf_float+0x150>
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	07d2      	lsls	r2, r2, #31
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_float+0x154>
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0a2      	beq.n	8007e06 <_printf_float+0xa2>
 8007ec0:	232d      	movs	r3, #45	@ 0x2d
 8007ec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ec6:	e79e      	b.n	8007e06 <_printf_float+0xa2>
 8007ec8:	9a06      	ldr	r2, [sp, #24]
 8007eca:	2a47      	cmp	r2, #71	@ 0x47
 8007ecc:	d1c2      	bne.n	8007e54 <_printf_float+0xf0>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1c0      	bne.n	8007e54 <_printf_float+0xf0>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7bd      	b.n	8007e52 <_printf_float+0xee>
 8007ed6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007eda:	d9db      	bls.n	8007e94 <_printf_float+0x130>
 8007edc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ee0:	d118      	bne.n	8007f14 <_printf_float+0x1b0>
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	dd0b      	ble.n	8007f00 <_printf_float+0x19c>
 8007ee8:	6121      	str	r1, [r4, #16]
 8007eea:	b913      	cbnz	r3, 8007ef2 <_printf_float+0x18e>
 8007eec:	6822      	ldr	r2, [r4, #0]
 8007eee:	07d0      	lsls	r0, r2, #31
 8007ef0:	d502      	bpl.n	8007ef8 <_printf_float+0x194>
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	440b      	add	r3, r1
 8007ef6:	6123      	str	r3, [r4, #16]
 8007ef8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007efa:	f04f 0900 	mov.w	r9, #0
 8007efe:	e7db      	b.n	8007eb8 <_printf_float+0x154>
 8007f00:	b913      	cbnz	r3, 8007f08 <_printf_float+0x1a4>
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	07d2      	lsls	r2, r2, #31
 8007f06:	d501      	bpl.n	8007f0c <_printf_float+0x1a8>
 8007f08:	3302      	adds	r3, #2
 8007f0a:	e7f4      	b.n	8007ef6 <_printf_float+0x192>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e7f2      	b.n	8007ef6 <_printf_float+0x192>
 8007f10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f16:	4299      	cmp	r1, r3
 8007f18:	db05      	blt.n	8007f26 <_printf_float+0x1c2>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	6121      	str	r1, [r4, #16]
 8007f1e:	07d8      	lsls	r0, r3, #31
 8007f20:	d5ea      	bpl.n	8007ef8 <_printf_float+0x194>
 8007f22:	1c4b      	adds	r3, r1, #1
 8007f24:	e7e7      	b.n	8007ef6 <_printf_float+0x192>
 8007f26:	2900      	cmp	r1, #0
 8007f28:	bfd4      	ite	le
 8007f2a:	f1c1 0202 	rsble	r2, r1, #2
 8007f2e:	2201      	movgt	r2, #1
 8007f30:	4413      	add	r3, r2
 8007f32:	e7e0      	b.n	8007ef6 <_printf_float+0x192>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	055a      	lsls	r2, r3, #21
 8007f38:	d407      	bmi.n	8007f4a <_printf_float+0x1e6>
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4628      	mov	r0, r5
 8007f42:	47b8      	blx	r7
 8007f44:	3001      	adds	r0, #1
 8007f46:	d12b      	bne.n	8007fa0 <_printf_float+0x23c>
 8007f48:	e767      	b.n	8007e1a <_printf_float+0xb6>
 8007f4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f4e:	f240 80dd 	bls.w	800810c <_printf_float+0x3a8>
 8007f52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f7f8 fdc5 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d033      	beq.n	8007fca <_printf_float+0x266>
 8007f62:	4a37      	ldr	r2, [pc, #220]	@ (8008040 <_printf_float+0x2dc>)
 8007f64:	2301      	movs	r3, #1
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f43f af54 	beq.w	8007e1a <_printf_float+0xb6>
 8007f72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f76:	4543      	cmp	r3, r8
 8007f78:	db02      	blt.n	8007f80 <_printf_float+0x21c>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	07d8      	lsls	r0, r3, #31
 8007f7e:	d50f      	bpl.n	8007fa0 <_printf_float+0x23c>
 8007f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f84:	4631      	mov	r1, r6
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f43f af45 	beq.w	8007e1a <_printf_float+0xb6>
 8007f90:	f04f 0900 	mov.w	r9, #0
 8007f94:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f98:	f104 0a1a 	add.w	sl, r4, #26
 8007f9c:	45c8      	cmp	r8, r9
 8007f9e:	dc09      	bgt.n	8007fb4 <_printf_float+0x250>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	079b      	lsls	r3, r3, #30
 8007fa4:	f100 8103 	bmi.w	80081ae <_printf_float+0x44a>
 8007fa8:	68e0      	ldr	r0, [r4, #12]
 8007faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fac:	4298      	cmp	r0, r3
 8007fae:	bfb8      	it	lt
 8007fb0:	4618      	movlt	r0, r3
 8007fb2:	e734      	b.n	8007e1e <_printf_float+0xba>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	4652      	mov	r2, sl
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f af2b 	beq.w	8007e1a <_printf_float+0xb6>
 8007fc4:	f109 0901 	add.w	r9, r9, #1
 8007fc8:	e7e8      	b.n	8007f9c <_printf_float+0x238>
 8007fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dc39      	bgt.n	8008044 <_printf_float+0x2e0>
 8007fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8008040 <_printf_float+0x2dc>)
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f af1d 	beq.w	8007e1a <_printf_float+0xb6>
 8007fe0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fe4:	ea59 0303 	orrs.w	r3, r9, r3
 8007fe8:	d102      	bne.n	8007ff0 <_printf_float+0x28c>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	07d9      	lsls	r1, r3, #31
 8007fee:	d5d7      	bpl.n	8007fa0 <_printf_float+0x23c>
 8007ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f43f af0d 	beq.w	8007e1a <_printf_float+0xb6>
 8008000:	f04f 0a00 	mov.w	sl, #0
 8008004:	f104 0b1a 	add.w	fp, r4, #26
 8008008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800800a:	425b      	negs	r3, r3
 800800c:	4553      	cmp	r3, sl
 800800e:	dc01      	bgt.n	8008014 <_printf_float+0x2b0>
 8008010:	464b      	mov	r3, r9
 8008012:	e793      	b.n	8007f3c <_printf_float+0x1d8>
 8008014:	2301      	movs	r3, #1
 8008016:	465a      	mov	r2, fp
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	47b8      	blx	r7
 800801e:	3001      	adds	r0, #1
 8008020:	f43f aefb 	beq.w	8007e1a <_printf_float+0xb6>
 8008024:	f10a 0a01 	add.w	sl, sl, #1
 8008028:	e7ee      	b.n	8008008 <_printf_float+0x2a4>
 800802a:	bf00      	nop
 800802c:	7fefffff 	.word	0x7fefffff
 8008030:	0800afdd 	.word	0x0800afdd
 8008034:	0800afe1 	.word	0x0800afe1
 8008038:	0800afe5 	.word	0x0800afe5
 800803c:	0800afe9 	.word	0x0800afe9
 8008040:	0800afed 	.word	0x0800afed
 8008044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008046:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800804a:	4553      	cmp	r3, sl
 800804c:	bfa8      	it	ge
 800804e:	4653      	movge	r3, sl
 8008050:	2b00      	cmp	r3, #0
 8008052:	4699      	mov	r9, r3
 8008054:	dc36      	bgt.n	80080c4 <_printf_float+0x360>
 8008056:	f04f 0b00 	mov.w	fp, #0
 800805a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800805e:	f104 021a 	add.w	r2, r4, #26
 8008062:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008064:	9306      	str	r3, [sp, #24]
 8008066:	eba3 0309 	sub.w	r3, r3, r9
 800806a:	455b      	cmp	r3, fp
 800806c:	dc31      	bgt.n	80080d2 <_printf_float+0x36e>
 800806e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008070:	459a      	cmp	sl, r3
 8008072:	dc3a      	bgt.n	80080ea <_printf_float+0x386>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	07da      	lsls	r2, r3, #31
 8008078:	d437      	bmi.n	80080ea <_printf_float+0x386>
 800807a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807c:	ebaa 0903 	sub.w	r9, sl, r3
 8008080:	9b06      	ldr	r3, [sp, #24]
 8008082:	ebaa 0303 	sub.w	r3, sl, r3
 8008086:	4599      	cmp	r9, r3
 8008088:	bfa8      	it	ge
 800808a:	4699      	movge	r9, r3
 800808c:	f1b9 0f00 	cmp.w	r9, #0
 8008090:	dc33      	bgt.n	80080fa <_printf_float+0x396>
 8008092:	f04f 0800 	mov.w	r8, #0
 8008096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800809a:	f104 0b1a 	add.w	fp, r4, #26
 800809e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a0:	ebaa 0303 	sub.w	r3, sl, r3
 80080a4:	eba3 0309 	sub.w	r3, r3, r9
 80080a8:	4543      	cmp	r3, r8
 80080aa:	f77f af79 	ble.w	8007fa0 <_printf_float+0x23c>
 80080ae:	2301      	movs	r3, #1
 80080b0:	465a      	mov	r2, fp
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	f43f aeae 	beq.w	8007e1a <_printf_float+0xb6>
 80080be:	f108 0801 	add.w	r8, r8, #1
 80080c2:	e7ec      	b.n	800809e <_printf_float+0x33a>
 80080c4:	4642      	mov	r2, r8
 80080c6:	4631      	mov	r1, r6
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b8      	blx	r7
 80080cc:	3001      	adds	r0, #1
 80080ce:	d1c2      	bne.n	8008056 <_printf_float+0x2f2>
 80080d0:	e6a3      	b.n	8007e1a <_printf_float+0xb6>
 80080d2:	2301      	movs	r3, #1
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	9206      	str	r2, [sp, #24]
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	f43f ae9c 	beq.w	8007e1a <_printf_float+0xb6>
 80080e2:	9a06      	ldr	r2, [sp, #24]
 80080e4:	f10b 0b01 	add.w	fp, fp, #1
 80080e8:	e7bb      	b.n	8008062 <_printf_float+0x2fe>
 80080ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d1c0      	bne.n	800807a <_printf_float+0x316>
 80080f8:	e68f      	b.n	8007e1a <_printf_float+0xb6>
 80080fa:	9a06      	ldr	r2, [sp, #24]
 80080fc:	464b      	mov	r3, r9
 80080fe:	4442      	add	r2, r8
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	d1c3      	bne.n	8008092 <_printf_float+0x32e>
 800810a:	e686      	b.n	8007e1a <_printf_float+0xb6>
 800810c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008110:	f1ba 0f01 	cmp.w	sl, #1
 8008114:	dc01      	bgt.n	800811a <_printf_float+0x3b6>
 8008116:	07db      	lsls	r3, r3, #31
 8008118:	d536      	bpl.n	8008188 <_printf_float+0x424>
 800811a:	2301      	movs	r3, #1
 800811c:	4642      	mov	r2, r8
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	f43f ae78 	beq.w	8007e1a <_printf_float+0xb6>
 800812a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800812e:	4631      	mov	r1, r6
 8008130:	4628      	mov	r0, r5
 8008132:	47b8      	blx	r7
 8008134:	3001      	adds	r0, #1
 8008136:	f43f ae70 	beq.w	8007e1a <_printf_float+0xb6>
 800813a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800813e:	2200      	movs	r2, #0
 8008140:	2300      	movs	r3, #0
 8008142:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008146:	f7f8 fccf 	bl	8000ae8 <__aeabi_dcmpeq>
 800814a:	b9c0      	cbnz	r0, 800817e <_printf_float+0x41a>
 800814c:	4653      	mov	r3, sl
 800814e:	f108 0201 	add.w	r2, r8, #1
 8008152:	4631      	mov	r1, r6
 8008154:	4628      	mov	r0, r5
 8008156:	47b8      	blx	r7
 8008158:	3001      	adds	r0, #1
 800815a:	d10c      	bne.n	8008176 <_printf_float+0x412>
 800815c:	e65d      	b.n	8007e1a <_printf_float+0xb6>
 800815e:	2301      	movs	r3, #1
 8008160:	465a      	mov	r2, fp
 8008162:	4631      	mov	r1, r6
 8008164:	4628      	mov	r0, r5
 8008166:	47b8      	blx	r7
 8008168:	3001      	adds	r0, #1
 800816a:	f43f ae56 	beq.w	8007e1a <_printf_float+0xb6>
 800816e:	f108 0801 	add.w	r8, r8, #1
 8008172:	45d0      	cmp	r8, sl
 8008174:	dbf3      	blt.n	800815e <_printf_float+0x3fa>
 8008176:	464b      	mov	r3, r9
 8008178:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800817c:	e6df      	b.n	8007f3e <_printf_float+0x1da>
 800817e:	f04f 0800 	mov.w	r8, #0
 8008182:	f104 0b1a 	add.w	fp, r4, #26
 8008186:	e7f4      	b.n	8008172 <_printf_float+0x40e>
 8008188:	2301      	movs	r3, #1
 800818a:	4642      	mov	r2, r8
 800818c:	e7e1      	b.n	8008152 <_printf_float+0x3ee>
 800818e:	2301      	movs	r3, #1
 8008190:	464a      	mov	r2, r9
 8008192:	4631      	mov	r1, r6
 8008194:	4628      	mov	r0, r5
 8008196:	47b8      	blx	r7
 8008198:	3001      	adds	r0, #1
 800819a:	f43f ae3e 	beq.w	8007e1a <_printf_float+0xb6>
 800819e:	f108 0801 	add.w	r8, r8, #1
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081a6:	1a5b      	subs	r3, r3, r1
 80081a8:	4543      	cmp	r3, r8
 80081aa:	dcf0      	bgt.n	800818e <_printf_float+0x42a>
 80081ac:	e6fc      	b.n	8007fa8 <_printf_float+0x244>
 80081ae:	f04f 0800 	mov.w	r8, #0
 80081b2:	f104 0919 	add.w	r9, r4, #25
 80081b6:	e7f4      	b.n	80081a2 <_printf_float+0x43e>

080081b8 <_printf_common>:
 80081b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081bc:	4616      	mov	r6, r2
 80081be:	4698      	mov	r8, r3
 80081c0:	688a      	ldr	r2, [r1, #8]
 80081c2:	690b      	ldr	r3, [r1, #16]
 80081c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081c8:	4293      	cmp	r3, r2
 80081ca:	bfb8      	it	lt
 80081cc:	4613      	movlt	r3, r2
 80081ce:	6033      	str	r3, [r6, #0]
 80081d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081d4:	4607      	mov	r7, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	b10a      	cbz	r2, 80081de <_printf_common+0x26>
 80081da:	3301      	adds	r3, #1
 80081dc:	6033      	str	r3, [r6, #0]
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	0699      	lsls	r1, r3, #26
 80081e2:	bf42      	ittt	mi
 80081e4:	6833      	ldrmi	r3, [r6, #0]
 80081e6:	3302      	addmi	r3, #2
 80081e8:	6033      	strmi	r3, [r6, #0]
 80081ea:	6825      	ldr	r5, [r4, #0]
 80081ec:	f015 0506 	ands.w	r5, r5, #6
 80081f0:	d106      	bne.n	8008200 <_printf_common+0x48>
 80081f2:	f104 0a19 	add.w	sl, r4, #25
 80081f6:	68e3      	ldr	r3, [r4, #12]
 80081f8:	6832      	ldr	r2, [r6, #0]
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	42ab      	cmp	r3, r5
 80081fe:	dc26      	bgt.n	800824e <_printf_common+0x96>
 8008200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	3b00      	subs	r3, #0
 8008208:	bf18      	it	ne
 800820a:	2301      	movne	r3, #1
 800820c:	0692      	lsls	r2, r2, #26
 800820e:	d42b      	bmi.n	8008268 <_printf_common+0xb0>
 8008210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008214:	4641      	mov	r1, r8
 8008216:	4638      	mov	r0, r7
 8008218:	47c8      	blx	r9
 800821a:	3001      	adds	r0, #1
 800821c:	d01e      	beq.n	800825c <_printf_common+0xa4>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	6922      	ldr	r2, [r4, #16]
 8008222:	f003 0306 	and.w	r3, r3, #6
 8008226:	2b04      	cmp	r3, #4
 8008228:	bf02      	ittt	eq
 800822a:	68e5      	ldreq	r5, [r4, #12]
 800822c:	6833      	ldreq	r3, [r6, #0]
 800822e:	1aed      	subeq	r5, r5, r3
 8008230:	68a3      	ldr	r3, [r4, #8]
 8008232:	bf0c      	ite	eq
 8008234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008238:	2500      	movne	r5, #0
 800823a:	4293      	cmp	r3, r2
 800823c:	bfc4      	itt	gt
 800823e:	1a9b      	subgt	r3, r3, r2
 8008240:	18ed      	addgt	r5, r5, r3
 8008242:	2600      	movs	r6, #0
 8008244:	341a      	adds	r4, #26
 8008246:	42b5      	cmp	r5, r6
 8008248:	d11a      	bne.n	8008280 <_printf_common+0xc8>
 800824a:	2000      	movs	r0, #0
 800824c:	e008      	b.n	8008260 <_printf_common+0xa8>
 800824e:	2301      	movs	r3, #1
 8008250:	4652      	mov	r2, sl
 8008252:	4641      	mov	r1, r8
 8008254:	4638      	mov	r0, r7
 8008256:	47c8      	blx	r9
 8008258:	3001      	adds	r0, #1
 800825a:	d103      	bne.n	8008264 <_printf_common+0xac>
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008264:	3501      	adds	r5, #1
 8008266:	e7c6      	b.n	80081f6 <_printf_common+0x3e>
 8008268:	18e1      	adds	r1, r4, r3
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	2030      	movs	r0, #48	@ 0x30
 800826e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008272:	4422      	add	r2, r4
 8008274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800827c:	3302      	adds	r3, #2
 800827e:	e7c7      	b.n	8008210 <_printf_common+0x58>
 8008280:	2301      	movs	r3, #1
 8008282:	4622      	mov	r2, r4
 8008284:	4641      	mov	r1, r8
 8008286:	4638      	mov	r0, r7
 8008288:	47c8      	blx	r9
 800828a:	3001      	adds	r0, #1
 800828c:	d0e6      	beq.n	800825c <_printf_common+0xa4>
 800828e:	3601      	adds	r6, #1
 8008290:	e7d9      	b.n	8008246 <_printf_common+0x8e>
	...

08008294 <_printf_i>:
 8008294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	7e0f      	ldrb	r7, [r1, #24]
 800829a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800829c:	2f78      	cmp	r7, #120	@ 0x78
 800829e:	4691      	mov	r9, r2
 80082a0:	4680      	mov	r8, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	469a      	mov	sl, r3
 80082a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082aa:	d807      	bhi.n	80082bc <_printf_i+0x28>
 80082ac:	2f62      	cmp	r7, #98	@ 0x62
 80082ae:	d80a      	bhi.n	80082c6 <_printf_i+0x32>
 80082b0:	2f00      	cmp	r7, #0
 80082b2:	f000 80d2 	beq.w	800845a <_printf_i+0x1c6>
 80082b6:	2f58      	cmp	r7, #88	@ 0x58
 80082b8:	f000 80b9 	beq.w	800842e <_printf_i+0x19a>
 80082bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082c4:	e03a      	b.n	800833c <_printf_i+0xa8>
 80082c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082ca:	2b15      	cmp	r3, #21
 80082cc:	d8f6      	bhi.n	80082bc <_printf_i+0x28>
 80082ce:	a101      	add	r1, pc, #4	@ (adr r1, 80082d4 <_printf_i+0x40>)
 80082d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082d4:	0800832d 	.word	0x0800832d
 80082d8:	08008341 	.word	0x08008341
 80082dc:	080082bd 	.word	0x080082bd
 80082e0:	080082bd 	.word	0x080082bd
 80082e4:	080082bd 	.word	0x080082bd
 80082e8:	080082bd 	.word	0x080082bd
 80082ec:	08008341 	.word	0x08008341
 80082f0:	080082bd 	.word	0x080082bd
 80082f4:	080082bd 	.word	0x080082bd
 80082f8:	080082bd 	.word	0x080082bd
 80082fc:	080082bd 	.word	0x080082bd
 8008300:	08008441 	.word	0x08008441
 8008304:	0800836b 	.word	0x0800836b
 8008308:	080083fb 	.word	0x080083fb
 800830c:	080082bd 	.word	0x080082bd
 8008310:	080082bd 	.word	0x080082bd
 8008314:	08008463 	.word	0x08008463
 8008318:	080082bd 	.word	0x080082bd
 800831c:	0800836b 	.word	0x0800836b
 8008320:	080082bd 	.word	0x080082bd
 8008324:	080082bd 	.word	0x080082bd
 8008328:	08008403 	.word	0x08008403
 800832c:	6833      	ldr	r3, [r6, #0]
 800832e:	1d1a      	adds	r2, r3, #4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6032      	str	r2, [r6, #0]
 8008334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800833c:	2301      	movs	r3, #1
 800833e:	e09d      	b.n	800847c <_printf_i+0x1e8>
 8008340:	6833      	ldr	r3, [r6, #0]
 8008342:	6820      	ldr	r0, [r4, #0]
 8008344:	1d19      	adds	r1, r3, #4
 8008346:	6031      	str	r1, [r6, #0]
 8008348:	0606      	lsls	r6, r0, #24
 800834a:	d501      	bpl.n	8008350 <_printf_i+0xbc>
 800834c:	681d      	ldr	r5, [r3, #0]
 800834e:	e003      	b.n	8008358 <_printf_i+0xc4>
 8008350:	0645      	lsls	r5, r0, #25
 8008352:	d5fb      	bpl.n	800834c <_printf_i+0xb8>
 8008354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008358:	2d00      	cmp	r5, #0
 800835a:	da03      	bge.n	8008364 <_printf_i+0xd0>
 800835c:	232d      	movs	r3, #45	@ 0x2d
 800835e:	426d      	negs	r5, r5
 8008360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008364:	4859      	ldr	r0, [pc, #356]	@ (80084cc <_printf_i+0x238>)
 8008366:	230a      	movs	r3, #10
 8008368:	e011      	b.n	800838e <_printf_i+0xfa>
 800836a:	6821      	ldr	r1, [r4, #0]
 800836c:	6833      	ldr	r3, [r6, #0]
 800836e:	0608      	lsls	r0, r1, #24
 8008370:	f853 5b04 	ldr.w	r5, [r3], #4
 8008374:	d402      	bmi.n	800837c <_printf_i+0xe8>
 8008376:	0649      	lsls	r1, r1, #25
 8008378:	bf48      	it	mi
 800837a:	b2ad      	uxthmi	r5, r5
 800837c:	2f6f      	cmp	r7, #111	@ 0x6f
 800837e:	4853      	ldr	r0, [pc, #332]	@ (80084cc <_printf_i+0x238>)
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	bf14      	ite	ne
 8008384:	230a      	movne	r3, #10
 8008386:	2308      	moveq	r3, #8
 8008388:	2100      	movs	r1, #0
 800838a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800838e:	6866      	ldr	r6, [r4, #4]
 8008390:	60a6      	str	r6, [r4, #8]
 8008392:	2e00      	cmp	r6, #0
 8008394:	bfa2      	ittt	ge
 8008396:	6821      	ldrge	r1, [r4, #0]
 8008398:	f021 0104 	bicge.w	r1, r1, #4
 800839c:	6021      	strge	r1, [r4, #0]
 800839e:	b90d      	cbnz	r5, 80083a4 <_printf_i+0x110>
 80083a0:	2e00      	cmp	r6, #0
 80083a2:	d04b      	beq.n	800843c <_printf_i+0x1a8>
 80083a4:	4616      	mov	r6, r2
 80083a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80083aa:	fb03 5711 	mls	r7, r3, r1, r5
 80083ae:	5dc7      	ldrb	r7, [r0, r7]
 80083b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083b4:	462f      	mov	r7, r5
 80083b6:	42bb      	cmp	r3, r7
 80083b8:	460d      	mov	r5, r1
 80083ba:	d9f4      	bls.n	80083a6 <_printf_i+0x112>
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d10b      	bne.n	80083d8 <_printf_i+0x144>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	07df      	lsls	r7, r3, #31
 80083c4:	d508      	bpl.n	80083d8 <_printf_i+0x144>
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	6861      	ldr	r1, [r4, #4]
 80083ca:	4299      	cmp	r1, r3
 80083cc:	bfde      	ittt	le
 80083ce:	2330      	movle	r3, #48	@ 0x30
 80083d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083d8:	1b92      	subs	r2, r2, r6
 80083da:	6122      	str	r2, [r4, #16]
 80083dc:	f8cd a000 	str.w	sl, [sp]
 80083e0:	464b      	mov	r3, r9
 80083e2:	aa03      	add	r2, sp, #12
 80083e4:	4621      	mov	r1, r4
 80083e6:	4640      	mov	r0, r8
 80083e8:	f7ff fee6 	bl	80081b8 <_printf_common>
 80083ec:	3001      	adds	r0, #1
 80083ee:	d14a      	bne.n	8008486 <_printf_i+0x1f2>
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	b004      	add	sp, #16
 80083f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	f043 0320 	orr.w	r3, r3, #32
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	4833      	ldr	r0, [pc, #204]	@ (80084d0 <_printf_i+0x23c>)
 8008404:	2778      	movs	r7, #120	@ 0x78
 8008406:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	6831      	ldr	r1, [r6, #0]
 800840e:	061f      	lsls	r7, r3, #24
 8008410:	f851 5b04 	ldr.w	r5, [r1], #4
 8008414:	d402      	bmi.n	800841c <_printf_i+0x188>
 8008416:	065f      	lsls	r7, r3, #25
 8008418:	bf48      	it	mi
 800841a:	b2ad      	uxthmi	r5, r5
 800841c:	6031      	str	r1, [r6, #0]
 800841e:	07d9      	lsls	r1, r3, #31
 8008420:	bf44      	itt	mi
 8008422:	f043 0320 	orrmi.w	r3, r3, #32
 8008426:	6023      	strmi	r3, [r4, #0]
 8008428:	b11d      	cbz	r5, 8008432 <_printf_i+0x19e>
 800842a:	2310      	movs	r3, #16
 800842c:	e7ac      	b.n	8008388 <_printf_i+0xf4>
 800842e:	4827      	ldr	r0, [pc, #156]	@ (80084cc <_printf_i+0x238>)
 8008430:	e7e9      	b.n	8008406 <_printf_i+0x172>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	f023 0320 	bic.w	r3, r3, #32
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	e7f6      	b.n	800842a <_printf_i+0x196>
 800843c:	4616      	mov	r6, r2
 800843e:	e7bd      	b.n	80083bc <_printf_i+0x128>
 8008440:	6833      	ldr	r3, [r6, #0]
 8008442:	6825      	ldr	r5, [r4, #0]
 8008444:	6961      	ldr	r1, [r4, #20]
 8008446:	1d18      	adds	r0, r3, #4
 8008448:	6030      	str	r0, [r6, #0]
 800844a:	062e      	lsls	r6, r5, #24
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	d501      	bpl.n	8008454 <_printf_i+0x1c0>
 8008450:	6019      	str	r1, [r3, #0]
 8008452:	e002      	b.n	800845a <_printf_i+0x1c6>
 8008454:	0668      	lsls	r0, r5, #25
 8008456:	d5fb      	bpl.n	8008450 <_printf_i+0x1bc>
 8008458:	8019      	strh	r1, [r3, #0]
 800845a:	2300      	movs	r3, #0
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	4616      	mov	r6, r2
 8008460:	e7bc      	b.n	80083dc <_printf_i+0x148>
 8008462:	6833      	ldr	r3, [r6, #0]
 8008464:	1d1a      	adds	r2, r3, #4
 8008466:	6032      	str	r2, [r6, #0]
 8008468:	681e      	ldr	r6, [r3, #0]
 800846a:	6862      	ldr	r2, [r4, #4]
 800846c:	2100      	movs	r1, #0
 800846e:	4630      	mov	r0, r6
 8008470:	f7f7 febe 	bl	80001f0 <memchr>
 8008474:	b108      	cbz	r0, 800847a <_printf_i+0x1e6>
 8008476:	1b80      	subs	r0, r0, r6
 8008478:	6060      	str	r0, [r4, #4]
 800847a:	6863      	ldr	r3, [r4, #4]
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	2300      	movs	r3, #0
 8008480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008484:	e7aa      	b.n	80083dc <_printf_i+0x148>
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	4632      	mov	r2, r6
 800848a:	4649      	mov	r1, r9
 800848c:	4640      	mov	r0, r8
 800848e:	47d0      	blx	sl
 8008490:	3001      	adds	r0, #1
 8008492:	d0ad      	beq.n	80083f0 <_printf_i+0x15c>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	079b      	lsls	r3, r3, #30
 8008498:	d413      	bmi.n	80084c2 <_printf_i+0x22e>
 800849a:	68e0      	ldr	r0, [r4, #12]
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	4298      	cmp	r0, r3
 80084a0:	bfb8      	it	lt
 80084a2:	4618      	movlt	r0, r3
 80084a4:	e7a6      	b.n	80083f4 <_printf_i+0x160>
 80084a6:	2301      	movs	r3, #1
 80084a8:	4632      	mov	r2, r6
 80084aa:	4649      	mov	r1, r9
 80084ac:	4640      	mov	r0, r8
 80084ae:	47d0      	blx	sl
 80084b0:	3001      	adds	r0, #1
 80084b2:	d09d      	beq.n	80083f0 <_printf_i+0x15c>
 80084b4:	3501      	adds	r5, #1
 80084b6:	68e3      	ldr	r3, [r4, #12]
 80084b8:	9903      	ldr	r1, [sp, #12]
 80084ba:	1a5b      	subs	r3, r3, r1
 80084bc:	42ab      	cmp	r3, r5
 80084be:	dcf2      	bgt.n	80084a6 <_printf_i+0x212>
 80084c0:	e7eb      	b.n	800849a <_printf_i+0x206>
 80084c2:	2500      	movs	r5, #0
 80084c4:	f104 0619 	add.w	r6, r4, #25
 80084c8:	e7f5      	b.n	80084b6 <_printf_i+0x222>
 80084ca:	bf00      	nop
 80084cc:	0800afef 	.word	0x0800afef
 80084d0:	0800b000 	.word	0x0800b000

080084d4 <std>:
 80084d4:	2300      	movs	r3, #0
 80084d6:	b510      	push	{r4, lr}
 80084d8:	4604      	mov	r4, r0
 80084da:	e9c0 3300 	strd	r3, r3, [r0]
 80084de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084e2:	6083      	str	r3, [r0, #8]
 80084e4:	8181      	strh	r1, [r0, #12]
 80084e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80084e8:	81c2      	strh	r2, [r0, #14]
 80084ea:	6183      	str	r3, [r0, #24]
 80084ec:	4619      	mov	r1, r3
 80084ee:	2208      	movs	r2, #8
 80084f0:	305c      	adds	r0, #92	@ 0x5c
 80084f2:	f000 f928 	bl	8008746 <memset>
 80084f6:	4b0d      	ldr	r3, [pc, #52]	@ (800852c <std+0x58>)
 80084f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80084fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <std+0x5c>)
 80084fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <std+0x60>)
 8008500:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008502:	4b0d      	ldr	r3, [pc, #52]	@ (8008538 <std+0x64>)
 8008504:	6323      	str	r3, [r4, #48]	@ 0x30
 8008506:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <std+0x68>)
 8008508:	6224      	str	r4, [r4, #32]
 800850a:	429c      	cmp	r4, r3
 800850c:	d006      	beq.n	800851c <std+0x48>
 800850e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008512:	4294      	cmp	r4, r2
 8008514:	d002      	beq.n	800851c <std+0x48>
 8008516:	33d0      	adds	r3, #208	@ 0xd0
 8008518:	429c      	cmp	r4, r3
 800851a:	d105      	bne.n	8008528 <std+0x54>
 800851c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008524:	f000 b9fa 	b.w	800891c <__retarget_lock_init_recursive>
 8008528:	bd10      	pop	{r4, pc}
 800852a:	bf00      	nop
 800852c:	080086c1 	.word	0x080086c1
 8008530:	080086e3 	.word	0x080086e3
 8008534:	0800871b 	.word	0x0800871b
 8008538:	0800873f 	.word	0x0800873f
 800853c:	20000af8 	.word	0x20000af8

08008540 <stdio_exit_handler>:
 8008540:	4a02      	ldr	r2, [pc, #8]	@ (800854c <stdio_exit_handler+0xc>)
 8008542:	4903      	ldr	r1, [pc, #12]	@ (8008550 <stdio_exit_handler+0x10>)
 8008544:	4803      	ldr	r0, [pc, #12]	@ (8008554 <stdio_exit_handler+0x14>)
 8008546:	f000 b869 	b.w	800861c <_fwalk_sglue>
 800854a:	bf00      	nop
 800854c:	20000670 	.word	0x20000670
 8008550:	0800a2b5 	.word	0x0800a2b5
 8008554:	20000680 	.word	0x20000680

08008558 <cleanup_stdio>:
 8008558:	6841      	ldr	r1, [r0, #4]
 800855a:	4b0c      	ldr	r3, [pc, #48]	@ (800858c <cleanup_stdio+0x34>)
 800855c:	4299      	cmp	r1, r3
 800855e:	b510      	push	{r4, lr}
 8008560:	4604      	mov	r4, r0
 8008562:	d001      	beq.n	8008568 <cleanup_stdio+0x10>
 8008564:	f001 fea6 	bl	800a2b4 <_fflush_r>
 8008568:	68a1      	ldr	r1, [r4, #8]
 800856a:	4b09      	ldr	r3, [pc, #36]	@ (8008590 <cleanup_stdio+0x38>)
 800856c:	4299      	cmp	r1, r3
 800856e:	d002      	beq.n	8008576 <cleanup_stdio+0x1e>
 8008570:	4620      	mov	r0, r4
 8008572:	f001 fe9f 	bl	800a2b4 <_fflush_r>
 8008576:	68e1      	ldr	r1, [r4, #12]
 8008578:	4b06      	ldr	r3, [pc, #24]	@ (8008594 <cleanup_stdio+0x3c>)
 800857a:	4299      	cmp	r1, r3
 800857c:	d004      	beq.n	8008588 <cleanup_stdio+0x30>
 800857e:	4620      	mov	r0, r4
 8008580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008584:	f001 be96 	b.w	800a2b4 <_fflush_r>
 8008588:	bd10      	pop	{r4, pc}
 800858a:	bf00      	nop
 800858c:	20000af8 	.word	0x20000af8
 8008590:	20000b60 	.word	0x20000b60
 8008594:	20000bc8 	.word	0x20000bc8

08008598 <global_stdio_init.part.0>:
 8008598:	b510      	push	{r4, lr}
 800859a:	4b0b      	ldr	r3, [pc, #44]	@ (80085c8 <global_stdio_init.part.0+0x30>)
 800859c:	4c0b      	ldr	r4, [pc, #44]	@ (80085cc <global_stdio_init.part.0+0x34>)
 800859e:	4a0c      	ldr	r2, [pc, #48]	@ (80085d0 <global_stdio_init.part.0+0x38>)
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	4620      	mov	r0, r4
 80085a4:	2200      	movs	r2, #0
 80085a6:	2104      	movs	r1, #4
 80085a8:	f7ff ff94 	bl	80084d4 <std>
 80085ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085b0:	2201      	movs	r2, #1
 80085b2:	2109      	movs	r1, #9
 80085b4:	f7ff ff8e 	bl	80084d4 <std>
 80085b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085bc:	2202      	movs	r2, #2
 80085be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c2:	2112      	movs	r1, #18
 80085c4:	f7ff bf86 	b.w	80084d4 <std>
 80085c8:	20000c30 	.word	0x20000c30
 80085cc:	20000af8 	.word	0x20000af8
 80085d0:	08008541 	.word	0x08008541

080085d4 <__sfp_lock_acquire>:
 80085d4:	4801      	ldr	r0, [pc, #4]	@ (80085dc <__sfp_lock_acquire+0x8>)
 80085d6:	f000 b9a2 	b.w	800891e <__retarget_lock_acquire_recursive>
 80085da:	bf00      	nop
 80085dc:	20000c39 	.word	0x20000c39

080085e0 <__sfp_lock_release>:
 80085e0:	4801      	ldr	r0, [pc, #4]	@ (80085e8 <__sfp_lock_release+0x8>)
 80085e2:	f000 b99d 	b.w	8008920 <__retarget_lock_release_recursive>
 80085e6:	bf00      	nop
 80085e8:	20000c39 	.word	0x20000c39

080085ec <__sinit>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	4604      	mov	r4, r0
 80085f0:	f7ff fff0 	bl	80085d4 <__sfp_lock_acquire>
 80085f4:	6a23      	ldr	r3, [r4, #32]
 80085f6:	b11b      	cbz	r3, 8008600 <__sinit+0x14>
 80085f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085fc:	f7ff bff0 	b.w	80085e0 <__sfp_lock_release>
 8008600:	4b04      	ldr	r3, [pc, #16]	@ (8008614 <__sinit+0x28>)
 8008602:	6223      	str	r3, [r4, #32]
 8008604:	4b04      	ldr	r3, [pc, #16]	@ (8008618 <__sinit+0x2c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1f5      	bne.n	80085f8 <__sinit+0xc>
 800860c:	f7ff ffc4 	bl	8008598 <global_stdio_init.part.0>
 8008610:	e7f2      	b.n	80085f8 <__sinit+0xc>
 8008612:	bf00      	nop
 8008614:	08008559 	.word	0x08008559
 8008618:	20000c30 	.word	0x20000c30

0800861c <_fwalk_sglue>:
 800861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008620:	4607      	mov	r7, r0
 8008622:	4688      	mov	r8, r1
 8008624:	4614      	mov	r4, r2
 8008626:	2600      	movs	r6, #0
 8008628:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800862c:	f1b9 0901 	subs.w	r9, r9, #1
 8008630:	d505      	bpl.n	800863e <_fwalk_sglue+0x22>
 8008632:	6824      	ldr	r4, [r4, #0]
 8008634:	2c00      	cmp	r4, #0
 8008636:	d1f7      	bne.n	8008628 <_fwalk_sglue+0xc>
 8008638:	4630      	mov	r0, r6
 800863a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800863e:	89ab      	ldrh	r3, [r5, #12]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d907      	bls.n	8008654 <_fwalk_sglue+0x38>
 8008644:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008648:	3301      	adds	r3, #1
 800864a:	d003      	beq.n	8008654 <_fwalk_sglue+0x38>
 800864c:	4629      	mov	r1, r5
 800864e:	4638      	mov	r0, r7
 8008650:	47c0      	blx	r8
 8008652:	4306      	orrs	r6, r0
 8008654:	3568      	adds	r5, #104	@ 0x68
 8008656:	e7e9      	b.n	800862c <_fwalk_sglue+0x10>

08008658 <sniprintf>:
 8008658:	b40c      	push	{r2, r3}
 800865a:	b530      	push	{r4, r5, lr}
 800865c:	4b17      	ldr	r3, [pc, #92]	@ (80086bc <sniprintf+0x64>)
 800865e:	1e0c      	subs	r4, r1, #0
 8008660:	681d      	ldr	r5, [r3, #0]
 8008662:	b09d      	sub	sp, #116	@ 0x74
 8008664:	da08      	bge.n	8008678 <sniprintf+0x20>
 8008666:	238b      	movs	r3, #139	@ 0x8b
 8008668:	602b      	str	r3, [r5, #0]
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	b01d      	add	sp, #116	@ 0x74
 8008670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008674:	b002      	add	sp, #8
 8008676:	4770      	bx	lr
 8008678:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800867c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008680:	bf14      	ite	ne
 8008682:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008686:	4623      	moveq	r3, r4
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	9307      	str	r3, [sp, #28]
 800868c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008690:	9002      	str	r0, [sp, #8]
 8008692:	9006      	str	r0, [sp, #24]
 8008694:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008698:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800869a:	ab21      	add	r3, sp, #132	@ 0x84
 800869c:	a902      	add	r1, sp, #8
 800869e:	4628      	mov	r0, r5
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	f001 fc87 	bl	8009fb4 <_svfiprintf_r>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	bfbc      	itt	lt
 80086aa:	238b      	movlt	r3, #139	@ 0x8b
 80086ac:	602b      	strlt	r3, [r5, #0]
 80086ae:	2c00      	cmp	r4, #0
 80086b0:	d0dd      	beq.n	800866e <sniprintf+0x16>
 80086b2:	9b02      	ldr	r3, [sp, #8]
 80086b4:	2200      	movs	r2, #0
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	e7d9      	b.n	800866e <sniprintf+0x16>
 80086ba:	bf00      	nop
 80086bc:	2000067c 	.word	0x2000067c

080086c0 <__sread>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	460c      	mov	r4, r1
 80086c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c8:	f000 f8da 	bl	8008880 <_read_r>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	bfab      	itete	ge
 80086d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086d2:	89a3      	ldrhlt	r3, [r4, #12]
 80086d4:	181b      	addge	r3, r3, r0
 80086d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086da:	bfac      	ite	ge
 80086dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086de:	81a3      	strhlt	r3, [r4, #12]
 80086e0:	bd10      	pop	{r4, pc}

080086e2 <__swrite>:
 80086e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	461f      	mov	r7, r3
 80086e8:	898b      	ldrh	r3, [r1, #12]
 80086ea:	05db      	lsls	r3, r3, #23
 80086ec:	4605      	mov	r5, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	4616      	mov	r6, r2
 80086f2:	d505      	bpl.n	8008700 <__swrite+0x1e>
 80086f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f8:	2302      	movs	r3, #2
 80086fa:	2200      	movs	r2, #0
 80086fc:	f000 f8ae 	bl	800885c <_lseek_r>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800870a:	81a3      	strh	r3, [r4, #12]
 800870c:	4632      	mov	r2, r6
 800870e:	463b      	mov	r3, r7
 8008710:	4628      	mov	r0, r5
 8008712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008716:	f000 b8c5 	b.w	80088a4 <_write_r>

0800871a <__sseek>:
 800871a:	b510      	push	{r4, lr}
 800871c:	460c      	mov	r4, r1
 800871e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008722:	f000 f89b 	bl	800885c <_lseek_r>
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	bf15      	itete	ne
 800872c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800872e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008732:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008736:	81a3      	strheq	r3, [r4, #12]
 8008738:	bf18      	it	ne
 800873a:	81a3      	strhne	r3, [r4, #12]
 800873c:	bd10      	pop	{r4, pc}

0800873e <__sclose>:
 800873e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008742:	f000 b87b 	b.w	800883c <_close_r>

08008746 <memset>:
 8008746:	4402      	add	r2, r0
 8008748:	4603      	mov	r3, r0
 800874a:	4293      	cmp	r3, r2
 800874c:	d100      	bne.n	8008750 <memset+0xa>
 800874e:	4770      	bx	lr
 8008750:	f803 1b01 	strb.w	r1, [r3], #1
 8008754:	e7f9      	b.n	800874a <memset+0x4>

08008756 <strncpy>:
 8008756:	b510      	push	{r4, lr}
 8008758:	3901      	subs	r1, #1
 800875a:	4603      	mov	r3, r0
 800875c:	b132      	cbz	r2, 800876c <strncpy+0x16>
 800875e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008762:	f803 4b01 	strb.w	r4, [r3], #1
 8008766:	3a01      	subs	r2, #1
 8008768:	2c00      	cmp	r4, #0
 800876a:	d1f7      	bne.n	800875c <strncpy+0x6>
 800876c:	441a      	add	r2, r3
 800876e:	2100      	movs	r1, #0
 8008770:	4293      	cmp	r3, r2
 8008772:	d100      	bne.n	8008776 <strncpy+0x20>
 8008774:	bd10      	pop	{r4, pc}
 8008776:	f803 1b01 	strb.w	r1, [r3], #1
 800877a:	e7f9      	b.n	8008770 <strncpy+0x1a>

0800877c <strtok>:
 800877c:	4b16      	ldr	r3, [pc, #88]	@ (80087d8 <strtok+0x5c>)
 800877e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008782:	681f      	ldr	r7, [r3, #0]
 8008784:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008786:	4605      	mov	r5, r0
 8008788:	460e      	mov	r6, r1
 800878a:	b9ec      	cbnz	r4, 80087c8 <strtok+0x4c>
 800878c:	2050      	movs	r0, #80	@ 0x50
 800878e:	f000 ff7d 	bl	800968c <malloc>
 8008792:	4602      	mov	r2, r0
 8008794:	6478      	str	r0, [r7, #68]	@ 0x44
 8008796:	b920      	cbnz	r0, 80087a2 <strtok+0x26>
 8008798:	4b10      	ldr	r3, [pc, #64]	@ (80087dc <strtok+0x60>)
 800879a:	4811      	ldr	r0, [pc, #68]	@ (80087e0 <strtok+0x64>)
 800879c:	215b      	movs	r1, #91	@ 0x5b
 800879e:	f000 f8c1 	bl	8008924 <__assert_func>
 80087a2:	e9c0 4400 	strd	r4, r4, [r0]
 80087a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80087aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80087ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80087b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80087b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80087ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80087be:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80087c2:	6184      	str	r4, [r0, #24]
 80087c4:	7704      	strb	r4, [r0, #28]
 80087c6:	6244      	str	r4, [r0, #36]	@ 0x24
 80087c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	2301      	movs	r3, #1
 80087d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087d4:	f000 b806 	b.w	80087e4 <__strtok_r>
 80087d8:	2000067c 	.word	0x2000067c
 80087dc:	0800b011 	.word	0x0800b011
 80087e0:	0800b028 	.word	0x0800b028

080087e4 <__strtok_r>:
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	4604      	mov	r4, r0
 80087e8:	b908      	cbnz	r0, 80087ee <__strtok_r+0xa>
 80087ea:	6814      	ldr	r4, [r2, #0]
 80087ec:	b144      	cbz	r4, 8008800 <__strtok_r+0x1c>
 80087ee:	4620      	mov	r0, r4
 80087f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80087f4:	460f      	mov	r7, r1
 80087f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80087fa:	b91e      	cbnz	r6, 8008804 <__strtok_r+0x20>
 80087fc:	b965      	cbnz	r5, 8008818 <__strtok_r+0x34>
 80087fe:	6015      	str	r5, [r2, #0]
 8008800:	2000      	movs	r0, #0
 8008802:	e005      	b.n	8008810 <__strtok_r+0x2c>
 8008804:	42b5      	cmp	r5, r6
 8008806:	d1f6      	bne.n	80087f6 <__strtok_r+0x12>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1f0      	bne.n	80087ee <__strtok_r+0xa>
 800880c:	6014      	str	r4, [r2, #0]
 800880e:	7003      	strb	r3, [r0, #0]
 8008810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008812:	461c      	mov	r4, r3
 8008814:	e00c      	b.n	8008830 <__strtok_r+0x4c>
 8008816:	b915      	cbnz	r5, 800881e <__strtok_r+0x3a>
 8008818:	f814 3b01 	ldrb.w	r3, [r4], #1
 800881c:	460e      	mov	r6, r1
 800881e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008822:	42ab      	cmp	r3, r5
 8008824:	d1f7      	bne.n	8008816 <__strtok_r+0x32>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0f3      	beq.n	8008812 <__strtok_r+0x2e>
 800882a:	2300      	movs	r3, #0
 800882c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008830:	6014      	str	r4, [r2, #0]
 8008832:	e7ed      	b.n	8008810 <__strtok_r+0x2c>

08008834 <_localeconv_r>:
 8008834:	4800      	ldr	r0, [pc, #0]	@ (8008838 <_localeconv_r+0x4>)
 8008836:	4770      	bx	lr
 8008838:	200007bc 	.word	0x200007bc

0800883c <_close_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d06      	ldr	r5, [pc, #24]	@ (8008858 <_close_r+0x1c>)
 8008840:	2300      	movs	r3, #0
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7fa fbba 	bl	8002fc0 <_close>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_close_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_close_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000c34 	.word	0x20000c34

0800885c <_lseek_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4d07      	ldr	r5, [pc, #28]	@ (800887c <_lseek_r+0x20>)
 8008860:	4604      	mov	r4, r0
 8008862:	4608      	mov	r0, r1
 8008864:	4611      	mov	r1, r2
 8008866:	2200      	movs	r2, #0
 8008868:	602a      	str	r2, [r5, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f7fa fbcf 	bl	800300e <_lseek>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_lseek_r+0x1e>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_lseek_r+0x1e>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20000c34 	.word	0x20000c34

08008880 <_read_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4d07      	ldr	r5, [pc, #28]	@ (80088a0 <_read_r+0x20>)
 8008884:	4604      	mov	r4, r0
 8008886:	4608      	mov	r0, r1
 8008888:	4611      	mov	r1, r2
 800888a:	2200      	movs	r2, #0
 800888c:	602a      	str	r2, [r5, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	f7fa fb5d 	bl	8002f4e <_read>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_read_r+0x1e>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_read_r+0x1e>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	20000c34 	.word	0x20000c34

080088a4 <_write_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d07      	ldr	r5, [pc, #28]	@ (80088c4 <_write_r+0x20>)
 80088a8:	4604      	mov	r4, r0
 80088aa:	4608      	mov	r0, r1
 80088ac:	4611      	mov	r1, r2
 80088ae:	2200      	movs	r2, #0
 80088b0:	602a      	str	r2, [r5, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	f7fa fb68 	bl	8002f88 <_write>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_write_r+0x1e>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_write_r+0x1e>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20000c34 	.word	0x20000c34

080088c8 <__errno>:
 80088c8:	4b01      	ldr	r3, [pc, #4]	@ (80088d0 <__errno+0x8>)
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	2000067c 	.word	0x2000067c

080088d4 <__libc_init_array>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4d0d      	ldr	r5, [pc, #52]	@ (800890c <__libc_init_array+0x38>)
 80088d8:	4c0d      	ldr	r4, [pc, #52]	@ (8008910 <__libc_init_array+0x3c>)
 80088da:	1b64      	subs	r4, r4, r5
 80088dc:	10a4      	asrs	r4, r4, #2
 80088de:	2600      	movs	r6, #0
 80088e0:	42a6      	cmp	r6, r4
 80088e2:	d109      	bne.n	80088f8 <__libc_init_array+0x24>
 80088e4:	4d0b      	ldr	r5, [pc, #44]	@ (8008914 <__libc_init_array+0x40>)
 80088e6:	4c0c      	ldr	r4, [pc, #48]	@ (8008918 <__libc_init_array+0x44>)
 80088e8:	f002 f864 	bl	800a9b4 <_init>
 80088ec:	1b64      	subs	r4, r4, r5
 80088ee:	10a4      	asrs	r4, r4, #2
 80088f0:	2600      	movs	r6, #0
 80088f2:	42a6      	cmp	r6, r4
 80088f4:	d105      	bne.n	8008902 <__libc_init_array+0x2e>
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fc:	4798      	blx	r3
 80088fe:	3601      	adds	r6, #1
 8008900:	e7ee      	b.n	80088e0 <__libc_init_array+0xc>
 8008902:	f855 3b04 	ldr.w	r3, [r5], #4
 8008906:	4798      	blx	r3
 8008908:	3601      	adds	r6, #1
 800890a:	e7f2      	b.n	80088f2 <__libc_init_array+0x1e>
 800890c:	0800b2b4 	.word	0x0800b2b4
 8008910:	0800b2b4 	.word	0x0800b2b4
 8008914:	0800b2b4 	.word	0x0800b2b4
 8008918:	0800b2b8 	.word	0x0800b2b8

0800891c <__retarget_lock_init_recursive>:
 800891c:	4770      	bx	lr

0800891e <__retarget_lock_acquire_recursive>:
 800891e:	4770      	bx	lr

08008920 <__retarget_lock_release_recursive>:
 8008920:	4770      	bx	lr
	...

08008924 <__assert_func>:
 8008924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008926:	4614      	mov	r4, r2
 8008928:	461a      	mov	r2, r3
 800892a:	4b09      	ldr	r3, [pc, #36]	@ (8008950 <__assert_func+0x2c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4605      	mov	r5, r0
 8008930:	68d8      	ldr	r0, [r3, #12]
 8008932:	b954      	cbnz	r4, 800894a <__assert_func+0x26>
 8008934:	4b07      	ldr	r3, [pc, #28]	@ (8008954 <__assert_func+0x30>)
 8008936:	461c      	mov	r4, r3
 8008938:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800893c:	9100      	str	r1, [sp, #0]
 800893e:	462b      	mov	r3, r5
 8008940:	4905      	ldr	r1, [pc, #20]	@ (8008958 <__assert_func+0x34>)
 8008942:	f001 fcdf 	bl	800a304 <fiprintf>
 8008946:	f001 fd27 	bl	800a398 <abort>
 800894a:	4b04      	ldr	r3, [pc, #16]	@ (800895c <__assert_func+0x38>)
 800894c:	e7f4      	b.n	8008938 <__assert_func+0x14>
 800894e:	bf00      	nop
 8008950:	2000067c 	.word	0x2000067c
 8008954:	0800b0bd 	.word	0x0800b0bd
 8008958:	0800b08f 	.word	0x0800b08f
 800895c:	0800b082 	.word	0x0800b082

08008960 <quorem>:
 8008960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	6903      	ldr	r3, [r0, #16]
 8008966:	690c      	ldr	r4, [r1, #16]
 8008968:	42a3      	cmp	r3, r4
 800896a:	4607      	mov	r7, r0
 800896c:	db7e      	blt.n	8008a6c <quorem+0x10c>
 800896e:	3c01      	subs	r4, #1
 8008970:	f101 0814 	add.w	r8, r1, #20
 8008974:	00a3      	lsls	r3, r4, #2
 8008976:	f100 0514 	add.w	r5, r0, #20
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800898a:	3301      	adds	r3, #1
 800898c:	429a      	cmp	r2, r3
 800898e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008992:	fbb2 f6f3 	udiv	r6, r2, r3
 8008996:	d32e      	bcc.n	80089f6 <quorem+0x96>
 8008998:	f04f 0a00 	mov.w	sl, #0
 800899c:	46c4      	mov	ip, r8
 800899e:	46ae      	mov	lr, r5
 80089a0:	46d3      	mov	fp, sl
 80089a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089a6:	b298      	uxth	r0, r3
 80089a8:	fb06 a000 	mla	r0, r6, r0, sl
 80089ac:	0c02      	lsrs	r2, r0, #16
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	fb06 2303 	mla	r3, r6, r3, r2
 80089b4:	f8de 2000 	ldr.w	r2, [lr]
 80089b8:	b280      	uxth	r0, r0
 80089ba:	b292      	uxth	r2, r2
 80089bc:	1a12      	subs	r2, r2, r0
 80089be:	445a      	add	r2, fp
 80089c0:	f8de 0000 	ldr.w	r0, [lr]
 80089c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80089ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80089d2:	b292      	uxth	r2, r2
 80089d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80089d8:	45e1      	cmp	r9, ip
 80089da:	f84e 2b04 	str.w	r2, [lr], #4
 80089de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80089e2:	d2de      	bcs.n	80089a2 <quorem+0x42>
 80089e4:	9b00      	ldr	r3, [sp, #0]
 80089e6:	58eb      	ldr	r3, [r5, r3]
 80089e8:	b92b      	cbnz	r3, 80089f6 <quorem+0x96>
 80089ea:	9b01      	ldr	r3, [sp, #4]
 80089ec:	3b04      	subs	r3, #4
 80089ee:	429d      	cmp	r5, r3
 80089f0:	461a      	mov	r2, r3
 80089f2:	d32f      	bcc.n	8008a54 <quorem+0xf4>
 80089f4:	613c      	str	r4, [r7, #16]
 80089f6:	4638      	mov	r0, r7
 80089f8:	f001 f978 	bl	8009cec <__mcmp>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	db25      	blt.n	8008a4c <quorem+0xec>
 8008a00:	4629      	mov	r1, r5
 8008a02:	2000      	movs	r0, #0
 8008a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a08:	f8d1 c000 	ldr.w	ip, [r1]
 8008a0c:	fa1f fe82 	uxth.w	lr, r2
 8008a10:	fa1f f38c 	uxth.w	r3, ip
 8008a14:	eba3 030e 	sub.w	r3, r3, lr
 8008a18:	4403      	add	r3, r0
 8008a1a:	0c12      	lsrs	r2, r2, #16
 8008a1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a2a:	45c1      	cmp	r9, r8
 8008a2c:	f841 3b04 	str.w	r3, [r1], #4
 8008a30:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a34:	d2e6      	bcs.n	8008a04 <quorem+0xa4>
 8008a36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a3e:	b922      	cbnz	r2, 8008a4a <quorem+0xea>
 8008a40:	3b04      	subs	r3, #4
 8008a42:	429d      	cmp	r5, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	d30b      	bcc.n	8008a60 <quorem+0x100>
 8008a48:	613c      	str	r4, [r7, #16]
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	b003      	add	sp, #12
 8008a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	6812      	ldr	r2, [r2, #0]
 8008a56:	3b04      	subs	r3, #4
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	d1cb      	bne.n	80089f4 <quorem+0x94>
 8008a5c:	3c01      	subs	r4, #1
 8008a5e:	e7c6      	b.n	80089ee <quorem+0x8e>
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	3b04      	subs	r3, #4
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	d1ef      	bne.n	8008a48 <quorem+0xe8>
 8008a68:	3c01      	subs	r4, #1
 8008a6a:	e7ea      	b.n	8008a42 <quorem+0xe2>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e7ee      	b.n	8008a4e <quorem+0xee>

08008a70 <_dtoa_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	69c7      	ldr	r7, [r0, #28]
 8008a76:	b099      	sub	sp, #100	@ 0x64
 8008a78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a7c:	ec55 4b10 	vmov	r4, r5, d0
 8008a80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008a82:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a84:	4683      	mov	fp, r0
 8008a86:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a8a:	b97f      	cbnz	r7, 8008aac <_dtoa_r+0x3c>
 8008a8c:	2010      	movs	r0, #16
 8008a8e:	f000 fdfd 	bl	800968c <malloc>
 8008a92:	4602      	mov	r2, r0
 8008a94:	f8cb 001c 	str.w	r0, [fp, #28]
 8008a98:	b920      	cbnz	r0, 8008aa4 <_dtoa_r+0x34>
 8008a9a:	4ba7      	ldr	r3, [pc, #668]	@ (8008d38 <_dtoa_r+0x2c8>)
 8008a9c:	21ef      	movs	r1, #239	@ 0xef
 8008a9e:	48a7      	ldr	r0, [pc, #668]	@ (8008d3c <_dtoa_r+0x2cc>)
 8008aa0:	f7ff ff40 	bl	8008924 <__assert_func>
 8008aa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008aa8:	6007      	str	r7, [r0, #0]
 8008aaa:	60c7      	str	r7, [r0, #12]
 8008aac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ab0:	6819      	ldr	r1, [r3, #0]
 8008ab2:	b159      	cbz	r1, 8008acc <_dtoa_r+0x5c>
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	604a      	str	r2, [r1, #4]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4093      	lsls	r3, r2
 8008abc:	608b      	str	r3, [r1, #8]
 8008abe:	4658      	mov	r0, fp
 8008ac0:	f000 feda 	bl	8009878 <_Bfree>
 8008ac4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	1e2b      	subs	r3, r5, #0
 8008ace:	bfb9      	ittee	lt
 8008ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ad4:	9303      	strlt	r3, [sp, #12]
 8008ad6:	2300      	movge	r3, #0
 8008ad8:	6033      	strge	r3, [r6, #0]
 8008ada:	9f03      	ldr	r7, [sp, #12]
 8008adc:	4b98      	ldr	r3, [pc, #608]	@ (8008d40 <_dtoa_r+0x2d0>)
 8008ade:	bfbc      	itt	lt
 8008ae0:	2201      	movlt	r2, #1
 8008ae2:	6032      	strlt	r2, [r6, #0]
 8008ae4:	43bb      	bics	r3, r7
 8008ae6:	d112      	bne.n	8008b0e <_dtoa_r+0x9e>
 8008ae8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008aea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008af4:	4323      	orrs	r3, r4
 8008af6:	f000 854d 	beq.w	8009594 <_dtoa_r+0xb24>
 8008afa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008afc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008d54 <_dtoa_r+0x2e4>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 854f 	beq.w	80095a4 <_dtoa_r+0xb34>
 8008b06:	f10a 0303 	add.w	r3, sl, #3
 8008b0a:	f000 bd49 	b.w	80095a0 <_dtoa_r+0xb30>
 8008b0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b12:	2200      	movs	r2, #0
 8008b14:	ec51 0b17 	vmov	r0, r1, d7
 8008b18:	2300      	movs	r3, #0
 8008b1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008b1e:	f7f7 ffe3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b22:	4680      	mov	r8, r0
 8008b24:	b158      	cbz	r0, 8008b3e <_dtoa_r+0xce>
 8008b26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b28:	2301      	movs	r3, #1
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b2e:	b113      	cbz	r3, 8008b36 <_dtoa_r+0xc6>
 8008b30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b32:	4b84      	ldr	r3, [pc, #528]	@ (8008d44 <_dtoa_r+0x2d4>)
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008d58 <_dtoa_r+0x2e8>
 8008b3a:	f000 bd33 	b.w	80095a4 <_dtoa_r+0xb34>
 8008b3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b42:	aa16      	add	r2, sp, #88	@ 0x58
 8008b44:	a917      	add	r1, sp, #92	@ 0x5c
 8008b46:	4658      	mov	r0, fp
 8008b48:	f001 f980 	bl	8009e4c <__d2b>
 8008b4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b50:	4681      	mov	r9, r0
 8008b52:	2e00      	cmp	r6, #0
 8008b54:	d077      	beq.n	8008c46 <_dtoa_r+0x1d6>
 8008b56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b70:	4619      	mov	r1, r3
 8008b72:	2200      	movs	r2, #0
 8008b74:	4b74      	ldr	r3, [pc, #464]	@ (8008d48 <_dtoa_r+0x2d8>)
 8008b76:	f7f7 fb97 	bl	80002a8 <__aeabi_dsub>
 8008b7a:	a369      	add	r3, pc, #420	@ (adr r3, 8008d20 <_dtoa_r+0x2b0>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fd4a 	bl	8000618 <__aeabi_dmul>
 8008b84:	a368      	add	r3, pc, #416	@ (adr r3, 8008d28 <_dtoa_r+0x2b8>)
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fb8f 	bl	80002ac <__adddf3>
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4630      	mov	r0, r6
 8008b92:	460d      	mov	r5, r1
 8008b94:	f7f7 fcd6 	bl	8000544 <__aeabi_i2d>
 8008b98:	a365      	add	r3, pc, #404	@ (adr r3, 8008d30 <_dtoa_r+0x2c0>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fd3b 	bl	8000618 <__aeabi_dmul>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	f7f7 fb7f 	bl	80002ac <__adddf3>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	f7f7 ffe1 	bl	8000b78 <__aeabi_d2iz>
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4607      	mov	r7, r0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f7f7 ff9c 	bl	8000afc <__aeabi_dcmplt>
 8008bc4:	b140      	cbz	r0, 8008bd8 <_dtoa_r+0x168>
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	f7f7 fcbc 	bl	8000544 <__aeabi_i2d>
 8008bcc:	4622      	mov	r2, r4
 8008bce:	462b      	mov	r3, r5
 8008bd0:	f7f7 ff8a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bd4:	b900      	cbnz	r0, 8008bd8 <_dtoa_r+0x168>
 8008bd6:	3f01      	subs	r7, #1
 8008bd8:	2f16      	cmp	r7, #22
 8008bda:	d851      	bhi.n	8008c80 <_dtoa_r+0x210>
 8008bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8008d4c <_dtoa_r+0x2dc>)
 8008bde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bea:	f7f7 ff87 	bl	8000afc <__aeabi_dcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d048      	beq.n	8008c84 <_dtoa_r+0x214>
 8008bf2:	3f01      	subs	r7, #1
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008bf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008bfa:	1b9b      	subs	r3, r3, r6
 8008bfc:	1e5a      	subs	r2, r3, #1
 8008bfe:	bf44      	itt	mi
 8008c00:	f1c3 0801 	rsbmi	r8, r3, #1
 8008c04:	2300      	movmi	r3, #0
 8008c06:	9208      	str	r2, [sp, #32]
 8008c08:	bf54      	ite	pl
 8008c0a:	f04f 0800 	movpl.w	r8, #0
 8008c0e:	9308      	strmi	r3, [sp, #32]
 8008c10:	2f00      	cmp	r7, #0
 8008c12:	db39      	blt.n	8008c88 <_dtoa_r+0x218>
 8008c14:	9b08      	ldr	r3, [sp, #32]
 8008c16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008c18:	443b      	add	r3, r7
 8008c1a:	9308      	str	r3, [sp, #32]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c22:	2b09      	cmp	r3, #9
 8008c24:	d864      	bhi.n	8008cf0 <_dtoa_r+0x280>
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	bfc4      	itt	gt
 8008c2a:	3b04      	subgt	r3, #4
 8008c2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c30:	f1a3 0302 	sub.w	r3, r3, #2
 8008c34:	bfcc      	ite	gt
 8008c36:	2400      	movgt	r4, #0
 8008c38:	2401      	movle	r4, #1
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d863      	bhi.n	8008d06 <_dtoa_r+0x296>
 8008c3e:	e8df f003 	tbb	[pc, r3]
 8008c42:	372a      	.short	0x372a
 8008c44:	5535      	.short	0x5535
 8008c46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008c4a:	441e      	add	r6, r3
 8008c4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	bfc1      	itttt	gt
 8008c54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c58:	409f      	lslgt	r7, r3
 8008c5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c62:	bfd6      	itet	le
 8008c64:	f1c3 0320 	rsble	r3, r3, #32
 8008c68:	ea47 0003 	orrgt.w	r0, r7, r3
 8008c6c:	fa04 f003 	lslle.w	r0, r4, r3
 8008c70:	f7f7 fc58 	bl	8000524 <__aeabi_ui2d>
 8008c74:	2201      	movs	r2, #1
 8008c76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008c7a:	3e01      	subs	r6, #1
 8008c7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008c7e:	e777      	b.n	8008b70 <_dtoa_r+0x100>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e7b8      	b.n	8008bf6 <_dtoa_r+0x186>
 8008c84:	9012      	str	r0, [sp, #72]	@ 0x48
 8008c86:	e7b7      	b.n	8008bf8 <_dtoa_r+0x188>
 8008c88:	427b      	negs	r3, r7
 8008c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	eba8 0807 	sub.w	r8, r8, r7
 8008c92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c94:	e7c4      	b.n	8008c20 <_dtoa_r+0x1b0>
 8008c96:	2300      	movs	r3, #0
 8008c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dc35      	bgt.n	8008d0c <_dtoa_r+0x29c>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	9307      	str	r3, [sp, #28]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008caa:	e00b      	b.n	8008cc4 <_dtoa_r+0x254>
 8008cac:	2301      	movs	r3, #1
 8008cae:	e7f3      	b.n	8008c98 <_dtoa_r+0x228>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cb6:	18fb      	adds	r3, r7, r3
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	9307      	str	r3, [sp, #28]
 8008cc0:	bfb8      	it	lt
 8008cc2:	2301      	movlt	r3, #1
 8008cc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008cc8:	2100      	movs	r1, #0
 8008cca:	2204      	movs	r2, #4
 8008ccc:	f102 0514 	add.w	r5, r2, #20
 8008cd0:	429d      	cmp	r5, r3
 8008cd2:	d91f      	bls.n	8008d14 <_dtoa_r+0x2a4>
 8008cd4:	6041      	str	r1, [r0, #4]
 8008cd6:	4658      	mov	r0, fp
 8008cd8:	f000 fd8e 	bl	80097f8 <_Balloc>
 8008cdc:	4682      	mov	sl, r0
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d13c      	bne.n	8008d5c <_dtoa_r+0x2ec>
 8008ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d50 <_dtoa_r+0x2e0>)
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008cea:	e6d8      	b.n	8008a9e <_dtoa_r+0x2e>
 8008cec:	2301      	movs	r3, #1
 8008cee:	e7e0      	b.n	8008cb2 <_dtoa_r+0x242>
 8008cf0:	2401      	movs	r4, #1
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	9307      	str	r3, [sp, #28]
 8008d00:	2200      	movs	r2, #0
 8008d02:	2312      	movs	r3, #18
 8008d04:	e7d0      	b.n	8008ca8 <_dtoa_r+0x238>
 8008d06:	2301      	movs	r3, #1
 8008d08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d0a:	e7f5      	b.n	8008cf8 <_dtoa_r+0x288>
 8008d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	e7d7      	b.n	8008cc4 <_dtoa_r+0x254>
 8008d14:	3101      	adds	r1, #1
 8008d16:	0052      	lsls	r2, r2, #1
 8008d18:	e7d8      	b.n	8008ccc <_dtoa_r+0x25c>
 8008d1a:	bf00      	nop
 8008d1c:	f3af 8000 	nop.w
 8008d20:	636f4361 	.word	0x636f4361
 8008d24:	3fd287a7 	.word	0x3fd287a7
 8008d28:	8b60c8b3 	.word	0x8b60c8b3
 8008d2c:	3fc68a28 	.word	0x3fc68a28
 8008d30:	509f79fb 	.word	0x509f79fb
 8008d34:	3fd34413 	.word	0x3fd34413
 8008d38:	0800b011 	.word	0x0800b011
 8008d3c:	0800b0cb 	.word	0x0800b0cb
 8008d40:	7ff00000 	.word	0x7ff00000
 8008d44:	0800afee 	.word	0x0800afee
 8008d48:	3ff80000 	.word	0x3ff80000
 8008d4c:	0800b1c8 	.word	0x0800b1c8
 8008d50:	0800b123 	.word	0x0800b123
 8008d54:	0800b0c7 	.word	0x0800b0c7
 8008d58:	0800afed 	.word	0x0800afed
 8008d5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d60:	6018      	str	r0, [r3, #0]
 8008d62:	9b07      	ldr	r3, [sp, #28]
 8008d64:	2b0e      	cmp	r3, #14
 8008d66:	f200 80a4 	bhi.w	8008eb2 <_dtoa_r+0x442>
 8008d6a:	2c00      	cmp	r4, #0
 8008d6c:	f000 80a1 	beq.w	8008eb2 <_dtoa_r+0x442>
 8008d70:	2f00      	cmp	r7, #0
 8008d72:	dd33      	ble.n	8008ddc <_dtoa_r+0x36c>
 8008d74:	4bad      	ldr	r3, [pc, #692]	@ (800902c <_dtoa_r+0x5bc>)
 8008d76:	f007 020f 	and.w	r2, r7, #15
 8008d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d7e:	ed93 7b00 	vldr	d7, [r3]
 8008d82:	05f8      	lsls	r0, r7, #23
 8008d84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008d88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008d8c:	d516      	bpl.n	8008dbc <_dtoa_r+0x34c>
 8008d8e:	4ba8      	ldr	r3, [pc, #672]	@ (8009030 <_dtoa_r+0x5c0>)
 8008d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d98:	f7f7 fd68 	bl	800086c <__aeabi_ddiv>
 8008d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da0:	f004 040f 	and.w	r4, r4, #15
 8008da4:	2603      	movs	r6, #3
 8008da6:	4da2      	ldr	r5, [pc, #648]	@ (8009030 <_dtoa_r+0x5c0>)
 8008da8:	b954      	cbnz	r4, 8008dc0 <_dtoa_r+0x350>
 8008daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db2:	f7f7 fd5b 	bl	800086c <__aeabi_ddiv>
 8008db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dba:	e028      	b.n	8008e0e <_dtoa_r+0x39e>
 8008dbc:	2602      	movs	r6, #2
 8008dbe:	e7f2      	b.n	8008da6 <_dtoa_r+0x336>
 8008dc0:	07e1      	lsls	r1, r4, #31
 8008dc2:	d508      	bpl.n	8008dd6 <_dtoa_r+0x366>
 8008dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dcc:	f7f7 fc24 	bl	8000618 <__aeabi_dmul>
 8008dd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	1064      	asrs	r4, r4, #1
 8008dd8:	3508      	adds	r5, #8
 8008dda:	e7e5      	b.n	8008da8 <_dtoa_r+0x338>
 8008ddc:	f000 80d2 	beq.w	8008f84 <_dtoa_r+0x514>
 8008de0:	427c      	negs	r4, r7
 8008de2:	4b92      	ldr	r3, [pc, #584]	@ (800902c <_dtoa_r+0x5bc>)
 8008de4:	4d92      	ldr	r5, [pc, #584]	@ (8009030 <_dtoa_r+0x5c0>)
 8008de6:	f004 020f 	and.w	r2, r4, #15
 8008dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008df6:	f7f7 fc0f 	bl	8000618 <__aeabi_dmul>
 8008dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dfe:	1124      	asrs	r4, r4, #4
 8008e00:	2300      	movs	r3, #0
 8008e02:	2602      	movs	r6, #2
 8008e04:	2c00      	cmp	r4, #0
 8008e06:	f040 80b2 	bne.w	8008f6e <_dtoa_r+0x4fe>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1d3      	bne.n	8008db6 <_dtoa_r+0x346>
 8008e0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 80b7 	beq.w	8008f88 <_dtoa_r+0x518>
 8008e1a:	4b86      	ldr	r3, [pc, #536]	@ (8009034 <_dtoa_r+0x5c4>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 fe6b 	bl	8000afc <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f000 80ae 	beq.w	8008f88 <_dtoa_r+0x518>
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 80aa 	beq.w	8008f88 <_dtoa_r+0x518>
 8008e34:	9b00      	ldr	r3, [sp, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dd37      	ble.n	8008eaa <_dtoa_r+0x43a>
 8008e3a:	1e7b      	subs	r3, r7, #1
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	4620      	mov	r0, r4
 8008e40:	4b7d      	ldr	r3, [pc, #500]	@ (8009038 <_dtoa_r+0x5c8>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	4629      	mov	r1, r5
 8008e46:	f7f7 fbe7 	bl	8000618 <__aeabi_dmul>
 8008e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e4e:	9c00      	ldr	r4, [sp, #0]
 8008e50:	3601      	adds	r6, #1
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7f7 fb76 	bl	8000544 <__aeabi_i2d>
 8008e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e5c:	f7f7 fbdc 	bl	8000618 <__aeabi_dmul>
 8008e60:	4b76      	ldr	r3, [pc, #472]	@ (800903c <_dtoa_r+0x5cc>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	f7f7 fa22 	bl	80002ac <__adddf3>
 8008e68:	4605      	mov	r5, r0
 8008e6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	f040 808d 	bne.w	8008f8e <_dtoa_r+0x51e>
 8008e74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e78:	4b71      	ldr	r3, [pc, #452]	@ (8009040 <_dtoa_r+0x5d0>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f7f7 fa14 	bl	80002a8 <__aeabi_dsub>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e88:	462a      	mov	r2, r5
 8008e8a:	4633      	mov	r3, r6
 8008e8c:	f7f7 fe54 	bl	8000b38 <__aeabi_dcmpgt>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f040 828b 	bne.w	80093ac <_dtoa_r+0x93c>
 8008e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e9a:	462a      	mov	r2, r5
 8008e9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ea0:	f7f7 fe2c 	bl	8000afc <__aeabi_dcmplt>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f040 8128 	bne.w	80090fa <_dtoa_r+0x68a>
 8008eaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008eae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008eb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f2c0 815a 	blt.w	800916e <_dtoa_r+0x6fe>
 8008eba:	2f0e      	cmp	r7, #14
 8008ebc:	f300 8157 	bgt.w	800916e <_dtoa_r+0x6fe>
 8008ec0:	4b5a      	ldr	r3, [pc, #360]	@ (800902c <_dtoa_r+0x5bc>)
 8008ec2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ec6:	ed93 7b00 	vldr	d7, [r3]
 8008eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	ed8d 7b00 	vstr	d7, [sp]
 8008ed2:	da03      	bge.n	8008edc <_dtoa_r+0x46c>
 8008ed4:	9b07      	ldr	r3, [sp, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f340 8101 	ble.w	80090de <_dtoa_r+0x66e>
 8008edc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ee0:	4656      	mov	r6, sl
 8008ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 fcbf 	bl	800086c <__aeabi_ddiv>
 8008eee:	f7f7 fe43 	bl	8000b78 <__aeabi_d2iz>
 8008ef2:	4680      	mov	r8, r0
 8008ef4:	f7f7 fb26 	bl	8000544 <__aeabi_i2d>
 8008ef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008efc:	f7f7 fb8c 	bl	8000618 <__aeabi_dmul>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4620      	mov	r0, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008f0c:	f7f7 f9cc 	bl	80002a8 <__aeabi_dsub>
 8008f10:	f806 4b01 	strb.w	r4, [r6], #1
 8008f14:	9d07      	ldr	r5, [sp, #28]
 8008f16:	eba6 040a 	sub.w	r4, r6, sl
 8008f1a:	42a5      	cmp	r5, r4
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	f040 8117 	bne.w	8009152 <_dtoa_r+0x6e2>
 8008f24:	f7f7 f9c2 	bl	80002ac <__adddf3>
 8008f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	460d      	mov	r5, r1
 8008f30:	f7f7 fe02 	bl	8000b38 <__aeabi_dcmpgt>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	f040 80f9 	bne.w	800912c <_dtoa_r+0x6bc>
 8008f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7f7 fdd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f46:	b118      	cbz	r0, 8008f50 <_dtoa_r+0x4e0>
 8008f48:	f018 0f01 	tst.w	r8, #1
 8008f4c:	f040 80ee 	bne.w	800912c <_dtoa_r+0x6bc>
 8008f50:	4649      	mov	r1, r9
 8008f52:	4658      	mov	r0, fp
 8008f54:	f000 fc90 	bl	8009878 <_Bfree>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	7033      	strb	r3, [r6, #0]
 8008f5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f5e:	3701      	adds	r7, #1
 8008f60:	601f      	str	r7, [r3, #0]
 8008f62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 831d 	beq.w	80095a4 <_dtoa_r+0xb34>
 8008f6a:	601e      	str	r6, [r3, #0]
 8008f6c:	e31a      	b.n	80095a4 <_dtoa_r+0xb34>
 8008f6e:	07e2      	lsls	r2, r4, #31
 8008f70:	d505      	bpl.n	8008f7e <_dtoa_r+0x50e>
 8008f72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f76:	f7f7 fb4f 	bl	8000618 <__aeabi_dmul>
 8008f7a:	3601      	adds	r6, #1
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	1064      	asrs	r4, r4, #1
 8008f80:	3508      	adds	r5, #8
 8008f82:	e73f      	b.n	8008e04 <_dtoa_r+0x394>
 8008f84:	2602      	movs	r6, #2
 8008f86:	e742      	b.n	8008e0e <_dtoa_r+0x39e>
 8008f88:	9c07      	ldr	r4, [sp, #28]
 8008f8a:	9704      	str	r7, [sp, #16]
 8008f8c:	e761      	b.n	8008e52 <_dtoa_r+0x3e2>
 8008f8e:	4b27      	ldr	r3, [pc, #156]	@ (800902c <_dtoa_r+0x5bc>)
 8008f90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f9a:	4454      	add	r4, sl
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	d053      	beq.n	8009048 <_dtoa_r+0x5d8>
 8008fa0:	4928      	ldr	r1, [pc, #160]	@ (8009044 <_dtoa_r+0x5d4>)
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	f7f7 fc62 	bl	800086c <__aeabi_ddiv>
 8008fa8:	4633      	mov	r3, r6
 8008faa:	462a      	mov	r2, r5
 8008fac:	f7f7 f97c 	bl	80002a8 <__aeabi_dsub>
 8008fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fb4:	4656      	mov	r6, sl
 8008fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fba:	f7f7 fddd 	bl	8000b78 <__aeabi_d2iz>
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	f7f7 fac0 	bl	8000544 <__aeabi_i2d>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fcc:	f7f7 f96c 	bl	80002a8 <__aeabi_dsub>
 8008fd0:	3530      	adds	r5, #48	@ 0x30
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fda:	f806 5b01 	strb.w	r5, [r6], #1
 8008fde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fe2:	f7f7 fd8b 	bl	8000afc <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d171      	bne.n	80090ce <_dtoa_r+0x65e>
 8008fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fee:	4911      	ldr	r1, [pc, #68]	@ (8009034 <_dtoa_r+0x5c4>)
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f7f7 f959 	bl	80002a8 <__aeabi_dsub>
 8008ff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ffa:	f7f7 fd7f 	bl	8000afc <__aeabi_dcmplt>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f040 8095 	bne.w	800912e <_dtoa_r+0x6be>
 8009004:	42a6      	cmp	r6, r4
 8009006:	f43f af50 	beq.w	8008eaa <_dtoa_r+0x43a>
 800900a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800900e:	4b0a      	ldr	r3, [pc, #40]	@ (8009038 <_dtoa_r+0x5c8>)
 8009010:	2200      	movs	r2, #0
 8009012:	f7f7 fb01 	bl	8000618 <__aeabi_dmul>
 8009016:	4b08      	ldr	r3, [pc, #32]	@ (8009038 <_dtoa_r+0x5c8>)
 8009018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800901c:	2200      	movs	r2, #0
 800901e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009022:	f7f7 faf9 	bl	8000618 <__aeabi_dmul>
 8009026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800902a:	e7c4      	b.n	8008fb6 <_dtoa_r+0x546>
 800902c:	0800b1c8 	.word	0x0800b1c8
 8009030:	0800b1a0 	.word	0x0800b1a0
 8009034:	3ff00000 	.word	0x3ff00000
 8009038:	40240000 	.word	0x40240000
 800903c:	401c0000 	.word	0x401c0000
 8009040:	40140000 	.word	0x40140000
 8009044:	3fe00000 	.word	0x3fe00000
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	f7f7 fae4 	bl	8000618 <__aeabi_dmul>
 8009050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009054:	9415      	str	r4, [sp, #84]	@ 0x54
 8009056:	4656      	mov	r6, sl
 8009058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800905c:	f7f7 fd8c 	bl	8000b78 <__aeabi_d2iz>
 8009060:	4605      	mov	r5, r0
 8009062:	f7f7 fa6f 	bl	8000544 <__aeabi_i2d>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800906e:	f7f7 f91b 	bl	80002a8 <__aeabi_dsub>
 8009072:	3530      	adds	r5, #48	@ 0x30
 8009074:	f806 5b01 	strb.w	r5, [r6], #1
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	42a6      	cmp	r6, r4
 800907e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009082:	f04f 0200 	mov.w	r2, #0
 8009086:	d124      	bne.n	80090d2 <_dtoa_r+0x662>
 8009088:	4bac      	ldr	r3, [pc, #688]	@ (800933c <_dtoa_r+0x8cc>)
 800908a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800908e:	f7f7 f90d 	bl	80002ac <__adddf3>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800909a:	f7f7 fd4d 	bl	8000b38 <__aeabi_dcmpgt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d145      	bne.n	800912e <_dtoa_r+0x6be>
 80090a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090a6:	49a5      	ldr	r1, [pc, #660]	@ (800933c <_dtoa_r+0x8cc>)
 80090a8:	2000      	movs	r0, #0
 80090aa:	f7f7 f8fd 	bl	80002a8 <__aeabi_dsub>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b6:	f7f7 fd21 	bl	8000afc <__aeabi_dcmplt>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f43f aef5 	beq.w	8008eaa <_dtoa_r+0x43a>
 80090c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80090c2:	1e73      	subs	r3, r6, #1
 80090c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80090c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090ca:	2b30      	cmp	r3, #48	@ 0x30
 80090cc:	d0f8      	beq.n	80090c0 <_dtoa_r+0x650>
 80090ce:	9f04      	ldr	r7, [sp, #16]
 80090d0:	e73e      	b.n	8008f50 <_dtoa_r+0x4e0>
 80090d2:	4b9b      	ldr	r3, [pc, #620]	@ (8009340 <_dtoa_r+0x8d0>)
 80090d4:	f7f7 faa0 	bl	8000618 <__aeabi_dmul>
 80090d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090dc:	e7bc      	b.n	8009058 <_dtoa_r+0x5e8>
 80090de:	d10c      	bne.n	80090fa <_dtoa_r+0x68a>
 80090e0:	4b98      	ldr	r3, [pc, #608]	@ (8009344 <_dtoa_r+0x8d4>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090e8:	f7f7 fa96 	bl	8000618 <__aeabi_dmul>
 80090ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090f0:	f7f7 fd18 	bl	8000b24 <__aeabi_dcmpge>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f000 8157 	beq.w	80093a8 <_dtoa_r+0x938>
 80090fa:	2400      	movs	r4, #0
 80090fc:	4625      	mov	r5, r4
 80090fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009100:	43db      	mvns	r3, r3
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	4656      	mov	r6, sl
 8009106:	2700      	movs	r7, #0
 8009108:	4621      	mov	r1, r4
 800910a:	4658      	mov	r0, fp
 800910c:	f000 fbb4 	bl	8009878 <_Bfree>
 8009110:	2d00      	cmp	r5, #0
 8009112:	d0dc      	beq.n	80090ce <_dtoa_r+0x65e>
 8009114:	b12f      	cbz	r7, 8009122 <_dtoa_r+0x6b2>
 8009116:	42af      	cmp	r7, r5
 8009118:	d003      	beq.n	8009122 <_dtoa_r+0x6b2>
 800911a:	4639      	mov	r1, r7
 800911c:	4658      	mov	r0, fp
 800911e:	f000 fbab 	bl	8009878 <_Bfree>
 8009122:	4629      	mov	r1, r5
 8009124:	4658      	mov	r0, fp
 8009126:	f000 fba7 	bl	8009878 <_Bfree>
 800912a:	e7d0      	b.n	80090ce <_dtoa_r+0x65e>
 800912c:	9704      	str	r7, [sp, #16]
 800912e:	4633      	mov	r3, r6
 8009130:	461e      	mov	r6, r3
 8009132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009136:	2a39      	cmp	r2, #57	@ 0x39
 8009138:	d107      	bne.n	800914a <_dtoa_r+0x6da>
 800913a:	459a      	cmp	sl, r3
 800913c:	d1f8      	bne.n	8009130 <_dtoa_r+0x6c0>
 800913e:	9a04      	ldr	r2, [sp, #16]
 8009140:	3201      	adds	r2, #1
 8009142:	9204      	str	r2, [sp, #16]
 8009144:	2230      	movs	r2, #48	@ 0x30
 8009146:	f88a 2000 	strb.w	r2, [sl]
 800914a:	781a      	ldrb	r2, [r3, #0]
 800914c:	3201      	adds	r2, #1
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	e7bd      	b.n	80090ce <_dtoa_r+0x65e>
 8009152:	4b7b      	ldr	r3, [pc, #492]	@ (8009340 <_dtoa_r+0x8d0>)
 8009154:	2200      	movs	r2, #0
 8009156:	f7f7 fa5f 	bl	8000618 <__aeabi_dmul>
 800915a:	2200      	movs	r2, #0
 800915c:	2300      	movs	r3, #0
 800915e:	4604      	mov	r4, r0
 8009160:	460d      	mov	r5, r1
 8009162:	f7f7 fcc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009166:	2800      	cmp	r0, #0
 8009168:	f43f aebb 	beq.w	8008ee2 <_dtoa_r+0x472>
 800916c:	e6f0      	b.n	8008f50 <_dtoa_r+0x4e0>
 800916e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009170:	2a00      	cmp	r2, #0
 8009172:	f000 80db 	beq.w	800932c <_dtoa_r+0x8bc>
 8009176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009178:	2a01      	cmp	r2, #1
 800917a:	f300 80bf 	bgt.w	80092fc <_dtoa_r+0x88c>
 800917e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009180:	2a00      	cmp	r2, #0
 8009182:	f000 80b7 	beq.w	80092f4 <_dtoa_r+0x884>
 8009186:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800918a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800918c:	4646      	mov	r6, r8
 800918e:	9a08      	ldr	r2, [sp, #32]
 8009190:	2101      	movs	r1, #1
 8009192:	441a      	add	r2, r3
 8009194:	4658      	mov	r0, fp
 8009196:	4498      	add	r8, r3
 8009198:	9208      	str	r2, [sp, #32]
 800919a:	f000 fc21 	bl	80099e0 <__i2b>
 800919e:	4605      	mov	r5, r0
 80091a0:	b15e      	cbz	r6, 80091ba <_dtoa_r+0x74a>
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dd08      	ble.n	80091ba <_dtoa_r+0x74a>
 80091a8:	42b3      	cmp	r3, r6
 80091aa:	9a08      	ldr	r2, [sp, #32]
 80091ac:	bfa8      	it	ge
 80091ae:	4633      	movge	r3, r6
 80091b0:	eba8 0803 	sub.w	r8, r8, r3
 80091b4:	1af6      	subs	r6, r6, r3
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	9308      	str	r3, [sp, #32]
 80091ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091bc:	b1f3      	cbz	r3, 80091fc <_dtoa_r+0x78c>
 80091be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80b7 	beq.w	8009334 <_dtoa_r+0x8c4>
 80091c6:	b18c      	cbz	r4, 80091ec <_dtoa_r+0x77c>
 80091c8:	4629      	mov	r1, r5
 80091ca:	4622      	mov	r2, r4
 80091cc:	4658      	mov	r0, fp
 80091ce:	f000 fcc7 	bl	8009b60 <__pow5mult>
 80091d2:	464a      	mov	r2, r9
 80091d4:	4601      	mov	r1, r0
 80091d6:	4605      	mov	r5, r0
 80091d8:	4658      	mov	r0, fp
 80091da:	f000 fc17 	bl	8009a0c <__multiply>
 80091de:	4649      	mov	r1, r9
 80091e0:	9004      	str	r0, [sp, #16]
 80091e2:	4658      	mov	r0, fp
 80091e4:	f000 fb48 	bl	8009878 <_Bfree>
 80091e8:	9b04      	ldr	r3, [sp, #16]
 80091ea:	4699      	mov	r9, r3
 80091ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ee:	1b1a      	subs	r2, r3, r4
 80091f0:	d004      	beq.n	80091fc <_dtoa_r+0x78c>
 80091f2:	4649      	mov	r1, r9
 80091f4:	4658      	mov	r0, fp
 80091f6:	f000 fcb3 	bl	8009b60 <__pow5mult>
 80091fa:	4681      	mov	r9, r0
 80091fc:	2101      	movs	r1, #1
 80091fe:	4658      	mov	r0, fp
 8009200:	f000 fbee 	bl	80099e0 <__i2b>
 8009204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009206:	4604      	mov	r4, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 81cf 	beq.w	80095ac <_dtoa_r+0xb3c>
 800920e:	461a      	mov	r2, r3
 8009210:	4601      	mov	r1, r0
 8009212:	4658      	mov	r0, fp
 8009214:	f000 fca4 	bl	8009b60 <__pow5mult>
 8009218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921a:	2b01      	cmp	r3, #1
 800921c:	4604      	mov	r4, r0
 800921e:	f300 8095 	bgt.w	800934c <_dtoa_r+0x8dc>
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	f040 8087 	bne.w	8009338 <_dtoa_r+0x8c8>
 800922a:	9b03      	ldr	r3, [sp, #12]
 800922c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 8089 	bne.w	8009348 <_dtoa_r+0x8d8>
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800923c:	0d1b      	lsrs	r3, r3, #20
 800923e:	051b      	lsls	r3, r3, #20
 8009240:	b12b      	cbz	r3, 800924e <_dtoa_r+0x7de>
 8009242:	9b08      	ldr	r3, [sp, #32]
 8009244:	3301      	adds	r3, #1
 8009246:	9308      	str	r3, [sp, #32]
 8009248:	f108 0801 	add.w	r8, r8, #1
 800924c:	2301      	movs	r3, #1
 800924e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 81b0 	beq.w	80095b8 <_dtoa_r+0xb48>
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800925e:	6918      	ldr	r0, [r3, #16]
 8009260:	f000 fb72 	bl	8009948 <__hi0bits>
 8009264:	f1c0 0020 	rsb	r0, r0, #32
 8009268:	9b08      	ldr	r3, [sp, #32]
 800926a:	4418      	add	r0, r3
 800926c:	f010 001f 	ands.w	r0, r0, #31
 8009270:	d077      	beq.n	8009362 <_dtoa_r+0x8f2>
 8009272:	f1c0 0320 	rsb	r3, r0, #32
 8009276:	2b04      	cmp	r3, #4
 8009278:	dd6b      	ble.n	8009352 <_dtoa_r+0x8e2>
 800927a:	9b08      	ldr	r3, [sp, #32]
 800927c:	f1c0 001c 	rsb	r0, r0, #28
 8009280:	4403      	add	r3, r0
 8009282:	4480      	add	r8, r0
 8009284:	4406      	add	r6, r0
 8009286:	9308      	str	r3, [sp, #32]
 8009288:	f1b8 0f00 	cmp.w	r8, #0
 800928c:	dd05      	ble.n	800929a <_dtoa_r+0x82a>
 800928e:	4649      	mov	r1, r9
 8009290:	4642      	mov	r2, r8
 8009292:	4658      	mov	r0, fp
 8009294:	f000 fcbe 	bl	8009c14 <__lshift>
 8009298:	4681      	mov	r9, r0
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	2b00      	cmp	r3, #0
 800929e:	dd05      	ble.n	80092ac <_dtoa_r+0x83c>
 80092a0:	4621      	mov	r1, r4
 80092a2:	461a      	mov	r2, r3
 80092a4:	4658      	mov	r0, fp
 80092a6:	f000 fcb5 	bl	8009c14 <__lshift>
 80092aa:	4604      	mov	r4, r0
 80092ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d059      	beq.n	8009366 <_dtoa_r+0x8f6>
 80092b2:	4621      	mov	r1, r4
 80092b4:	4648      	mov	r0, r9
 80092b6:	f000 fd19 	bl	8009cec <__mcmp>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	da53      	bge.n	8009366 <_dtoa_r+0x8f6>
 80092be:	1e7b      	subs	r3, r7, #1
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	4649      	mov	r1, r9
 80092c4:	2300      	movs	r3, #0
 80092c6:	220a      	movs	r2, #10
 80092c8:	4658      	mov	r0, fp
 80092ca:	f000 faf7 	bl	80098bc <__multadd>
 80092ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092d0:	4681      	mov	r9, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 8172 	beq.w	80095bc <_dtoa_r+0xb4c>
 80092d8:	2300      	movs	r3, #0
 80092da:	4629      	mov	r1, r5
 80092dc:	220a      	movs	r2, #10
 80092de:	4658      	mov	r0, fp
 80092e0:	f000 faec 	bl	80098bc <__multadd>
 80092e4:	9b00      	ldr	r3, [sp, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	4605      	mov	r5, r0
 80092ea:	dc67      	bgt.n	80093bc <_dtoa_r+0x94c>
 80092ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	dc41      	bgt.n	8009376 <_dtoa_r+0x906>
 80092f2:	e063      	b.n	80093bc <_dtoa_r+0x94c>
 80092f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80092fa:	e746      	b.n	800918a <_dtoa_r+0x71a>
 80092fc:	9b07      	ldr	r3, [sp, #28]
 80092fe:	1e5c      	subs	r4, r3, #1
 8009300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009302:	42a3      	cmp	r3, r4
 8009304:	bfbf      	itttt	lt
 8009306:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009308:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800930a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800930c:	1ae3      	sublt	r3, r4, r3
 800930e:	bfb4      	ite	lt
 8009310:	18d2      	addlt	r2, r2, r3
 8009312:	1b1c      	subge	r4, r3, r4
 8009314:	9b07      	ldr	r3, [sp, #28]
 8009316:	bfbc      	itt	lt
 8009318:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800931a:	2400      	movlt	r4, #0
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfb5      	itete	lt
 8009320:	eba8 0603 	sublt.w	r6, r8, r3
 8009324:	9b07      	ldrge	r3, [sp, #28]
 8009326:	2300      	movlt	r3, #0
 8009328:	4646      	movge	r6, r8
 800932a:	e730      	b.n	800918e <_dtoa_r+0x71e>
 800932c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800932e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009330:	4646      	mov	r6, r8
 8009332:	e735      	b.n	80091a0 <_dtoa_r+0x730>
 8009334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009336:	e75c      	b.n	80091f2 <_dtoa_r+0x782>
 8009338:	2300      	movs	r3, #0
 800933a:	e788      	b.n	800924e <_dtoa_r+0x7de>
 800933c:	3fe00000 	.word	0x3fe00000
 8009340:	40240000 	.word	0x40240000
 8009344:	40140000 	.word	0x40140000
 8009348:	9b02      	ldr	r3, [sp, #8]
 800934a:	e780      	b.n	800924e <_dtoa_r+0x7de>
 800934c:	2300      	movs	r3, #0
 800934e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009350:	e782      	b.n	8009258 <_dtoa_r+0x7e8>
 8009352:	d099      	beq.n	8009288 <_dtoa_r+0x818>
 8009354:	9a08      	ldr	r2, [sp, #32]
 8009356:	331c      	adds	r3, #28
 8009358:	441a      	add	r2, r3
 800935a:	4498      	add	r8, r3
 800935c:	441e      	add	r6, r3
 800935e:	9208      	str	r2, [sp, #32]
 8009360:	e792      	b.n	8009288 <_dtoa_r+0x818>
 8009362:	4603      	mov	r3, r0
 8009364:	e7f6      	b.n	8009354 <_dtoa_r+0x8e4>
 8009366:	9b07      	ldr	r3, [sp, #28]
 8009368:	9704      	str	r7, [sp, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	dc20      	bgt.n	80093b0 <_dtoa_r+0x940>
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009372:	2b02      	cmp	r3, #2
 8009374:	dd1e      	ble.n	80093b4 <_dtoa_r+0x944>
 8009376:	9b00      	ldr	r3, [sp, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f47f aec0 	bne.w	80090fe <_dtoa_r+0x68e>
 800937e:	4621      	mov	r1, r4
 8009380:	2205      	movs	r2, #5
 8009382:	4658      	mov	r0, fp
 8009384:	f000 fa9a 	bl	80098bc <__multadd>
 8009388:	4601      	mov	r1, r0
 800938a:	4604      	mov	r4, r0
 800938c:	4648      	mov	r0, r9
 800938e:	f000 fcad 	bl	8009cec <__mcmp>
 8009392:	2800      	cmp	r0, #0
 8009394:	f77f aeb3 	ble.w	80090fe <_dtoa_r+0x68e>
 8009398:	4656      	mov	r6, sl
 800939a:	2331      	movs	r3, #49	@ 0x31
 800939c:	f806 3b01 	strb.w	r3, [r6], #1
 80093a0:	9b04      	ldr	r3, [sp, #16]
 80093a2:	3301      	adds	r3, #1
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	e6ae      	b.n	8009106 <_dtoa_r+0x696>
 80093a8:	9c07      	ldr	r4, [sp, #28]
 80093aa:	9704      	str	r7, [sp, #16]
 80093ac:	4625      	mov	r5, r4
 80093ae:	e7f3      	b.n	8009398 <_dtoa_r+0x928>
 80093b0:	9b07      	ldr	r3, [sp, #28]
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 8104 	beq.w	80095c4 <_dtoa_r+0xb54>
 80093bc:	2e00      	cmp	r6, #0
 80093be:	dd05      	ble.n	80093cc <_dtoa_r+0x95c>
 80093c0:	4629      	mov	r1, r5
 80093c2:	4632      	mov	r2, r6
 80093c4:	4658      	mov	r0, fp
 80093c6:	f000 fc25 	bl	8009c14 <__lshift>
 80093ca:	4605      	mov	r5, r0
 80093cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d05a      	beq.n	8009488 <_dtoa_r+0xa18>
 80093d2:	6869      	ldr	r1, [r5, #4]
 80093d4:	4658      	mov	r0, fp
 80093d6:	f000 fa0f 	bl	80097f8 <_Balloc>
 80093da:	4606      	mov	r6, r0
 80093dc:	b928      	cbnz	r0, 80093ea <_dtoa_r+0x97a>
 80093de:	4b84      	ldr	r3, [pc, #528]	@ (80095f0 <_dtoa_r+0xb80>)
 80093e0:	4602      	mov	r2, r0
 80093e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80093e6:	f7ff bb5a 	b.w	8008a9e <_dtoa_r+0x2e>
 80093ea:	692a      	ldr	r2, [r5, #16]
 80093ec:	3202      	adds	r2, #2
 80093ee:	0092      	lsls	r2, r2, #2
 80093f0:	f105 010c 	add.w	r1, r5, #12
 80093f4:	300c      	adds	r0, #12
 80093f6:	f000 ffc1 	bl	800a37c <memcpy>
 80093fa:	2201      	movs	r2, #1
 80093fc:	4631      	mov	r1, r6
 80093fe:	4658      	mov	r0, fp
 8009400:	f000 fc08 	bl	8009c14 <__lshift>
 8009404:	f10a 0301 	add.w	r3, sl, #1
 8009408:	9307      	str	r3, [sp, #28]
 800940a:	9b00      	ldr	r3, [sp, #0]
 800940c:	4453      	add	r3, sl
 800940e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	462f      	mov	r7, r5
 8009418:	930a      	str	r3, [sp, #40]	@ 0x28
 800941a:	4605      	mov	r5, r0
 800941c:	9b07      	ldr	r3, [sp, #28]
 800941e:	4621      	mov	r1, r4
 8009420:	3b01      	subs	r3, #1
 8009422:	4648      	mov	r0, r9
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	f7ff fa9b 	bl	8008960 <quorem>
 800942a:	4639      	mov	r1, r7
 800942c:	9002      	str	r0, [sp, #8]
 800942e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009432:	4648      	mov	r0, r9
 8009434:	f000 fc5a 	bl	8009cec <__mcmp>
 8009438:	462a      	mov	r2, r5
 800943a:	9008      	str	r0, [sp, #32]
 800943c:	4621      	mov	r1, r4
 800943e:	4658      	mov	r0, fp
 8009440:	f000 fc70 	bl	8009d24 <__mdiff>
 8009444:	68c2      	ldr	r2, [r0, #12]
 8009446:	4606      	mov	r6, r0
 8009448:	bb02      	cbnz	r2, 800948c <_dtoa_r+0xa1c>
 800944a:	4601      	mov	r1, r0
 800944c:	4648      	mov	r0, r9
 800944e:	f000 fc4d 	bl	8009cec <__mcmp>
 8009452:	4602      	mov	r2, r0
 8009454:	4631      	mov	r1, r6
 8009456:	4658      	mov	r0, fp
 8009458:	920e      	str	r2, [sp, #56]	@ 0x38
 800945a:	f000 fa0d 	bl	8009878 <_Bfree>
 800945e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009460:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009462:	9e07      	ldr	r6, [sp, #28]
 8009464:	ea43 0102 	orr.w	r1, r3, r2
 8009468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800946a:	4319      	orrs	r1, r3
 800946c:	d110      	bne.n	8009490 <_dtoa_r+0xa20>
 800946e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009472:	d029      	beq.n	80094c8 <_dtoa_r+0xa58>
 8009474:	9b08      	ldr	r3, [sp, #32]
 8009476:	2b00      	cmp	r3, #0
 8009478:	dd02      	ble.n	8009480 <_dtoa_r+0xa10>
 800947a:	9b02      	ldr	r3, [sp, #8]
 800947c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009480:	9b00      	ldr	r3, [sp, #0]
 8009482:	f883 8000 	strb.w	r8, [r3]
 8009486:	e63f      	b.n	8009108 <_dtoa_r+0x698>
 8009488:	4628      	mov	r0, r5
 800948a:	e7bb      	b.n	8009404 <_dtoa_r+0x994>
 800948c:	2201      	movs	r2, #1
 800948e:	e7e1      	b.n	8009454 <_dtoa_r+0x9e4>
 8009490:	9b08      	ldr	r3, [sp, #32]
 8009492:	2b00      	cmp	r3, #0
 8009494:	db04      	blt.n	80094a0 <_dtoa_r+0xa30>
 8009496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009498:	430b      	orrs	r3, r1
 800949a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800949c:	430b      	orrs	r3, r1
 800949e:	d120      	bne.n	80094e2 <_dtoa_r+0xa72>
 80094a0:	2a00      	cmp	r2, #0
 80094a2:	dded      	ble.n	8009480 <_dtoa_r+0xa10>
 80094a4:	4649      	mov	r1, r9
 80094a6:	2201      	movs	r2, #1
 80094a8:	4658      	mov	r0, fp
 80094aa:	f000 fbb3 	bl	8009c14 <__lshift>
 80094ae:	4621      	mov	r1, r4
 80094b0:	4681      	mov	r9, r0
 80094b2:	f000 fc1b 	bl	8009cec <__mcmp>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	dc03      	bgt.n	80094c2 <_dtoa_r+0xa52>
 80094ba:	d1e1      	bne.n	8009480 <_dtoa_r+0xa10>
 80094bc:	f018 0f01 	tst.w	r8, #1
 80094c0:	d0de      	beq.n	8009480 <_dtoa_r+0xa10>
 80094c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094c6:	d1d8      	bne.n	800947a <_dtoa_r+0xa0a>
 80094c8:	9a00      	ldr	r2, [sp, #0]
 80094ca:	2339      	movs	r3, #57	@ 0x39
 80094cc:	7013      	strb	r3, [r2, #0]
 80094ce:	4633      	mov	r3, r6
 80094d0:	461e      	mov	r6, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80094d8:	2a39      	cmp	r2, #57	@ 0x39
 80094da:	d052      	beq.n	8009582 <_dtoa_r+0xb12>
 80094dc:	3201      	adds	r2, #1
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	e612      	b.n	8009108 <_dtoa_r+0x698>
 80094e2:	2a00      	cmp	r2, #0
 80094e4:	dd07      	ble.n	80094f6 <_dtoa_r+0xa86>
 80094e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094ea:	d0ed      	beq.n	80094c8 <_dtoa_r+0xa58>
 80094ec:	9a00      	ldr	r2, [sp, #0]
 80094ee:	f108 0301 	add.w	r3, r8, #1
 80094f2:	7013      	strb	r3, [r2, #0]
 80094f4:	e608      	b.n	8009108 <_dtoa_r+0x698>
 80094f6:	9b07      	ldr	r3, [sp, #28]
 80094f8:	9a07      	ldr	r2, [sp, #28]
 80094fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80094fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009500:	4293      	cmp	r3, r2
 8009502:	d028      	beq.n	8009556 <_dtoa_r+0xae6>
 8009504:	4649      	mov	r1, r9
 8009506:	2300      	movs	r3, #0
 8009508:	220a      	movs	r2, #10
 800950a:	4658      	mov	r0, fp
 800950c:	f000 f9d6 	bl	80098bc <__multadd>
 8009510:	42af      	cmp	r7, r5
 8009512:	4681      	mov	r9, r0
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	f04f 020a 	mov.w	r2, #10
 800951c:	4639      	mov	r1, r7
 800951e:	4658      	mov	r0, fp
 8009520:	d107      	bne.n	8009532 <_dtoa_r+0xac2>
 8009522:	f000 f9cb 	bl	80098bc <__multadd>
 8009526:	4607      	mov	r7, r0
 8009528:	4605      	mov	r5, r0
 800952a:	9b07      	ldr	r3, [sp, #28]
 800952c:	3301      	adds	r3, #1
 800952e:	9307      	str	r3, [sp, #28]
 8009530:	e774      	b.n	800941c <_dtoa_r+0x9ac>
 8009532:	f000 f9c3 	bl	80098bc <__multadd>
 8009536:	4629      	mov	r1, r5
 8009538:	4607      	mov	r7, r0
 800953a:	2300      	movs	r3, #0
 800953c:	220a      	movs	r2, #10
 800953e:	4658      	mov	r0, fp
 8009540:	f000 f9bc 	bl	80098bc <__multadd>
 8009544:	4605      	mov	r5, r0
 8009546:	e7f0      	b.n	800952a <_dtoa_r+0xaba>
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	bfcc      	ite	gt
 800954e:	461e      	movgt	r6, r3
 8009550:	2601      	movle	r6, #1
 8009552:	4456      	add	r6, sl
 8009554:	2700      	movs	r7, #0
 8009556:	4649      	mov	r1, r9
 8009558:	2201      	movs	r2, #1
 800955a:	4658      	mov	r0, fp
 800955c:	f000 fb5a 	bl	8009c14 <__lshift>
 8009560:	4621      	mov	r1, r4
 8009562:	4681      	mov	r9, r0
 8009564:	f000 fbc2 	bl	8009cec <__mcmp>
 8009568:	2800      	cmp	r0, #0
 800956a:	dcb0      	bgt.n	80094ce <_dtoa_r+0xa5e>
 800956c:	d102      	bne.n	8009574 <_dtoa_r+0xb04>
 800956e:	f018 0f01 	tst.w	r8, #1
 8009572:	d1ac      	bne.n	80094ce <_dtoa_r+0xa5e>
 8009574:	4633      	mov	r3, r6
 8009576:	461e      	mov	r6, r3
 8009578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800957c:	2a30      	cmp	r2, #48	@ 0x30
 800957e:	d0fa      	beq.n	8009576 <_dtoa_r+0xb06>
 8009580:	e5c2      	b.n	8009108 <_dtoa_r+0x698>
 8009582:	459a      	cmp	sl, r3
 8009584:	d1a4      	bne.n	80094d0 <_dtoa_r+0xa60>
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	3301      	adds	r3, #1
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	2331      	movs	r3, #49	@ 0x31
 800958e:	f88a 3000 	strb.w	r3, [sl]
 8009592:	e5b9      	b.n	8009108 <_dtoa_r+0x698>
 8009594:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009596:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80095f4 <_dtoa_r+0xb84>
 800959a:	b11b      	cbz	r3, 80095a4 <_dtoa_r+0xb34>
 800959c:	f10a 0308 	add.w	r3, sl, #8
 80095a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	4650      	mov	r0, sl
 80095a6:	b019      	add	sp, #100	@ 0x64
 80095a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	f77f ae37 	ble.w	8009222 <_dtoa_r+0x7b2>
 80095b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095b8:	2001      	movs	r0, #1
 80095ba:	e655      	b.n	8009268 <_dtoa_r+0x7f8>
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f77f aed6 	ble.w	8009370 <_dtoa_r+0x900>
 80095c4:	4656      	mov	r6, sl
 80095c6:	4621      	mov	r1, r4
 80095c8:	4648      	mov	r0, r9
 80095ca:	f7ff f9c9 	bl	8008960 <quorem>
 80095ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80095d2:	f806 8b01 	strb.w	r8, [r6], #1
 80095d6:	9b00      	ldr	r3, [sp, #0]
 80095d8:	eba6 020a 	sub.w	r2, r6, sl
 80095dc:	4293      	cmp	r3, r2
 80095de:	ddb3      	ble.n	8009548 <_dtoa_r+0xad8>
 80095e0:	4649      	mov	r1, r9
 80095e2:	2300      	movs	r3, #0
 80095e4:	220a      	movs	r2, #10
 80095e6:	4658      	mov	r0, fp
 80095e8:	f000 f968 	bl	80098bc <__multadd>
 80095ec:	4681      	mov	r9, r0
 80095ee:	e7ea      	b.n	80095c6 <_dtoa_r+0xb56>
 80095f0:	0800b123 	.word	0x0800b123
 80095f4:	0800b0be 	.word	0x0800b0be

080095f8 <_free_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4605      	mov	r5, r0
 80095fc:	2900      	cmp	r1, #0
 80095fe:	d041      	beq.n	8009684 <_free_r+0x8c>
 8009600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009604:	1f0c      	subs	r4, r1, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	bfb8      	it	lt
 800960a:	18e4      	addlt	r4, r4, r3
 800960c:	f000 f8e8 	bl	80097e0 <__malloc_lock>
 8009610:	4a1d      	ldr	r2, [pc, #116]	@ (8009688 <_free_r+0x90>)
 8009612:	6813      	ldr	r3, [r2, #0]
 8009614:	b933      	cbnz	r3, 8009624 <_free_r+0x2c>
 8009616:	6063      	str	r3, [r4, #4]
 8009618:	6014      	str	r4, [r2, #0]
 800961a:	4628      	mov	r0, r5
 800961c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009620:	f000 b8e4 	b.w	80097ec <__malloc_unlock>
 8009624:	42a3      	cmp	r3, r4
 8009626:	d908      	bls.n	800963a <_free_r+0x42>
 8009628:	6820      	ldr	r0, [r4, #0]
 800962a:	1821      	adds	r1, r4, r0
 800962c:	428b      	cmp	r3, r1
 800962e:	bf01      	itttt	eq
 8009630:	6819      	ldreq	r1, [r3, #0]
 8009632:	685b      	ldreq	r3, [r3, #4]
 8009634:	1809      	addeq	r1, r1, r0
 8009636:	6021      	streq	r1, [r4, #0]
 8009638:	e7ed      	b.n	8009616 <_free_r+0x1e>
 800963a:	461a      	mov	r2, r3
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	b10b      	cbz	r3, 8009644 <_free_r+0x4c>
 8009640:	42a3      	cmp	r3, r4
 8009642:	d9fa      	bls.n	800963a <_free_r+0x42>
 8009644:	6811      	ldr	r1, [r2, #0]
 8009646:	1850      	adds	r0, r2, r1
 8009648:	42a0      	cmp	r0, r4
 800964a:	d10b      	bne.n	8009664 <_free_r+0x6c>
 800964c:	6820      	ldr	r0, [r4, #0]
 800964e:	4401      	add	r1, r0
 8009650:	1850      	adds	r0, r2, r1
 8009652:	4283      	cmp	r3, r0
 8009654:	6011      	str	r1, [r2, #0]
 8009656:	d1e0      	bne.n	800961a <_free_r+0x22>
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	6053      	str	r3, [r2, #4]
 800965e:	4408      	add	r0, r1
 8009660:	6010      	str	r0, [r2, #0]
 8009662:	e7da      	b.n	800961a <_free_r+0x22>
 8009664:	d902      	bls.n	800966c <_free_r+0x74>
 8009666:	230c      	movs	r3, #12
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	e7d6      	b.n	800961a <_free_r+0x22>
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	1821      	adds	r1, r4, r0
 8009670:	428b      	cmp	r3, r1
 8009672:	bf04      	itt	eq
 8009674:	6819      	ldreq	r1, [r3, #0]
 8009676:	685b      	ldreq	r3, [r3, #4]
 8009678:	6063      	str	r3, [r4, #4]
 800967a:	bf04      	itt	eq
 800967c:	1809      	addeq	r1, r1, r0
 800967e:	6021      	streq	r1, [r4, #0]
 8009680:	6054      	str	r4, [r2, #4]
 8009682:	e7ca      	b.n	800961a <_free_r+0x22>
 8009684:	bd38      	pop	{r3, r4, r5, pc}
 8009686:	bf00      	nop
 8009688:	20000c40 	.word	0x20000c40

0800968c <malloc>:
 800968c:	4b02      	ldr	r3, [pc, #8]	@ (8009698 <malloc+0xc>)
 800968e:	4601      	mov	r1, r0
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f000 b825 	b.w	80096e0 <_malloc_r>
 8009696:	bf00      	nop
 8009698:	2000067c 	.word	0x2000067c

0800969c <sbrk_aligned>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	4e0f      	ldr	r6, [pc, #60]	@ (80096dc <sbrk_aligned+0x40>)
 80096a0:	460c      	mov	r4, r1
 80096a2:	6831      	ldr	r1, [r6, #0]
 80096a4:	4605      	mov	r5, r0
 80096a6:	b911      	cbnz	r1, 80096ae <sbrk_aligned+0x12>
 80096a8:	f000 fe58 	bl	800a35c <_sbrk_r>
 80096ac:	6030      	str	r0, [r6, #0]
 80096ae:	4621      	mov	r1, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	f000 fe53 	bl	800a35c <_sbrk_r>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d103      	bne.n	80096c2 <sbrk_aligned+0x26>
 80096ba:	f04f 34ff 	mov.w	r4, #4294967295
 80096be:	4620      	mov	r0, r4
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
 80096c2:	1cc4      	adds	r4, r0, #3
 80096c4:	f024 0403 	bic.w	r4, r4, #3
 80096c8:	42a0      	cmp	r0, r4
 80096ca:	d0f8      	beq.n	80096be <sbrk_aligned+0x22>
 80096cc:	1a21      	subs	r1, r4, r0
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 fe44 	bl	800a35c <_sbrk_r>
 80096d4:	3001      	adds	r0, #1
 80096d6:	d1f2      	bne.n	80096be <sbrk_aligned+0x22>
 80096d8:	e7ef      	b.n	80096ba <sbrk_aligned+0x1e>
 80096da:	bf00      	nop
 80096dc:	20000c3c 	.word	0x20000c3c

080096e0 <_malloc_r>:
 80096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	1ccd      	adds	r5, r1, #3
 80096e6:	f025 0503 	bic.w	r5, r5, #3
 80096ea:	3508      	adds	r5, #8
 80096ec:	2d0c      	cmp	r5, #12
 80096ee:	bf38      	it	cc
 80096f0:	250c      	movcc	r5, #12
 80096f2:	2d00      	cmp	r5, #0
 80096f4:	4606      	mov	r6, r0
 80096f6:	db01      	blt.n	80096fc <_malloc_r+0x1c>
 80096f8:	42a9      	cmp	r1, r5
 80096fa:	d904      	bls.n	8009706 <_malloc_r+0x26>
 80096fc:	230c      	movs	r3, #12
 80096fe:	6033      	str	r3, [r6, #0]
 8009700:	2000      	movs	r0, #0
 8009702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80097dc <_malloc_r+0xfc>
 800970a:	f000 f869 	bl	80097e0 <__malloc_lock>
 800970e:	f8d8 3000 	ldr.w	r3, [r8]
 8009712:	461c      	mov	r4, r3
 8009714:	bb44      	cbnz	r4, 8009768 <_malloc_r+0x88>
 8009716:	4629      	mov	r1, r5
 8009718:	4630      	mov	r0, r6
 800971a:	f7ff ffbf 	bl	800969c <sbrk_aligned>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	4604      	mov	r4, r0
 8009722:	d158      	bne.n	80097d6 <_malloc_r+0xf6>
 8009724:	f8d8 4000 	ldr.w	r4, [r8]
 8009728:	4627      	mov	r7, r4
 800972a:	2f00      	cmp	r7, #0
 800972c:	d143      	bne.n	80097b6 <_malloc_r+0xd6>
 800972e:	2c00      	cmp	r4, #0
 8009730:	d04b      	beq.n	80097ca <_malloc_r+0xea>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	4639      	mov	r1, r7
 8009736:	4630      	mov	r0, r6
 8009738:	eb04 0903 	add.w	r9, r4, r3
 800973c:	f000 fe0e 	bl	800a35c <_sbrk_r>
 8009740:	4581      	cmp	r9, r0
 8009742:	d142      	bne.n	80097ca <_malloc_r+0xea>
 8009744:	6821      	ldr	r1, [r4, #0]
 8009746:	1a6d      	subs	r5, r5, r1
 8009748:	4629      	mov	r1, r5
 800974a:	4630      	mov	r0, r6
 800974c:	f7ff ffa6 	bl	800969c <sbrk_aligned>
 8009750:	3001      	adds	r0, #1
 8009752:	d03a      	beq.n	80097ca <_malloc_r+0xea>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	442b      	add	r3, r5
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	f8d8 3000 	ldr.w	r3, [r8]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	bb62      	cbnz	r2, 80097bc <_malloc_r+0xdc>
 8009762:	f8c8 7000 	str.w	r7, [r8]
 8009766:	e00f      	b.n	8009788 <_malloc_r+0xa8>
 8009768:	6822      	ldr	r2, [r4, #0]
 800976a:	1b52      	subs	r2, r2, r5
 800976c:	d420      	bmi.n	80097b0 <_malloc_r+0xd0>
 800976e:	2a0b      	cmp	r2, #11
 8009770:	d917      	bls.n	80097a2 <_malloc_r+0xc2>
 8009772:	1961      	adds	r1, r4, r5
 8009774:	42a3      	cmp	r3, r4
 8009776:	6025      	str	r5, [r4, #0]
 8009778:	bf18      	it	ne
 800977a:	6059      	strne	r1, [r3, #4]
 800977c:	6863      	ldr	r3, [r4, #4]
 800977e:	bf08      	it	eq
 8009780:	f8c8 1000 	streq.w	r1, [r8]
 8009784:	5162      	str	r2, [r4, r5]
 8009786:	604b      	str	r3, [r1, #4]
 8009788:	4630      	mov	r0, r6
 800978a:	f000 f82f 	bl	80097ec <__malloc_unlock>
 800978e:	f104 000b 	add.w	r0, r4, #11
 8009792:	1d23      	adds	r3, r4, #4
 8009794:	f020 0007 	bic.w	r0, r0, #7
 8009798:	1ac2      	subs	r2, r0, r3
 800979a:	bf1c      	itt	ne
 800979c:	1a1b      	subne	r3, r3, r0
 800979e:	50a3      	strne	r3, [r4, r2]
 80097a0:	e7af      	b.n	8009702 <_malloc_r+0x22>
 80097a2:	6862      	ldr	r2, [r4, #4]
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	bf0c      	ite	eq
 80097a8:	f8c8 2000 	streq.w	r2, [r8]
 80097ac:	605a      	strne	r2, [r3, #4]
 80097ae:	e7eb      	b.n	8009788 <_malloc_r+0xa8>
 80097b0:	4623      	mov	r3, r4
 80097b2:	6864      	ldr	r4, [r4, #4]
 80097b4:	e7ae      	b.n	8009714 <_malloc_r+0x34>
 80097b6:	463c      	mov	r4, r7
 80097b8:	687f      	ldr	r7, [r7, #4]
 80097ba:	e7b6      	b.n	800972a <_malloc_r+0x4a>
 80097bc:	461a      	mov	r2, r3
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	42a3      	cmp	r3, r4
 80097c2:	d1fb      	bne.n	80097bc <_malloc_r+0xdc>
 80097c4:	2300      	movs	r3, #0
 80097c6:	6053      	str	r3, [r2, #4]
 80097c8:	e7de      	b.n	8009788 <_malloc_r+0xa8>
 80097ca:	230c      	movs	r3, #12
 80097cc:	6033      	str	r3, [r6, #0]
 80097ce:	4630      	mov	r0, r6
 80097d0:	f000 f80c 	bl	80097ec <__malloc_unlock>
 80097d4:	e794      	b.n	8009700 <_malloc_r+0x20>
 80097d6:	6005      	str	r5, [r0, #0]
 80097d8:	e7d6      	b.n	8009788 <_malloc_r+0xa8>
 80097da:	bf00      	nop
 80097dc:	20000c40 	.word	0x20000c40

080097e0 <__malloc_lock>:
 80097e0:	4801      	ldr	r0, [pc, #4]	@ (80097e8 <__malloc_lock+0x8>)
 80097e2:	f7ff b89c 	b.w	800891e <__retarget_lock_acquire_recursive>
 80097e6:	bf00      	nop
 80097e8:	20000c38 	.word	0x20000c38

080097ec <__malloc_unlock>:
 80097ec:	4801      	ldr	r0, [pc, #4]	@ (80097f4 <__malloc_unlock+0x8>)
 80097ee:	f7ff b897 	b.w	8008920 <__retarget_lock_release_recursive>
 80097f2:	bf00      	nop
 80097f4:	20000c38 	.word	0x20000c38

080097f8 <_Balloc>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	69c6      	ldr	r6, [r0, #28]
 80097fc:	4604      	mov	r4, r0
 80097fe:	460d      	mov	r5, r1
 8009800:	b976      	cbnz	r6, 8009820 <_Balloc+0x28>
 8009802:	2010      	movs	r0, #16
 8009804:	f7ff ff42 	bl	800968c <malloc>
 8009808:	4602      	mov	r2, r0
 800980a:	61e0      	str	r0, [r4, #28]
 800980c:	b920      	cbnz	r0, 8009818 <_Balloc+0x20>
 800980e:	4b18      	ldr	r3, [pc, #96]	@ (8009870 <_Balloc+0x78>)
 8009810:	4818      	ldr	r0, [pc, #96]	@ (8009874 <_Balloc+0x7c>)
 8009812:	216b      	movs	r1, #107	@ 0x6b
 8009814:	f7ff f886 	bl	8008924 <__assert_func>
 8009818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800981c:	6006      	str	r6, [r0, #0]
 800981e:	60c6      	str	r6, [r0, #12]
 8009820:	69e6      	ldr	r6, [r4, #28]
 8009822:	68f3      	ldr	r3, [r6, #12]
 8009824:	b183      	cbz	r3, 8009848 <_Balloc+0x50>
 8009826:	69e3      	ldr	r3, [r4, #28]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800982e:	b9b8      	cbnz	r0, 8009860 <_Balloc+0x68>
 8009830:	2101      	movs	r1, #1
 8009832:	fa01 f605 	lsl.w	r6, r1, r5
 8009836:	1d72      	adds	r2, r6, #5
 8009838:	0092      	lsls	r2, r2, #2
 800983a:	4620      	mov	r0, r4
 800983c:	f000 fdb3 	bl	800a3a6 <_calloc_r>
 8009840:	b160      	cbz	r0, 800985c <_Balloc+0x64>
 8009842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009846:	e00e      	b.n	8009866 <_Balloc+0x6e>
 8009848:	2221      	movs	r2, #33	@ 0x21
 800984a:	2104      	movs	r1, #4
 800984c:	4620      	mov	r0, r4
 800984e:	f000 fdaa 	bl	800a3a6 <_calloc_r>
 8009852:	69e3      	ldr	r3, [r4, #28]
 8009854:	60f0      	str	r0, [r6, #12]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e4      	bne.n	8009826 <_Balloc+0x2e>
 800985c:	2000      	movs	r0, #0
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	6802      	ldr	r2, [r0, #0]
 8009862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009866:	2300      	movs	r3, #0
 8009868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800986c:	e7f7      	b.n	800985e <_Balloc+0x66>
 800986e:	bf00      	nop
 8009870:	0800b011 	.word	0x0800b011
 8009874:	0800b134 	.word	0x0800b134

08009878 <_Bfree>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	69c6      	ldr	r6, [r0, #28]
 800987c:	4605      	mov	r5, r0
 800987e:	460c      	mov	r4, r1
 8009880:	b976      	cbnz	r6, 80098a0 <_Bfree+0x28>
 8009882:	2010      	movs	r0, #16
 8009884:	f7ff ff02 	bl	800968c <malloc>
 8009888:	4602      	mov	r2, r0
 800988a:	61e8      	str	r0, [r5, #28]
 800988c:	b920      	cbnz	r0, 8009898 <_Bfree+0x20>
 800988e:	4b09      	ldr	r3, [pc, #36]	@ (80098b4 <_Bfree+0x3c>)
 8009890:	4809      	ldr	r0, [pc, #36]	@ (80098b8 <_Bfree+0x40>)
 8009892:	218f      	movs	r1, #143	@ 0x8f
 8009894:	f7ff f846 	bl	8008924 <__assert_func>
 8009898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800989c:	6006      	str	r6, [r0, #0]
 800989e:	60c6      	str	r6, [r0, #12]
 80098a0:	b13c      	cbz	r4, 80098b2 <_Bfree+0x3a>
 80098a2:	69eb      	ldr	r3, [r5, #28]
 80098a4:	6862      	ldr	r2, [r4, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098ac:	6021      	str	r1, [r4, #0]
 80098ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	0800b011 	.word	0x0800b011
 80098b8:	0800b134 	.word	0x0800b134

080098bc <__multadd>:
 80098bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c0:	690d      	ldr	r5, [r1, #16]
 80098c2:	4607      	mov	r7, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	461e      	mov	r6, r3
 80098c8:	f101 0c14 	add.w	ip, r1, #20
 80098cc:	2000      	movs	r0, #0
 80098ce:	f8dc 3000 	ldr.w	r3, [ip]
 80098d2:	b299      	uxth	r1, r3
 80098d4:	fb02 6101 	mla	r1, r2, r1, r6
 80098d8:	0c1e      	lsrs	r6, r3, #16
 80098da:	0c0b      	lsrs	r3, r1, #16
 80098dc:	fb02 3306 	mla	r3, r2, r6, r3
 80098e0:	b289      	uxth	r1, r1
 80098e2:	3001      	adds	r0, #1
 80098e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098e8:	4285      	cmp	r5, r0
 80098ea:	f84c 1b04 	str.w	r1, [ip], #4
 80098ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098f2:	dcec      	bgt.n	80098ce <__multadd+0x12>
 80098f4:	b30e      	cbz	r6, 800993a <__multadd+0x7e>
 80098f6:	68a3      	ldr	r3, [r4, #8]
 80098f8:	42ab      	cmp	r3, r5
 80098fa:	dc19      	bgt.n	8009930 <__multadd+0x74>
 80098fc:	6861      	ldr	r1, [r4, #4]
 80098fe:	4638      	mov	r0, r7
 8009900:	3101      	adds	r1, #1
 8009902:	f7ff ff79 	bl	80097f8 <_Balloc>
 8009906:	4680      	mov	r8, r0
 8009908:	b928      	cbnz	r0, 8009916 <__multadd+0x5a>
 800990a:	4602      	mov	r2, r0
 800990c:	4b0c      	ldr	r3, [pc, #48]	@ (8009940 <__multadd+0x84>)
 800990e:	480d      	ldr	r0, [pc, #52]	@ (8009944 <__multadd+0x88>)
 8009910:	21ba      	movs	r1, #186	@ 0xba
 8009912:	f7ff f807 	bl	8008924 <__assert_func>
 8009916:	6922      	ldr	r2, [r4, #16]
 8009918:	3202      	adds	r2, #2
 800991a:	f104 010c 	add.w	r1, r4, #12
 800991e:	0092      	lsls	r2, r2, #2
 8009920:	300c      	adds	r0, #12
 8009922:	f000 fd2b 	bl	800a37c <memcpy>
 8009926:	4621      	mov	r1, r4
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff ffa5 	bl	8009878 <_Bfree>
 800992e:	4644      	mov	r4, r8
 8009930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009934:	3501      	adds	r5, #1
 8009936:	615e      	str	r6, [r3, #20]
 8009938:	6125      	str	r5, [r4, #16]
 800993a:	4620      	mov	r0, r4
 800993c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009940:	0800b123 	.word	0x0800b123
 8009944:	0800b134 	.word	0x0800b134

08009948 <__hi0bits>:
 8009948:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800994c:	4603      	mov	r3, r0
 800994e:	bf36      	itet	cc
 8009950:	0403      	lslcc	r3, r0, #16
 8009952:	2000      	movcs	r0, #0
 8009954:	2010      	movcc	r0, #16
 8009956:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800995a:	bf3c      	itt	cc
 800995c:	021b      	lslcc	r3, r3, #8
 800995e:	3008      	addcc	r0, #8
 8009960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009964:	bf3c      	itt	cc
 8009966:	011b      	lslcc	r3, r3, #4
 8009968:	3004      	addcc	r0, #4
 800996a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800996e:	bf3c      	itt	cc
 8009970:	009b      	lslcc	r3, r3, #2
 8009972:	3002      	addcc	r0, #2
 8009974:	2b00      	cmp	r3, #0
 8009976:	db05      	blt.n	8009984 <__hi0bits+0x3c>
 8009978:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800997c:	f100 0001 	add.w	r0, r0, #1
 8009980:	bf08      	it	eq
 8009982:	2020      	moveq	r0, #32
 8009984:	4770      	bx	lr

08009986 <__lo0bits>:
 8009986:	6803      	ldr	r3, [r0, #0]
 8009988:	4602      	mov	r2, r0
 800998a:	f013 0007 	ands.w	r0, r3, #7
 800998e:	d00b      	beq.n	80099a8 <__lo0bits+0x22>
 8009990:	07d9      	lsls	r1, r3, #31
 8009992:	d421      	bmi.n	80099d8 <__lo0bits+0x52>
 8009994:	0798      	lsls	r0, r3, #30
 8009996:	bf49      	itett	mi
 8009998:	085b      	lsrmi	r3, r3, #1
 800999a:	089b      	lsrpl	r3, r3, #2
 800999c:	2001      	movmi	r0, #1
 800999e:	6013      	strmi	r3, [r2, #0]
 80099a0:	bf5c      	itt	pl
 80099a2:	6013      	strpl	r3, [r2, #0]
 80099a4:	2002      	movpl	r0, #2
 80099a6:	4770      	bx	lr
 80099a8:	b299      	uxth	r1, r3
 80099aa:	b909      	cbnz	r1, 80099b0 <__lo0bits+0x2a>
 80099ac:	0c1b      	lsrs	r3, r3, #16
 80099ae:	2010      	movs	r0, #16
 80099b0:	b2d9      	uxtb	r1, r3
 80099b2:	b909      	cbnz	r1, 80099b8 <__lo0bits+0x32>
 80099b4:	3008      	adds	r0, #8
 80099b6:	0a1b      	lsrs	r3, r3, #8
 80099b8:	0719      	lsls	r1, r3, #28
 80099ba:	bf04      	itt	eq
 80099bc:	091b      	lsreq	r3, r3, #4
 80099be:	3004      	addeq	r0, #4
 80099c0:	0799      	lsls	r1, r3, #30
 80099c2:	bf04      	itt	eq
 80099c4:	089b      	lsreq	r3, r3, #2
 80099c6:	3002      	addeq	r0, #2
 80099c8:	07d9      	lsls	r1, r3, #31
 80099ca:	d403      	bmi.n	80099d4 <__lo0bits+0x4e>
 80099cc:	085b      	lsrs	r3, r3, #1
 80099ce:	f100 0001 	add.w	r0, r0, #1
 80099d2:	d003      	beq.n	80099dc <__lo0bits+0x56>
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	4770      	bx	lr
 80099d8:	2000      	movs	r0, #0
 80099da:	4770      	bx	lr
 80099dc:	2020      	movs	r0, #32
 80099de:	4770      	bx	lr

080099e0 <__i2b>:
 80099e0:	b510      	push	{r4, lr}
 80099e2:	460c      	mov	r4, r1
 80099e4:	2101      	movs	r1, #1
 80099e6:	f7ff ff07 	bl	80097f8 <_Balloc>
 80099ea:	4602      	mov	r2, r0
 80099ec:	b928      	cbnz	r0, 80099fa <__i2b+0x1a>
 80099ee:	4b05      	ldr	r3, [pc, #20]	@ (8009a04 <__i2b+0x24>)
 80099f0:	4805      	ldr	r0, [pc, #20]	@ (8009a08 <__i2b+0x28>)
 80099f2:	f240 1145 	movw	r1, #325	@ 0x145
 80099f6:	f7fe ff95 	bl	8008924 <__assert_func>
 80099fa:	2301      	movs	r3, #1
 80099fc:	6144      	str	r4, [r0, #20]
 80099fe:	6103      	str	r3, [r0, #16]
 8009a00:	bd10      	pop	{r4, pc}
 8009a02:	bf00      	nop
 8009a04:	0800b123 	.word	0x0800b123
 8009a08:	0800b134 	.word	0x0800b134

08009a0c <__multiply>:
 8009a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	4614      	mov	r4, r2
 8009a12:	690a      	ldr	r2, [r1, #16]
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	bfa8      	it	ge
 8009a1a:	4623      	movge	r3, r4
 8009a1c:	460f      	mov	r7, r1
 8009a1e:	bfa4      	itt	ge
 8009a20:	460c      	movge	r4, r1
 8009a22:	461f      	movge	r7, r3
 8009a24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009a28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009a2c:	68a3      	ldr	r3, [r4, #8]
 8009a2e:	6861      	ldr	r1, [r4, #4]
 8009a30:	eb0a 0609 	add.w	r6, sl, r9
 8009a34:	42b3      	cmp	r3, r6
 8009a36:	b085      	sub	sp, #20
 8009a38:	bfb8      	it	lt
 8009a3a:	3101      	addlt	r1, #1
 8009a3c:	f7ff fedc 	bl	80097f8 <_Balloc>
 8009a40:	b930      	cbnz	r0, 8009a50 <__multiply+0x44>
 8009a42:	4602      	mov	r2, r0
 8009a44:	4b44      	ldr	r3, [pc, #272]	@ (8009b58 <__multiply+0x14c>)
 8009a46:	4845      	ldr	r0, [pc, #276]	@ (8009b5c <__multiply+0x150>)
 8009a48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a4c:	f7fe ff6a 	bl	8008924 <__assert_func>
 8009a50:	f100 0514 	add.w	r5, r0, #20
 8009a54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a58:	462b      	mov	r3, r5
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	4543      	cmp	r3, r8
 8009a5e:	d321      	bcc.n	8009aa4 <__multiply+0x98>
 8009a60:	f107 0114 	add.w	r1, r7, #20
 8009a64:	f104 0214 	add.w	r2, r4, #20
 8009a68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009a6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009a70:	9302      	str	r3, [sp, #8]
 8009a72:	1b13      	subs	r3, r2, r4
 8009a74:	3b15      	subs	r3, #21
 8009a76:	f023 0303 	bic.w	r3, r3, #3
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	f104 0715 	add.w	r7, r4, #21
 8009a80:	42ba      	cmp	r2, r7
 8009a82:	bf38      	it	cc
 8009a84:	2304      	movcc	r3, #4
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	9103      	str	r1, [sp, #12]
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	d80c      	bhi.n	8009aaa <__multiply+0x9e>
 8009a90:	2e00      	cmp	r6, #0
 8009a92:	dd03      	ble.n	8009a9c <__multiply+0x90>
 8009a94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d05b      	beq.n	8009b54 <__multiply+0x148>
 8009a9c:	6106      	str	r6, [r0, #16]
 8009a9e:	b005      	add	sp, #20
 8009aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	f843 2b04 	str.w	r2, [r3], #4
 8009aa8:	e7d8      	b.n	8009a5c <__multiply+0x50>
 8009aaa:	f8b1 a000 	ldrh.w	sl, [r1]
 8009aae:	f1ba 0f00 	cmp.w	sl, #0
 8009ab2:	d024      	beq.n	8009afe <__multiply+0xf2>
 8009ab4:	f104 0e14 	add.w	lr, r4, #20
 8009ab8:	46a9      	mov	r9, r5
 8009aba:	f04f 0c00 	mov.w	ip, #0
 8009abe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ac2:	f8d9 3000 	ldr.w	r3, [r9]
 8009ac6:	fa1f fb87 	uxth.w	fp, r7
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ad0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009ad4:	f8d9 7000 	ldr.w	r7, [r9]
 8009ad8:	4463      	add	r3, ip
 8009ada:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ade:	fb0a c70b 	mla	r7, sl, fp, ip
 8009ae2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009aec:	4572      	cmp	r2, lr
 8009aee:	f849 3b04 	str.w	r3, [r9], #4
 8009af2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009af6:	d8e2      	bhi.n	8009abe <__multiply+0xb2>
 8009af8:	9b01      	ldr	r3, [sp, #4]
 8009afa:	f845 c003 	str.w	ip, [r5, r3]
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b04:	3104      	adds	r1, #4
 8009b06:	f1b9 0f00 	cmp.w	r9, #0
 8009b0a:	d021      	beq.n	8009b50 <__multiply+0x144>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	f104 0c14 	add.w	ip, r4, #20
 8009b12:	46ae      	mov	lr, r5
 8009b14:	f04f 0a00 	mov.w	sl, #0
 8009b18:	f8bc b000 	ldrh.w	fp, [ip]
 8009b1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009b20:	fb09 770b 	mla	r7, r9, fp, r7
 8009b24:	4457      	add	r7, sl
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b2c:	f84e 3b04 	str.w	r3, [lr], #4
 8009b30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b38:	f8be 3000 	ldrh.w	r3, [lr]
 8009b3c:	fb09 330a 	mla	r3, r9, sl, r3
 8009b40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b44:	4562      	cmp	r2, ip
 8009b46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b4a:	d8e5      	bhi.n	8009b18 <__multiply+0x10c>
 8009b4c:	9f01      	ldr	r7, [sp, #4]
 8009b4e:	51eb      	str	r3, [r5, r7]
 8009b50:	3504      	adds	r5, #4
 8009b52:	e799      	b.n	8009a88 <__multiply+0x7c>
 8009b54:	3e01      	subs	r6, #1
 8009b56:	e79b      	b.n	8009a90 <__multiply+0x84>
 8009b58:	0800b123 	.word	0x0800b123
 8009b5c:	0800b134 	.word	0x0800b134

08009b60 <__pow5mult>:
 8009b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b64:	4615      	mov	r5, r2
 8009b66:	f012 0203 	ands.w	r2, r2, #3
 8009b6a:	4607      	mov	r7, r0
 8009b6c:	460e      	mov	r6, r1
 8009b6e:	d007      	beq.n	8009b80 <__pow5mult+0x20>
 8009b70:	4c25      	ldr	r4, [pc, #148]	@ (8009c08 <__pow5mult+0xa8>)
 8009b72:	3a01      	subs	r2, #1
 8009b74:	2300      	movs	r3, #0
 8009b76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b7a:	f7ff fe9f 	bl	80098bc <__multadd>
 8009b7e:	4606      	mov	r6, r0
 8009b80:	10ad      	asrs	r5, r5, #2
 8009b82:	d03d      	beq.n	8009c00 <__pow5mult+0xa0>
 8009b84:	69fc      	ldr	r4, [r7, #28]
 8009b86:	b97c      	cbnz	r4, 8009ba8 <__pow5mult+0x48>
 8009b88:	2010      	movs	r0, #16
 8009b8a:	f7ff fd7f 	bl	800968c <malloc>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	61f8      	str	r0, [r7, #28]
 8009b92:	b928      	cbnz	r0, 8009ba0 <__pow5mult+0x40>
 8009b94:	4b1d      	ldr	r3, [pc, #116]	@ (8009c0c <__pow5mult+0xac>)
 8009b96:	481e      	ldr	r0, [pc, #120]	@ (8009c10 <__pow5mult+0xb0>)
 8009b98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b9c:	f7fe fec2 	bl	8008924 <__assert_func>
 8009ba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ba4:	6004      	str	r4, [r0, #0]
 8009ba6:	60c4      	str	r4, [r0, #12]
 8009ba8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009bac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bb0:	b94c      	cbnz	r4, 8009bc6 <__pow5mult+0x66>
 8009bb2:	f240 2171 	movw	r1, #625	@ 0x271
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	f7ff ff12 	bl	80099e0 <__i2b>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	6003      	str	r3, [r0, #0]
 8009bc6:	f04f 0900 	mov.w	r9, #0
 8009bca:	07eb      	lsls	r3, r5, #31
 8009bcc:	d50a      	bpl.n	8009be4 <__pow5mult+0x84>
 8009bce:	4631      	mov	r1, r6
 8009bd0:	4622      	mov	r2, r4
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	f7ff ff1a 	bl	8009a0c <__multiply>
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4680      	mov	r8, r0
 8009bdc:	4638      	mov	r0, r7
 8009bde:	f7ff fe4b 	bl	8009878 <_Bfree>
 8009be2:	4646      	mov	r6, r8
 8009be4:	106d      	asrs	r5, r5, #1
 8009be6:	d00b      	beq.n	8009c00 <__pow5mult+0xa0>
 8009be8:	6820      	ldr	r0, [r4, #0]
 8009bea:	b938      	cbnz	r0, 8009bfc <__pow5mult+0x9c>
 8009bec:	4622      	mov	r2, r4
 8009bee:	4621      	mov	r1, r4
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	f7ff ff0b 	bl	8009a0c <__multiply>
 8009bf6:	6020      	str	r0, [r4, #0]
 8009bf8:	f8c0 9000 	str.w	r9, [r0]
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	e7e4      	b.n	8009bca <__pow5mult+0x6a>
 8009c00:	4630      	mov	r0, r6
 8009c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c06:	bf00      	nop
 8009c08:	0800b190 	.word	0x0800b190
 8009c0c:	0800b011 	.word	0x0800b011
 8009c10:	0800b134 	.word	0x0800b134

08009c14 <__lshift>:
 8009c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c18:	460c      	mov	r4, r1
 8009c1a:	6849      	ldr	r1, [r1, #4]
 8009c1c:	6923      	ldr	r3, [r4, #16]
 8009c1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c22:	68a3      	ldr	r3, [r4, #8]
 8009c24:	4607      	mov	r7, r0
 8009c26:	4691      	mov	r9, r2
 8009c28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c2c:	f108 0601 	add.w	r6, r8, #1
 8009c30:	42b3      	cmp	r3, r6
 8009c32:	db0b      	blt.n	8009c4c <__lshift+0x38>
 8009c34:	4638      	mov	r0, r7
 8009c36:	f7ff fddf 	bl	80097f8 <_Balloc>
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	b948      	cbnz	r0, 8009c52 <__lshift+0x3e>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	4b28      	ldr	r3, [pc, #160]	@ (8009ce4 <__lshift+0xd0>)
 8009c42:	4829      	ldr	r0, [pc, #164]	@ (8009ce8 <__lshift+0xd4>)
 8009c44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c48:	f7fe fe6c 	bl	8008924 <__assert_func>
 8009c4c:	3101      	adds	r1, #1
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	e7ee      	b.n	8009c30 <__lshift+0x1c>
 8009c52:	2300      	movs	r3, #0
 8009c54:	f100 0114 	add.w	r1, r0, #20
 8009c58:	f100 0210 	add.w	r2, r0, #16
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	4553      	cmp	r3, sl
 8009c60:	db33      	blt.n	8009cca <__lshift+0xb6>
 8009c62:	6920      	ldr	r0, [r4, #16]
 8009c64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c68:	f104 0314 	add.w	r3, r4, #20
 8009c6c:	f019 091f 	ands.w	r9, r9, #31
 8009c70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c78:	d02b      	beq.n	8009cd2 <__lshift+0xbe>
 8009c7a:	f1c9 0e20 	rsb	lr, r9, #32
 8009c7e:	468a      	mov	sl, r1
 8009c80:	2200      	movs	r2, #0
 8009c82:	6818      	ldr	r0, [r3, #0]
 8009c84:	fa00 f009 	lsl.w	r0, r0, r9
 8009c88:	4310      	orrs	r0, r2
 8009c8a:	f84a 0b04 	str.w	r0, [sl], #4
 8009c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c92:	459c      	cmp	ip, r3
 8009c94:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c98:	d8f3      	bhi.n	8009c82 <__lshift+0x6e>
 8009c9a:	ebac 0304 	sub.w	r3, ip, r4
 8009c9e:	3b15      	subs	r3, #21
 8009ca0:	f023 0303 	bic.w	r3, r3, #3
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	f104 0015 	add.w	r0, r4, #21
 8009caa:	4584      	cmp	ip, r0
 8009cac:	bf38      	it	cc
 8009cae:	2304      	movcc	r3, #4
 8009cb0:	50ca      	str	r2, [r1, r3]
 8009cb2:	b10a      	cbz	r2, 8009cb8 <__lshift+0xa4>
 8009cb4:	f108 0602 	add.w	r6, r8, #2
 8009cb8:	3e01      	subs	r6, #1
 8009cba:	4638      	mov	r0, r7
 8009cbc:	612e      	str	r6, [r5, #16]
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	f7ff fdda 	bl	8009878 <_Bfree>
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cca:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cce:	3301      	adds	r3, #1
 8009cd0:	e7c5      	b.n	8009c5e <__lshift+0x4a>
 8009cd2:	3904      	subs	r1, #4
 8009cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cdc:	459c      	cmp	ip, r3
 8009cde:	d8f9      	bhi.n	8009cd4 <__lshift+0xc0>
 8009ce0:	e7ea      	b.n	8009cb8 <__lshift+0xa4>
 8009ce2:	bf00      	nop
 8009ce4:	0800b123 	.word	0x0800b123
 8009ce8:	0800b134 	.word	0x0800b134

08009cec <__mcmp>:
 8009cec:	690a      	ldr	r2, [r1, #16]
 8009cee:	4603      	mov	r3, r0
 8009cf0:	6900      	ldr	r0, [r0, #16]
 8009cf2:	1a80      	subs	r0, r0, r2
 8009cf4:	b530      	push	{r4, r5, lr}
 8009cf6:	d10e      	bne.n	8009d16 <__mcmp+0x2a>
 8009cf8:	3314      	adds	r3, #20
 8009cfa:	3114      	adds	r1, #20
 8009cfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d0c:	4295      	cmp	r5, r2
 8009d0e:	d003      	beq.n	8009d18 <__mcmp+0x2c>
 8009d10:	d205      	bcs.n	8009d1e <__mcmp+0x32>
 8009d12:	f04f 30ff 	mov.w	r0, #4294967295
 8009d16:	bd30      	pop	{r4, r5, pc}
 8009d18:	42a3      	cmp	r3, r4
 8009d1a:	d3f3      	bcc.n	8009d04 <__mcmp+0x18>
 8009d1c:	e7fb      	b.n	8009d16 <__mcmp+0x2a>
 8009d1e:	2001      	movs	r0, #1
 8009d20:	e7f9      	b.n	8009d16 <__mcmp+0x2a>
	...

08009d24 <__mdiff>:
 8009d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d28:	4689      	mov	r9, r1
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	4648      	mov	r0, r9
 8009d30:	4614      	mov	r4, r2
 8009d32:	f7ff ffdb 	bl	8009cec <__mcmp>
 8009d36:	1e05      	subs	r5, r0, #0
 8009d38:	d112      	bne.n	8009d60 <__mdiff+0x3c>
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f7ff fd5b 	bl	80097f8 <_Balloc>
 8009d42:	4602      	mov	r2, r0
 8009d44:	b928      	cbnz	r0, 8009d52 <__mdiff+0x2e>
 8009d46:	4b3f      	ldr	r3, [pc, #252]	@ (8009e44 <__mdiff+0x120>)
 8009d48:	f240 2137 	movw	r1, #567	@ 0x237
 8009d4c:	483e      	ldr	r0, [pc, #248]	@ (8009e48 <__mdiff+0x124>)
 8009d4e:	f7fe fde9 	bl	8008924 <__assert_func>
 8009d52:	2301      	movs	r3, #1
 8009d54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d58:	4610      	mov	r0, r2
 8009d5a:	b003      	add	sp, #12
 8009d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d60:	bfbc      	itt	lt
 8009d62:	464b      	movlt	r3, r9
 8009d64:	46a1      	movlt	r9, r4
 8009d66:	4630      	mov	r0, r6
 8009d68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d6c:	bfba      	itte	lt
 8009d6e:	461c      	movlt	r4, r3
 8009d70:	2501      	movlt	r5, #1
 8009d72:	2500      	movge	r5, #0
 8009d74:	f7ff fd40 	bl	80097f8 <_Balloc>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	b918      	cbnz	r0, 8009d84 <__mdiff+0x60>
 8009d7c:	4b31      	ldr	r3, [pc, #196]	@ (8009e44 <__mdiff+0x120>)
 8009d7e:	f240 2145 	movw	r1, #581	@ 0x245
 8009d82:	e7e3      	b.n	8009d4c <__mdiff+0x28>
 8009d84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d88:	6926      	ldr	r6, [r4, #16]
 8009d8a:	60c5      	str	r5, [r0, #12]
 8009d8c:	f109 0310 	add.w	r3, r9, #16
 8009d90:	f109 0514 	add.w	r5, r9, #20
 8009d94:	f104 0e14 	add.w	lr, r4, #20
 8009d98:	f100 0b14 	add.w	fp, r0, #20
 8009d9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009da0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	46d9      	mov	r9, fp
 8009da8:	f04f 0c00 	mov.w	ip, #0
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009db2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	fa1f f38a 	uxth.w	r3, sl
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	b283      	uxth	r3, r0
 8009dc0:	1acb      	subs	r3, r1, r3
 8009dc2:	0c00      	lsrs	r0, r0, #16
 8009dc4:	4463      	add	r3, ip
 8009dc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009dca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009dd4:	4576      	cmp	r6, lr
 8009dd6:	f849 3b04 	str.w	r3, [r9], #4
 8009dda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dde:	d8e5      	bhi.n	8009dac <__mdiff+0x88>
 8009de0:	1b33      	subs	r3, r6, r4
 8009de2:	3b15      	subs	r3, #21
 8009de4:	f023 0303 	bic.w	r3, r3, #3
 8009de8:	3415      	adds	r4, #21
 8009dea:	3304      	adds	r3, #4
 8009dec:	42a6      	cmp	r6, r4
 8009dee:	bf38      	it	cc
 8009df0:	2304      	movcc	r3, #4
 8009df2:	441d      	add	r5, r3
 8009df4:	445b      	add	r3, fp
 8009df6:	461e      	mov	r6, r3
 8009df8:	462c      	mov	r4, r5
 8009dfa:	4544      	cmp	r4, r8
 8009dfc:	d30e      	bcc.n	8009e1c <__mdiff+0xf8>
 8009dfe:	f108 0103 	add.w	r1, r8, #3
 8009e02:	1b49      	subs	r1, r1, r5
 8009e04:	f021 0103 	bic.w	r1, r1, #3
 8009e08:	3d03      	subs	r5, #3
 8009e0a:	45a8      	cmp	r8, r5
 8009e0c:	bf38      	it	cc
 8009e0e:	2100      	movcc	r1, #0
 8009e10:	440b      	add	r3, r1
 8009e12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e16:	b191      	cbz	r1, 8009e3e <__mdiff+0x11a>
 8009e18:	6117      	str	r7, [r2, #16]
 8009e1a:	e79d      	b.n	8009d58 <__mdiff+0x34>
 8009e1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e20:	46e6      	mov	lr, ip
 8009e22:	0c08      	lsrs	r0, r1, #16
 8009e24:	fa1c fc81 	uxtah	ip, ip, r1
 8009e28:	4471      	add	r1, lr
 8009e2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e2e:	b289      	uxth	r1, r1
 8009e30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e34:	f846 1b04 	str.w	r1, [r6], #4
 8009e38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e3c:	e7dd      	b.n	8009dfa <__mdiff+0xd6>
 8009e3e:	3f01      	subs	r7, #1
 8009e40:	e7e7      	b.n	8009e12 <__mdiff+0xee>
 8009e42:	bf00      	nop
 8009e44:	0800b123 	.word	0x0800b123
 8009e48:	0800b134 	.word	0x0800b134

08009e4c <__d2b>:
 8009e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e50:	460f      	mov	r7, r1
 8009e52:	2101      	movs	r1, #1
 8009e54:	ec59 8b10 	vmov	r8, r9, d0
 8009e58:	4616      	mov	r6, r2
 8009e5a:	f7ff fccd 	bl	80097f8 <_Balloc>
 8009e5e:	4604      	mov	r4, r0
 8009e60:	b930      	cbnz	r0, 8009e70 <__d2b+0x24>
 8009e62:	4602      	mov	r2, r0
 8009e64:	4b23      	ldr	r3, [pc, #140]	@ (8009ef4 <__d2b+0xa8>)
 8009e66:	4824      	ldr	r0, [pc, #144]	@ (8009ef8 <__d2b+0xac>)
 8009e68:	f240 310f 	movw	r1, #783	@ 0x30f
 8009e6c:	f7fe fd5a 	bl	8008924 <__assert_func>
 8009e70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e78:	b10d      	cbz	r5, 8009e7e <__d2b+0x32>
 8009e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	f1b8 0300 	subs.w	r3, r8, #0
 8009e84:	d023      	beq.n	8009ece <__d2b+0x82>
 8009e86:	4668      	mov	r0, sp
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	f7ff fd7c 	bl	8009986 <__lo0bits>
 8009e8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e92:	b1d0      	cbz	r0, 8009eca <__d2b+0x7e>
 8009e94:	f1c0 0320 	rsb	r3, r0, #32
 8009e98:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	40c2      	lsrs	r2, r0
 8009ea0:	6163      	str	r3, [r4, #20]
 8009ea2:	9201      	str	r2, [sp, #4]
 8009ea4:	9b01      	ldr	r3, [sp, #4]
 8009ea6:	61a3      	str	r3, [r4, #24]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	bf0c      	ite	eq
 8009eac:	2201      	moveq	r2, #1
 8009eae:	2202      	movne	r2, #2
 8009eb0:	6122      	str	r2, [r4, #16]
 8009eb2:	b1a5      	cbz	r5, 8009ede <__d2b+0x92>
 8009eb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009eb8:	4405      	add	r5, r0
 8009eba:	603d      	str	r5, [r7, #0]
 8009ebc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009ec0:	6030      	str	r0, [r6, #0]
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	b003      	add	sp, #12
 8009ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eca:	6161      	str	r1, [r4, #20]
 8009ecc:	e7ea      	b.n	8009ea4 <__d2b+0x58>
 8009ece:	a801      	add	r0, sp, #4
 8009ed0:	f7ff fd59 	bl	8009986 <__lo0bits>
 8009ed4:	9b01      	ldr	r3, [sp, #4]
 8009ed6:	6163      	str	r3, [r4, #20]
 8009ed8:	3020      	adds	r0, #32
 8009eda:	2201      	movs	r2, #1
 8009edc:	e7e8      	b.n	8009eb0 <__d2b+0x64>
 8009ede:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ee2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ee6:	6038      	str	r0, [r7, #0]
 8009ee8:	6918      	ldr	r0, [r3, #16]
 8009eea:	f7ff fd2d 	bl	8009948 <__hi0bits>
 8009eee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ef2:	e7e5      	b.n	8009ec0 <__d2b+0x74>
 8009ef4:	0800b123 	.word	0x0800b123
 8009ef8:	0800b134 	.word	0x0800b134

08009efc <__ssputs_r>:
 8009efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f00:	688e      	ldr	r6, [r1, #8]
 8009f02:	461f      	mov	r7, r3
 8009f04:	42be      	cmp	r6, r7
 8009f06:	680b      	ldr	r3, [r1, #0]
 8009f08:	4682      	mov	sl, r0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	4690      	mov	r8, r2
 8009f0e:	d82d      	bhi.n	8009f6c <__ssputs_r+0x70>
 8009f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f18:	d026      	beq.n	8009f68 <__ssputs_r+0x6c>
 8009f1a:	6965      	ldr	r5, [r4, #20]
 8009f1c:	6909      	ldr	r1, [r1, #16]
 8009f1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f22:	eba3 0901 	sub.w	r9, r3, r1
 8009f26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f2a:	1c7b      	adds	r3, r7, #1
 8009f2c:	444b      	add	r3, r9
 8009f2e:	106d      	asrs	r5, r5, #1
 8009f30:	429d      	cmp	r5, r3
 8009f32:	bf38      	it	cc
 8009f34:	461d      	movcc	r5, r3
 8009f36:	0553      	lsls	r3, r2, #21
 8009f38:	d527      	bpl.n	8009f8a <__ssputs_r+0x8e>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	f7ff fbd0 	bl	80096e0 <_malloc_r>
 8009f40:	4606      	mov	r6, r0
 8009f42:	b360      	cbz	r0, 8009f9e <__ssputs_r+0xa2>
 8009f44:	6921      	ldr	r1, [r4, #16]
 8009f46:	464a      	mov	r2, r9
 8009f48:	f000 fa18 	bl	800a37c <memcpy>
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f56:	81a3      	strh	r3, [r4, #12]
 8009f58:	6126      	str	r6, [r4, #16]
 8009f5a:	6165      	str	r5, [r4, #20]
 8009f5c:	444e      	add	r6, r9
 8009f5e:	eba5 0509 	sub.w	r5, r5, r9
 8009f62:	6026      	str	r6, [r4, #0]
 8009f64:	60a5      	str	r5, [r4, #8]
 8009f66:	463e      	mov	r6, r7
 8009f68:	42be      	cmp	r6, r7
 8009f6a:	d900      	bls.n	8009f6e <__ssputs_r+0x72>
 8009f6c:	463e      	mov	r6, r7
 8009f6e:	6820      	ldr	r0, [r4, #0]
 8009f70:	4632      	mov	r2, r6
 8009f72:	4641      	mov	r1, r8
 8009f74:	f000 f9d8 	bl	800a328 <memmove>
 8009f78:	68a3      	ldr	r3, [r4, #8]
 8009f7a:	1b9b      	subs	r3, r3, r6
 8009f7c:	60a3      	str	r3, [r4, #8]
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	4433      	add	r3, r6
 8009f82:	6023      	str	r3, [r4, #0]
 8009f84:	2000      	movs	r0, #0
 8009f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f8a:	462a      	mov	r2, r5
 8009f8c:	f000 fa31 	bl	800a3f2 <_realloc_r>
 8009f90:	4606      	mov	r6, r0
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d1e0      	bne.n	8009f58 <__ssputs_r+0x5c>
 8009f96:	6921      	ldr	r1, [r4, #16]
 8009f98:	4650      	mov	r0, sl
 8009f9a:	f7ff fb2d 	bl	80095f8 <_free_r>
 8009f9e:	230c      	movs	r3, #12
 8009fa0:	f8ca 3000 	str.w	r3, [sl]
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb0:	e7e9      	b.n	8009f86 <__ssputs_r+0x8a>
	...

08009fb4 <_svfiprintf_r>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	4698      	mov	r8, r3
 8009fba:	898b      	ldrh	r3, [r1, #12]
 8009fbc:	061b      	lsls	r3, r3, #24
 8009fbe:	b09d      	sub	sp, #116	@ 0x74
 8009fc0:	4607      	mov	r7, r0
 8009fc2:	460d      	mov	r5, r1
 8009fc4:	4614      	mov	r4, r2
 8009fc6:	d510      	bpl.n	8009fea <_svfiprintf_r+0x36>
 8009fc8:	690b      	ldr	r3, [r1, #16]
 8009fca:	b973      	cbnz	r3, 8009fea <_svfiprintf_r+0x36>
 8009fcc:	2140      	movs	r1, #64	@ 0x40
 8009fce:	f7ff fb87 	bl	80096e0 <_malloc_r>
 8009fd2:	6028      	str	r0, [r5, #0]
 8009fd4:	6128      	str	r0, [r5, #16]
 8009fd6:	b930      	cbnz	r0, 8009fe6 <_svfiprintf_r+0x32>
 8009fd8:	230c      	movs	r3, #12
 8009fda:	603b      	str	r3, [r7, #0]
 8009fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe0:	b01d      	add	sp, #116	@ 0x74
 8009fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe6:	2340      	movs	r3, #64	@ 0x40
 8009fe8:	616b      	str	r3, [r5, #20]
 8009fea:	2300      	movs	r3, #0
 8009fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fee:	2320      	movs	r3, #32
 8009ff0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ff8:	2330      	movs	r3, #48	@ 0x30
 8009ffa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a198 <_svfiprintf_r+0x1e4>
 8009ffe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a002:	f04f 0901 	mov.w	r9, #1
 800a006:	4623      	mov	r3, r4
 800a008:	469a      	mov	sl, r3
 800a00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a00e:	b10a      	cbz	r2, 800a014 <_svfiprintf_r+0x60>
 800a010:	2a25      	cmp	r2, #37	@ 0x25
 800a012:	d1f9      	bne.n	800a008 <_svfiprintf_r+0x54>
 800a014:	ebba 0b04 	subs.w	fp, sl, r4
 800a018:	d00b      	beq.n	800a032 <_svfiprintf_r+0x7e>
 800a01a:	465b      	mov	r3, fp
 800a01c:	4622      	mov	r2, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	4638      	mov	r0, r7
 800a022:	f7ff ff6b 	bl	8009efc <__ssputs_r>
 800a026:	3001      	adds	r0, #1
 800a028:	f000 80a7 	beq.w	800a17a <_svfiprintf_r+0x1c6>
 800a02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a02e:	445a      	add	r2, fp
 800a030:	9209      	str	r2, [sp, #36]	@ 0x24
 800a032:	f89a 3000 	ldrb.w	r3, [sl]
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 809f 	beq.w	800a17a <_svfiprintf_r+0x1c6>
 800a03c:	2300      	movs	r3, #0
 800a03e:	f04f 32ff 	mov.w	r2, #4294967295
 800a042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a046:	f10a 0a01 	add.w	sl, sl, #1
 800a04a:	9304      	str	r3, [sp, #16]
 800a04c:	9307      	str	r3, [sp, #28]
 800a04e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a052:	931a      	str	r3, [sp, #104]	@ 0x68
 800a054:	4654      	mov	r4, sl
 800a056:	2205      	movs	r2, #5
 800a058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05c:	484e      	ldr	r0, [pc, #312]	@ (800a198 <_svfiprintf_r+0x1e4>)
 800a05e:	f7f6 f8c7 	bl	80001f0 <memchr>
 800a062:	9a04      	ldr	r2, [sp, #16]
 800a064:	b9d8      	cbnz	r0, 800a09e <_svfiprintf_r+0xea>
 800a066:	06d0      	lsls	r0, r2, #27
 800a068:	bf44      	itt	mi
 800a06a:	2320      	movmi	r3, #32
 800a06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a070:	0711      	lsls	r1, r2, #28
 800a072:	bf44      	itt	mi
 800a074:	232b      	movmi	r3, #43	@ 0x2b
 800a076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a07a:	f89a 3000 	ldrb.w	r3, [sl]
 800a07e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a080:	d015      	beq.n	800a0ae <_svfiprintf_r+0xfa>
 800a082:	9a07      	ldr	r2, [sp, #28]
 800a084:	4654      	mov	r4, sl
 800a086:	2000      	movs	r0, #0
 800a088:	f04f 0c0a 	mov.w	ip, #10
 800a08c:	4621      	mov	r1, r4
 800a08e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a092:	3b30      	subs	r3, #48	@ 0x30
 800a094:	2b09      	cmp	r3, #9
 800a096:	d94b      	bls.n	800a130 <_svfiprintf_r+0x17c>
 800a098:	b1b0      	cbz	r0, 800a0c8 <_svfiprintf_r+0x114>
 800a09a:	9207      	str	r2, [sp, #28]
 800a09c:	e014      	b.n	800a0c8 <_svfiprintf_r+0x114>
 800a09e:	eba0 0308 	sub.w	r3, r0, r8
 800a0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	46a2      	mov	sl, r4
 800a0ac:	e7d2      	b.n	800a054 <_svfiprintf_r+0xa0>
 800a0ae:	9b03      	ldr	r3, [sp, #12]
 800a0b0:	1d19      	adds	r1, r3, #4
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	9103      	str	r1, [sp, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	bfbb      	ittet	lt
 800a0ba:	425b      	neglt	r3, r3
 800a0bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a0c0:	9307      	strge	r3, [sp, #28]
 800a0c2:	9307      	strlt	r3, [sp, #28]
 800a0c4:	bfb8      	it	lt
 800a0c6:	9204      	strlt	r2, [sp, #16]
 800a0c8:	7823      	ldrb	r3, [r4, #0]
 800a0ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0cc:	d10a      	bne.n	800a0e4 <_svfiprintf_r+0x130>
 800a0ce:	7863      	ldrb	r3, [r4, #1]
 800a0d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0d2:	d132      	bne.n	800a13a <_svfiprintf_r+0x186>
 800a0d4:	9b03      	ldr	r3, [sp, #12]
 800a0d6:	1d1a      	adds	r2, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	9203      	str	r2, [sp, #12]
 800a0dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0e0:	3402      	adds	r4, #2
 800a0e2:	9305      	str	r3, [sp, #20]
 800a0e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a1a8 <_svfiprintf_r+0x1f4>
 800a0e8:	7821      	ldrb	r1, [r4, #0]
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	4650      	mov	r0, sl
 800a0ee:	f7f6 f87f 	bl	80001f0 <memchr>
 800a0f2:	b138      	cbz	r0, 800a104 <_svfiprintf_r+0x150>
 800a0f4:	9b04      	ldr	r3, [sp, #16]
 800a0f6:	eba0 000a 	sub.w	r0, r0, sl
 800a0fa:	2240      	movs	r2, #64	@ 0x40
 800a0fc:	4082      	lsls	r2, r0
 800a0fe:	4313      	orrs	r3, r2
 800a100:	3401      	adds	r4, #1
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a108:	4824      	ldr	r0, [pc, #144]	@ (800a19c <_svfiprintf_r+0x1e8>)
 800a10a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a10e:	2206      	movs	r2, #6
 800a110:	f7f6 f86e 	bl	80001f0 <memchr>
 800a114:	2800      	cmp	r0, #0
 800a116:	d036      	beq.n	800a186 <_svfiprintf_r+0x1d2>
 800a118:	4b21      	ldr	r3, [pc, #132]	@ (800a1a0 <_svfiprintf_r+0x1ec>)
 800a11a:	bb1b      	cbnz	r3, 800a164 <_svfiprintf_r+0x1b0>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	3307      	adds	r3, #7
 800a120:	f023 0307 	bic.w	r3, r3, #7
 800a124:	3308      	adds	r3, #8
 800a126:	9303      	str	r3, [sp, #12]
 800a128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a12a:	4433      	add	r3, r6
 800a12c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a12e:	e76a      	b.n	800a006 <_svfiprintf_r+0x52>
 800a130:	fb0c 3202 	mla	r2, ip, r2, r3
 800a134:	460c      	mov	r4, r1
 800a136:	2001      	movs	r0, #1
 800a138:	e7a8      	b.n	800a08c <_svfiprintf_r+0xd8>
 800a13a:	2300      	movs	r3, #0
 800a13c:	3401      	adds	r4, #1
 800a13e:	9305      	str	r3, [sp, #20]
 800a140:	4619      	mov	r1, r3
 800a142:	f04f 0c0a 	mov.w	ip, #10
 800a146:	4620      	mov	r0, r4
 800a148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a14c:	3a30      	subs	r2, #48	@ 0x30
 800a14e:	2a09      	cmp	r2, #9
 800a150:	d903      	bls.n	800a15a <_svfiprintf_r+0x1a6>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d0c6      	beq.n	800a0e4 <_svfiprintf_r+0x130>
 800a156:	9105      	str	r1, [sp, #20]
 800a158:	e7c4      	b.n	800a0e4 <_svfiprintf_r+0x130>
 800a15a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a15e:	4604      	mov	r4, r0
 800a160:	2301      	movs	r3, #1
 800a162:	e7f0      	b.n	800a146 <_svfiprintf_r+0x192>
 800a164:	ab03      	add	r3, sp, #12
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	462a      	mov	r2, r5
 800a16a:	4b0e      	ldr	r3, [pc, #56]	@ (800a1a4 <_svfiprintf_r+0x1f0>)
 800a16c:	a904      	add	r1, sp, #16
 800a16e:	4638      	mov	r0, r7
 800a170:	f7fd fdf8 	bl	8007d64 <_printf_float>
 800a174:	1c42      	adds	r2, r0, #1
 800a176:	4606      	mov	r6, r0
 800a178:	d1d6      	bne.n	800a128 <_svfiprintf_r+0x174>
 800a17a:	89ab      	ldrh	r3, [r5, #12]
 800a17c:	065b      	lsls	r3, r3, #25
 800a17e:	f53f af2d 	bmi.w	8009fdc <_svfiprintf_r+0x28>
 800a182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a184:	e72c      	b.n	8009fe0 <_svfiprintf_r+0x2c>
 800a186:	ab03      	add	r3, sp, #12
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	462a      	mov	r2, r5
 800a18c:	4b05      	ldr	r3, [pc, #20]	@ (800a1a4 <_svfiprintf_r+0x1f0>)
 800a18e:	a904      	add	r1, sp, #16
 800a190:	4638      	mov	r0, r7
 800a192:	f7fe f87f 	bl	8008294 <_printf_i>
 800a196:	e7ed      	b.n	800a174 <_svfiprintf_r+0x1c0>
 800a198:	0800b290 	.word	0x0800b290
 800a19c:	0800b29a 	.word	0x0800b29a
 800a1a0:	08007d65 	.word	0x08007d65
 800a1a4:	08009efd 	.word	0x08009efd
 800a1a8:	0800b296 	.word	0x0800b296

0800a1ac <__sflush_r>:
 800a1ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b4:	0716      	lsls	r6, r2, #28
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	d454      	bmi.n	800a266 <__sflush_r+0xba>
 800a1bc:	684b      	ldr	r3, [r1, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	dc02      	bgt.n	800a1c8 <__sflush_r+0x1c>
 800a1c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	dd48      	ble.n	800a25a <__sflush_r+0xae>
 800a1c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1ca:	2e00      	cmp	r6, #0
 800a1cc:	d045      	beq.n	800a25a <__sflush_r+0xae>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1d4:	682f      	ldr	r7, [r5, #0]
 800a1d6:	6a21      	ldr	r1, [r4, #32]
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	d030      	beq.n	800a23e <__sflush_r+0x92>
 800a1dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	0759      	lsls	r1, r3, #29
 800a1e2:	d505      	bpl.n	800a1f0 <__sflush_r+0x44>
 800a1e4:	6863      	ldr	r3, [r4, #4]
 800a1e6:	1ad2      	subs	r2, r2, r3
 800a1e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1ea:	b10b      	cbz	r3, 800a1f0 <__sflush_r+0x44>
 800a1ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1ee:	1ad2      	subs	r2, r2, r3
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1f4:	6a21      	ldr	r1, [r4, #32]
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	47b0      	blx	r6
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	d106      	bne.n	800a20e <__sflush_r+0x62>
 800a200:	6829      	ldr	r1, [r5, #0]
 800a202:	291d      	cmp	r1, #29
 800a204:	d82b      	bhi.n	800a25e <__sflush_r+0xb2>
 800a206:	4a2a      	ldr	r2, [pc, #168]	@ (800a2b0 <__sflush_r+0x104>)
 800a208:	410a      	asrs	r2, r1
 800a20a:	07d6      	lsls	r6, r2, #31
 800a20c:	d427      	bmi.n	800a25e <__sflush_r+0xb2>
 800a20e:	2200      	movs	r2, #0
 800a210:	6062      	str	r2, [r4, #4]
 800a212:	04d9      	lsls	r1, r3, #19
 800a214:	6922      	ldr	r2, [r4, #16]
 800a216:	6022      	str	r2, [r4, #0]
 800a218:	d504      	bpl.n	800a224 <__sflush_r+0x78>
 800a21a:	1c42      	adds	r2, r0, #1
 800a21c:	d101      	bne.n	800a222 <__sflush_r+0x76>
 800a21e:	682b      	ldr	r3, [r5, #0]
 800a220:	b903      	cbnz	r3, 800a224 <__sflush_r+0x78>
 800a222:	6560      	str	r0, [r4, #84]	@ 0x54
 800a224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a226:	602f      	str	r7, [r5, #0]
 800a228:	b1b9      	cbz	r1, 800a25a <__sflush_r+0xae>
 800a22a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a22e:	4299      	cmp	r1, r3
 800a230:	d002      	beq.n	800a238 <__sflush_r+0x8c>
 800a232:	4628      	mov	r0, r5
 800a234:	f7ff f9e0 	bl	80095f8 <_free_r>
 800a238:	2300      	movs	r3, #0
 800a23a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a23c:	e00d      	b.n	800a25a <__sflush_r+0xae>
 800a23e:	2301      	movs	r3, #1
 800a240:	4628      	mov	r0, r5
 800a242:	47b0      	blx	r6
 800a244:	4602      	mov	r2, r0
 800a246:	1c50      	adds	r0, r2, #1
 800a248:	d1c9      	bne.n	800a1de <__sflush_r+0x32>
 800a24a:	682b      	ldr	r3, [r5, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d0c6      	beq.n	800a1de <__sflush_r+0x32>
 800a250:	2b1d      	cmp	r3, #29
 800a252:	d001      	beq.n	800a258 <__sflush_r+0xac>
 800a254:	2b16      	cmp	r3, #22
 800a256:	d11e      	bne.n	800a296 <__sflush_r+0xea>
 800a258:	602f      	str	r7, [r5, #0]
 800a25a:	2000      	movs	r0, #0
 800a25c:	e022      	b.n	800a2a4 <__sflush_r+0xf8>
 800a25e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a262:	b21b      	sxth	r3, r3
 800a264:	e01b      	b.n	800a29e <__sflush_r+0xf2>
 800a266:	690f      	ldr	r7, [r1, #16]
 800a268:	2f00      	cmp	r7, #0
 800a26a:	d0f6      	beq.n	800a25a <__sflush_r+0xae>
 800a26c:	0793      	lsls	r3, r2, #30
 800a26e:	680e      	ldr	r6, [r1, #0]
 800a270:	bf08      	it	eq
 800a272:	694b      	ldreq	r3, [r1, #20]
 800a274:	600f      	str	r7, [r1, #0]
 800a276:	bf18      	it	ne
 800a278:	2300      	movne	r3, #0
 800a27a:	eba6 0807 	sub.w	r8, r6, r7
 800a27e:	608b      	str	r3, [r1, #8]
 800a280:	f1b8 0f00 	cmp.w	r8, #0
 800a284:	dde9      	ble.n	800a25a <__sflush_r+0xae>
 800a286:	6a21      	ldr	r1, [r4, #32]
 800a288:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a28a:	4643      	mov	r3, r8
 800a28c:	463a      	mov	r2, r7
 800a28e:	4628      	mov	r0, r5
 800a290:	47b0      	blx	r6
 800a292:	2800      	cmp	r0, #0
 800a294:	dc08      	bgt.n	800a2a8 <__sflush_r+0xfc>
 800a296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a29e:	81a3      	strh	r3, [r4, #12]
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a8:	4407      	add	r7, r0
 800a2aa:	eba8 0800 	sub.w	r8, r8, r0
 800a2ae:	e7e7      	b.n	800a280 <__sflush_r+0xd4>
 800a2b0:	dfbffffe 	.word	0xdfbffffe

0800a2b4 <_fflush_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	690b      	ldr	r3, [r1, #16]
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	b913      	cbnz	r3, 800a2c4 <_fflush_r+0x10>
 800a2be:	2500      	movs	r5, #0
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	b118      	cbz	r0, 800a2ce <_fflush_r+0x1a>
 800a2c6:	6a03      	ldr	r3, [r0, #32]
 800a2c8:	b90b      	cbnz	r3, 800a2ce <_fflush_r+0x1a>
 800a2ca:	f7fe f98f 	bl	80085ec <__sinit>
 800a2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0f3      	beq.n	800a2be <_fflush_r+0xa>
 800a2d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2d8:	07d0      	lsls	r0, r2, #31
 800a2da:	d404      	bmi.n	800a2e6 <_fflush_r+0x32>
 800a2dc:	0599      	lsls	r1, r3, #22
 800a2de:	d402      	bmi.n	800a2e6 <_fflush_r+0x32>
 800a2e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2e2:	f7fe fb1c 	bl	800891e <__retarget_lock_acquire_recursive>
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f7ff ff5f 	bl	800a1ac <__sflush_r>
 800a2ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2f0:	07da      	lsls	r2, r3, #31
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	d4e4      	bmi.n	800a2c0 <_fflush_r+0xc>
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	059b      	lsls	r3, r3, #22
 800a2fa:	d4e1      	bmi.n	800a2c0 <_fflush_r+0xc>
 800a2fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2fe:	f7fe fb0f 	bl	8008920 <__retarget_lock_release_recursive>
 800a302:	e7dd      	b.n	800a2c0 <_fflush_r+0xc>

0800a304 <fiprintf>:
 800a304:	b40e      	push	{r1, r2, r3}
 800a306:	b503      	push	{r0, r1, lr}
 800a308:	4601      	mov	r1, r0
 800a30a:	ab03      	add	r3, sp, #12
 800a30c:	4805      	ldr	r0, [pc, #20]	@ (800a324 <fiprintf+0x20>)
 800a30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a312:	6800      	ldr	r0, [r0, #0]
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	f000 f8d1 	bl	800a4bc <_vfiprintf_r>
 800a31a:	b002      	add	sp, #8
 800a31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a320:	b003      	add	sp, #12
 800a322:	4770      	bx	lr
 800a324:	2000067c 	.word	0x2000067c

0800a328 <memmove>:
 800a328:	4288      	cmp	r0, r1
 800a32a:	b510      	push	{r4, lr}
 800a32c:	eb01 0402 	add.w	r4, r1, r2
 800a330:	d902      	bls.n	800a338 <memmove+0x10>
 800a332:	4284      	cmp	r4, r0
 800a334:	4623      	mov	r3, r4
 800a336:	d807      	bhi.n	800a348 <memmove+0x20>
 800a338:	1e43      	subs	r3, r0, #1
 800a33a:	42a1      	cmp	r1, r4
 800a33c:	d008      	beq.n	800a350 <memmove+0x28>
 800a33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a346:	e7f8      	b.n	800a33a <memmove+0x12>
 800a348:	4402      	add	r2, r0
 800a34a:	4601      	mov	r1, r0
 800a34c:	428a      	cmp	r2, r1
 800a34e:	d100      	bne.n	800a352 <memmove+0x2a>
 800a350:	bd10      	pop	{r4, pc}
 800a352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a35a:	e7f7      	b.n	800a34c <memmove+0x24>

0800a35c <_sbrk_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d06      	ldr	r5, [pc, #24]	@ (800a378 <_sbrk_r+0x1c>)
 800a360:	2300      	movs	r3, #0
 800a362:	4604      	mov	r4, r0
 800a364:	4608      	mov	r0, r1
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	f7f8 fe5e 	bl	8003028 <_sbrk>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_sbrk_r+0x1a>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_sbrk_r+0x1a>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	20000c34 	.word	0x20000c34

0800a37c <memcpy>:
 800a37c:	440a      	add	r2, r1
 800a37e:	4291      	cmp	r1, r2
 800a380:	f100 33ff 	add.w	r3, r0, #4294967295
 800a384:	d100      	bne.n	800a388 <memcpy+0xc>
 800a386:	4770      	bx	lr
 800a388:	b510      	push	{r4, lr}
 800a38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a38e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a392:	4291      	cmp	r1, r2
 800a394:	d1f9      	bne.n	800a38a <memcpy+0xe>
 800a396:	bd10      	pop	{r4, pc}

0800a398 <abort>:
 800a398:	b508      	push	{r3, lr}
 800a39a:	2006      	movs	r0, #6
 800a39c:	f000 fa62 	bl	800a864 <raise>
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	f7f8 fdc9 	bl	8002f38 <_exit>

0800a3a6 <_calloc_r>:
 800a3a6:	b570      	push	{r4, r5, r6, lr}
 800a3a8:	fba1 5402 	umull	r5, r4, r1, r2
 800a3ac:	b93c      	cbnz	r4, 800a3be <_calloc_r+0x18>
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	f7ff f996 	bl	80096e0 <_malloc_r>
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	b928      	cbnz	r0, 800a3c4 <_calloc_r+0x1e>
 800a3b8:	2600      	movs	r6, #0
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	220c      	movs	r2, #12
 800a3c0:	6002      	str	r2, [r0, #0]
 800a3c2:	e7f9      	b.n	800a3b8 <_calloc_r+0x12>
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f7fe f9bd 	bl	8008746 <memset>
 800a3cc:	e7f5      	b.n	800a3ba <_calloc_r+0x14>

0800a3ce <__ascii_mbtowc>:
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	b901      	cbnz	r1, 800a3d4 <__ascii_mbtowc+0x6>
 800a3d2:	a901      	add	r1, sp, #4
 800a3d4:	b142      	cbz	r2, 800a3e8 <__ascii_mbtowc+0x1a>
 800a3d6:	b14b      	cbz	r3, 800a3ec <__ascii_mbtowc+0x1e>
 800a3d8:	7813      	ldrb	r3, [r2, #0]
 800a3da:	600b      	str	r3, [r1, #0]
 800a3dc:	7812      	ldrb	r2, [r2, #0]
 800a3de:	1e10      	subs	r0, r2, #0
 800a3e0:	bf18      	it	ne
 800a3e2:	2001      	movne	r0, #1
 800a3e4:	b002      	add	sp, #8
 800a3e6:	4770      	bx	lr
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	e7fb      	b.n	800a3e4 <__ascii_mbtowc+0x16>
 800a3ec:	f06f 0001 	mvn.w	r0, #1
 800a3f0:	e7f8      	b.n	800a3e4 <__ascii_mbtowc+0x16>

0800a3f2 <_realloc_r>:
 800a3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	4615      	mov	r5, r2
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	b921      	cbnz	r1, 800a408 <_realloc_r+0x16>
 800a3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a402:	4611      	mov	r1, r2
 800a404:	f7ff b96c 	b.w	80096e0 <_malloc_r>
 800a408:	b92a      	cbnz	r2, 800a416 <_realloc_r+0x24>
 800a40a:	f7ff f8f5 	bl	80095f8 <_free_r>
 800a40e:	2400      	movs	r4, #0
 800a410:	4620      	mov	r0, r4
 800a412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a416:	f000 fa41 	bl	800a89c <_malloc_usable_size_r>
 800a41a:	4285      	cmp	r5, r0
 800a41c:	4606      	mov	r6, r0
 800a41e:	d802      	bhi.n	800a426 <_realloc_r+0x34>
 800a420:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a424:	d8f4      	bhi.n	800a410 <_realloc_r+0x1e>
 800a426:	4629      	mov	r1, r5
 800a428:	4640      	mov	r0, r8
 800a42a:	f7ff f959 	bl	80096e0 <_malloc_r>
 800a42e:	4607      	mov	r7, r0
 800a430:	2800      	cmp	r0, #0
 800a432:	d0ec      	beq.n	800a40e <_realloc_r+0x1c>
 800a434:	42b5      	cmp	r5, r6
 800a436:	462a      	mov	r2, r5
 800a438:	4621      	mov	r1, r4
 800a43a:	bf28      	it	cs
 800a43c:	4632      	movcs	r2, r6
 800a43e:	f7ff ff9d 	bl	800a37c <memcpy>
 800a442:	4621      	mov	r1, r4
 800a444:	4640      	mov	r0, r8
 800a446:	f7ff f8d7 	bl	80095f8 <_free_r>
 800a44a:	463c      	mov	r4, r7
 800a44c:	e7e0      	b.n	800a410 <_realloc_r+0x1e>

0800a44e <__ascii_wctomb>:
 800a44e:	4603      	mov	r3, r0
 800a450:	4608      	mov	r0, r1
 800a452:	b141      	cbz	r1, 800a466 <__ascii_wctomb+0x18>
 800a454:	2aff      	cmp	r2, #255	@ 0xff
 800a456:	d904      	bls.n	800a462 <__ascii_wctomb+0x14>
 800a458:	228a      	movs	r2, #138	@ 0x8a
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	f04f 30ff 	mov.w	r0, #4294967295
 800a460:	4770      	bx	lr
 800a462:	700a      	strb	r2, [r1, #0]
 800a464:	2001      	movs	r0, #1
 800a466:	4770      	bx	lr

0800a468 <__sfputc_r>:
 800a468:	6893      	ldr	r3, [r2, #8]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	b410      	push	{r4}
 800a470:	6093      	str	r3, [r2, #8]
 800a472:	da08      	bge.n	800a486 <__sfputc_r+0x1e>
 800a474:	6994      	ldr	r4, [r2, #24]
 800a476:	42a3      	cmp	r3, r4
 800a478:	db01      	blt.n	800a47e <__sfputc_r+0x16>
 800a47a:	290a      	cmp	r1, #10
 800a47c:	d103      	bne.n	800a486 <__sfputc_r+0x1e>
 800a47e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a482:	f000 b933 	b.w	800a6ec <__swbuf_r>
 800a486:	6813      	ldr	r3, [r2, #0]
 800a488:	1c58      	adds	r0, r3, #1
 800a48a:	6010      	str	r0, [r2, #0]
 800a48c:	7019      	strb	r1, [r3, #0]
 800a48e:	4608      	mov	r0, r1
 800a490:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <__sfputs_r>:
 800a496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a498:	4606      	mov	r6, r0
 800a49a:	460f      	mov	r7, r1
 800a49c:	4614      	mov	r4, r2
 800a49e:	18d5      	adds	r5, r2, r3
 800a4a0:	42ac      	cmp	r4, r5
 800a4a2:	d101      	bne.n	800a4a8 <__sfputs_r+0x12>
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	e007      	b.n	800a4b8 <__sfputs_r+0x22>
 800a4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ac:	463a      	mov	r2, r7
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7ff ffda 	bl	800a468 <__sfputc_r>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d1f3      	bne.n	800a4a0 <__sfputs_r+0xa>
 800a4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4bc <_vfiprintf_r>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	460d      	mov	r5, r1
 800a4c2:	b09d      	sub	sp, #116	@ 0x74
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	4698      	mov	r8, r3
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	b118      	cbz	r0, 800a4d4 <_vfiprintf_r+0x18>
 800a4cc:	6a03      	ldr	r3, [r0, #32]
 800a4ce:	b90b      	cbnz	r3, 800a4d4 <_vfiprintf_r+0x18>
 800a4d0:	f7fe f88c 	bl	80085ec <__sinit>
 800a4d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4d6:	07d9      	lsls	r1, r3, #31
 800a4d8:	d405      	bmi.n	800a4e6 <_vfiprintf_r+0x2a>
 800a4da:	89ab      	ldrh	r3, [r5, #12]
 800a4dc:	059a      	lsls	r2, r3, #22
 800a4de:	d402      	bmi.n	800a4e6 <_vfiprintf_r+0x2a>
 800a4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4e2:	f7fe fa1c 	bl	800891e <__retarget_lock_acquire_recursive>
 800a4e6:	89ab      	ldrh	r3, [r5, #12]
 800a4e8:	071b      	lsls	r3, r3, #28
 800a4ea:	d501      	bpl.n	800a4f0 <_vfiprintf_r+0x34>
 800a4ec:	692b      	ldr	r3, [r5, #16]
 800a4ee:	b99b      	cbnz	r3, 800a518 <_vfiprintf_r+0x5c>
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f000 f938 	bl	800a768 <__swsetup_r>
 800a4f8:	b170      	cbz	r0, 800a518 <_vfiprintf_r+0x5c>
 800a4fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4fc:	07dc      	lsls	r4, r3, #31
 800a4fe:	d504      	bpl.n	800a50a <_vfiprintf_r+0x4e>
 800a500:	f04f 30ff 	mov.w	r0, #4294967295
 800a504:	b01d      	add	sp, #116	@ 0x74
 800a506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50a:	89ab      	ldrh	r3, [r5, #12]
 800a50c:	0598      	lsls	r0, r3, #22
 800a50e:	d4f7      	bmi.n	800a500 <_vfiprintf_r+0x44>
 800a510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a512:	f7fe fa05 	bl	8008920 <__retarget_lock_release_recursive>
 800a516:	e7f3      	b.n	800a500 <_vfiprintf_r+0x44>
 800a518:	2300      	movs	r3, #0
 800a51a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a51c:	2320      	movs	r3, #32
 800a51e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a522:	f8cd 800c 	str.w	r8, [sp, #12]
 800a526:	2330      	movs	r3, #48	@ 0x30
 800a528:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a6d8 <_vfiprintf_r+0x21c>
 800a52c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a530:	f04f 0901 	mov.w	r9, #1
 800a534:	4623      	mov	r3, r4
 800a536:	469a      	mov	sl, r3
 800a538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a53c:	b10a      	cbz	r2, 800a542 <_vfiprintf_r+0x86>
 800a53e:	2a25      	cmp	r2, #37	@ 0x25
 800a540:	d1f9      	bne.n	800a536 <_vfiprintf_r+0x7a>
 800a542:	ebba 0b04 	subs.w	fp, sl, r4
 800a546:	d00b      	beq.n	800a560 <_vfiprintf_r+0xa4>
 800a548:	465b      	mov	r3, fp
 800a54a:	4622      	mov	r2, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	4630      	mov	r0, r6
 800a550:	f7ff ffa1 	bl	800a496 <__sfputs_r>
 800a554:	3001      	adds	r0, #1
 800a556:	f000 80a7 	beq.w	800a6a8 <_vfiprintf_r+0x1ec>
 800a55a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a55c:	445a      	add	r2, fp
 800a55e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a560:	f89a 3000 	ldrb.w	r3, [sl]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 809f 	beq.w	800a6a8 <_vfiprintf_r+0x1ec>
 800a56a:	2300      	movs	r3, #0
 800a56c:	f04f 32ff 	mov.w	r2, #4294967295
 800a570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a574:	f10a 0a01 	add.w	sl, sl, #1
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	9307      	str	r3, [sp, #28]
 800a57c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a580:	931a      	str	r3, [sp, #104]	@ 0x68
 800a582:	4654      	mov	r4, sl
 800a584:	2205      	movs	r2, #5
 800a586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a58a:	4853      	ldr	r0, [pc, #332]	@ (800a6d8 <_vfiprintf_r+0x21c>)
 800a58c:	f7f5 fe30 	bl	80001f0 <memchr>
 800a590:	9a04      	ldr	r2, [sp, #16]
 800a592:	b9d8      	cbnz	r0, 800a5cc <_vfiprintf_r+0x110>
 800a594:	06d1      	lsls	r1, r2, #27
 800a596:	bf44      	itt	mi
 800a598:	2320      	movmi	r3, #32
 800a59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a59e:	0713      	lsls	r3, r2, #28
 800a5a0:	bf44      	itt	mi
 800a5a2:	232b      	movmi	r3, #43	@ 0x2b
 800a5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5ae:	d015      	beq.n	800a5dc <_vfiprintf_r+0x120>
 800a5b0:	9a07      	ldr	r2, [sp, #28]
 800a5b2:	4654      	mov	r4, sl
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	f04f 0c0a 	mov.w	ip, #10
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5c0:	3b30      	subs	r3, #48	@ 0x30
 800a5c2:	2b09      	cmp	r3, #9
 800a5c4:	d94b      	bls.n	800a65e <_vfiprintf_r+0x1a2>
 800a5c6:	b1b0      	cbz	r0, 800a5f6 <_vfiprintf_r+0x13a>
 800a5c8:	9207      	str	r2, [sp, #28]
 800a5ca:	e014      	b.n	800a5f6 <_vfiprintf_r+0x13a>
 800a5cc:	eba0 0308 	sub.w	r3, r0, r8
 800a5d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	46a2      	mov	sl, r4
 800a5da:	e7d2      	b.n	800a582 <_vfiprintf_r+0xc6>
 800a5dc:	9b03      	ldr	r3, [sp, #12]
 800a5de:	1d19      	adds	r1, r3, #4
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	9103      	str	r1, [sp, #12]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	bfbb      	ittet	lt
 800a5e8:	425b      	neglt	r3, r3
 800a5ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a5ee:	9307      	strge	r3, [sp, #28]
 800a5f0:	9307      	strlt	r3, [sp, #28]
 800a5f2:	bfb8      	it	lt
 800a5f4:	9204      	strlt	r2, [sp, #16]
 800a5f6:	7823      	ldrb	r3, [r4, #0]
 800a5f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5fa:	d10a      	bne.n	800a612 <_vfiprintf_r+0x156>
 800a5fc:	7863      	ldrb	r3, [r4, #1]
 800a5fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a600:	d132      	bne.n	800a668 <_vfiprintf_r+0x1ac>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	1d1a      	adds	r2, r3, #4
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	9203      	str	r2, [sp, #12]
 800a60a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a60e:	3402      	adds	r4, #2
 800a610:	9305      	str	r3, [sp, #20]
 800a612:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6e8 <_vfiprintf_r+0x22c>
 800a616:	7821      	ldrb	r1, [r4, #0]
 800a618:	2203      	movs	r2, #3
 800a61a:	4650      	mov	r0, sl
 800a61c:	f7f5 fde8 	bl	80001f0 <memchr>
 800a620:	b138      	cbz	r0, 800a632 <_vfiprintf_r+0x176>
 800a622:	9b04      	ldr	r3, [sp, #16]
 800a624:	eba0 000a 	sub.w	r0, r0, sl
 800a628:	2240      	movs	r2, #64	@ 0x40
 800a62a:	4082      	lsls	r2, r0
 800a62c:	4313      	orrs	r3, r2
 800a62e:	3401      	adds	r4, #1
 800a630:	9304      	str	r3, [sp, #16]
 800a632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a636:	4829      	ldr	r0, [pc, #164]	@ (800a6dc <_vfiprintf_r+0x220>)
 800a638:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a63c:	2206      	movs	r2, #6
 800a63e:	f7f5 fdd7 	bl	80001f0 <memchr>
 800a642:	2800      	cmp	r0, #0
 800a644:	d03f      	beq.n	800a6c6 <_vfiprintf_r+0x20a>
 800a646:	4b26      	ldr	r3, [pc, #152]	@ (800a6e0 <_vfiprintf_r+0x224>)
 800a648:	bb1b      	cbnz	r3, 800a692 <_vfiprintf_r+0x1d6>
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	3307      	adds	r3, #7
 800a64e:	f023 0307 	bic.w	r3, r3, #7
 800a652:	3308      	adds	r3, #8
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a658:	443b      	add	r3, r7
 800a65a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a65c:	e76a      	b.n	800a534 <_vfiprintf_r+0x78>
 800a65e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a662:	460c      	mov	r4, r1
 800a664:	2001      	movs	r0, #1
 800a666:	e7a8      	b.n	800a5ba <_vfiprintf_r+0xfe>
 800a668:	2300      	movs	r3, #0
 800a66a:	3401      	adds	r4, #1
 800a66c:	9305      	str	r3, [sp, #20]
 800a66e:	4619      	mov	r1, r3
 800a670:	f04f 0c0a 	mov.w	ip, #10
 800a674:	4620      	mov	r0, r4
 800a676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a67a:	3a30      	subs	r2, #48	@ 0x30
 800a67c:	2a09      	cmp	r2, #9
 800a67e:	d903      	bls.n	800a688 <_vfiprintf_r+0x1cc>
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0c6      	beq.n	800a612 <_vfiprintf_r+0x156>
 800a684:	9105      	str	r1, [sp, #20]
 800a686:	e7c4      	b.n	800a612 <_vfiprintf_r+0x156>
 800a688:	fb0c 2101 	mla	r1, ip, r1, r2
 800a68c:	4604      	mov	r4, r0
 800a68e:	2301      	movs	r3, #1
 800a690:	e7f0      	b.n	800a674 <_vfiprintf_r+0x1b8>
 800a692:	ab03      	add	r3, sp, #12
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	462a      	mov	r2, r5
 800a698:	4b12      	ldr	r3, [pc, #72]	@ (800a6e4 <_vfiprintf_r+0x228>)
 800a69a:	a904      	add	r1, sp, #16
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7fd fb61 	bl	8007d64 <_printf_float>
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	1c78      	adds	r0, r7, #1
 800a6a6:	d1d6      	bne.n	800a656 <_vfiprintf_r+0x19a>
 800a6a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6aa:	07d9      	lsls	r1, r3, #31
 800a6ac:	d405      	bmi.n	800a6ba <_vfiprintf_r+0x1fe>
 800a6ae:	89ab      	ldrh	r3, [r5, #12]
 800a6b0:	059a      	lsls	r2, r3, #22
 800a6b2:	d402      	bmi.n	800a6ba <_vfiprintf_r+0x1fe>
 800a6b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6b6:	f7fe f933 	bl	8008920 <__retarget_lock_release_recursive>
 800a6ba:	89ab      	ldrh	r3, [r5, #12]
 800a6bc:	065b      	lsls	r3, r3, #25
 800a6be:	f53f af1f 	bmi.w	800a500 <_vfiprintf_r+0x44>
 800a6c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6c4:	e71e      	b.n	800a504 <_vfiprintf_r+0x48>
 800a6c6:	ab03      	add	r3, sp, #12
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	462a      	mov	r2, r5
 800a6cc:	4b05      	ldr	r3, [pc, #20]	@ (800a6e4 <_vfiprintf_r+0x228>)
 800a6ce:	a904      	add	r1, sp, #16
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7fd fddf 	bl	8008294 <_printf_i>
 800a6d6:	e7e4      	b.n	800a6a2 <_vfiprintf_r+0x1e6>
 800a6d8:	0800b290 	.word	0x0800b290
 800a6dc:	0800b29a 	.word	0x0800b29a
 800a6e0:	08007d65 	.word	0x08007d65
 800a6e4:	0800a497 	.word	0x0800a497
 800a6e8:	0800b296 	.word	0x0800b296

0800a6ec <__swbuf_r>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	460e      	mov	r6, r1
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	b118      	cbz	r0, 800a6fe <__swbuf_r+0x12>
 800a6f6:	6a03      	ldr	r3, [r0, #32]
 800a6f8:	b90b      	cbnz	r3, 800a6fe <__swbuf_r+0x12>
 800a6fa:	f7fd ff77 	bl	80085ec <__sinit>
 800a6fe:	69a3      	ldr	r3, [r4, #24]
 800a700:	60a3      	str	r3, [r4, #8]
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	071a      	lsls	r2, r3, #28
 800a706:	d501      	bpl.n	800a70c <__swbuf_r+0x20>
 800a708:	6923      	ldr	r3, [r4, #16]
 800a70a:	b943      	cbnz	r3, 800a71e <__swbuf_r+0x32>
 800a70c:	4621      	mov	r1, r4
 800a70e:	4628      	mov	r0, r5
 800a710:	f000 f82a 	bl	800a768 <__swsetup_r>
 800a714:	b118      	cbz	r0, 800a71e <__swbuf_r+0x32>
 800a716:	f04f 37ff 	mov.w	r7, #4294967295
 800a71a:	4638      	mov	r0, r7
 800a71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	6922      	ldr	r2, [r4, #16]
 800a722:	1a98      	subs	r0, r3, r2
 800a724:	6963      	ldr	r3, [r4, #20]
 800a726:	b2f6      	uxtb	r6, r6
 800a728:	4283      	cmp	r3, r0
 800a72a:	4637      	mov	r7, r6
 800a72c:	dc05      	bgt.n	800a73a <__swbuf_r+0x4e>
 800a72e:	4621      	mov	r1, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f7ff fdbf 	bl	800a2b4 <_fflush_r>
 800a736:	2800      	cmp	r0, #0
 800a738:	d1ed      	bne.n	800a716 <__swbuf_r+0x2a>
 800a73a:	68a3      	ldr	r3, [r4, #8]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	60a3      	str	r3, [r4, #8]
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	6022      	str	r2, [r4, #0]
 800a746:	701e      	strb	r6, [r3, #0]
 800a748:	6962      	ldr	r2, [r4, #20]
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d004      	beq.n	800a75a <__swbuf_r+0x6e>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	07db      	lsls	r3, r3, #31
 800a754:	d5e1      	bpl.n	800a71a <__swbuf_r+0x2e>
 800a756:	2e0a      	cmp	r6, #10
 800a758:	d1df      	bne.n	800a71a <__swbuf_r+0x2e>
 800a75a:	4621      	mov	r1, r4
 800a75c:	4628      	mov	r0, r5
 800a75e:	f7ff fda9 	bl	800a2b4 <_fflush_r>
 800a762:	2800      	cmp	r0, #0
 800a764:	d0d9      	beq.n	800a71a <__swbuf_r+0x2e>
 800a766:	e7d6      	b.n	800a716 <__swbuf_r+0x2a>

0800a768 <__swsetup_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4b29      	ldr	r3, [pc, #164]	@ (800a810 <__swsetup_r+0xa8>)
 800a76c:	4605      	mov	r5, r0
 800a76e:	6818      	ldr	r0, [r3, #0]
 800a770:	460c      	mov	r4, r1
 800a772:	b118      	cbz	r0, 800a77c <__swsetup_r+0x14>
 800a774:	6a03      	ldr	r3, [r0, #32]
 800a776:	b90b      	cbnz	r3, 800a77c <__swsetup_r+0x14>
 800a778:	f7fd ff38 	bl	80085ec <__sinit>
 800a77c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a780:	0719      	lsls	r1, r3, #28
 800a782:	d422      	bmi.n	800a7ca <__swsetup_r+0x62>
 800a784:	06da      	lsls	r2, r3, #27
 800a786:	d407      	bmi.n	800a798 <__swsetup_r+0x30>
 800a788:	2209      	movs	r2, #9
 800a78a:	602a      	str	r2, [r5, #0]
 800a78c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a790:	81a3      	strh	r3, [r4, #12]
 800a792:	f04f 30ff 	mov.w	r0, #4294967295
 800a796:	e033      	b.n	800a800 <__swsetup_r+0x98>
 800a798:	0758      	lsls	r0, r3, #29
 800a79a:	d512      	bpl.n	800a7c2 <__swsetup_r+0x5a>
 800a79c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a79e:	b141      	cbz	r1, 800a7b2 <__swsetup_r+0x4a>
 800a7a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7a4:	4299      	cmp	r1, r3
 800a7a6:	d002      	beq.n	800a7ae <__swsetup_r+0x46>
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f7fe ff25 	bl	80095f8 <_free_r>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a7b8:	81a3      	strh	r3, [r4, #12]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	6063      	str	r3, [r4, #4]
 800a7be:	6923      	ldr	r3, [r4, #16]
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	89a3      	ldrh	r3, [r4, #12]
 800a7c4:	f043 0308 	orr.w	r3, r3, #8
 800a7c8:	81a3      	strh	r3, [r4, #12]
 800a7ca:	6923      	ldr	r3, [r4, #16]
 800a7cc:	b94b      	cbnz	r3, 800a7e2 <__swsetup_r+0x7a>
 800a7ce:	89a3      	ldrh	r3, [r4, #12]
 800a7d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7d8:	d003      	beq.n	800a7e2 <__swsetup_r+0x7a>
 800a7da:	4621      	mov	r1, r4
 800a7dc:	4628      	mov	r0, r5
 800a7de:	f000 f88b 	bl	800a8f8 <__smakebuf_r>
 800a7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e6:	f013 0201 	ands.w	r2, r3, #1
 800a7ea:	d00a      	beq.n	800a802 <__swsetup_r+0x9a>
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	60a2      	str	r2, [r4, #8]
 800a7f0:	6962      	ldr	r2, [r4, #20]
 800a7f2:	4252      	negs	r2, r2
 800a7f4:	61a2      	str	r2, [r4, #24]
 800a7f6:	6922      	ldr	r2, [r4, #16]
 800a7f8:	b942      	cbnz	r2, 800a80c <__swsetup_r+0xa4>
 800a7fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7fe:	d1c5      	bne.n	800a78c <__swsetup_r+0x24>
 800a800:	bd38      	pop	{r3, r4, r5, pc}
 800a802:	0799      	lsls	r1, r3, #30
 800a804:	bf58      	it	pl
 800a806:	6962      	ldrpl	r2, [r4, #20]
 800a808:	60a2      	str	r2, [r4, #8]
 800a80a:	e7f4      	b.n	800a7f6 <__swsetup_r+0x8e>
 800a80c:	2000      	movs	r0, #0
 800a80e:	e7f7      	b.n	800a800 <__swsetup_r+0x98>
 800a810:	2000067c 	.word	0x2000067c

0800a814 <_raise_r>:
 800a814:	291f      	cmp	r1, #31
 800a816:	b538      	push	{r3, r4, r5, lr}
 800a818:	4605      	mov	r5, r0
 800a81a:	460c      	mov	r4, r1
 800a81c:	d904      	bls.n	800a828 <_raise_r+0x14>
 800a81e:	2316      	movs	r3, #22
 800a820:	6003      	str	r3, [r0, #0]
 800a822:	f04f 30ff 	mov.w	r0, #4294967295
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a82a:	b112      	cbz	r2, 800a832 <_raise_r+0x1e>
 800a82c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a830:	b94b      	cbnz	r3, 800a846 <_raise_r+0x32>
 800a832:	4628      	mov	r0, r5
 800a834:	f000 f830 	bl	800a898 <_getpid_r>
 800a838:	4622      	mov	r2, r4
 800a83a:	4601      	mov	r1, r0
 800a83c:	4628      	mov	r0, r5
 800a83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a842:	f000 b817 	b.w	800a874 <_kill_r>
 800a846:	2b01      	cmp	r3, #1
 800a848:	d00a      	beq.n	800a860 <_raise_r+0x4c>
 800a84a:	1c59      	adds	r1, r3, #1
 800a84c:	d103      	bne.n	800a856 <_raise_r+0x42>
 800a84e:	2316      	movs	r3, #22
 800a850:	6003      	str	r3, [r0, #0]
 800a852:	2001      	movs	r0, #1
 800a854:	e7e7      	b.n	800a826 <_raise_r+0x12>
 800a856:	2100      	movs	r1, #0
 800a858:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a85c:	4620      	mov	r0, r4
 800a85e:	4798      	blx	r3
 800a860:	2000      	movs	r0, #0
 800a862:	e7e0      	b.n	800a826 <_raise_r+0x12>

0800a864 <raise>:
 800a864:	4b02      	ldr	r3, [pc, #8]	@ (800a870 <raise+0xc>)
 800a866:	4601      	mov	r1, r0
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	f7ff bfd3 	b.w	800a814 <_raise_r>
 800a86e:	bf00      	nop
 800a870:	2000067c 	.word	0x2000067c

0800a874 <_kill_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4d07      	ldr	r5, [pc, #28]	@ (800a894 <_kill_r+0x20>)
 800a878:	2300      	movs	r3, #0
 800a87a:	4604      	mov	r4, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	4611      	mov	r1, r2
 800a880:	602b      	str	r3, [r5, #0]
 800a882:	f7f8 fb49 	bl	8002f18 <_kill>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	d102      	bne.n	800a890 <_kill_r+0x1c>
 800a88a:	682b      	ldr	r3, [r5, #0]
 800a88c:	b103      	cbz	r3, 800a890 <_kill_r+0x1c>
 800a88e:	6023      	str	r3, [r4, #0]
 800a890:	bd38      	pop	{r3, r4, r5, pc}
 800a892:	bf00      	nop
 800a894:	20000c34 	.word	0x20000c34

0800a898 <_getpid_r>:
 800a898:	f7f8 bb36 	b.w	8002f08 <_getpid>

0800a89c <_malloc_usable_size_r>:
 800a89c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8a0:	1f18      	subs	r0, r3, #4
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	bfbc      	itt	lt
 800a8a6:	580b      	ldrlt	r3, [r1, r0]
 800a8a8:	18c0      	addlt	r0, r0, r3
 800a8aa:	4770      	bx	lr

0800a8ac <__swhatbuf_r>:
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	b096      	sub	sp, #88	@ 0x58
 800a8b8:	4615      	mov	r5, r2
 800a8ba:	461e      	mov	r6, r3
 800a8bc:	da0d      	bge.n	800a8da <__swhatbuf_r+0x2e>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8c4:	f04f 0100 	mov.w	r1, #0
 800a8c8:	bf14      	ite	ne
 800a8ca:	2340      	movne	r3, #64	@ 0x40
 800a8cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	6031      	str	r1, [r6, #0]
 800a8d4:	602b      	str	r3, [r5, #0]
 800a8d6:	b016      	add	sp, #88	@ 0x58
 800a8d8:	bd70      	pop	{r4, r5, r6, pc}
 800a8da:	466a      	mov	r2, sp
 800a8dc:	f000 f848 	bl	800a970 <_fstat_r>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	dbec      	blt.n	800a8be <__swhatbuf_r+0x12>
 800a8e4:	9901      	ldr	r1, [sp, #4]
 800a8e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a8ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a8ee:	4259      	negs	r1, r3
 800a8f0:	4159      	adcs	r1, r3
 800a8f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8f6:	e7eb      	b.n	800a8d0 <__swhatbuf_r+0x24>

0800a8f8 <__smakebuf_r>:
 800a8f8:	898b      	ldrh	r3, [r1, #12]
 800a8fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8fc:	079d      	lsls	r5, r3, #30
 800a8fe:	4606      	mov	r6, r0
 800a900:	460c      	mov	r4, r1
 800a902:	d507      	bpl.n	800a914 <__smakebuf_r+0x1c>
 800a904:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	6123      	str	r3, [r4, #16]
 800a90c:	2301      	movs	r3, #1
 800a90e:	6163      	str	r3, [r4, #20]
 800a910:	b003      	add	sp, #12
 800a912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a914:	ab01      	add	r3, sp, #4
 800a916:	466a      	mov	r2, sp
 800a918:	f7ff ffc8 	bl	800a8ac <__swhatbuf_r>
 800a91c:	9f00      	ldr	r7, [sp, #0]
 800a91e:	4605      	mov	r5, r0
 800a920:	4639      	mov	r1, r7
 800a922:	4630      	mov	r0, r6
 800a924:	f7fe fedc 	bl	80096e0 <_malloc_r>
 800a928:	b948      	cbnz	r0, 800a93e <__smakebuf_r+0x46>
 800a92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a92e:	059a      	lsls	r2, r3, #22
 800a930:	d4ee      	bmi.n	800a910 <__smakebuf_r+0x18>
 800a932:	f023 0303 	bic.w	r3, r3, #3
 800a936:	f043 0302 	orr.w	r3, r3, #2
 800a93a:	81a3      	strh	r3, [r4, #12]
 800a93c:	e7e2      	b.n	800a904 <__smakebuf_r+0xc>
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	6020      	str	r0, [r4, #0]
 800a942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	9b01      	ldr	r3, [sp, #4]
 800a94a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a94e:	b15b      	cbz	r3, 800a968 <__smakebuf_r+0x70>
 800a950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a954:	4630      	mov	r0, r6
 800a956:	f000 f81d 	bl	800a994 <_isatty_r>
 800a95a:	b128      	cbz	r0, 800a968 <__smakebuf_r+0x70>
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	f023 0303 	bic.w	r3, r3, #3
 800a962:	f043 0301 	orr.w	r3, r3, #1
 800a966:	81a3      	strh	r3, [r4, #12]
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	431d      	orrs	r5, r3
 800a96c:	81a5      	strh	r5, [r4, #12]
 800a96e:	e7cf      	b.n	800a910 <__smakebuf_r+0x18>

0800a970 <_fstat_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4d07      	ldr	r5, [pc, #28]	@ (800a990 <_fstat_r+0x20>)
 800a974:	2300      	movs	r3, #0
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	4611      	mov	r1, r2
 800a97c:	602b      	str	r3, [r5, #0]
 800a97e:	f7f8 fb2b 	bl	8002fd8 <_fstat>
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	d102      	bne.n	800a98c <_fstat_r+0x1c>
 800a986:	682b      	ldr	r3, [r5, #0]
 800a988:	b103      	cbz	r3, 800a98c <_fstat_r+0x1c>
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	bd38      	pop	{r3, r4, r5, pc}
 800a98e:	bf00      	nop
 800a990:	20000c34 	.word	0x20000c34

0800a994 <_isatty_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4d06      	ldr	r5, [pc, #24]	@ (800a9b0 <_isatty_r+0x1c>)
 800a998:	2300      	movs	r3, #0
 800a99a:	4604      	mov	r4, r0
 800a99c:	4608      	mov	r0, r1
 800a99e:	602b      	str	r3, [r5, #0]
 800a9a0:	f7f8 fb2a 	bl	8002ff8 <_isatty>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d102      	bne.n	800a9ae <_isatty_r+0x1a>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	b103      	cbz	r3, 800a9ae <_isatty_r+0x1a>
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	20000c34 	.word	0x20000c34

0800a9b4 <_init>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	bf00      	nop
 800a9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ba:	bc08      	pop	{r3}
 800a9bc:	469e      	mov	lr, r3
 800a9be:	4770      	bx	lr

0800a9c0 <_fini>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	bf00      	nop
 800a9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c6:	bc08      	pop	{r3}
 800a9c8:	469e      	mov	lr, r3
 800a9ca:	4770      	bx	lr
