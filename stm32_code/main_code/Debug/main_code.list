
main_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008cb8  08008cb8  00009cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f4  080090f4  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090fc  080090fc  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090fc  080090fc  0000a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009100  08009100  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009104  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001e0  080092e4  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  080092e4  0000b52c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c7f  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282c  00000000  00000000  0001ce8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0001f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce0  00000000  00000000  00020750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028192  00000000  00000000  00021430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141db  00000000  00000000  000495c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4e0f  00000000  00000000  0005d79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001525ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  001525f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00157be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ca0 	.word	0x08008ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008ca0 	.word	0x08008ca0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <send1Pulse>:
int step_time_us = 50000; // minimum 1us

int t_pulse_length = 1; //length moved with 1 pulse (in mm)
int r_pulse_angle = 1; //angle turned with 1 pulse (in °)

void send1Pulse(int n_driver){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

	uint16_t GPIO_PIN;
	GPIO_PIN = (n_driver==T_MOTOR)?GPIO_PIN_5:GPIO_PIN_7;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d101      	bne.n	8000eaa <send1Pulse+0x12>
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	e000      	b.n	8000eac <send1Pulse+0x14>
 8000eaa:	2380      	movs	r3, #128	@ 0x80
 8000eac:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN, 1);
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb8:	f001 f9a6 	bl	8002208 <HAL_GPIO_WritePin>
	delayMicroseconds(step_time_us);
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <send1Pulse+0x50>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fda5 	bl	8001a10 <delayMicroseconds>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN, 0);
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed0:	f001 f99a 	bl	8002208 <HAL_GPIO_WritePin>
	delayMicroseconds(step_time_us);
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <send1Pulse+0x50>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fd99 	bl	8001a10 <delayMicroseconds>

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000000 	.word	0x20000000

08000eec <sendNPulse>:

void sendNPulse(int N, int n_driver){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i<N; i++){
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e005      	b.n	8000f08 <sendNPulse+0x1c>
		send1Pulse(n_driver);
 8000efc:	6838      	ldr	r0, [r7, #0]
 8000efe:	f7ff ffcb 	bl	8000e98 <send1Pulse>
	for (int i = 0; i<N; i++){
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3301      	adds	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf5      	blt.n	8000efc <sendNPulse+0x10>
	}
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <translate>:


void translate(int dx){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	int nb_pulses = (int)((float)dx/(float)t_pulse_length);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <translate+0x3c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f42:	ee17 3a90 	vmov	r3, s15
 8000f46:	60fb      	str	r3, [r7, #12]
	sendNPulse(nb_pulses, T_MOTOR);
 8000f48:	2102      	movs	r1, #2
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff ffce 	bl	8000eec <sendNPulse>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000004 	.word	0x20000004

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f000 fd9b 	bl	8001a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 f843 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 fa25 	bl	80013b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6e:	f000 f9f3 	bl	8001358 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000f72:	f000 f979 	bl	8001268 <MX_TIM16_Init>
  MX_TIM5_Init();
 8000f76:	f000 f929 	bl	80011cc <MX_TIM5_Init>
  MX_TIM2_Init();
 8000f7a:	f000 f88b 	bl	8001094 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f7e:	f000 f8d7 	bl	8001130 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Initializing the time reference counter
  __HAL_TIM_SET_COUNTER(&htim5, 0);  // Reset the counter to 0
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <main+0x7c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim5);
 8000f8a:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <main+0x7c>)
 8000f8c:	f002 fccc 	bl	8003928 <HAL_TIM_Base_Start>

  // Initializing the IR emmition timer
  HAL_TIM_Base_Start(&htim16);
 8000f90:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <main+0x80>)
 8000f92:	f002 fcc9 	bl	8003928 <HAL_TIM_Base_Start>
  TIM16->CCR1 = 1000; // setting the compare register to half the period (to generate a square signal)
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <main+0x84>)
 8000f98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f9c:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	480e      	ldr	r0, [pc, #56]	@ (8000fdc <main+0x80>)
 8000fa2:	f002 fd8b 	bl	8003abc <HAL_TIM_PWM_Start>


  // Initializing the command buffer and receiving command over UART
  HAL_UART_Receive_IT(&huart2, &command, COMMAND_LENGTH);
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <main+0x88>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	490e      	ldr	r1, [pc, #56]	@ (8000fe8 <main+0x8c>)
 8000fb0:	480e      	ldr	r0, [pc, #56]	@ (8000fec <main+0x90>)
 8000fb2:	f003 fdf7 	bl	8004ba4 <HAL_UART_Receive_IT>




  // Initializing all Capture Variables
  int t_step = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  int r_step = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  int t_speed = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  int r_speed = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  int exposure_time = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  int saving_time = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  int margin_time = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd2:	bf00      	nop
 8000fd4:	e7fd      	b.n	8000fd2 <main+0x76>
 8000fd6:	bf00      	nop
 8000fd8:	20000294 	.word	0x20000294
 8000fdc:	200002e0 	.word	0x200002e0
 8000fe0:	40014400 	.word	0x40014400
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	200003b4 	.word	0x200003b4
 8000fec:	2000032c 	.word	0x2000032c

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	@ 0x58
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2244      	movs	r2, #68	@ 0x44
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 ff87 	bl	8006f12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001012:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001016:	f001 f91d 	bl	8002254 <HAL_PWREx_ControlVoltageScaling>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001020:	f000 fa6a 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800102c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102e:	2310      	movs	r3, #16
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001032:	2302      	movs	r3, #2
 8001034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001036:	2302      	movs	r3, #2
 8001038:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800103e:	230a      	movs	r3, #10
 8001040:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001042:	2307      	movs	r3, #7
 8001044:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001046:	2302      	movs	r3, #2
 8001048:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800104a:	2302      	movs	r3, #2
 800104c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4618      	mov	r0, r3
 8001054:	f001 f954 	bl	8002300 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800105e:	f000 fa4b 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2303      	movs	r3, #3
 8001068:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	2104      	movs	r1, #4
 800107a:	4618      	mov	r0, r3
 800107c:	f001 fd1c 	bl	8002ab8 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001086:	f000 fa37 	bl	80014f8 <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3758      	adds	r7, #88	@ 0x58
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <MX_TIM2_Init+0x98>)
 80010b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_TIM2_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_TIM2_Init+0x98>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_TIM2_Init+0x98>)
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_TIM2_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <MX_TIM2_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010da:	4814      	ldr	r0, [pc, #80]	@ (800112c <MX_TIM2_Init+0x98>)
 80010dc:	f002 fbcc 	bl	8003878 <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010e6:	f000 fa07 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <MX_TIM2_Init+0x98>)
 80010f8:	f002 fefa 	bl	8003ef0 <HAL_TIM_ConfigClockSource>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001102:	f000 f9f9 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <MX_TIM2_Init+0x98>)
 8001114:	f003 fbf2 	bl	80048fc <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800111e:	f000 f9eb 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001fc 	.word	0x200001fc

08001130 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <MX_TIM3_Init+0x94>)
 8001150:	4a1d      	ldr	r2, [pc, #116]	@ (80011c8 <MX_TIM3_Init+0x98>)
 8001152:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_TIM3_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_TIM3_Init+0x94>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_TIM3_Init+0x94>)
 8001162:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001166:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <MX_TIM3_Init+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_TIM3_Init+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001174:	4813      	ldr	r0, [pc, #76]	@ (80011c4 <MX_TIM3_Init+0x94>)
 8001176:	f002 fb7f 	bl	8003878 <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001180:	f000 f9ba 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001188:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4619      	mov	r1, r3
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <MX_TIM3_Init+0x94>)
 8001192:	f002 fead 	bl	8003ef0 <HAL_TIM_ConfigClockSource>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800119c:	f000 f9ac 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_TIM3_Init+0x94>)
 80011ae:	f003 fba5 	bl	80048fc <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011b8:	f000 f99e 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000248 	.word	0x20000248
 80011c8:	40000400 	.word	0x40000400

080011cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <MX_TIM5_Init+0x94>)
 80011ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <MX_TIM5_Init+0x98>)
 80011ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <MX_TIM5_Init+0x94>)
 80011f2:	224f      	movs	r2, #79	@ 0x4f
 80011f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_TIM5_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <MX_TIM5_Init+0x94>)
 80011fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001202:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <MX_TIM5_Init+0x94>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_TIM5_Init+0x94>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001210:	4813      	ldr	r0, [pc, #76]	@ (8001260 <MX_TIM5_Init+0x94>)
 8001212:	f002 fb31 	bl	8003878 <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800121c:	f000 f96c 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001224:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	@ (8001260 <MX_TIM5_Init+0x94>)
 800122e:	f002 fe5f 	bl	8003ef0 <HAL_TIM_ConfigClockSource>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001238:	f000 f95e 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_TIM5_Init+0x94>)
 800124a:	f003 fb57 	bl	80048fc <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001254:	f000 f950 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000294 	.word	0x20000294
 8001264:	40000c00 	.word	0x40000c00

08001268 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b092      	sub	sp, #72	@ 0x48
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800126e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	222c      	movs	r2, #44	@ 0x2c
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f005 fe42 	bl	8006f12 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800128e:	4b30      	ldr	r3, [pc, #192]	@ (8001350 <MX_TIM16_Init+0xe8>)
 8001290:	4a30      	ldr	r2, [pc, #192]	@ (8001354 <MX_TIM16_Init+0xec>)
 8001292:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001294:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <MX_TIM16_Init+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <MX_TIM16_Init+0xe8>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000-1;
 80012a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <MX_TIM16_Init+0xe8>)
 80012a2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80012a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <MX_TIM16_Init+0xe8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012ae:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <MX_TIM16_Init+0xe8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <MX_TIM16_Init+0xe8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012ba:	4825      	ldr	r0, [pc, #148]	@ (8001350 <MX_TIM16_Init+0xe8>)
 80012bc:	f002 fadc 	bl	8003878 <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80012c6:	f000 f917 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80012ca:	4821      	ldr	r0, [pc, #132]	@ (8001350 <MX_TIM16_Init+0xe8>)
 80012cc:	f002 fb94 	bl	80039f8 <HAL_TIM_PWM_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80012d6:	f000 f90f 	bl	80014f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012da:	2360      	movs	r3, #96	@ 0x60
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012fa:	2200      	movs	r2, #0
 80012fc:	4619      	mov	r1, r3
 80012fe:	4814      	ldr	r0, [pc, #80]	@ (8001350 <MX_TIM16_Init+0xe8>)
 8001300:	f002 fce2 	bl	8003cc8 <HAL_TIM_PWM_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800130a:	f000 f8f5 	bl	80014f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001326:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4807      	ldr	r0, [pc, #28]	@ (8001350 <MX_TIM16_Init+0xe8>)
 8001332:	f003 fb6b 	bl	8004a0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800133c:	f000 f8dc 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001340:	4803      	ldr	r0, [pc, #12]	@ (8001350 <MX_TIM16_Init+0xe8>)
 8001342:	f000 f95d 	bl	8001600 <HAL_TIM_MspPostInit>

}
 8001346:	bf00      	nop
 8001348:	3748      	adds	r7, #72	@ 0x48
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002e0 	.word	0x200002e0
 8001354:	40014400 	.word	0x40014400

08001358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800135e:	4a15      	ldr	r2, [pc, #84]	@ (80013b4 <MX_USART2_UART_Init+0x5c>)
 8001360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800139c:	f003 fbb4 	bl	8004b08 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013a6:	f000 f8a7 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000032c 	.word	0x2000032c
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <MX_GPIO_Init+0x134>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a46      	ldr	r2, [pc, #280]	@ (80014ec <MX_GPIO_Init+0x134>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b44      	ldr	r3, [pc, #272]	@ (80014ec <MX_GPIO_Init+0x134>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <MX_GPIO_Init+0x134>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a40      	ldr	r2, [pc, #256]	@ (80014ec <MX_GPIO_Init+0x134>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b3e      	ldr	r3, [pc, #248]	@ (80014ec <MX_GPIO_Init+0x134>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <MX_GPIO_Init+0x134>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a3a      	ldr	r2, [pc, #232]	@ (80014ec <MX_GPIO_Init+0x134>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b38      	ldr	r3, [pc, #224]	@ (80014ec <MX_GPIO_Init+0x134>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	4b35      	ldr	r3, [pc, #212]	@ (80014ec <MX_GPIO_Init+0x134>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a34      	ldr	r2, [pc, #208]	@ (80014ec <MX_GPIO_Init+0x134>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <MX_GPIO_Init+0x134>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7
 800142e:	2200      	movs	r2, #0
 8001430:	f240 71a3 	movw	r1, #1955	@ 0x7a3
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f000 fee6 	bl	8002208 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8001442:	482b      	ldr	r0, [pc, #172]	@ (80014f0 <MX_GPIO_Init+0x138>)
 8001444:	f000 fee0 	bl	8002208 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	4829      	ldr	r0, [pc, #164]	@ (80014f4 <MX_GPIO_Init+0x13c>)
 800144e:	f000 fedb 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001452:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001458:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <MX_GPIO_Init+0x13c>)
 800146a:	f000 fd23 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA7
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7
 800146e:	f240 73a3 	movw	r3, #1955	@ 0x7a3
 8001472:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148a:	f000 fd13 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800148e:	2310      	movs	r3, #16
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f000 fd06 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80014a8:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 80014ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <MX_GPIO_Init+0x138>)
 80014c2:	f000 fcf7 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014c6:	2380      	movs	r3, #128	@ 0x80
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_GPIO_Init+0x13c>)
 80014de:	f000 fce9 	bl	8001eb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	@ 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000400 	.word	0x48000400
 80014f4:	48000800 	.word	0x48000800

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <Error_Handler+0x8>

08001504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_MspInit+0x44>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150e:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <HAL_MspInit+0x44>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6613      	str	r3, [r2, #96]	@ 0x60
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <HAL_MspInit+0x44>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <HAL_MspInit+0x44>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <HAL_MspInit+0x44>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6593      	str	r3, [r2, #88]	@ 0x58
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_MspInit+0x44>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800155c:	d10c      	bne.n	8001578 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	4a23      	ldr	r2, [pc, #140]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6593      	str	r3, [r2, #88]	@ 0x58
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001576:	e034      	b.n	80015e2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <HAL_TIM_Base_MspInit+0xa8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10c      	bne.n	800159c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001582:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	4a1a      	ldr	r2, [pc, #104]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6593      	str	r3, [r2, #88]	@ 0x58
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
}
 800159a:	e022      	b.n	80015e2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a15      	ldr	r2, [pc, #84]	@ (80015f8 <HAL_TIM_Base_MspInit+0xac>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10c      	bne.n	80015c0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	4a11      	ldr	r2, [pc, #68]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	e010      	b.n	80015e2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <HAL_TIM_Base_MspInit+0xb0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10b      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_TIM_Base_MspInit+0xa4>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
}
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40000400 	.word	0x40000400
 80015f8:	40000c00 	.word	0x40000c00
 80015fc:	40014400 	.word	0x40014400

08001600 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_TIM_MspPostInit+0x64>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d11c      	bne.n	800165c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_TIM_MspPostInit+0x68>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <HAL_TIM_MspPostInit+0x68>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <HAL_TIM_MspPostInit+0x68>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800163a:	2340      	movs	r3, #64	@ 0x40
 800163c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800164a:	230e      	movs	r3, #14
 800164c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001658:	f000 fc2c 	bl	8001eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40014400 	.word	0x40014400
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0ac      	sub	sp, #176	@ 0xb0
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2288      	movs	r2, #136	@ 0x88
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f005 fc40 	bl	8006f12 <memset>
  if(huart->Instance==USART2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a25      	ldr	r2, [pc, #148]	@ (800172c <HAL_UART_MspInit+0xc0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d143      	bne.n	8001724 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800169c:	2302      	movs	r3, #2
 800169e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fc29 	bl	8002f00 <HAL_RCCEx_PeriphCLKConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b4:	f7ff ff20 	bl	80014f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <HAL_UART_MspInit+0xc4>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <HAL_UART_MspInit+0xc4>)
 80016be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <HAL_UART_MspInit+0xc4>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <HAL_UART_MspInit+0xc4>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d4:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <HAL_UART_MspInit+0xc4>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_UART_MspInit+0xc4>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016e8:	230c      	movs	r3, #12
 80016ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001700:	2307      	movs	r3, #7
 8001702:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001710:	f000 fbd0 	bl	8001eb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2026      	movs	r0, #38	@ 0x26
 800171a:	f000 fb16 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800171e:	2026      	movs	r0, #38	@ 0x26
 8001720:	f000 fb2f 	bl	8001d82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001724:	bf00      	nop
 8001726:	37b0      	adds	r7, #176	@ 0xb0
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40004400 	.word	0x40004400
 8001730:	40021000 	.word	0x40021000

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <NMI_Handler+0x4>

0800173c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <MemManage_Handler+0x4>

0800174c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <UsageFault_Handler+0x4>

0800175c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 f9e3 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b08c      	sub	sp, #48	@ 0x30
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800179a:	482b      	ldr	r0, [pc, #172]	@ (8001848 <USART2_IRQHandler+0xb4>)
 800179c:	f003 fa4e 	bl	8004c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

   if (state==LISTENING_STATE){
 80017a0:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <USART2_IRQHandler+0xb8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d143      	bne.n	8001830 <USART2_IRQHandler+0x9c>
    char command[] = "move 187 left right ss aa";
 80017a8:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <USART2_IRQHandler+0xbc>)
 80017aa:	1d3c      	adds	r4, r7, #4
 80017ac:	461d      	mov	r5, r3
 80017ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017b6:	c403      	stmia	r4!, {r0, r1}
 80017b8:	8022      	strh	r2, [r4, #0]
    char* token;

    int argc = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    char** argv = malloc(5*sizeof(char*));
 80017be:	2014      	movs	r0, #20
 80017c0:	f004 fd10 	bl	80061e4 <malloc>
 80017c4:	4603      	mov	r3, r0
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24

    const char delim[] = " ";
 80017c8:	2320      	movs	r3, #32
 80017ca:	803b      	strh	r3, [r7, #0]
    // Storing the command name
    token = strtok(command, delim);
 80017cc:	463a      	mov	r2, r7
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f005 fba6 	bl	8006f24 <strtok>
 80017d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    argv[argc] = token;
 80017da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e0:	4413      	add	r3, r2
 80017e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017e4:	601a      	str	r2, [r3, #0]
    argc++;
 80017e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e8:	3301      	adds	r3, #1
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    // Storing the command parameters
    while(token!=NULL){
 80017ec:	e00e      	b.n	800180c <USART2_IRQHandler+0x78>
        token = strtok(NULL, delim);
 80017ee:	463b      	mov	r3, r7
 80017f0:	4619      	mov	r1, r3
 80017f2:	2000      	movs	r0, #0
 80017f4:	f005 fb96 	bl	8006f24 <strtok>
 80017f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        argv[argc] = token;
 80017fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001800:	4413      	add	r3, r2
 8001802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001804:	601a      	str	r2, [r3, #0]
        argc++;
 8001806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001808:	3301      	adds	r3, #1
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
    while(token!=NULL){
 800180c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ed      	bne.n	80017ee <USART2_IRQHandler+0x5a>
    }

    if (argv[0]== "move"){
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <USART2_IRQHandler+0xc0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d109      	bne.n	8001830 <USART2_IRQHandler+0x9c>
      int distance = atoi(argv[1]);
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	3304      	adds	r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f004 fcda 	bl	80061dc <atoi>
 8001828:	6238      	str	r0, [r7, #32]
      translate(distance);
 800182a:	6a38      	ldr	r0, [r7, #32]
 800182c:	f7ff fb76 	bl	8000f1c <translate>

//  else if (handled==1){
//	  handled=0;
//  }

  HAL_UART_Receive_IT(&huart2, command, COMMAND_LENGTH);
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <USART2_IRQHandler+0xc4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	4908      	ldr	r1, [pc, #32]	@ (800185c <USART2_IRQHandler+0xc8>)
 800183a:	4803      	ldr	r0, [pc, #12]	@ (8001848 <USART2_IRQHandler+0xb4>)
 800183c:	f003 f9b2 	bl	8004ba4 <HAL_UART_Receive_IT>
//  char receivedCharacter;
//
//
//  HAL_UART_Receive_IT(&huart2, &receivedCharacter, 1);
  /* USER CODE END USART2_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	3730      	adds	r7, #48	@ 0x30
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	2000032c 	.word	0x2000032c
 800184c:	200003d4 	.word	0x200003d4
 8001850:	08008cc0 	.word	0x08008cc0
 8001854:	08008cb8 	.word	0x08008cb8
 8001858:	20000008 	.word	0x20000008
 800185c:	200003b4 	.word	0x200003b4

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187a:	f005 fc09 	bl	8007090 <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
  return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit (int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <_exit+0x12>

080018a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e00a      	b.n	80018ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b8:	f3af 8000 	nop.w
 80018bc:	4601      	mov	r1, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	60ba      	str	r2, [r7, #8]
 80018c4:	b2ca      	uxtb	r2, r1
 80018c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbf0      	blt.n	80018b8 <_read+0x12>
  }

  return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e009      	b.n	8001906 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	60ba      	str	r2, [r7, #8]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbf1      	blt.n	80018f2 <_write+0x12>
  }
  return len;
 800190e:	687b      	ldr	r3, [r7, #4]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_close>:

int _close(int file)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001940:	605a      	str	r2, [r3, #4]
  return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_isatty>:

int _isatty(int file)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	@ (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f005 fb6e 	bl	8007090 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20018000 	.word	0x20018000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	200003d8 	.word	0x200003d8
 80019e8:	20000530 	.word	0x20000530

080019ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <delayMicroseconds>:
#include "stm32l4xx.h"

void delayMicroseconds(int delay){
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	int startingValue = TIM5->CNT;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <delayMicroseconds+0x34>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	60bb      	str	r3, [r7, #8]
	int readValue = startingValue;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	60fb      	str	r3, [r7, #12]
	while(readValue-startingValue<delay){
 8001a22:	e002      	b.n	8001a2a <delayMicroseconds+0x1a>
		readValue =TIM5->CNT;
 8001a24:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <delayMicroseconds+0x34>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	60fb      	str	r3, [r7, #12]
	while(readValue-startingValue<delay){
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dcf6      	bgt.n	8001a24 <delayMicroseconds+0x14>
	}
}
 8001a36:	bf00      	nop
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40000c00 	.word	0x40000c00

08001a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a4c:	f7ff ffce 	bl	80019ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	@ (8001a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <LoopForever+0xe>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	@ (8001a94 <LoopForever+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f005 fb11 	bl	800709c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7a:	f7ff fa6f 	bl	8000f5c <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a8c:	08009104 	.word	0x08009104
  ldr r2, =_sbss
 8001a90:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a94:	2000052c 	.word	0x2000052c

08001a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_2_IRQHandler>
	...

08001a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <HAL_Init+0x3c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad8 <HAL_Init+0x3c>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f000 f93e 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 f80f 	bl	8001adc <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	e001      	b.n	8001ace <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aca:	f7ff fd1b 	bl	8001504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ace:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ae8:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <HAL_InitTick+0x6c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d023      	beq.n	8001b38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001af0:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <HAL_InitTick+0x70>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <HAL_InitTick+0x6c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f949 	bl	8001d9e <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d809      	bhi.n	8001b2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f913 	bl	8001d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b24:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <HAL_InitTick+0x74>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e007      	b.n	8001b3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e004      	b.n	8001b3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e001      	b.n	8001b3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000014 	.word	0x20000014
 8001b4c:	2000000c 	.word	0x2000000c
 8001b50:	20000010 	.word	0x20000010

08001b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000014 	.word	0x20000014
 8001b78:	200003dc 	.word	0x200003dc

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200003dc 	.word	0x200003dc

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	@ (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	@ (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	@ (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	@ 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	@ 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff3e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff31 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa2 	bl	8001cf0 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d008      	beq.n	8001de0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e022      	b.n	8001e26 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 020e 	bic.w	r2, r2, #14
 8001dee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	f003 021c 	and.w	r2, r3, #28
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d005      	beq.n	8001e56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e029      	b.n	8001eaa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 020e 	bic.w	r2, r2, #14
 8001e64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	f003 021c 	and.w	r2, r3, #28
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	4798      	blx	r3
    }
  }
  return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec2:	e17f      	b.n	80021c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8171 	beq.w	80021be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d005      	beq.n	8001ef4 <HAL_GPIO_Init+0x40>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d130      	bne.n	8001f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 0201 	and.w	r2, r3, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d118      	bne.n	8001f94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	f003 0201 	and.w	r2, r3, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d017      	beq.n	8001fd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d123      	bne.n	8002024 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	08da      	lsrs	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3208      	adds	r2, #8
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	08da      	lsrs	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3208      	adds	r2, #8
 800201e:	6939      	ldr	r1, [r7, #16]
 8002020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0203 	and.w	r2, r3, #3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80ac 	beq.w	80021be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	4b5f      	ldr	r3, [pc, #380]	@ (80021e4 <HAL_GPIO_Init+0x330>)
 8002068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206a:	4a5e      	ldr	r2, [pc, #376]	@ (80021e4 <HAL_GPIO_Init+0x330>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6613      	str	r3, [r2, #96]	@ 0x60
 8002072:	4b5c      	ldr	r3, [pc, #368]	@ (80021e4 <HAL_GPIO_Init+0x330>)
 8002074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800207e:	4a5a      	ldr	r2, [pc, #360]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	220f      	movs	r2, #15
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020a8:	d025      	beq.n	80020f6 <HAL_GPIO_Init+0x242>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	@ (80021ec <HAL_GPIO_Init+0x338>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <HAL_GPIO_Init+0x23e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	@ (80021f0 <HAL_GPIO_Init+0x33c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x23a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	@ (80021f4 <HAL_GPIO_Init+0x340>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x236>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	@ (80021f8 <HAL_GPIO_Init+0x344>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x232>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	@ (80021fc <HAL_GPIO_Init+0x348>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x22e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002200 <HAL_GPIO_Init+0x34c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x22a>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00c      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020de:	2307      	movs	r3, #7
 80020e0:	e00a      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020e2:	2305      	movs	r3, #5
 80020e4:	e008      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020e6:	2304      	movs	r3, #4
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020ea:	2303      	movs	r3, #3
 80020ec:	e004      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e002      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020f6:	2300      	movs	r3, #0
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	f002 0203 	and.w	r2, r2, #3
 80020fe:	0092      	lsls	r2, r2, #2
 8002100:	4093      	lsls	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002108:	4937      	ldr	r1, [pc, #220]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	3302      	adds	r3, #2
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002116:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_GPIO_Init+0x350>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800213a:	4a32      	ldr	r2, [pc, #200]	@ (8002204 <HAL_GPIO_Init+0x350>)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002140:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <HAL_GPIO_Init+0x350>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002164:	4a27      	ldr	r2, [pc, #156]	@ (8002204 <HAL_GPIO_Init+0x350>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800216a:	4b26      	ldr	r3, [pc, #152]	@ (8002204 <HAL_GPIO_Init+0x350>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800218e:	4a1d      	ldr	r2, [pc, #116]	@ (8002204 <HAL_GPIO_Init+0x350>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002194:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <HAL_GPIO_Init+0x350>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021b8:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <HAL_GPIO_Init+0x350>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f47f ae78 	bne.w	8001ec4 <HAL_GPIO_Init+0x10>
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010000 	.word	0x40010000
 80021ec:	48000400 	.word	0x48000400
 80021f0:	48000800 	.word	0x48000800
 80021f4:	48000c00 	.word	0x48000c00
 80021f8:	48001000 	.word	0x48001000
 80021fc:	48001400 	.word	0x48001400
 8002200:	48001800 	.word	0x48001800
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002224:	e002      	b.n	800222c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <HAL_PWREx_GetVoltageRange+0x18>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40007000 	.word	0x40007000

08002254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002262:	d130      	bne.n	80022c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002264:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800226c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002270:	d038      	beq.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800227a:	4a1e      	ldr	r2, [pc, #120]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002282:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2232      	movs	r2, #50	@ 0x32
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	4a1b      	ldr	r2, [pc, #108]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0c9b      	lsrs	r3, r3, #18
 8002294:	3301      	adds	r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002298:	e002      	b.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3b01      	subs	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a0:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ac:	d102      	bne.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f2      	bne.n	800229a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022b4:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c0:	d110      	bne.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e00f      	b.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022c6:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d2:	d007      	beq.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022d4:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022dc:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40007000 	.word	0x40007000
 80022f8:	2000000c 	.word	0x2000000c
 80022fc:	431bde83 	.word	0x431bde83

08002300 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e3ca      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002312:	4b97      	ldr	r3, [pc, #604]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800231c:	4b94      	ldr	r3, [pc, #592]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80e4 	beq.w	80024fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_RCC_OscConfig+0x4a>
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	f040 808b 	bne.w	8002458 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b01      	cmp	r3, #1
 8002346:	f040 8087 	bne.w	8002458 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234a:	4b89      	ldr	r3, [pc, #548]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x62>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e3a2      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1a      	ldr	r2, [r3, #32]
 8002366:	4b82      	ldr	r3, [pc, #520]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <HAL_RCC_OscConfig+0x7c>
 8002372:	4b7f      	ldr	r3, [pc, #508]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800237a:	e005      	b.n	8002388 <HAL_RCC_OscConfig+0x88>
 800237c:	4b7c      	ldr	r3, [pc, #496]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800237e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002388:	4293      	cmp	r3, r2
 800238a:	d223      	bcs.n	80023d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fd55 	bl	8002e40 <RCC_SetFlashLatencyFromMSIRange>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e383      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a0:	4b73      	ldr	r3, [pc, #460]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a72      	ldr	r2, [pc, #456]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b70      	ldr	r3, [pc, #448]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	496d      	ldr	r1, [pc, #436]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023be:	4b6c      	ldr	r3, [pc, #432]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	4968      	ldr	r1, [pc, #416]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
 80023d2:	e025      	b.n	8002420 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d4:	4b66      	ldr	r3, [pc, #408]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a65      	ldr	r2, [pc, #404]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b63      	ldr	r3, [pc, #396]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4960      	ldr	r1, [pc, #384]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	495b      	ldr	r1, [pc, #364]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d109      	bne.n	8002420 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fd15 	bl	8002e40 <RCC_SetFlashLatencyFromMSIRange>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e343      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002420:	f000 fc4a 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b52      	ldr	r3, [pc, #328]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	4950      	ldr	r1, [pc, #320]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	4a4e      	ldr	r2, [pc, #312]	@ (8002578 <HAL_RCC_OscConfig+0x278>)
 800243e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002440:	4b4e      	ldr	r3, [pc, #312]	@ (800257c <HAL_RCC_OscConfig+0x27c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fb49 	bl	8001adc <HAL_InitTick>
 800244a:	4603      	mov	r3, r0
 800244c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d052      	beq.n	80024fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	e327      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d032      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002460:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a42      	ldr	r2, [pc, #264]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800246c:	f7ff fb86 	bl	8001b7c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002474:	f7ff fb82 	bl	8001b7c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e310      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002486:	4b3a      	ldr	r3, [pc, #232]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002492:	4b37      	ldr	r3, [pc, #220]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a36      	ldr	r2, [pc, #216]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4931      	ldr	r1, [pc, #196]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	492c      	ldr	r1, [pc, #176]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
 80024c4:	e01a      	b.n	80024fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a29      	ldr	r2, [pc, #164]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fb53 	bl	8001b7c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024da:	f7ff fb4f 	bl	8001b7c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e2dd      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ec:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x1da>
 80024f8:	e000      	b.n	80024fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d074      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b08      	cmp	r3, #8
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x21a>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d10e      	bne.n	8002532 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d10b      	bne.n	8002532 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d064      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d160      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e2ba      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x24a>
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0b      	ldr	r2, [pc, #44]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e026      	b.n	8002598 <HAL_RCC_OscConfig+0x298>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002552:	d115      	bne.n	8002580 <HAL_RCC_OscConfig+0x280>
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a05      	ldr	r2, [pc, #20]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800255a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a02      	ldr	r2, [pc, #8]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x298>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	08008cdc 	.word	0x08008cdc
 8002578:	2000000c 	.word	0x2000000c
 800257c:	20000010 	.word	0x20000010
 8002580:	4ba0      	ldr	r3, [pc, #640]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a9f      	ldr	r2, [pc, #636]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b9d      	ldr	r3, [pc, #628]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a9c      	ldr	r2, [pc, #624]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7ff faec 	bl	8001b7c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff fae8 	bl	8001b7c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	@ 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e276      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ba:	4b92      	ldr	r3, [pc, #584]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x2a8>
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7ff fad8 	bl	8001b7c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff fad4 	bl	8001b7c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	@ 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e262      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e2:	4b88      	ldr	r3, [pc, #544]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2d0>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d060      	beq.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d005      	beq.n	8002610 <HAL_RCC_OscConfig+0x310>
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d119      	bne.n	800263e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d116      	bne.n	800263e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002610:	4b7c      	ldr	r3, [pc, #496]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x328>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e23f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b76      	ldr	r3, [pc, #472]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	4973      	ldr	r1, [pc, #460]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800263c:	e040      	b.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d023      	beq.n	800268e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002646:	4b6f      	ldr	r3, [pc, #444]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a6e      	ldr	r2, [pc, #440]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7ff fa93 	bl	8001b7c <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265a:	f7ff fa8f 	bl	8001b7c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e21d      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266c:	4b65      	ldr	r3, [pc, #404]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b62      	ldr	r3, [pc, #392]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	495f      	ldr	r1, [pc, #380]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
 800268c:	e018      	b.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b5d      	ldr	r3, [pc, #372]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a5c      	ldr	r2, [pc, #368]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7ff fa6f 	bl	8001b7c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff fa6b 	bl	8001b7c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e1f9      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b4:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d03c      	beq.n	8002746 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01c      	beq.n	800270e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026da:	4a4a      	ldr	r2, [pc, #296]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7ff fa4a 	bl	8001b7c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ec:	f7ff fa46 	bl	8001b7c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1d4      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026fe:	4b41      	ldr	r3, [pc, #260]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ef      	beq.n	80026ec <HAL_RCC_OscConfig+0x3ec>
 800270c:	e01b      	b.n	8002746 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270e:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002714:	4a3b      	ldr	r2, [pc, #236]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff fa2d 	bl	8001b7c <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002726:	f7ff fa29 	bl	8001b7c <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1b7      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002738:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800273a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ef      	bne.n	8002726 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80a6 	beq.w	80028a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002758:	4b2a      	ldr	r3, [pc, #168]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10d      	bne.n	8002780 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	4b27      	ldr	r3, [pc, #156]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	4a26      	ldr	r2, [pc, #152]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002770:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277c:	2301      	movs	r3, #1
 800277e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002780:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <HAL_RCC_OscConfig+0x508>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d118      	bne.n	80027be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <HAL_RCC_OscConfig+0x508>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <HAL_RCC_OscConfig+0x508>)
 8002792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002798:	f7ff f9f0 	bl	8001b7c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a0:	f7ff f9ec 	bl	8001b7c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e17a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_RCC_OscConfig+0x508>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d108      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4d8>
 80027c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027d6:	e029      	b.n	800282c <HAL_RCC_OscConfig+0x52c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d115      	bne.n	800280c <HAL_RCC_OscConfig+0x50c>
 80027e0:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e6:	4a07      	ldr	r2, [pc, #28]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f0:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	4a03      	ldr	r2, [pc, #12]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002800:	e014      	b.n	800282c <HAL_RCC_OscConfig+0x52c>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	4b9c      	ldr	r3, [pc, #624]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002812:	4a9b      	ldr	r2, [pc, #620]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800281c:	4b98      	ldr	r3, [pc, #608]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	4a97      	ldr	r2, [pc, #604]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d016      	beq.n	8002862 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff f9a2 	bl	8001b7c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7ff f99e 	bl	8001b7c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e12a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002852:	4b8b      	ldr	r3, [pc, #556]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ed      	beq.n	800283c <HAL_RCC_OscConfig+0x53c>
 8002860:	e015      	b.n	800288e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7ff f98b 	bl	8001b7c <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7ff f987 	bl	8001b7c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e113      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002880:	4b7f      	ldr	r3, [pc, #508]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ed      	bne.n	800286a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288e:	7ffb      	ldrb	r3, [r7, #31]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b7a      	ldr	r3, [pc, #488]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	4a79      	ldr	r2, [pc, #484]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80fe 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	f040 80d0 	bne.w	8002a54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028b4:	4b72      	ldr	r3, [pc, #456]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0203 	and.w	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d130      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	3b01      	subs	r3, #1
 80028d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d127      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d11f      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028f4:	2a07      	cmp	r2, #7
 80028f6:	bf14      	ite	ne
 80028f8:	2201      	movne	r2, #1
 80028fa:	2200      	moveq	r2, #0
 80028fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028fe:	4293      	cmp	r3, r2
 8002900:	d113      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	3b01      	subs	r3, #1
 8002910:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d109      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	3b01      	subs	r3, #1
 8002924:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d06e      	beq.n	8002a08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b0c      	cmp	r3, #12
 800292e:	d069      	beq.n	8002a04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002930:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800293c:	4b50      	ldr	r3, [pc, #320]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0ad      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800294c:	4b4c      	ldr	r3, [pc, #304]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a4b      	ldr	r2, [pc, #300]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002958:	f7ff f910 	bl	8001b7c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7ff f90c 	bl	8001b7c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e09a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002972:	4b43      	ldr	r3, [pc, #268]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297e:	4b40      	ldr	r3, [pc, #256]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	4b40      	ldr	r3, [pc, #256]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800298e:	3a01      	subs	r2, #1
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002998:	0212      	lsls	r2, r2, #8
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029a0:	0852      	lsrs	r2, r2, #1
 80029a2:	3a01      	subs	r2, #1
 80029a4:	0552      	lsls	r2, r2, #21
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029ac:	0852      	lsrs	r2, r2, #1
 80029ae:	3a01      	subs	r2, #1
 80029b0:	0652      	lsls	r2, r2, #25
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029b8:	0912      	lsrs	r2, r2, #4
 80029ba:	0452      	lsls	r2, r2, #17
 80029bc:	430a      	orrs	r2, r1
 80029be:	4930      	ldr	r1, [pc, #192]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 80029ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029dc:	f7ff f8ce 	bl	8001b7c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7ff f8ca 	bl	8001b7c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e058      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f6:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a02:	e050      	b.n	8002aa6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a08:	4b1d      	ldr	r3, [pc, #116]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d148      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a14:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a19      	ldr	r2, [pc, #100]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a20:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a2c:	f7ff f8a6 	bl	8001b7c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7ff f8a2 	bl	8001b7c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e030      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x734>
 8002a52:	e028      	b.n	8002aa6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d023      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <HAL_RCC_OscConfig+0x780>)
 8002a60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7ff f889 	bl	8001b7c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6c:	e00c      	b.n	8002a88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7ff f885 	bl	8001b7c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d905      	bls.n	8002a88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e013      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
 8002a80:	40021000 	.word	0x40021000
 8002a84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a88:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_OscConfig+0x7b0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ec      	bne.n	8002a6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a94:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <HAL_RCC_OscConfig+0x7b0>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	4905      	ldr	r1, [pc, #20]	@ (8002ab0 <HAL_RCC_OscConfig+0x7b0>)
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_RCC_OscConfig+0x7b4>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
 8002aa0:	e001      	b.n	8002aa6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	feeefffc 	.word	0xfeeefffc

08002ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0e7      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b75      	ldr	r3, [pc, #468]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d910      	bls.n	8002afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b72      	ldr	r3, [pc, #456]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0207 	bic.w	r2, r3, #7
 8002ae2:	4970      	ldr	r1, [pc, #448]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cf      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d010      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d908      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b63      	ldr	r3, [pc, #396]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4960      	ldr	r1, [pc, #384]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d04c      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d121      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0a6      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b56:	4b54      	ldr	r3, [pc, #336]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d115      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e09a      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e08e      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e086      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b46      	ldr	r3, [pc, #280]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4943      	ldr	r1, [pc, #268]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba0:	f7fe ffec 	bl	8001b7c <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe ffe8 	bl	8001b7c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e06e      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d208      	bcs.n	8002bfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	492b      	ldr	r1, [pc, #172]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfe:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d210      	bcs.n	8002c2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 0207 	bic.w	r2, r3, #7
 8002c14:	4923      	ldr	r1, [pc, #140]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e036      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4918      	ldr	r1, [pc, #96]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4910      	ldr	r1, [pc, #64]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c6c:	f000 f824 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	490b      	ldr	r1, [pc, #44]	@ (8002cac <HAL_RCC_ClockConfig+0x1f4>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
 8002c88:	4a09      	ldr	r2, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1fc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe ff23 	bl	8001adc <HAL_InitTick>
 8002c96:	4603      	mov	r3, r0
 8002c98:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40022000 	.word	0x40022000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	08008cdc 	.word	0x08008cdc
 8002cb0:	2000000c 	.word	0x2000000c
 8002cb4:	20000010 	.word	0x20000010

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x34>
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d121      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d11e      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cec:	4b34      	ldr	r3, [pc, #208]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf8:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e005      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d08:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d14:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	e004      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d3c:	4b23      	ldr	r3, [pc, #140]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d134      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d46:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0xac>
 8002d5c:	e005      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d60:	617b      	str	r3, [r7, #20]
      break;
 8002d62:	e005      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d64:	4b19      	ldr	r3, [pc, #100]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d66:	617b      	str	r3, [r7, #20]
      break;
 8002d68:	e002      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	617b      	str	r3, [r7, #20]
      break;
 8002d6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d70:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	fb03 f202 	mul.w	r2, r3, r2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	0e5b      	lsrs	r3, r3, #25
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	3301      	adds	r3, #1
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002db0:	69bb      	ldr	r3, [r7, #24]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	@ 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	08008cf4 	.word	0x08008cf4
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	2000000c 	.word	0x2000000c

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4904      	ldr	r1, [pc, #16]	@ (8002e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08008cec 	.word	0x08008cec

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e18:	f7ff ffda 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0adb      	lsrs	r3, r3, #11
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4904      	ldr	r1, [pc, #16]	@ (8002e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08008cec 	.word	0x08008cec

08002e40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e58:	f7ff f9ee 	bl	8002238 <HAL_PWREx_GetVoltageRange>
 8002e5c:	6178      	str	r0, [r7, #20]
 8002e5e:	e014      	b.n	8002e8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e60:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e64:	4a24      	ldr	r2, [pc, #144]	@ (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6c:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e78:	f7ff f9de 	bl	8002238 <HAL_PWREx_GetVoltageRange>
 8002e7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e82:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e90:	d10b      	bne.n	8002eaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b80      	cmp	r3, #128	@ 0x80
 8002e96:	d919      	bls.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e9c:	d902      	bls.n	8002ea4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	e013      	b.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	e010      	b.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b80      	cmp	r3, #128	@ 0x80
 8002eae:	d902      	bls.n	8002eb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	e00a      	b.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b80      	cmp	r3, #128	@ 0x80
 8002eba:	d102      	bne.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	e004      	b.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b70      	cmp	r3, #112	@ 0x70
 8002ec6:	d101      	bne.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ec8:	2301      	movs	r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 0207 	bic.w	r2, r3, #7
 8002ed4:	4909      	ldr	r1, [pc, #36]	@ (8002efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002edc:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40022000 	.word	0x40022000

08002f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f08:	2300      	movs	r3, #0
 8002f0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d041      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f24:	d02a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f2a:	d824      	bhi.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f30:	d008      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f36:	d81e      	bhi.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f40:	d010      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f42:	e018      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f44:	4b86      	ldr	r3, [pc, #536]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a85      	ldr	r2, [pc, #532]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f50:	e015      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fabb 	bl	80034d4 <RCCEx_PLLSAI1_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f62:	e00c      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3320      	adds	r3, #32
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fba6 	bl	80036bc <RCCEx_PLLSAI2_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f74:	e003      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	74fb      	strb	r3, [r7, #19]
      break;
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f84:	4b76      	ldr	r3, [pc, #472]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f92:	4973      	ldr	r1, [pc, #460]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f9a:	e001      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d041      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fb4:	d02a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fba:	d824      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fc0:	d008      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fc6:	d81e      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fd2:	e018      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fd4:	4b62      	ldr	r3, [pc, #392]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a61      	ldr	r2, [pc, #388]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fde:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fe0:	e015      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fa73 	bl	80034d4 <RCCEx_PLLSAI1_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ff2:	e00c      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3320      	adds	r3, #32
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fb5e 	bl	80036bc <RCCEx_PLLSAI2_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003004:	e003      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	74fb      	strb	r3, [r7, #19]
      break;
 800300a:	e000      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800300c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003014:	4b52      	ldr	r3, [pc, #328]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003022:	494f      	ldr	r1, [pc, #316]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800302a:	e001      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a0 	beq.w	800317e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003042:	4b47      	ldr	r3, [pc, #284]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003058:	4b41      	ldr	r3, [pc, #260]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305c:	4a40      	ldr	r2, [pc, #256]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003062:	6593      	str	r3, [r2, #88]	@ 0x58
 8003064:	4b3e      	ldr	r3, [pc, #248]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003070:	2301      	movs	r3, #1
 8003072:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003074:	4b3b      	ldr	r3, [pc, #236]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a3a      	ldr	r2, [pc, #232]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800307e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003080:	f7fe fd7c 	bl	8001b7c <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003086:	e009      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fe fd78 	bl	8001b7c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d902      	bls.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	74fb      	strb	r3, [r7, #19]
        break;
 800309a:	e005      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800309c:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ef      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d15c      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01f      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d019      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030cc:	4b24      	ldr	r3, [pc, #144]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030d8:	4b21      	ldr	r3, [pc, #132]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030de:	4a20      	ldr	r2, [pc, #128]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030f8:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d016      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe fd37 	bl	8001b7c <HAL_GetTick>
 800310e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003110:	e00b      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe fd33 	bl	8001b7c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d902      	bls.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	74fb      	strb	r3, [r7, #19]
            break;
 8003128:	e006      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312a:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ec      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800313e:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003144:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800314e:	4904      	ldr	r1, [pc, #16]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003156:	e009      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	74bb      	strb	r3, [r7, #18]
 800315c:	e006      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800316c:	7c7b      	ldrb	r3, [r7, #17]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d105      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003172:	4b9e      	ldr	r3, [pc, #632]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	4a9d      	ldr	r2, [pc, #628]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800317c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800318a:	4b98      	ldr	r3, [pc, #608]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003190:	f023 0203 	bic.w	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	4994      	ldr	r1, [pc, #592]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ac:	4b8f      	ldr	r3, [pc, #572]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	f023 020c 	bic.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ba:	498c      	ldr	r1, [pc, #560]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ce:	4b87      	ldr	r3, [pc, #540]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	4983      	ldr	r1, [pc, #524]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031f0:	4b7e      	ldr	r3, [pc, #504]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	497b      	ldr	r1, [pc, #492]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003212:	4b76      	ldr	r3, [pc, #472]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003218:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003220:	4972      	ldr	r1, [pc, #456]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003234:	4b6d      	ldr	r3, [pc, #436]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003242:	496a      	ldr	r1, [pc, #424]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003256:	4b65      	ldr	r3, [pc, #404]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	4961      	ldr	r1, [pc, #388]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003278:	4b5c      	ldr	r3, [pc, #368]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003286:	4959      	ldr	r1, [pc, #356]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800329a:	4b54      	ldr	r3, [pc, #336]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a8:	4950      	ldr	r1, [pc, #320]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032bc:	4b4b      	ldr	r3, [pc, #300]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ca:	4948      	ldr	r1, [pc, #288]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032de:	4b43      	ldr	r3, [pc, #268]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	493f      	ldr	r1, [pc, #252]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d028      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003300:	4b3a      	ldr	r3, [pc, #232]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003306:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800330e:	4937      	ldr	r1, [pc, #220]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800331a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800331e:	d106      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003320:	4b32      	ldr	r3, [pc, #200]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a31      	ldr	r2, [pc, #196]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800332a:	60d3      	str	r3, [r2, #12]
 800332c:	e011      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003332:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003336:	d10c      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8c8 	bl	80034d4 <RCCEx_PLLSAI1_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d028      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800335e:	4b23      	ldr	r3, [pc, #140]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	491f      	ldr	r1, [pc, #124]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800337c:	d106      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800337e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a1a      	ldr	r2, [pc, #104]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003388:	60d3      	str	r3, [r2, #12]
 800338a:	e011      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	2101      	movs	r1, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f899 	bl	80034d4 <RCCEx_PLLSAI1_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d02b      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033bc:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ca:	4908      	ldr	r1, [pc, #32]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033da:	d109      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033dc:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a02      	ldr	r2, [pc, #8]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033e6:	60d3      	str	r3, [r2, #12]
 80033e8:	e014      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2101      	movs	r1, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f867 	bl	80034d4 <RCCEx_PLLSAI1_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d02f      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003420:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800342e:	4928      	ldr	r1, [pc, #160]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800343a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800343e:	d10d      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f844 	bl	80034d4 <RCCEx_PLLSAI1_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d014      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	74bb      	strb	r3, [r7, #18]
 800345a:	e011      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003464:	d10c      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3320      	adds	r3, #32
 800346a:	2102      	movs	r1, #2
 800346c:	4618      	mov	r0, r3
 800346e:	f000 f925 	bl	80036bc <RCCEx_PLLSAI2_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800348c:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003492:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800349a:	490d      	ldr	r1, [pc, #52]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034ae:	4b08      	ldr	r3, [pc, #32]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034be:	4904      	ldr	r1, [pc, #16]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000

080034d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034e2:	4b75      	ldr	r3, [pc, #468]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d018      	beq.n	8003520 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034ee:	4b72      	ldr	r3, [pc, #456]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0203 	and.w	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d10d      	bne.n	800351a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
       ||
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003506:	4b6c      	ldr	r3, [pc, #432]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
       ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d047      	beq.n	80035aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
 800351e:	e044      	b.n	80035aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d018      	beq.n	800355a <RCCEx_PLLSAI1_Config+0x86>
 8003528:	2b03      	cmp	r3, #3
 800352a:	d825      	bhi.n	8003578 <RCCEx_PLLSAI1_Config+0xa4>
 800352c:	2b01      	cmp	r3, #1
 800352e:	d002      	beq.n	8003536 <RCCEx_PLLSAI1_Config+0x62>
 8003530:	2b02      	cmp	r3, #2
 8003532:	d009      	beq.n	8003548 <RCCEx_PLLSAI1_Config+0x74>
 8003534:	e020      	b.n	8003578 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003536:	4b60      	ldr	r3, [pc, #384]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11d      	bne.n	800357e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003546:	e01a      	b.n	800357e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003548:	4b5b      	ldr	r3, [pc, #364]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d116      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003558:	e013      	b.n	8003582 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800355a:	4b57      	ldr	r3, [pc, #348]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10f      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003566:	4b54      	ldr	r3, [pc, #336]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003576:	e006      	b.n	8003586 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
      break;
 800357c:	e004      	b.n	8003588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800357e:	bf00      	nop
 8003580:	e002      	b.n	8003588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003586:	bf00      	nop
    }

    if(status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10d      	bne.n	80035aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800358e:	4b4a      	ldr	r3, [pc, #296]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6819      	ldr	r1, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	430b      	orrs	r3, r1
 80035a4:	4944      	ldr	r1, [pc, #272]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d17d      	bne.n	80036ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035b0:	4b41      	ldr	r3, [pc, #260]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a40      	ldr	r2, [pc, #256]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035bc:	f7fe fade 	bl	8001b7c <HAL_GetTick>
 80035c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035c2:	e009      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035c4:	f7fe fada 	bl	8001b7c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d902      	bls.n	80035d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	73fb      	strb	r3, [r7, #15]
        break;
 80035d6:	e005      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035d8:	4b37      	ldr	r3, [pc, #220]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ef      	bne.n	80035c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d160      	bne.n	80036ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d111      	bne.n	8003614 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f0:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80035f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6892      	ldr	r2, [r2, #8]
 8003600:	0211      	lsls	r1, r2, #8
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68d2      	ldr	r2, [r2, #12]
 8003606:	0912      	lsrs	r2, r2, #4
 8003608:	0452      	lsls	r2, r2, #17
 800360a:	430a      	orrs	r2, r1
 800360c:	492a      	ldr	r1, [pc, #168]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360e:	4313      	orrs	r3, r2
 8003610:	610b      	str	r3, [r1, #16]
 8003612:	e027      	b.n	8003664 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d112      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800361a:	4b27      	ldr	r3, [pc, #156]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003622:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	0211      	lsls	r1, r2, #8
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6912      	ldr	r2, [r2, #16]
 8003630:	0852      	lsrs	r2, r2, #1
 8003632:	3a01      	subs	r2, #1
 8003634:	0552      	lsls	r2, r2, #21
 8003636:	430a      	orrs	r2, r1
 8003638:	491f      	ldr	r1, [pc, #124]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	610b      	str	r3, [r1, #16]
 800363e:	e011      	b.n	8003664 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003640:	4b1d      	ldr	r3, [pc, #116]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003648:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	0211      	lsls	r1, r2, #8
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6952      	ldr	r2, [r2, #20]
 8003656:	0852      	lsrs	r2, r2, #1
 8003658:	3a01      	subs	r2, #1
 800365a:	0652      	lsls	r2, r2, #25
 800365c:	430a      	orrs	r2, r1
 800365e:	4916      	ldr	r1, [pc, #88]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003664:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a13      	ldr	r2, [pc, #76]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800366e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fe fa84 	bl	8001b7c <HAL_GetTick>
 8003674:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003676:	e009      	b.n	800368c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003678:	f7fe fa80 	bl	8001b7c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d902      	bls.n	800368c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	73fb      	strb	r3, [r7, #15]
          break;
 800368a:	e005      	b.n	8003698 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0ef      	beq.n	8003678 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800369e:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	4904      	ldr	r1, [pc, #16]	@ (80036b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000

080036bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d018      	beq.n	8003708 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036d6:	4b67      	ldr	r3, [pc, #412]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0203 	and.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d10d      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036ee:	4b61      	ldr	r3, [pc, #388]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
       ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d047      	beq.n	8003792 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	e044      	b.n	8003792 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d018      	beq.n	8003742 <RCCEx_PLLSAI2_Config+0x86>
 8003710:	2b03      	cmp	r3, #3
 8003712:	d825      	bhi.n	8003760 <RCCEx_PLLSAI2_Config+0xa4>
 8003714:	2b01      	cmp	r3, #1
 8003716:	d002      	beq.n	800371e <RCCEx_PLLSAI2_Config+0x62>
 8003718:	2b02      	cmp	r3, #2
 800371a:	d009      	beq.n	8003730 <RCCEx_PLLSAI2_Config+0x74>
 800371c:	e020      	b.n	8003760 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800371e:	4b55      	ldr	r3, [pc, #340]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11d      	bne.n	8003766 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372e:	e01a      	b.n	8003766 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003730:	4b50      	ldr	r3, [pc, #320]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e013      	b.n	800376a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003742:	4b4c      	ldr	r3, [pc, #304]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800374e:	4b49      	ldr	r3, [pc, #292]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800375e:	e006      	b.n	800376e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      break;
 8003764:	e004      	b.n	8003770 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003766:	bf00      	nop
 8003768:	e002      	b.n	8003770 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800376e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003776:	4b3f      	ldr	r3, [pc, #252]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	3b01      	subs	r3, #1
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	430b      	orrs	r3, r1
 800378c:	4939      	ldr	r1, [pc, #228]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378e:	4313      	orrs	r3, r2
 8003790:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d167      	bne.n	8003868 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003798:	4b36      	ldr	r3, [pc, #216]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a35      	ldr	r2, [pc, #212]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a4:	f7fe f9ea 	bl	8001b7c <HAL_GetTick>
 80037a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037aa:	e009      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ac:	f7fe f9e6 	bl	8001b7c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d902      	bls.n	80037c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	73fb      	strb	r3, [r7, #15]
        break;
 80037be:	e005      	b.n	80037cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ef      	bne.n	80037ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d14a      	bne.n	8003868 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d111      	bne.n	80037fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037d8:	4b26      	ldr	r3, [pc, #152]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6892      	ldr	r2, [r2, #8]
 80037e8:	0211      	lsls	r1, r2, #8
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68d2      	ldr	r2, [r2, #12]
 80037ee:	0912      	lsrs	r2, r2, #4
 80037f0:	0452      	lsls	r2, r2, #17
 80037f2:	430a      	orrs	r2, r1
 80037f4:	491f      	ldr	r1, [pc, #124]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	614b      	str	r3, [r1, #20]
 80037fa:	e011      	b.n	8003820 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003804:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6892      	ldr	r2, [r2, #8]
 800380c:	0211      	lsls	r1, r2, #8
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6912      	ldr	r2, [r2, #16]
 8003812:	0852      	lsrs	r2, r2, #1
 8003814:	3a01      	subs	r2, #1
 8003816:	0652      	lsls	r2, r2, #25
 8003818:	430a      	orrs	r2, r1
 800381a:	4916      	ldr	r1, [pc, #88]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	4313      	orrs	r3, r2
 800381e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003820:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a13      	ldr	r2, [pc, #76]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800382a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fe f9a6 	bl	8001b7c <HAL_GetTick>
 8003830:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003832:	e009      	b.n	8003848 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003834:	f7fe f9a2 	bl	8001b7c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d902      	bls.n	8003848 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	73fb      	strb	r3, [r7, #15]
          break;
 8003846:	e005      	b.n	8003854 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003848:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ef      	beq.n	8003834 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	4904      	ldr	r1, [pc, #16]	@ (8003874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003864:	4313      	orrs	r3, r2
 8003866:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e049      	b.n	800391e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fe54 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 fbe4 	bl	8004084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d001      	beq.n	8003940 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e047      	b.n	80039d0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a23      	ldr	r2, [pc, #140]	@ (80039dc <HAL_TIM_Base_Start+0xb4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01d      	beq.n	800398e <HAL_TIM_Base_Start+0x66>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395a:	d018      	beq.n	800398e <HAL_TIM_Base_Start+0x66>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1f      	ldr	r2, [pc, #124]	@ (80039e0 <HAL_TIM_Base_Start+0xb8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <HAL_TIM_Base_Start+0x66>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1e      	ldr	r2, [pc, #120]	@ (80039e4 <HAL_TIM_Base_Start+0xbc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00e      	beq.n	800398e <HAL_TIM_Base_Start+0x66>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1c      	ldr	r2, [pc, #112]	@ (80039e8 <HAL_TIM_Base_Start+0xc0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d009      	beq.n	800398e <HAL_TIM_Base_Start+0x66>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ec <HAL_TIM_Base_Start+0xc4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d004      	beq.n	800398e <HAL_TIM_Base_Start+0x66>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a19      	ldr	r2, [pc, #100]	@ (80039f0 <HAL_TIM_Base_Start+0xc8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d115      	bne.n	80039ba <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	4b17      	ldr	r3, [pc, #92]	@ (80039f4 <HAL_TIM_Base_Start+0xcc>)
 8003996:	4013      	ands	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b06      	cmp	r3, #6
 800399e:	d015      	beq.n	80039cc <HAL_TIM_Base_Start+0xa4>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a6:	d011      	beq.n	80039cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b8:	e008      	b.n	80039cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e000      	b.n	80039ce <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	40013400 	.word	0x40013400
 80039f0:	40014000 	.word	0x40014000
 80039f4:	00010007 	.word	0x00010007

080039f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e049      	b.n	8003a9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f841 	bl	8003aa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 fb24 	bl	8004084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <HAL_TIM_PWM_Start+0x24>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e03c      	b.n	8003b5a <HAL_TIM_PWM_Start+0x9e>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d109      	bne.n	8003afa <HAL_TIM_PWM_Start+0x3e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	bf14      	ite	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	2300      	moveq	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	e02f      	b.n	8003b5a <HAL_TIM_PWM_Start+0x9e>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d109      	bne.n	8003b14 <HAL_TIM_PWM_Start+0x58>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e022      	b.n	8003b5a <HAL_TIM_PWM_Start+0x9e>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	d109      	bne.n	8003b2e <HAL_TIM_PWM_Start+0x72>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	bf14      	ite	ne
 8003b26:	2301      	movne	r3, #1
 8003b28:	2300      	moveq	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	e015      	b.n	8003b5a <HAL_TIM_PWM_Start+0x9e>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d109      	bne.n	8003b48 <HAL_TIM_PWM_Start+0x8c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	e008      	b.n	8003b5a <HAL_TIM_PWM_Start+0x9e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e09c      	b.n	8003c9c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0xb6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b70:	e023      	b.n	8003bba <HAL_TIM_PWM_Start+0xfe>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start+0xc6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b80:	e01b      	b.n	8003bba <HAL_TIM_PWM_Start+0xfe>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Start+0xd6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b90:	e013      	b.n	8003bba <HAL_TIM_PWM_Start+0xfe>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Start+0xe6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ba0:	e00b      	b.n	8003bba <HAL_TIM_PWM_Start+0xfe>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d104      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0xf6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bb0:	e003      	b.n	8003bba <HAL_TIM_PWM_Start+0xfe>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	6839      	ldr	r1, [r7, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fe74 	bl	80048b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a35      	ldr	r2, [pc, #212]	@ (8003ca4 <HAL_TIM_PWM_Start+0x1e8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_TIM_PWM_Start+0x13e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a34      	ldr	r2, [pc, #208]	@ (8003ca8 <HAL_TIM_PWM_Start+0x1ec>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00e      	beq.n	8003bfa <HAL_TIM_PWM_Start+0x13e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a32      	ldr	r2, [pc, #200]	@ (8003cac <HAL_TIM_PWM_Start+0x1f0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d009      	beq.n	8003bfa <HAL_TIM_PWM_Start+0x13e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a31      	ldr	r2, [pc, #196]	@ (8003cb0 <HAL_TIM_PWM_Start+0x1f4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d004      	beq.n	8003bfa <HAL_TIM_PWM_Start+0x13e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb4 <HAL_TIM_PWM_Start+0x1f8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_TIM_PWM_Start+0x142>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_TIM_PWM_Start+0x144>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a22      	ldr	r2, [pc, #136]	@ (8003ca4 <HAL_TIM_PWM_Start+0x1e8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01d      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x19e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c26:	d018      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x19e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a22      	ldr	r2, [pc, #136]	@ (8003cb8 <HAL_TIM_PWM_Start+0x1fc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x19e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a21      	ldr	r2, [pc, #132]	@ (8003cbc <HAL_TIM_PWM_Start+0x200>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00e      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x19e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <HAL_TIM_PWM_Start+0x204>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d009      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x19e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ca8 <HAL_TIM_PWM_Start+0x1ec>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d004      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x19e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a15      	ldr	r2, [pc, #84]	@ (8003cac <HAL_TIM_PWM_Start+0x1f0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d115      	bne.n	8003c86 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	4b18      	ldr	r3, [pc, #96]	@ (8003cc4 <HAL_TIM_PWM_Start+0x208>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b06      	cmp	r3, #6
 8003c6a:	d015      	beq.n	8003c98 <HAL_TIM_PWM_Start+0x1dc>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c72:	d011      	beq.n	8003c98 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c84:	e008      	b.n	8003c98 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e000      	b.n	8003c9a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40013400 	.word	0x40013400
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	00010007 	.word	0x00010007

08003cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0ff      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b14      	cmp	r3, #20
 8003cf2:	f200 80f0 	bhi.w	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003ed7 	.word	0x08003ed7
 8003d04:	08003ed7 	.word	0x08003ed7
 8003d08:	08003ed7 	.word	0x08003ed7
 8003d0c:	08003d91 	.word	0x08003d91
 8003d10:	08003ed7 	.word	0x08003ed7
 8003d14:	08003ed7 	.word	0x08003ed7
 8003d18:	08003ed7 	.word	0x08003ed7
 8003d1c:	08003dd3 	.word	0x08003dd3
 8003d20:	08003ed7 	.word	0x08003ed7
 8003d24:	08003ed7 	.word	0x08003ed7
 8003d28:	08003ed7 	.word	0x08003ed7
 8003d2c:	08003e13 	.word	0x08003e13
 8003d30:	08003ed7 	.word	0x08003ed7
 8003d34:	08003ed7 	.word	0x08003ed7
 8003d38:	08003ed7 	.word	0x08003ed7
 8003d3c:	08003e55 	.word	0x08003e55
 8003d40:	08003ed7 	.word	0x08003ed7
 8003d44:	08003ed7 	.word	0x08003ed7
 8003d48:	08003ed7 	.word	0x08003ed7
 8003d4c:	08003e95 	.word	0x08003e95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fa3a 	bl	80041d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0208 	orr.w	r2, r2, #8
 8003d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0204 	bic.w	r2, r2, #4
 8003d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6999      	ldr	r1, [r3, #24]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	619a      	str	r2, [r3, #24]
      break;
 8003d8e:	e0a5      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 faaa 	bl	80042f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	619a      	str	r2, [r3, #24]
      break;
 8003dd0:	e084      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fb13 	bl	8004404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0208 	orr.w	r2, r2, #8
 8003dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0204 	bic.w	r2, r2, #4
 8003dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69d9      	ldr	r1, [r3, #28]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	61da      	str	r2, [r3, #28]
      break;
 8003e10:	e064      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fb7b 	bl	8004514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69d9      	ldr	r1, [r3, #28]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	021a      	lsls	r2, r3, #8
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	61da      	str	r2, [r3, #28]
      break;
 8003e52:	e043      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fbc4 	bl	80045e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0208 	orr.w	r2, r2, #8
 8003e6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0204 	bic.w	r2, r2, #4
 8003e7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e92:	e023      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fc08 	bl	80046b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ed4:	e002      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop

08003ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_TIM_ConfigClockSource+0x1c>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e0b6      	b.n	800407a <HAL_TIM_ConfigClockSource+0x18a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f48:	d03e      	beq.n	8003fc8 <HAL_TIM_ConfigClockSource+0xd8>
 8003f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f4e:	f200 8087 	bhi.w	8004060 <HAL_TIM_ConfigClockSource+0x170>
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f56:	f000 8086 	beq.w	8004066 <HAL_TIM_ConfigClockSource+0x176>
 8003f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f5e:	d87f      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x170>
 8003f60:	2b70      	cmp	r3, #112	@ 0x70
 8003f62:	d01a      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0xaa>
 8003f64:	2b70      	cmp	r3, #112	@ 0x70
 8003f66:	d87b      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x170>
 8003f68:	2b60      	cmp	r3, #96	@ 0x60
 8003f6a:	d050      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x11e>
 8003f6c:	2b60      	cmp	r3, #96	@ 0x60
 8003f6e:	d877      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x170>
 8003f70:	2b50      	cmp	r3, #80	@ 0x50
 8003f72:	d03c      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0xfe>
 8003f74:	2b50      	cmp	r3, #80	@ 0x50
 8003f76:	d873      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x170>
 8003f78:	2b40      	cmp	r3, #64	@ 0x40
 8003f7a:	d058      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x13e>
 8003f7c:	2b40      	cmp	r3, #64	@ 0x40
 8003f7e:	d86f      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x170>
 8003f80:	2b30      	cmp	r3, #48	@ 0x30
 8003f82:	d064      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x15e>
 8003f84:	2b30      	cmp	r3, #48	@ 0x30
 8003f86:	d86b      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x170>
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d060      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x15e>
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d867      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x170>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d05c      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x15e>
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d05a      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x15e>
 8003f98:	e062      	b.n	8004060 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003faa:	f000 fc61 	bl	8004870 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	609a      	str	r2, [r3, #8]
      break;
 8003fc6:	e04f      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fd8:	f000 fc4a 	bl	8004870 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fea:	609a      	str	r2, [r3, #8]
      break;
 8003fec:	e03c      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 fbbe 	bl	800477c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2150      	movs	r1, #80	@ 0x50
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fc17 	bl	800483a <TIM_ITRx_SetConfig>
      break;
 800400c:	e02c      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800401a:	461a      	mov	r2, r3
 800401c:	f000 fbdd 	bl	80047da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2160      	movs	r1, #96	@ 0x60
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fc07 	bl	800483a <TIM_ITRx_SetConfig>
      break;
 800402c:	e01c      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	461a      	mov	r2, r3
 800403c:	f000 fb9e 	bl	800477c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2140      	movs	r1, #64	@ 0x40
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fbf7 	bl	800483a <TIM_ITRx_SetConfig>
      break;
 800404c:	e00c      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f000 fbee 	bl	800483a <TIM_ITRx_SetConfig>
      break;
 800405e:	e003      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      break;
 8004064:	e000      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004078:	7bfb      	ldrb	r3, [r7, #15]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a46      	ldr	r2, [pc, #280]	@ (80041b0 <TIM_Base_SetConfig+0x12c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d00f      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a43      	ldr	r2, [pc, #268]	@ (80041b4 <TIM_Base_SetConfig+0x130>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a42      	ldr	r2, [pc, #264]	@ (80041b8 <TIM_Base_SetConfig+0x134>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a41      	ldr	r2, [pc, #260]	@ (80041bc <TIM_Base_SetConfig+0x138>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a40      	ldr	r2, [pc, #256]	@ (80041c0 <TIM_Base_SetConfig+0x13c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d108      	bne.n	80040d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a35      	ldr	r2, [pc, #212]	@ (80041b0 <TIM_Base_SetConfig+0x12c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01f      	beq.n	800411e <TIM_Base_SetConfig+0x9a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e4:	d01b      	beq.n	800411e <TIM_Base_SetConfig+0x9a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a32      	ldr	r2, [pc, #200]	@ (80041b4 <TIM_Base_SetConfig+0x130>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d017      	beq.n	800411e <TIM_Base_SetConfig+0x9a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a31      	ldr	r2, [pc, #196]	@ (80041b8 <TIM_Base_SetConfig+0x134>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <TIM_Base_SetConfig+0x9a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a30      	ldr	r2, [pc, #192]	@ (80041bc <TIM_Base_SetConfig+0x138>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00f      	beq.n	800411e <TIM_Base_SetConfig+0x9a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2f      	ldr	r2, [pc, #188]	@ (80041c0 <TIM_Base_SetConfig+0x13c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00b      	beq.n	800411e <TIM_Base_SetConfig+0x9a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a2e      	ldr	r2, [pc, #184]	@ (80041c4 <TIM_Base_SetConfig+0x140>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <TIM_Base_SetConfig+0x9a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2d      	ldr	r2, [pc, #180]	@ (80041c8 <TIM_Base_SetConfig+0x144>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <TIM_Base_SetConfig+0x9a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2c      	ldr	r2, [pc, #176]	@ (80041cc <TIM_Base_SetConfig+0x148>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d108      	bne.n	8004130 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a16      	ldr	r2, [pc, #88]	@ (80041b0 <TIM_Base_SetConfig+0x12c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00f      	beq.n	800417c <TIM_Base_SetConfig+0xf8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a18      	ldr	r2, [pc, #96]	@ (80041c0 <TIM_Base_SetConfig+0x13c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00b      	beq.n	800417c <TIM_Base_SetConfig+0xf8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <TIM_Base_SetConfig+0x140>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <TIM_Base_SetConfig+0xf8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a16      	ldr	r2, [pc, #88]	@ (80041c8 <TIM_Base_SetConfig+0x144>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_Base_SetConfig+0xf8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a15      	ldr	r2, [pc, #84]	@ (80041cc <TIM_Base_SetConfig+0x148>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d103      	bne.n	8004184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d105      	bne.n	80041a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f023 0201 	bic.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	611a      	str	r2, [r3, #16]
  }
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40013400 	.word	0x40013400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40014400 	.word	0x40014400
 80041cc:	40014800 	.word	0x40014800

080041d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0201 	bic.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 0302 	bic.w	r3, r3, #2
 800421c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a2c      	ldr	r2, [pc, #176]	@ (80042dc <TIM_OC1_SetConfig+0x10c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00f      	beq.n	8004250 <TIM_OC1_SetConfig+0x80>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a2b      	ldr	r2, [pc, #172]	@ (80042e0 <TIM_OC1_SetConfig+0x110>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00b      	beq.n	8004250 <TIM_OC1_SetConfig+0x80>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a2a      	ldr	r2, [pc, #168]	@ (80042e4 <TIM_OC1_SetConfig+0x114>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <TIM_OC1_SetConfig+0x80>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a29      	ldr	r2, [pc, #164]	@ (80042e8 <TIM_OC1_SetConfig+0x118>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_OC1_SetConfig+0x80>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a28      	ldr	r2, [pc, #160]	@ (80042ec <TIM_OC1_SetConfig+0x11c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10c      	bne.n	800426a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0308 	bic.w	r3, r3, #8
 8004256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f023 0304 	bic.w	r3, r3, #4
 8004268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1b      	ldr	r2, [pc, #108]	@ (80042dc <TIM_OC1_SetConfig+0x10c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <TIM_OC1_SetConfig+0xc2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1a      	ldr	r2, [pc, #104]	@ (80042e0 <TIM_OC1_SetConfig+0x110>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_OC1_SetConfig+0xc2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a19      	ldr	r2, [pc, #100]	@ (80042e4 <TIM_OC1_SetConfig+0x114>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_OC1_SetConfig+0xc2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a18      	ldr	r2, [pc, #96]	@ (80042e8 <TIM_OC1_SetConfig+0x118>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_OC1_SetConfig+0xc2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a17      	ldr	r2, [pc, #92]	@ (80042ec <TIM_OC1_SetConfig+0x11c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d111      	bne.n	80042b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	621a      	str	r2, [r3, #32]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40013400 	.word	0x40013400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400
 80042ec:	40014800 	.word	0x40014800

080042f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f023 0210 	bic.w	r2, r3, #16
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800431e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0320 	bic.w	r3, r3, #32
 800433e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a28      	ldr	r2, [pc, #160]	@ (80043f0 <TIM_OC2_SetConfig+0x100>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_OC2_SetConfig+0x6c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a27      	ldr	r2, [pc, #156]	@ (80043f4 <TIM_OC2_SetConfig+0x104>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d10d      	bne.n	8004378 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004376:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1d      	ldr	r2, [pc, #116]	@ (80043f0 <TIM_OC2_SetConfig+0x100>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00f      	beq.n	80043a0 <TIM_OC2_SetConfig+0xb0>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a1c      	ldr	r2, [pc, #112]	@ (80043f4 <TIM_OC2_SetConfig+0x104>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00b      	beq.n	80043a0 <TIM_OC2_SetConfig+0xb0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <TIM_OC2_SetConfig+0x108>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d007      	beq.n	80043a0 <TIM_OC2_SetConfig+0xb0>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a1a      	ldr	r2, [pc, #104]	@ (80043fc <TIM_OC2_SetConfig+0x10c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_OC2_SetConfig+0xb0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a19      	ldr	r2, [pc, #100]	@ (8004400 <TIM_OC2_SetConfig+0x110>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d113      	bne.n	80043c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40013400 	.word	0x40013400
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800

08004404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <TIM_OC3_SetConfig+0xfc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_OC3_SetConfig+0x6a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a26      	ldr	r2, [pc, #152]	@ (8004504 <TIM_OC3_SetConfig+0x100>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10d      	bne.n	800448a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <TIM_OC3_SetConfig+0xfc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00f      	beq.n	80044b2 <TIM_OC3_SetConfig+0xae>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <TIM_OC3_SetConfig+0x100>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00b      	beq.n	80044b2 <TIM_OC3_SetConfig+0xae>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1a      	ldr	r2, [pc, #104]	@ (8004508 <TIM_OC3_SetConfig+0x104>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d007      	beq.n	80044b2 <TIM_OC3_SetConfig+0xae>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a19      	ldr	r2, [pc, #100]	@ (800450c <TIM_OC3_SetConfig+0x108>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_OC3_SetConfig+0xae>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a18      	ldr	r2, [pc, #96]	@ (8004510 <TIM_OC3_SetConfig+0x10c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d113      	bne.n	80044da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	621a      	str	r2, [r3, #32]
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40013400 	.word	0x40013400
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800

08004514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800454e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	031b      	lsls	r3, r3, #12
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a18      	ldr	r2, [pc, #96]	@ (80045d4 <TIM_OC4_SetConfig+0xc0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00f      	beq.n	8004598 <TIM_OC4_SetConfig+0x84>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a17      	ldr	r2, [pc, #92]	@ (80045d8 <TIM_OC4_SetConfig+0xc4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <TIM_OC4_SetConfig+0x84>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a16      	ldr	r2, [pc, #88]	@ (80045dc <TIM_OC4_SetConfig+0xc8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d007      	beq.n	8004598 <TIM_OC4_SetConfig+0x84>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a15      	ldr	r2, [pc, #84]	@ (80045e0 <TIM_OC4_SetConfig+0xcc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_OC4_SetConfig+0x84>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a14      	ldr	r2, [pc, #80]	@ (80045e4 <TIM_OC4_SetConfig+0xd0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d109      	bne.n	80045ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800459e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40013400 	.word	0x40013400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800

080045e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800462c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a17      	ldr	r2, [pc, #92]	@ (800469c <TIM_OC5_SetConfig+0xb4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00f      	beq.n	8004662 <TIM_OC5_SetConfig+0x7a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a16      	ldr	r2, [pc, #88]	@ (80046a0 <TIM_OC5_SetConfig+0xb8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00b      	beq.n	8004662 <TIM_OC5_SetConfig+0x7a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a15      	ldr	r2, [pc, #84]	@ (80046a4 <TIM_OC5_SetConfig+0xbc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d007      	beq.n	8004662 <TIM_OC5_SetConfig+0x7a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a14      	ldr	r2, [pc, #80]	@ (80046a8 <TIM_OC5_SetConfig+0xc0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d003      	beq.n	8004662 <TIM_OC5_SetConfig+0x7a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <TIM_OC5_SetConfig+0xc4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d109      	bne.n	8004676 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004668:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	621a      	str	r2, [r3, #32]
}
 8004690:	bf00      	nop
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40013400 	.word	0x40013400
 80046a4:	40014000 	.word	0x40014000
 80046a8:	40014400 	.word	0x40014400
 80046ac:	40014800 	.word	0x40014800

080046b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	051b      	lsls	r3, r3, #20
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a18      	ldr	r2, [pc, #96]	@ (8004768 <TIM_OC6_SetConfig+0xb8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00f      	beq.n	800472c <TIM_OC6_SetConfig+0x7c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a17      	ldr	r2, [pc, #92]	@ (800476c <TIM_OC6_SetConfig+0xbc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00b      	beq.n	800472c <TIM_OC6_SetConfig+0x7c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a16      	ldr	r2, [pc, #88]	@ (8004770 <TIM_OC6_SetConfig+0xc0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <TIM_OC6_SetConfig+0x7c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <TIM_OC6_SetConfig+0xc4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_OC6_SetConfig+0x7c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a14      	ldr	r2, [pc, #80]	@ (8004778 <TIM_OC6_SetConfig+0xc8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d109      	bne.n	8004740 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004732:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	029b      	lsls	r3, r3, #10
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40013400 	.word	0x40013400
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800

0800477c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	f023 0201 	bic.w	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f023 030a 	bic.w	r3, r3, #10
 80047b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047da:	b480      	push	{r7}
 80047dc:	b087      	sub	sp, #28
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f023 0210 	bic.w	r2, r3, #16
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	031b      	lsls	r3, r3, #12
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004816:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	f043 0307 	orr.w	r3, r3, #7
 800485c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	609a      	str	r2, [r3, #8]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800488a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	021a      	lsls	r2, r3, #8
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	431a      	orrs	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4313      	orrs	r3, r2
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2201      	movs	r2, #1
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	401a      	ands	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004910:	2302      	movs	r3, #2
 8004912:	e068      	b.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2e      	ldr	r2, [pc, #184]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2d      	ldr	r2, [pc, #180]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d108      	bne.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800494e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004960:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01d      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004986:	d018      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1b      	ldr	r2, [pc, #108]	@ (80049fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1a      	ldr	r2, [pc, #104]	@ (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a13      	ldr	r2, [pc, #76]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a14      	ldr	r2, [pc, #80]	@ (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d10c      	bne.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800
 8004a04:	40000c00 	.word	0x40000c00
 8004a08:	40014000 	.word	0x40014000

08004a0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e065      	b.n	8004af4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a16      	ldr	r2, [pc, #88]	@ (8004b00 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a14      	ldr	r2, [pc, #80]	@ (8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d115      	bne.n	8004ae2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	051b      	lsls	r3, r3, #20
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40013400 	.word	0x40013400

08004b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e040      	b.n	8004b9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc fd9e 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2224      	movs	r2, #36	@ 0x24
 8004b34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fe5c 	bl	800580c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fba1 	bl	800529c <UART_SetConfig>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e01b      	b.n	8004b9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fedb 	bl	8005950 <UART_CheckIdleState>
 8004b9a:	4603      	mov	r3, r0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d137      	bne.n	8004c2c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_UART_Receive_IT+0x24>
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e030      	b.n	8004c2e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a18      	ldr	r2, [pc, #96]	@ (8004c38 <HAL_UART_Receive_IT+0x94>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d01f      	beq.n	8004c1c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d018      	beq.n	8004c1c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	69f9      	ldr	r1, [r7, #28]
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e6      	bne.n	8004bea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 ffaa 	bl	8005b7c <UART_Start_Receive_IT>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	e000      	b.n	8004c2e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3728      	adds	r7, #40	@ 0x28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40008000 	.word	0x40008000

08004c3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b0ba      	sub	sp, #232	@ 0xe8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004c66:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d115      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00f      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 82ca 	beq.w	800522e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
      }
      return;
 8004ca2:	e2c4      	b.n	800522e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8117 	beq.w	8004edc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004cbe:	4b85      	ldr	r3, [pc, #532]	@ (8004ed4 <HAL_UART_IRQHandler+0x298>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 810a 	beq.w	8004edc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d011      	beq.n	8004cf8 <HAL_UART_IRQHandler+0xbc>
 8004cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cee:	f043 0201 	orr.w	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d011      	beq.n	8004d28 <HAL_UART_IRQHandler+0xec>
 8004d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00b      	beq.n	8004d28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2202      	movs	r2, #2
 8004d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d1e:	f043 0204 	orr.w	r2, r3, #4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d011      	beq.n	8004d58 <HAL_UART_IRQHandler+0x11c>
 8004d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2204      	movs	r2, #4
 8004d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d4e:	f043 0202 	orr.w	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d017      	beq.n	8004d94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2208      	movs	r2, #8
 8004d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d8a:	f043 0208 	orr.w	r2, r3, #8
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d012      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x18a>
 8004da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00c      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8230 	beq.w	8005232 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0e:	2b40      	cmp	r3, #64	@ 0x40
 8004e10:	d005      	beq.n	8004e1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d04f      	beq.n	8004ebe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 ff72 	bl	8005d08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2e:	2b40      	cmp	r3, #64	@ 0x40
 8004e30:	d141      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3308      	adds	r3, #8
 8004e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1d9      	bne.n	8004e32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d013      	beq.n	8004eae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e8a:	4a13      	ldr	r2, [pc, #76]	@ (8004ed8 <HAL_UART_IRQHandler+0x29c>)
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fc ffcd 	bl	8001e32 <HAL_DMA_Abort_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d017      	beq.n	8004ece <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e00f      	b.n	8004ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f9de 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e00b      	b.n	8004ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f9da 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	e007      	b.n	8004ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9d6 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004ecc:	e1b1      	b.n	8005232 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ece:	bf00      	nop
    return;
 8004ed0:	e1af      	b.n	8005232 <HAL_UART_IRQHandler+0x5f6>
 8004ed2:	bf00      	nop
 8004ed4:	04000120 	.word	0x04000120
 8004ed8:	08005dd1 	.word	0x08005dd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	f040 816a 	bne.w	80051ba <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8163 	beq.w	80051ba <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 815c 	beq.w	80051ba <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2210      	movs	r2, #16
 8004f08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	f040 80d4 	bne.w	80050c2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80ad 	beq.w	800508a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	f080 80a5 	bcs.w	800508a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f040 8086 	bne.w	8005068 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1da      	bne.n	8004f5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004fb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e1      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3308      	adds	r3, #8
 8005002:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005006:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005008:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800500c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e3      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005038:	f023 0310 	bic.w	r3, r3, #16
 800503c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800504a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800504c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005050:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e4      	bne.n	8005028 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005062:	4618      	mov	r0, r3
 8005064:	f7fc fea7 	bl	8001db6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800507a:	b29b      	uxth	r3, r3
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	b29b      	uxth	r3, r3
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8fe 	bl	8005284 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005088:	e0d5      	b.n	8005236 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005090:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005094:	429a      	cmp	r2, r3
 8005096:	f040 80ce 	bne.w	8005236 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	f040 80c5 	bne.w	8005236 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8e2 	bl	8005284 <HAL_UARTEx_RxEventCallback>
      return;
 80050c0:	e0b9      	b.n	8005236 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80ab 	beq.w	800523a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80050e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80a6 	beq.w	800523a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005110:	647b      	str	r3, [r7, #68]	@ 0x44
 8005112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e4      	bne.n	80050ee <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	623b      	str	r3, [r7, #32]
   return(result);
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005148:	633a      	str	r2, [r7, #48]	@ 0x30
 800514a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800514e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e3      	bne.n	8005124 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	60fb      	str	r3, [r7, #12]
   return(result);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f023 0310 	bic.w	r3, r3, #16
 8005184:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	69b9      	ldr	r1, [r7, #24]
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	617b      	str	r3, [r7, #20]
   return(result);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e4      	bne.n	8005170 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f866 	bl	8005284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051b8:	e03f      	b.n	800523a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00e      	beq.n	80051e4 <HAL_UART_IRQHandler+0x5a8>
 80051c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80051da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fff3 	bl	80061c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051e2:	e02d      	b.n	8005240 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01c      	beq.n	800523e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3
    }
    return;
 800520c:	e017      	b.n	800523e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d012      	beq.n	8005240 <HAL_UART_IRQHandler+0x604>
 800521a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800521e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fde8 	bl	8005dfc <UART_EndTransmit_IT>
    return;
 800522c:	e008      	b.n	8005240 <HAL_UART_IRQHandler+0x604>
      return;
 800522e:	bf00      	nop
 8005230:	e006      	b.n	8005240 <HAL_UART_IRQHandler+0x604>
    return;
 8005232:	bf00      	nop
 8005234:	e004      	b.n	8005240 <HAL_UART_IRQHandler+0x604>
      return;
 8005236:	bf00      	nop
 8005238:	e002      	b.n	8005240 <HAL_UART_IRQHandler+0x604>
      return;
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <HAL_UART_IRQHandler+0x604>
    return;
 800523e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005240:	37e8      	adds	r7, #232	@ 0xe8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop

08005248 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a0:	b08a      	sub	sp, #40	@ 0x28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4ba4      	ldr	r3, [pc, #656]	@ (800555c <UART_SetConfig+0x2c0>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a99      	ldr	r2, [pc, #612]	@ (8005560 <UART_SetConfig+0x2c4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005304:	4313      	orrs	r3, r2
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005318:	430a      	orrs	r2, r1
 800531a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a90      	ldr	r2, [pc, #576]	@ (8005564 <UART_SetConfig+0x2c8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d126      	bne.n	8005374 <UART_SetConfig+0xd8>
 8005326:	4b90      	ldr	r3, [pc, #576]	@ (8005568 <UART_SetConfig+0x2cc>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	2b03      	cmp	r3, #3
 8005332:	d81b      	bhi.n	800536c <UART_SetConfig+0xd0>
 8005334:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <UART_SetConfig+0xa0>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	0800534d 	.word	0x0800534d
 8005340:	0800535d 	.word	0x0800535d
 8005344:	08005355 	.word	0x08005355
 8005348:	08005365 	.word	0x08005365
 800534c:	2301      	movs	r3, #1
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005352:	e116      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005354:	2302      	movs	r3, #2
 8005356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535a:	e112      	b.n	8005582 <UART_SetConfig+0x2e6>
 800535c:	2304      	movs	r3, #4
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005362:	e10e      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005364:	2308      	movs	r3, #8
 8005366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800536a:	e10a      	b.n	8005582 <UART_SetConfig+0x2e6>
 800536c:	2310      	movs	r3, #16
 800536e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005372:	e106      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a7c      	ldr	r2, [pc, #496]	@ (800556c <UART_SetConfig+0x2d0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d138      	bne.n	80053f0 <UART_SetConfig+0x154>
 800537e:	4b7a      	ldr	r3, [pc, #488]	@ (8005568 <UART_SetConfig+0x2cc>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b0c      	cmp	r3, #12
 800538a:	d82d      	bhi.n	80053e8 <UART_SetConfig+0x14c>
 800538c:	a201      	add	r2, pc, #4	@ (adr r2, 8005394 <UART_SetConfig+0xf8>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053c9 	.word	0x080053c9
 8005398:	080053e9 	.word	0x080053e9
 800539c:	080053e9 	.word	0x080053e9
 80053a0:	080053e9 	.word	0x080053e9
 80053a4:	080053d9 	.word	0x080053d9
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053e9 	.word	0x080053e9
 80053b0:	080053e9 	.word	0x080053e9
 80053b4:	080053d1 	.word	0x080053d1
 80053b8:	080053e9 	.word	0x080053e9
 80053bc:	080053e9 	.word	0x080053e9
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	080053e1 	.word	0x080053e1
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ce:	e0d8      	b.n	8005582 <UART_SetConfig+0x2e6>
 80053d0:	2302      	movs	r3, #2
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053d6:	e0d4      	b.n	8005582 <UART_SetConfig+0x2e6>
 80053d8:	2304      	movs	r3, #4
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053de:	e0d0      	b.n	8005582 <UART_SetConfig+0x2e6>
 80053e0:	2308      	movs	r3, #8
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e6:	e0cc      	b.n	8005582 <UART_SetConfig+0x2e6>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ee:	e0c8      	b.n	8005582 <UART_SetConfig+0x2e6>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005570 <UART_SetConfig+0x2d4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d125      	bne.n	8005446 <UART_SetConfig+0x1aa>
 80053fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005568 <UART_SetConfig+0x2cc>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005404:	2b30      	cmp	r3, #48	@ 0x30
 8005406:	d016      	beq.n	8005436 <UART_SetConfig+0x19a>
 8005408:	2b30      	cmp	r3, #48	@ 0x30
 800540a:	d818      	bhi.n	800543e <UART_SetConfig+0x1a2>
 800540c:	2b20      	cmp	r3, #32
 800540e:	d00a      	beq.n	8005426 <UART_SetConfig+0x18a>
 8005410:	2b20      	cmp	r3, #32
 8005412:	d814      	bhi.n	800543e <UART_SetConfig+0x1a2>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <UART_SetConfig+0x182>
 8005418:	2b10      	cmp	r3, #16
 800541a:	d008      	beq.n	800542e <UART_SetConfig+0x192>
 800541c:	e00f      	b.n	800543e <UART_SetConfig+0x1a2>
 800541e:	2300      	movs	r3, #0
 8005420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005424:	e0ad      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005426:	2302      	movs	r3, #2
 8005428:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800542c:	e0a9      	b.n	8005582 <UART_SetConfig+0x2e6>
 800542e:	2304      	movs	r3, #4
 8005430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005434:	e0a5      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005436:	2308      	movs	r3, #8
 8005438:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800543c:	e0a1      	b.n	8005582 <UART_SetConfig+0x2e6>
 800543e:	2310      	movs	r3, #16
 8005440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005444:	e09d      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a4a      	ldr	r2, [pc, #296]	@ (8005574 <UART_SetConfig+0x2d8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d125      	bne.n	800549c <UART_SetConfig+0x200>
 8005450:	4b45      	ldr	r3, [pc, #276]	@ (8005568 <UART_SetConfig+0x2cc>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005456:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800545a:	2bc0      	cmp	r3, #192	@ 0xc0
 800545c:	d016      	beq.n	800548c <UART_SetConfig+0x1f0>
 800545e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005460:	d818      	bhi.n	8005494 <UART_SetConfig+0x1f8>
 8005462:	2b80      	cmp	r3, #128	@ 0x80
 8005464:	d00a      	beq.n	800547c <UART_SetConfig+0x1e0>
 8005466:	2b80      	cmp	r3, #128	@ 0x80
 8005468:	d814      	bhi.n	8005494 <UART_SetConfig+0x1f8>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <UART_SetConfig+0x1d8>
 800546e:	2b40      	cmp	r3, #64	@ 0x40
 8005470:	d008      	beq.n	8005484 <UART_SetConfig+0x1e8>
 8005472:	e00f      	b.n	8005494 <UART_SetConfig+0x1f8>
 8005474:	2300      	movs	r3, #0
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547a:	e082      	b.n	8005582 <UART_SetConfig+0x2e6>
 800547c:	2302      	movs	r3, #2
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005482:	e07e      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005484:	2304      	movs	r3, #4
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548a:	e07a      	b.n	8005582 <UART_SetConfig+0x2e6>
 800548c:	2308      	movs	r3, #8
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005492:	e076      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005494:	2310      	movs	r3, #16
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549a:	e072      	b.n	8005582 <UART_SetConfig+0x2e6>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a35      	ldr	r2, [pc, #212]	@ (8005578 <UART_SetConfig+0x2dc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d12a      	bne.n	80054fc <UART_SetConfig+0x260>
 80054a6:	4b30      	ldr	r3, [pc, #192]	@ (8005568 <UART_SetConfig+0x2cc>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054b4:	d01a      	beq.n	80054ec <UART_SetConfig+0x250>
 80054b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054ba:	d81b      	bhi.n	80054f4 <UART_SetConfig+0x258>
 80054bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c0:	d00c      	beq.n	80054dc <UART_SetConfig+0x240>
 80054c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c6:	d815      	bhi.n	80054f4 <UART_SetConfig+0x258>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <UART_SetConfig+0x238>
 80054cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054d0:	d008      	beq.n	80054e4 <UART_SetConfig+0x248>
 80054d2:	e00f      	b.n	80054f4 <UART_SetConfig+0x258>
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054da:	e052      	b.n	8005582 <UART_SetConfig+0x2e6>
 80054dc:	2302      	movs	r3, #2
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054e2:	e04e      	b.n	8005582 <UART_SetConfig+0x2e6>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ea:	e04a      	b.n	8005582 <UART_SetConfig+0x2e6>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f2:	e046      	b.n	8005582 <UART_SetConfig+0x2e6>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fa:	e042      	b.n	8005582 <UART_SetConfig+0x2e6>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a17      	ldr	r2, [pc, #92]	@ (8005560 <UART_SetConfig+0x2c4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d13a      	bne.n	800557c <UART_SetConfig+0x2e0>
 8005506:	4b18      	ldr	r3, [pc, #96]	@ (8005568 <UART_SetConfig+0x2cc>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005510:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005514:	d01a      	beq.n	800554c <UART_SetConfig+0x2b0>
 8005516:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800551a:	d81b      	bhi.n	8005554 <UART_SetConfig+0x2b8>
 800551c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005520:	d00c      	beq.n	800553c <UART_SetConfig+0x2a0>
 8005522:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005526:	d815      	bhi.n	8005554 <UART_SetConfig+0x2b8>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <UART_SetConfig+0x298>
 800552c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005530:	d008      	beq.n	8005544 <UART_SetConfig+0x2a8>
 8005532:	e00f      	b.n	8005554 <UART_SetConfig+0x2b8>
 8005534:	2300      	movs	r3, #0
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800553a:	e022      	b.n	8005582 <UART_SetConfig+0x2e6>
 800553c:	2302      	movs	r3, #2
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005542:	e01e      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005544:	2304      	movs	r3, #4
 8005546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800554a:	e01a      	b.n	8005582 <UART_SetConfig+0x2e6>
 800554c:	2308      	movs	r3, #8
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005552:	e016      	b.n	8005582 <UART_SetConfig+0x2e6>
 8005554:	2310      	movs	r3, #16
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800555a:	e012      	b.n	8005582 <UART_SetConfig+0x2e6>
 800555c:	efff69f3 	.word	0xefff69f3
 8005560:	40008000 	.word	0x40008000
 8005564:	40013800 	.word	0x40013800
 8005568:	40021000 	.word	0x40021000
 800556c:	40004400 	.word	0x40004400
 8005570:	40004800 	.word	0x40004800
 8005574:	40004c00 	.word	0x40004c00
 8005578:	40005000 	.word	0x40005000
 800557c:	2310      	movs	r3, #16
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a9f      	ldr	r2, [pc, #636]	@ (8005804 <UART_SetConfig+0x568>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d17a      	bne.n	8005682 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800558c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005590:	2b08      	cmp	r3, #8
 8005592:	d824      	bhi.n	80055de <UART_SetConfig+0x342>
 8005594:	a201      	add	r2, pc, #4	@ (adr r2, 800559c <UART_SetConfig+0x300>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055c1 	.word	0x080055c1
 80055a0:	080055df 	.word	0x080055df
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055df 	.word	0x080055df
 80055ac:	080055cf 	.word	0x080055cf
 80055b0:	080055df 	.word	0x080055df
 80055b4:	080055df 	.word	0x080055df
 80055b8:	080055df 	.word	0x080055df
 80055bc:	080055d7 	.word	0x080055d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c0:	f7fd fc12 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 80055c4:	61f8      	str	r0, [r7, #28]
        break;
 80055c6:	e010      	b.n	80055ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005808 <UART_SetConfig+0x56c>)
 80055ca:	61fb      	str	r3, [r7, #28]
        break;
 80055cc:	e00d      	b.n	80055ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ce:	f7fd fb73 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 80055d2:	61f8      	str	r0, [r7, #28]
        break;
 80055d4:	e009      	b.n	80055ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055da:	61fb      	str	r3, [r7, #28]
        break;
 80055dc:	e005      	b.n	80055ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80fb 	beq.w	80057e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d305      	bcc.n	800560e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	429a      	cmp	r2, r3
 800560c:	d903      	bls.n	8005616 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005614:	e0e8      	b.n	80057e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2200      	movs	r2, #0
 800561a:	461c      	mov	r4, r3
 800561c:	4615      	mov	r5, r2
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	022b      	lsls	r3, r5, #8
 8005628:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800562c:	0222      	lsls	r2, r4, #8
 800562e:	68f9      	ldr	r1, [r7, #12]
 8005630:	6849      	ldr	r1, [r1, #4]
 8005632:	0849      	lsrs	r1, r1, #1
 8005634:	2000      	movs	r0, #0
 8005636:	4688      	mov	r8, r1
 8005638:	4681      	mov	r9, r0
 800563a:	eb12 0a08 	adds.w	sl, r2, r8
 800563e:	eb43 0b09 	adc.w	fp, r3, r9
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005650:	4650      	mov	r0, sl
 8005652:	4659      	mov	r1, fp
 8005654:	f7fb faa8 	bl	8000ba8 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4613      	mov	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005666:	d308      	bcc.n	800567a <UART_SetConfig+0x3de>
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800566e:	d204      	bcs.n	800567a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	e0b6      	b.n	80057e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005680:	e0b2      	b.n	80057e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568a:	d15e      	bne.n	800574a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800568c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005690:	2b08      	cmp	r3, #8
 8005692:	d828      	bhi.n	80056e6 <UART_SetConfig+0x44a>
 8005694:	a201      	add	r2, pc, #4	@ (adr r2, 800569c <UART_SetConfig+0x400>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056c9 	.word	0x080056c9
 80056a4:	080056d1 	.word	0x080056d1
 80056a8:	080056e7 	.word	0x080056e7
 80056ac:	080056d7 	.word	0x080056d7
 80056b0:	080056e7 	.word	0x080056e7
 80056b4:	080056e7 	.word	0x080056e7
 80056b8:	080056e7 	.word	0x080056e7
 80056bc:	080056df 	.word	0x080056df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c0:	f7fd fb92 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 80056c4:	61f8      	str	r0, [r7, #28]
        break;
 80056c6:	e014      	b.n	80056f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c8:	f7fd fba4 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 80056cc:	61f8      	str	r0, [r7, #28]
        break;
 80056ce:	e010      	b.n	80056f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005808 <UART_SetConfig+0x56c>)
 80056d2:	61fb      	str	r3, [r7, #28]
        break;
 80056d4:	e00d      	b.n	80056f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056d6:	f7fd faef 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 80056da:	61f8      	str	r0, [r7, #28]
        break;
 80056dc:	e009      	b.n	80056f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056e2:	61fb      	str	r3, [r7, #28]
        break;
 80056e4:	e005      	b.n	80056f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d077      	beq.n	80057e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	005a      	lsls	r2, r3, #1
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	441a      	add	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b0f      	cmp	r3, #15
 8005712:	d916      	bls.n	8005742 <UART_SetConfig+0x4a6>
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800571a:	d212      	bcs.n	8005742 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f023 030f 	bic.w	r3, r3, #15
 8005724:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	b29b      	uxth	r3, r3
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	b29a      	uxth	r2, r3
 8005732:	8afb      	ldrh	r3, [r7, #22]
 8005734:	4313      	orrs	r3, r2
 8005736:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	8afa      	ldrh	r2, [r7, #22]
 800573e:	60da      	str	r2, [r3, #12]
 8005740:	e052      	b.n	80057e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005748:	e04e      	b.n	80057e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800574a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800574e:	2b08      	cmp	r3, #8
 8005750:	d827      	bhi.n	80057a2 <UART_SetConfig+0x506>
 8005752:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <UART_SetConfig+0x4bc>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	0800577d 	.word	0x0800577d
 800575c:	08005785 	.word	0x08005785
 8005760:	0800578d 	.word	0x0800578d
 8005764:	080057a3 	.word	0x080057a3
 8005768:	08005793 	.word	0x08005793
 800576c:	080057a3 	.word	0x080057a3
 8005770:	080057a3 	.word	0x080057a3
 8005774:	080057a3 	.word	0x080057a3
 8005778:	0800579b 	.word	0x0800579b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577c:	f7fd fb34 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8005780:	61f8      	str	r0, [r7, #28]
        break;
 8005782:	e014      	b.n	80057ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005784:	f7fd fb46 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 8005788:	61f8      	str	r0, [r7, #28]
        break;
 800578a:	e010      	b.n	80057ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800578c:	4b1e      	ldr	r3, [pc, #120]	@ (8005808 <UART_SetConfig+0x56c>)
 800578e:	61fb      	str	r3, [r7, #28]
        break;
 8005790:	e00d      	b.n	80057ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005792:	f7fd fa91 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8005796:	61f8      	str	r0, [r7, #28]
        break;
 8005798:	e009      	b.n	80057ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800579e:	61fb      	str	r3, [r7, #28]
        break;
 80057a0:	e005      	b.n	80057ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80057ac:	bf00      	nop
    }

    if (pclk != 0U)
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d019      	beq.n	80057e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	085a      	lsrs	r2, r3, #1
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	441a      	add	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	d909      	bls.n	80057e2 <UART_SetConfig+0x546>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d4:	d205      	bcs.n	80057e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	e002      	b.n	80057e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3728      	adds	r7, #40	@ 0x28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005802:	bf00      	nop
 8005804:	40008000 	.word	0x40008000
 8005808:	00f42400 	.word	0x00f42400

0800580c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01a      	beq.n	8005922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800590a:	d10a      	bne.n	8005922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	605a      	str	r2, [r3, #4]
  }
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b098      	sub	sp, #96	@ 0x60
 8005954:	af02      	add	r7, sp, #8
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005960:	f7fc f90c 	bl	8001b7c <HAL_GetTick>
 8005964:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b08      	cmp	r3, #8
 8005972:	d12e      	bne.n	80059d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005974:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597c:	2200      	movs	r2, #0
 800597e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f88c 	bl	8005aa0 <UART_WaitOnFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d021      	beq.n	80059d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800599c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e6      	bne.n	800598e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e062      	b.n	8005a98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d149      	bne.n	8005a74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e8:	2200      	movs	r2, #0
 80059ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f856 	bl	8005aa0 <UART_WaitOnFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d03c      	beq.n	8005a74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	623b      	str	r3, [r7, #32]
   return(result);
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e6      	bne.n	80059fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3308      	adds	r3, #8
 8005a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0301 	bic.w	r3, r3, #1
 8005a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3308      	adds	r3, #8
 8005a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a4c:	61fa      	str	r2, [r7, #28]
 8005a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	69b9      	ldr	r1, [r7, #24]
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	617b      	str	r3, [r7, #20]
   return(result);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e5      	bne.n	8005a2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e011      	b.n	8005a98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3758      	adds	r7, #88	@ 0x58
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	4613      	mov	r3, r2
 8005aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab0:	e04f      	b.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d04b      	beq.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aba:	f7fc f85f 	bl	8001b7c <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d302      	bcc.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e04e      	b.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d037      	beq.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b80      	cmp	r3, #128	@ 0x80
 8005ae6:	d034      	beq.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b40      	cmp	r3, #64	@ 0x40
 8005aec:	d031      	beq.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d110      	bne.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2208      	movs	r2, #8
 8005b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f8ff 	bl	8005d08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e029      	b.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b2c:	d111      	bne.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f8e5 	bl	8005d08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e00f      	b.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d0a0      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b097      	sub	sp, #92	@ 0x5c
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	4613      	mov	r3, r2
 8005b88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bae:	d10e      	bne.n	8005bce <UART_Start_Receive_IT+0x52>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <UART_Start_Receive_IT+0x48>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bc2:	e02d      	b.n	8005c20 <UART_Start_Receive_IT+0xa4>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	22ff      	movs	r2, #255	@ 0xff
 8005bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bcc:	e028      	b.n	8005c20 <UART_Start_Receive_IT+0xa4>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10d      	bne.n	8005bf2 <UART_Start_Receive_IT+0x76>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <UART_Start_Receive_IT+0x6c>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	22ff      	movs	r2, #255	@ 0xff
 8005be2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005be6:	e01b      	b.n	8005c20 <UART_Start_Receive_IT+0xa4>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	227f      	movs	r2, #127	@ 0x7f
 8005bec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bf0:	e016      	b.n	8005c20 <UART_Start_Receive_IT+0xa4>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bfa:	d10d      	bne.n	8005c18 <UART_Start_Receive_IT+0x9c>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <UART_Start_Receive_IT+0x92>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	227f      	movs	r2, #127	@ 0x7f
 8005c08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c0c:	e008      	b.n	8005c20 <UART_Start_Receive_IT+0xa4>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	223f      	movs	r2, #63	@ 0x3f
 8005c12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c16:	e003      	b.n	8005c20 <UART_Start_Receive_IT+0xa4>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2222      	movs	r2, #34	@ 0x22
 8005c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3308      	adds	r3, #8
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c50:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005c52:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e5      	bne.n	8005c30 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6c:	d107      	bne.n	8005c7e <UART_Start_Receive_IT+0x102>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a21      	ldr	r2, [pc, #132]	@ (8005d00 <UART_Start_Receive_IT+0x184>)
 8005c7a:	669a      	str	r2, [r3, #104]	@ 0x68
 8005c7c:	e002      	b.n	8005c84 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a20      	ldr	r2, [pc, #128]	@ (8005d04 <UART_Start_Receive_IT+0x188>)
 8005c82:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d019      	beq.n	8005cc0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cac:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005cb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e6      	bne.n	8005c8c <UART_Start_Receive_IT+0x110>
 8005cbe:	e018      	b.n	8005cf2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f043 0320 	orr.w	r3, r3, #32
 8005cd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	69f9      	ldr	r1, [r7, #28]
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e6      	bne.n	8005cc0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	375c      	adds	r7, #92	@ 0x5c
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	0800600d 	.word	0x0800600d
 8005d04:	08005e51 	.word	0x08005e51

08005d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b095      	sub	sp, #84	@ 0x54
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e6      	bne.n	8005d10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3308      	adds	r3, #8
 8005d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e5      	bne.n	8005d42 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d118      	bne.n	8005db0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9c:	61bb      	str	r3, [r7, #24]
 8005d9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6979      	ldr	r1, [r7, #20]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	613b      	str	r3, [r7, #16]
   return(result);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e6      	bne.n	8005d7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dc4:	bf00      	nop
 8005dc6:	3754      	adds	r7, #84	@ 0x54
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff fa3e 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	6979      	ldr	r1, [r7, #20]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	e841 2300 	strex	r3, r2, [r1]
 8005e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1e6      	bne.n	8005e04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff fa00 	bl	8005248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e48:	bf00      	nop
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b09c      	sub	sp, #112	@ 0x70
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e68:	2b22      	cmp	r3, #34	@ 0x22
 8005e6a:	f040 80be 	bne.w	8005fea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e7c:	b2d9      	uxtb	r1, r3
 8005e7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e88:	400a      	ands	r2, r1
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f040 80a3 	bne.w	8005ffe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ed8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005edc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e6      	bne.n	8005eb8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efc:	f023 0301 	bic.w	r3, r3, #1
 8005f00:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3308      	adds	r3, #8
 8005f08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e5      	bne.n	8005eea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a34      	ldr	r2, [pc, #208]	@ (8006008 <UART_RxISR_8BIT+0x1b8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d01f      	beq.n	8005f7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d018      	beq.n	8005f7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	623b      	str	r3, [r7, #32]
   return(result);
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d12e      	bne.n	8005fe2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0310 	bic.w	r3, r3, #16
 8005f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	69b9      	ldr	r1, [r7, #24]
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e6      	bne.n	8005f8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b10      	cmp	r3, #16
 8005fc8:	d103      	bne.n	8005fd2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2210      	movs	r2, #16
 8005fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff f952 	bl	8005284 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fe0:	e00d      	b.n	8005ffe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff f93a 	bl	800525c <HAL_UART_RxCpltCallback>
}
 8005fe8:	e009      	b.n	8005ffe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	8b1b      	ldrh	r3, [r3, #24]
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	831a      	strh	r2, [r3, #24]
}
 8005ffe:	bf00      	nop
 8006000:	3770      	adds	r7, #112	@ 0x70
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40008000 	.word	0x40008000

0800600c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b09c      	sub	sp, #112	@ 0x70
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800601a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006024:	2b22      	cmp	r3, #34	@ 0x22
 8006026:	f040 80be 	bne.w	80061a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006030:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006038:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800603a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800603e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006042:	4013      	ands	r3, r2
 8006044:	b29a      	uxth	r2, r3
 8006046:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006048:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604e:	1c9a      	adds	r2, r3, #2
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 80a3 	bne.w	80061ba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006088:	667b      	str	r3, [r7, #100]	@ 0x64
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006092:	657b      	str	r3, [r7, #84]	@ 0x54
 8006094:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80060a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e6      	bne.n	8006074 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3308      	adds	r3, #8
 80060ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80060c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e5      	bne.n	80060a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a34      	ldr	r2, [pc, #208]	@ (80061c4 <UART_RxISR_16BIT+0x1b8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d01f      	beq.n	8006138 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d018      	beq.n	8006138 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	61fb      	str	r3, [r7, #28]
   return(result);
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800611a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006126:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800612a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e6      	bne.n	8006106 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800613c:	2b01      	cmp	r3, #1
 800613e:	d12e      	bne.n	800619e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	60bb      	str	r3, [r7, #8]
   return(result);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f023 0310 	bic.w	r3, r3, #16
 800615a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6979      	ldr	r1, [r7, #20]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	613b      	str	r3, [r7, #16]
   return(result);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e6      	bne.n	8006146 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	2b10      	cmp	r3, #16
 8006184:	d103      	bne.n	800618e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2210      	movs	r2, #16
 800618c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff f874 	bl	8005284 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800619c:	e00d      	b.n	80061ba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff f85c 	bl	800525c <HAL_UART_RxCpltCallback>
}
 80061a4:	e009      	b.n	80061ba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	8b1b      	ldrh	r3, [r3, #24]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0208 	orr.w	r2, r2, #8
 80061b6:	b292      	uxth	r2, r2
 80061b8:	831a      	strh	r2, [r3, #24]
}
 80061ba:	bf00      	nop
 80061bc:	3770      	adds	r7, #112	@ 0x70
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40008000 	.word	0x40008000

080061c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <atoi>:
 80061dc:	220a      	movs	r2, #10
 80061de:	2100      	movs	r1, #0
 80061e0:	f000 b930 	b.w	8006444 <strtol>

080061e4 <malloc>:
 80061e4:	4b02      	ldr	r3, [pc, #8]	@ (80061f0 <malloc+0xc>)
 80061e6:	4601      	mov	r1, r0
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	f000 b825 	b.w	8006238 <_malloc_r>
 80061ee:	bf00      	nop
 80061f0:	20000024 	.word	0x20000024

080061f4 <sbrk_aligned>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	4e0f      	ldr	r6, [pc, #60]	@ (8006234 <sbrk_aligned+0x40>)
 80061f8:	460c      	mov	r4, r1
 80061fa:	6831      	ldr	r1, [r6, #0]
 80061fc:	4605      	mov	r5, r0
 80061fe:	b911      	cbnz	r1, 8006206 <sbrk_aligned+0x12>
 8006200:	f000 ff24 	bl	800704c <_sbrk_r>
 8006204:	6030      	str	r0, [r6, #0]
 8006206:	4621      	mov	r1, r4
 8006208:	4628      	mov	r0, r5
 800620a:	f000 ff1f 	bl	800704c <_sbrk_r>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d103      	bne.n	800621a <sbrk_aligned+0x26>
 8006212:	f04f 34ff 	mov.w	r4, #4294967295
 8006216:	4620      	mov	r0, r4
 8006218:	bd70      	pop	{r4, r5, r6, pc}
 800621a:	1cc4      	adds	r4, r0, #3
 800621c:	f024 0403 	bic.w	r4, r4, #3
 8006220:	42a0      	cmp	r0, r4
 8006222:	d0f8      	beq.n	8006216 <sbrk_aligned+0x22>
 8006224:	1a21      	subs	r1, r4, r0
 8006226:	4628      	mov	r0, r5
 8006228:	f000 ff10 	bl	800704c <_sbrk_r>
 800622c:	3001      	adds	r0, #1
 800622e:	d1f2      	bne.n	8006216 <sbrk_aligned+0x22>
 8006230:	e7ef      	b.n	8006212 <sbrk_aligned+0x1e>
 8006232:	bf00      	nop
 8006234:	200003e0 	.word	0x200003e0

08006238 <_malloc_r>:
 8006238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800623c:	1ccd      	adds	r5, r1, #3
 800623e:	f025 0503 	bic.w	r5, r5, #3
 8006242:	3508      	adds	r5, #8
 8006244:	2d0c      	cmp	r5, #12
 8006246:	bf38      	it	cc
 8006248:	250c      	movcc	r5, #12
 800624a:	2d00      	cmp	r5, #0
 800624c:	4606      	mov	r6, r0
 800624e:	db01      	blt.n	8006254 <_malloc_r+0x1c>
 8006250:	42a9      	cmp	r1, r5
 8006252:	d904      	bls.n	800625e <_malloc_r+0x26>
 8006254:	230c      	movs	r3, #12
 8006256:	6033      	str	r3, [r6, #0]
 8006258:	2000      	movs	r0, #0
 800625a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800625e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006334 <_malloc_r+0xfc>
 8006262:	f000 f869 	bl	8006338 <__malloc_lock>
 8006266:	f8d8 3000 	ldr.w	r3, [r8]
 800626a:	461c      	mov	r4, r3
 800626c:	bb44      	cbnz	r4, 80062c0 <_malloc_r+0x88>
 800626e:	4629      	mov	r1, r5
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff ffbf 	bl	80061f4 <sbrk_aligned>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	4604      	mov	r4, r0
 800627a:	d158      	bne.n	800632e <_malloc_r+0xf6>
 800627c:	f8d8 4000 	ldr.w	r4, [r8]
 8006280:	4627      	mov	r7, r4
 8006282:	2f00      	cmp	r7, #0
 8006284:	d143      	bne.n	800630e <_malloc_r+0xd6>
 8006286:	2c00      	cmp	r4, #0
 8006288:	d04b      	beq.n	8006322 <_malloc_r+0xea>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	4639      	mov	r1, r7
 800628e:	4630      	mov	r0, r6
 8006290:	eb04 0903 	add.w	r9, r4, r3
 8006294:	f000 feda 	bl	800704c <_sbrk_r>
 8006298:	4581      	cmp	r9, r0
 800629a:	d142      	bne.n	8006322 <_malloc_r+0xea>
 800629c:	6821      	ldr	r1, [r4, #0]
 800629e:	1a6d      	subs	r5, r5, r1
 80062a0:	4629      	mov	r1, r5
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff ffa6 	bl	80061f4 <sbrk_aligned>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d03a      	beq.n	8006322 <_malloc_r+0xea>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	442b      	add	r3, r5
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	f8d8 3000 	ldr.w	r3, [r8]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	bb62      	cbnz	r2, 8006314 <_malloc_r+0xdc>
 80062ba:	f8c8 7000 	str.w	r7, [r8]
 80062be:	e00f      	b.n	80062e0 <_malloc_r+0xa8>
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	1b52      	subs	r2, r2, r5
 80062c4:	d420      	bmi.n	8006308 <_malloc_r+0xd0>
 80062c6:	2a0b      	cmp	r2, #11
 80062c8:	d917      	bls.n	80062fa <_malloc_r+0xc2>
 80062ca:	1961      	adds	r1, r4, r5
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	6025      	str	r5, [r4, #0]
 80062d0:	bf18      	it	ne
 80062d2:	6059      	strne	r1, [r3, #4]
 80062d4:	6863      	ldr	r3, [r4, #4]
 80062d6:	bf08      	it	eq
 80062d8:	f8c8 1000 	streq.w	r1, [r8]
 80062dc:	5162      	str	r2, [r4, r5]
 80062de:	604b      	str	r3, [r1, #4]
 80062e0:	4630      	mov	r0, r6
 80062e2:	f000 f82f 	bl	8006344 <__malloc_unlock>
 80062e6:	f104 000b 	add.w	r0, r4, #11
 80062ea:	1d23      	adds	r3, r4, #4
 80062ec:	f020 0007 	bic.w	r0, r0, #7
 80062f0:	1ac2      	subs	r2, r0, r3
 80062f2:	bf1c      	itt	ne
 80062f4:	1a1b      	subne	r3, r3, r0
 80062f6:	50a3      	strne	r3, [r4, r2]
 80062f8:	e7af      	b.n	800625a <_malloc_r+0x22>
 80062fa:	6862      	ldr	r2, [r4, #4]
 80062fc:	42a3      	cmp	r3, r4
 80062fe:	bf0c      	ite	eq
 8006300:	f8c8 2000 	streq.w	r2, [r8]
 8006304:	605a      	strne	r2, [r3, #4]
 8006306:	e7eb      	b.n	80062e0 <_malloc_r+0xa8>
 8006308:	4623      	mov	r3, r4
 800630a:	6864      	ldr	r4, [r4, #4]
 800630c:	e7ae      	b.n	800626c <_malloc_r+0x34>
 800630e:	463c      	mov	r4, r7
 8006310:	687f      	ldr	r7, [r7, #4]
 8006312:	e7b6      	b.n	8006282 <_malloc_r+0x4a>
 8006314:	461a      	mov	r2, r3
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	42a3      	cmp	r3, r4
 800631a:	d1fb      	bne.n	8006314 <_malloc_r+0xdc>
 800631c:	2300      	movs	r3, #0
 800631e:	6053      	str	r3, [r2, #4]
 8006320:	e7de      	b.n	80062e0 <_malloc_r+0xa8>
 8006322:	230c      	movs	r3, #12
 8006324:	6033      	str	r3, [r6, #0]
 8006326:	4630      	mov	r0, r6
 8006328:	f000 f80c 	bl	8006344 <__malloc_unlock>
 800632c:	e794      	b.n	8006258 <_malloc_r+0x20>
 800632e:	6005      	str	r5, [r0, #0]
 8006330:	e7d6      	b.n	80062e0 <_malloc_r+0xa8>
 8006332:	bf00      	nop
 8006334:	200003e4 	.word	0x200003e4

08006338 <__malloc_lock>:
 8006338:	4801      	ldr	r0, [pc, #4]	@ (8006340 <__malloc_lock+0x8>)
 800633a:	f000 bed4 	b.w	80070e6 <__retarget_lock_acquire_recursive>
 800633e:	bf00      	nop
 8006340:	20000528 	.word	0x20000528

08006344 <__malloc_unlock>:
 8006344:	4801      	ldr	r0, [pc, #4]	@ (800634c <__malloc_unlock+0x8>)
 8006346:	f000 becf 	b.w	80070e8 <__retarget_lock_release_recursive>
 800634a:	bf00      	nop
 800634c:	20000528 	.word	0x20000528

08006350 <_strtol_l.constprop.0>:
 8006350:	2b24      	cmp	r3, #36	@ 0x24
 8006352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006356:	4686      	mov	lr, r0
 8006358:	4690      	mov	r8, r2
 800635a:	d801      	bhi.n	8006360 <_strtol_l.constprop.0+0x10>
 800635c:	2b01      	cmp	r3, #1
 800635e:	d106      	bne.n	800636e <_strtol_l.constprop.0+0x1e>
 8006360:	f000 fe96 	bl	8007090 <__errno>
 8006364:	2316      	movs	r3, #22
 8006366:	6003      	str	r3, [r0, #0]
 8006368:	2000      	movs	r0, #0
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	4834      	ldr	r0, [pc, #208]	@ (8006440 <_strtol_l.constprop.0+0xf0>)
 8006370:	460d      	mov	r5, r1
 8006372:	462a      	mov	r2, r5
 8006374:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006378:	5d06      	ldrb	r6, [r0, r4]
 800637a:	f016 0608 	ands.w	r6, r6, #8
 800637e:	d1f8      	bne.n	8006372 <_strtol_l.constprop.0+0x22>
 8006380:	2c2d      	cmp	r4, #45	@ 0x2d
 8006382:	d12d      	bne.n	80063e0 <_strtol_l.constprop.0+0x90>
 8006384:	782c      	ldrb	r4, [r5, #0]
 8006386:	2601      	movs	r6, #1
 8006388:	1c95      	adds	r5, r2, #2
 800638a:	f033 0210 	bics.w	r2, r3, #16
 800638e:	d109      	bne.n	80063a4 <_strtol_l.constprop.0+0x54>
 8006390:	2c30      	cmp	r4, #48	@ 0x30
 8006392:	d12a      	bne.n	80063ea <_strtol_l.constprop.0+0x9a>
 8006394:	782a      	ldrb	r2, [r5, #0]
 8006396:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800639a:	2a58      	cmp	r2, #88	@ 0x58
 800639c:	d125      	bne.n	80063ea <_strtol_l.constprop.0+0x9a>
 800639e:	786c      	ldrb	r4, [r5, #1]
 80063a0:	2310      	movs	r3, #16
 80063a2:	3502      	adds	r5, #2
 80063a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80063a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80063ac:	2200      	movs	r2, #0
 80063ae:	fbbc f9f3 	udiv	r9, ip, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80063b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80063bc:	2f09      	cmp	r7, #9
 80063be:	d81b      	bhi.n	80063f8 <_strtol_l.constprop.0+0xa8>
 80063c0:	463c      	mov	r4, r7
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	dd27      	ble.n	8006416 <_strtol_l.constprop.0+0xc6>
 80063c6:	1c57      	adds	r7, r2, #1
 80063c8:	d007      	beq.n	80063da <_strtol_l.constprop.0+0x8a>
 80063ca:	4581      	cmp	r9, r0
 80063cc:	d320      	bcc.n	8006410 <_strtol_l.constprop.0+0xc0>
 80063ce:	d101      	bne.n	80063d4 <_strtol_l.constprop.0+0x84>
 80063d0:	45a2      	cmp	sl, r4
 80063d2:	db1d      	blt.n	8006410 <_strtol_l.constprop.0+0xc0>
 80063d4:	fb00 4003 	mla	r0, r0, r3, r4
 80063d8:	2201      	movs	r2, #1
 80063da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063de:	e7eb      	b.n	80063b8 <_strtol_l.constprop.0+0x68>
 80063e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80063e2:	bf04      	itt	eq
 80063e4:	782c      	ldrbeq	r4, [r5, #0]
 80063e6:	1c95      	addeq	r5, r2, #2
 80063e8:	e7cf      	b.n	800638a <_strtol_l.constprop.0+0x3a>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1da      	bne.n	80063a4 <_strtol_l.constprop.0+0x54>
 80063ee:	2c30      	cmp	r4, #48	@ 0x30
 80063f0:	bf0c      	ite	eq
 80063f2:	2308      	moveq	r3, #8
 80063f4:	230a      	movne	r3, #10
 80063f6:	e7d5      	b.n	80063a4 <_strtol_l.constprop.0+0x54>
 80063f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80063fc:	2f19      	cmp	r7, #25
 80063fe:	d801      	bhi.n	8006404 <_strtol_l.constprop.0+0xb4>
 8006400:	3c37      	subs	r4, #55	@ 0x37
 8006402:	e7de      	b.n	80063c2 <_strtol_l.constprop.0+0x72>
 8006404:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006408:	2f19      	cmp	r7, #25
 800640a:	d804      	bhi.n	8006416 <_strtol_l.constprop.0+0xc6>
 800640c:	3c57      	subs	r4, #87	@ 0x57
 800640e:	e7d8      	b.n	80063c2 <_strtol_l.constprop.0+0x72>
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	e7e1      	b.n	80063da <_strtol_l.constprop.0+0x8a>
 8006416:	1c53      	adds	r3, r2, #1
 8006418:	d108      	bne.n	800642c <_strtol_l.constprop.0+0xdc>
 800641a:	2322      	movs	r3, #34	@ 0x22
 800641c:	f8ce 3000 	str.w	r3, [lr]
 8006420:	4660      	mov	r0, ip
 8006422:	f1b8 0f00 	cmp.w	r8, #0
 8006426:	d0a0      	beq.n	800636a <_strtol_l.constprop.0+0x1a>
 8006428:	1e69      	subs	r1, r5, #1
 800642a:	e006      	b.n	800643a <_strtol_l.constprop.0+0xea>
 800642c:	b106      	cbz	r6, 8006430 <_strtol_l.constprop.0+0xe0>
 800642e:	4240      	negs	r0, r0
 8006430:	f1b8 0f00 	cmp.w	r8, #0
 8006434:	d099      	beq.n	800636a <_strtol_l.constprop.0+0x1a>
 8006436:	2a00      	cmp	r2, #0
 8006438:	d1f6      	bne.n	8006428 <_strtol_l.constprop.0+0xd8>
 800643a:	f8c8 1000 	str.w	r1, [r8]
 800643e:	e794      	b.n	800636a <_strtol_l.constprop.0+0x1a>
 8006440:	08008d25 	.word	0x08008d25

08006444 <strtol>:
 8006444:	4613      	mov	r3, r2
 8006446:	460a      	mov	r2, r1
 8006448:	4601      	mov	r1, r0
 800644a:	4802      	ldr	r0, [pc, #8]	@ (8006454 <strtol+0x10>)
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f7ff bf7f 	b.w	8006350 <_strtol_l.constprop.0>
 8006452:	bf00      	nop
 8006454:	20000024 	.word	0x20000024

08006458 <__cvt>:
 8006458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	ec57 6b10 	vmov	r6, r7, d0
 8006460:	2f00      	cmp	r7, #0
 8006462:	460c      	mov	r4, r1
 8006464:	4619      	mov	r1, r3
 8006466:	463b      	mov	r3, r7
 8006468:	bfbb      	ittet	lt
 800646a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800646e:	461f      	movlt	r7, r3
 8006470:	2300      	movge	r3, #0
 8006472:	232d      	movlt	r3, #45	@ 0x2d
 8006474:	700b      	strb	r3, [r1, #0]
 8006476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006478:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800647c:	4691      	mov	r9, r2
 800647e:	f023 0820 	bic.w	r8, r3, #32
 8006482:	bfbc      	itt	lt
 8006484:	4632      	movlt	r2, r6
 8006486:	4616      	movlt	r6, r2
 8006488:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800648c:	d005      	beq.n	800649a <__cvt+0x42>
 800648e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006492:	d100      	bne.n	8006496 <__cvt+0x3e>
 8006494:	3401      	adds	r4, #1
 8006496:	2102      	movs	r1, #2
 8006498:	e000      	b.n	800649c <__cvt+0x44>
 800649a:	2103      	movs	r1, #3
 800649c:	ab03      	add	r3, sp, #12
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	ab02      	add	r3, sp, #8
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	ec47 6b10 	vmov	d0, r6, r7
 80064a8:	4653      	mov	r3, sl
 80064aa:	4622      	mov	r2, r4
 80064ac:	f000 fec4 	bl	8007238 <_dtoa_r>
 80064b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064b4:	4605      	mov	r5, r0
 80064b6:	d119      	bne.n	80064ec <__cvt+0x94>
 80064b8:	f019 0f01 	tst.w	r9, #1
 80064bc:	d00e      	beq.n	80064dc <__cvt+0x84>
 80064be:	eb00 0904 	add.w	r9, r0, r4
 80064c2:	2200      	movs	r2, #0
 80064c4:	2300      	movs	r3, #0
 80064c6:	4630      	mov	r0, r6
 80064c8:	4639      	mov	r1, r7
 80064ca:	f7fa fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ce:	b108      	cbz	r0, 80064d4 <__cvt+0x7c>
 80064d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80064d4:	2230      	movs	r2, #48	@ 0x30
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	454b      	cmp	r3, r9
 80064da:	d31e      	bcc.n	800651a <__cvt+0xc2>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064e0:	1b5b      	subs	r3, r3, r5
 80064e2:	4628      	mov	r0, r5
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	b004      	add	sp, #16
 80064e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064f0:	eb00 0904 	add.w	r9, r0, r4
 80064f4:	d1e5      	bne.n	80064c2 <__cvt+0x6a>
 80064f6:	7803      	ldrb	r3, [r0, #0]
 80064f8:	2b30      	cmp	r3, #48	@ 0x30
 80064fa:	d10a      	bne.n	8006512 <__cvt+0xba>
 80064fc:	2200      	movs	r2, #0
 80064fe:	2300      	movs	r3, #0
 8006500:	4630      	mov	r0, r6
 8006502:	4639      	mov	r1, r7
 8006504:	f7fa fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006508:	b918      	cbnz	r0, 8006512 <__cvt+0xba>
 800650a:	f1c4 0401 	rsb	r4, r4, #1
 800650e:	f8ca 4000 	str.w	r4, [sl]
 8006512:	f8da 3000 	ldr.w	r3, [sl]
 8006516:	4499      	add	r9, r3
 8006518:	e7d3      	b.n	80064c2 <__cvt+0x6a>
 800651a:	1c59      	adds	r1, r3, #1
 800651c:	9103      	str	r1, [sp, #12]
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	e7d9      	b.n	80064d6 <__cvt+0x7e>

08006522 <__exponent>:
 8006522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006524:	2900      	cmp	r1, #0
 8006526:	bfba      	itte	lt
 8006528:	4249      	neglt	r1, r1
 800652a:	232d      	movlt	r3, #45	@ 0x2d
 800652c:	232b      	movge	r3, #43	@ 0x2b
 800652e:	2909      	cmp	r1, #9
 8006530:	7002      	strb	r2, [r0, #0]
 8006532:	7043      	strb	r3, [r0, #1]
 8006534:	dd29      	ble.n	800658a <__exponent+0x68>
 8006536:	f10d 0307 	add.w	r3, sp, #7
 800653a:	461d      	mov	r5, r3
 800653c:	270a      	movs	r7, #10
 800653e:	461a      	mov	r2, r3
 8006540:	fbb1 f6f7 	udiv	r6, r1, r7
 8006544:	fb07 1416 	mls	r4, r7, r6, r1
 8006548:	3430      	adds	r4, #48	@ 0x30
 800654a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800654e:	460c      	mov	r4, r1
 8006550:	2c63      	cmp	r4, #99	@ 0x63
 8006552:	f103 33ff 	add.w	r3, r3, #4294967295
 8006556:	4631      	mov	r1, r6
 8006558:	dcf1      	bgt.n	800653e <__exponent+0x1c>
 800655a:	3130      	adds	r1, #48	@ 0x30
 800655c:	1e94      	subs	r4, r2, #2
 800655e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006562:	1c41      	adds	r1, r0, #1
 8006564:	4623      	mov	r3, r4
 8006566:	42ab      	cmp	r3, r5
 8006568:	d30a      	bcc.n	8006580 <__exponent+0x5e>
 800656a:	f10d 0309 	add.w	r3, sp, #9
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	42ac      	cmp	r4, r5
 8006572:	bf88      	it	hi
 8006574:	2300      	movhi	r3, #0
 8006576:	3302      	adds	r3, #2
 8006578:	4403      	add	r3, r0
 800657a:	1a18      	subs	r0, r3, r0
 800657c:	b003      	add	sp, #12
 800657e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006580:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006584:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006588:	e7ed      	b.n	8006566 <__exponent+0x44>
 800658a:	2330      	movs	r3, #48	@ 0x30
 800658c:	3130      	adds	r1, #48	@ 0x30
 800658e:	7083      	strb	r3, [r0, #2]
 8006590:	70c1      	strb	r1, [r0, #3]
 8006592:	1d03      	adds	r3, r0, #4
 8006594:	e7f1      	b.n	800657a <__exponent+0x58>
	...

08006598 <_printf_float>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	b08d      	sub	sp, #52	@ 0x34
 800659e:	460c      	mov	r4, r1
 80065a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065a4:	4616      	mov	r6, r2
 80065a6:	461f      	mov	r7, r3
 80065a8:	4605      	mov	r5, r0
 80065aa:	f000 fd17 	bl	8006fdc <_localeconv_r>
 80065ae:	6803      	ldr	r3, [r0, #0]
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7f9 fe5c 	bl	8000270 <strlen>
 80065b8:	2300      	movs	r3, #0
 80065ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80065bc:	f8d8 3000 	ldr.w	r3, [r8]
 80065c0:	9005      	str	r0, [sp, #20]
 80065c2:	3307      	adds	r3, #7
 80065c4:	f023 0307 	bic.w	r3, r3, #7
 80065c8:	f103 0208 	add.w	r2, r3, #8
 80065cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065d0:	f8d4 b000 	ldr.w	fp, [r4]
 80065d4:	f8c8 2000 	str.w	r2, [r8]
 80065d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065e0:	9307      	str	r3, [sp, #28]
 80065e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80065e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ee:	4b9c      	ldr	r3, [pc, #624]	@ (8006860 <_printf_float+0x2c8>)
 80065f0:	f04f 32ff 	mov.w	r2, #4294967295
 80065f4:	f7fa fa9a 	bl	8000b2c <__aeabi_dcmpun>
 80065f8:	bb70      	cbnz	r0, 8006658 <_printf_float+0xc0>
 80065fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065fe:	4b98      	ldr	r3, [pc, #608]	@ (8006860 <_printf_float+0x2c8>)
 8006600:	f04f 32ff 	mov.w	r2, #4294967295
 8006604:	f7fa fa74 	bl	8000af0 <__aeabi_dcmple>
 8006608:	bb30      	cbnz	r0, 8006658 <_printf_float+0xc0>
 800660a:	2200      	movs	r2, #0
 800660c:	2300      	movs	r3, #0
 800660e:	4640      	mov	r0, r8
 8006610:	4649      	mov	r1, r9
 8006612:	f7fa fa63 	bl	8000adc <__aeabi_dcmplt>
 8006616:	b110      	cbz	r0, 800661e <_printf_float+0x86>
 8006618:	232d      	movs	r3, #45	@ 0x2d
 800661a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800661e:	4a91      	ldr	r2, [pc, #580]	@ (8006864 <_printf_float+0x2cc>)
 8006620:	4b91      	ldr	r3, [pc, #580]	@ (8006868 <_printf_float+0x2d0>)
 8006622:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006626:	bf94      	ite	ls
 8006628:	4690      	movls	r8, r2
 800662a:	4698      	movhi	r8, r3
 800662c:	2303      	movs	r3, #3
 800662e:	6123      	str	r3, [r4, #16]
 8006630:	f02b 0304 	bic.w	r3, fp, #4
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	f04f 0900 	mov.w	r9, #0
 800663a:	9700      	str	r7, [sp, #0]
 800663c:	4633      	mov	r3, r6
 800663e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006640:	4621      	mov	r1, r4
 8006642:	4628      	mov	r0, r5
 8006644:	f000 f9d2 	bl	80069ec <_printf_common>
 8006648:	3001      	adds	r0, #1
 800664a:	f040 808d 	bne.w	8006768 <_printf_float+0x1d0>
 800664e:	f04f 30ff 	mov.w	r0, #4294967295
 8006652:	b00d      	add	sp, #52	@ 0x34
 8006654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	4640      	mov	r0, r8
 800665e:	4649      	mov	r1, r9
 8006660:	f7fa fa64 	bl	8000b2c <__aeabi_dcmpun>
 8006664:	b140      	cbz	r0, 8006678 <_printf_float+0xe0>
 8006666:	464b      	mov	r3, r9
 8006668:	2b00      	cmp	r3, #0
 800666a:	bfbc      	itt	lt
 800666c:	232d      	movlt	r3, #45	@ 0x2d
 800666e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006672:	4a7e      	ldr	r2, [pc, #504]	@ (800686c <_printf_float+0x2d4>)
 8006674:	4b7e      	ldr	r3, [pc, #504]	@ (8006870 <_printf_float+0x2d8>)
 8006676:	e7d4      	b.n	8006622 <_printf_float+0x8a>
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800667e:	9206      	str	r2, [sp, #24]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	d13b      	bne.n	80066fc <_printf_float+0x164>
 8006684:	2306      	movs	r3, #6
 8006686:	6063      	str	r3, [r4, #4]
 8006688:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800668c:	2300      	movs	r3, #0
 800668e:	6022      	str	r2, [r4, #0]
 8006690:	9303      	str	r3, [sp, #12]
 8006692:	ab0a      	add	r3, sp, #40	@ 0x28
 8006694:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006698:	ab09      	add	r3, sp, #36	@ 0x24
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	6861      	ldr	r1, [r4, #4]
 800669e:	ec49 8b10 	vmov	d0, r8, r9
 80066a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066a6:	4628      	mov	r0, r5
 80066a8:	f7ff fed6 	bl	8006458 <__cvt>
 80066ac:	9b06      	ldr	r3, [sp, #24]
 80066ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066b0:	2b47      	cmp	r3, #71	@ 0x47
 80066b2:	4680      	mov	r8, r0
 80066b4:	d129      	bne.n	800670a <_printf_float+0x172>
 80066b6:	1cc8      	adds	r0, r1, #3
 80066b8:	db02      	blt.n	80066c0 <_printf_float+0x128>
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	4299      	cmp	r1, r3
 80066be:	dd41      	ble.n	8006744 <_printf_float+0x1ac>
 80066c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80066c4:	fa5f fa8a 	uxtb.w	sl, sl
 80066c8:	3901      	subs	r1, #1
 80066ca:	4652      	mov	r2, sl
 80066cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80066d2:	f7ff ff26 	bl	8006522 <__exponent>
 80066d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066d8:	1813      	adds	r3, r2, r0
 80066da:	2a01      	cmp	r2, #1
 80066dc:	4681      	mov	r9, r0
 80066de:	6123      	str	r3, [r4, #16]
 80066e0:	dc02      	bgt.n	80066e8 <_printf_float+0x150>
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	07d2      	lsls	r2, r2, #31
 80066e6:	d501      	bpl.n	80066ec <_printf_float+0x154>
 80066e8:	3301      	adds	r3, #1
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0a2      	beq.n	800663a <_printf_float+0xa2>
 80066f4:	232d      	movs	r3, #45	@ 0x2d
 80066f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066fa:	e79e      	b.n	800663a <_printf_float+0xa2>
 80066fc:	9a06      	ldr	r2, [sp, #24]
 80066fe:	2a47      	cmp	r2, #71	@ 0x47
 8006700:	d1c2      	bne.n	8006688 <_printf_float+0xf0>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1c0      	bne.n	8006688 <_printf_float+0xf0>
 8006706:	2301      	movs	r3, #1
 8006708:	e7bd      	b.n	8006686 <_printf_float+0xee>
 800670a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800670e:	d9db      	bls.n	80066c8 <_printf_float+0x130>
 8006710:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006714:	d118      	bne.n	8006748 <_printf_float+0x1b0>
 8006716:	2900      	cmp	r1, #0
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	dd0b      	ble.n	8006734 <_printf_float+0x19c>
 800671c:	6121      	str	r1, [r4, #16]
 800671e:	b913      	cbnz	r3, 8006726 <_printf_float+0x18e>
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	07d0      	lsls	r0, r2, #31
 8006724:	d502      	bpl.n	800672c <_printf_float+0x194>
 8006726:	3301      	adds	r3, #1
 8006728:	440b      	add	r3, r1
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800672e:	f04f 0900 	mov.w	r9, #0
 8006732:	e7db      	b.n	80066ec <_printf_float+0x154>
 8006734:	b913      	cbnz	r3, 800673c <_printf_float+0x1a4>
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	07d2      	lsls	r2, r2, #31
 800673a:	d501      	bpl.n	8006740 <_printf_float+0x1a8>
 800673c:	3302      	adds	r3, #2
 800673e:	e7f4      	b.n	800672a <_printf_float+0x192>
 8006740:	2301      	movs	r3, #1
 8006742:	e7f2      	b.n	800672a <_printf_float+0x192>
 8006744:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800674a:	4299      	cmp	r1, r3
 800674c:	db05      	blt.n	800675a <_printf_float+0x1c2>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	6121      	str	r1, [r4, #16]
 8006752:	07d8      	lsls	r0, r3, #31
 8006754:	d5ea      	bpl.n	800672c <_printf_float+0x194>
 8006756:	1c4b      	adds	r3, r1, #1
 8006758:	e7e7      	b.n	800672a <_printf_float+0x192>
 800675a:	2900      	cmp	r1, #0
 800675c:	bfd4      	ite	le
 800675e:	f1c1 0202 	rsble	r2, r1, #2
 8006762:	2201      	movgt	r2, #1
 8006764:	4413      	add	r3, r2
 8006766:	e7e0      	b.n	800672a <_printf_float+0x192>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	055a      	lsls	r2, r3, #21
 800676c:	d407      	bmi.n	800677e <_printf_float+0x1e6>
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	4642      	mov	r2, r8
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	d12b      	bne.n	80067d4 <_printf_float+0x23c>
 800677c:	e767      	b.n	800664e <_printf_float+0xb6>
 800677e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006782:	f240 80dd 	bls.w	8006940 <_printf_float+0x3a8>
 8006786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800678a:	2200      	movs	r2, #0
 800678c:	2300      	movs	r3, #0
 800678e:	f7fa f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006792:	2800      	cmp	r0, #0
 8006794:	d033      	beq.n	80067fe <_printf_float+0x266>
 8006796:	4a37      	ldr	r2, [pc, #220]	@ (8006874 <_printf_float+0x2dc>)
 8006798:	2301      	movs	r3, #1
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	f43f af54 	beq.w	800664e <_printf_float+0xb6>
 80067a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067aa:	4543      	cmp	r3, r8
 80067ac:	db02      	blt.n	80067b4 <_printf_float+0x21c>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	07d8      	lsls	r0, r3, #31
 80067b2:	d50f      	bpl.n	80067d4 <_printf_float+0x23c>
 80067b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	f43f af45 	beq.w	800664e <_printf_float+0xb6>
 80067c4:	f04f 0900 	mov.w	r9, #0
 80067c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80067cc:	f104 0a1a 	add.w	sl, r4, #26
 80067d0:	45c8      	cmp	r8, r9
 80067d2:	dc09      	bgt.n	80067e8 <_printf_float+0x250>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	079b      	lsls	r3, r3, #30
 80067d8:	f100 8103 	bmi.w	80069e2 <_printf_float+0x44a>
 80067dc:	68e0      	ldr	r0, [r4, #12]
 80067de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067e0:	4298      	cmp	r0, r3
 80067e2:	bfb8      	it	lt
 80067e4:	4618      	movlt	r0, r3
 80067e6:	e734      	b.n	8006652 <_printf_float+0xba>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4652      	mov	r2, sl
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f af2b 	beq.w	800664e <_printf_float+0xb6>
 80067f8:	f109 0901 	add.w	r9, r9, #1
 80067fc:	e7e8      	b.n	80067d0 <_printf_float+0x238>
 80067fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	dc39      	bgt.n	8006878 <_printf_float+0x2e0>
 8006804:	4a1b      	ldr	r2, [pc, #108]	@ (8006874 <_printf_float+0x2dc>)
 8006806:	2301      	movs	r3, #1
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f43f af1d 	beq.w	800664e <_printf_float+0xb6>
 8006814:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006818:	ea59 0303 	orrs.w	r3, r9, r3
 800681c:	d102      	bne.n	8006824 <_printf_float+0x28c>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	07d9      	lsls	r1, r3, #31
 8006822:	d5d7      	bpl.n	80067d4 <_printf_float+0x23c>
 8006824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f af0d 	beq.w	800664e <_printf_float+0xb6>
 8006834:	f04f 0a00 	mov.w	sl, #0
 8006838:	f104 0b1a 	add.w	fp, r4, #26
 800683c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800683e:	425b      	negs	r3, r3
 8006840:	4553      	cmp	r3, sl
 8006842:	dc01      	bgt.n	8006848 <_printf_float+0x2b0>
 8006844:	464b      	mov	r3, r9
 8006846:	e793      	b.n	8006770 <_printf_float+0x1d8>
 8006848:	2301      	movs	r3, #1
 800684a:	465a      	mov	r2, fp
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	f43f aefb 	beq.w	800664e <_printf_float+0xb6>
 8006858:	f10a 0a01 	add.w	sl, sl, #1
 800685c:	e7ee      	b.n	800683c <_printf_float+0x2a4>
 800685e:	bf00      	nop
 8006860:	7fefffff 	.word	0x7fefffff
 8006864:	08008e25 	.word	0x08008e25
 8006868:	08008e29 	.word	0x08008e29
 800686c:	08008e2d 	.word	0x08008e2d
 8006870:	08008e31 	.word	0x08008e31
 8006874:	08008e35 	.word	0x08008e35
 8006878:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800687a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800687e:	4553      	cmp	r3, sl
 8006880:	bfa8      	it	ge
 8006882:	4653      	movge	r3, sl
 8006884:	2b00      	cmp	r3, #0
 8006886:	4699      	mov	r9, r3
 8006888:	dc36      	bgt.n	80068f8 <_printf_float+0x360>
 800688a:	f04f 0b00 	mov.w	fp, #0
 800688e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006892:	f104 021a 	add.w	r2, r4, #26
 8006896:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006898:	9306      	str	r3, [sp, #24]
 800689a:	eba3 0309 	sub.w	r3, r3, r9
 800689e:	455b      	cmp	r3, fp
 80068a0:	dc31      	bgt.n	8006906 <_printf_float+0x36e>
 80068a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a4:	459a      	cmp	sl, r3
 80068a6:	dc3a      	bgt.n	800691e <_printf_float+0x386>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	07da      	lsls	r2, r3, #31
 80068ac:	d437      	bmi.n	800691e <_printf_float+0x386>
 80068ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b0:	ebaa 0903 	sub.w	r9, sl, r3
 80068b4:	9b06      	ldr	r3, [sp, #24]
 80068b6:	ebaa 0303 	sub.w	r3, sl, r3
 80068ba:	4599      	cmp	r9, r3
 80068bc:	bfa8      	it	ge
 80068be:	4699      	movge	r9, r3
 80068c0:	f1b9 0f00 	cmp.w	r9, #0
 80068c4:	dc33      	bgt.n	800692e <_printf_float+0x396>
 80068c6:	f04f 0800 	mov.w	r8, #0
 80068ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ce:	f104 0b1a 	add.w	fp, r4, #26
 80068d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d4:	ebaa 0303 	sub.w	r3, sl, r3
 80068d8:	eba3 0309 	sub.w	r3, r3, r9
 80068dc:	4543      	cmp	r3, r8
 80068de:	f77f af79 	ble.w	80067d4 <_printf_float+0x23c>
 80068e2:	2301      	movs	r3, #1
 80068e4:	465a      	mov	r2, fp
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f aeae 	beq.w	800664e <_printf_float+0xb6>
 80068f2:	f108 0801 	add.w	r8, r8, #1
 80068f6:	e7ec      	b.n	80068d2 <_printf_float+0x33a>
 80068f8:	4642      	mov	r2, r8
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b8      	blx	r7
 8006900:	3001      	adds	r0, #1
 8006902:	d1c2      	bne.n	800688a <_printf_float+0x2f2>
 8006904:	e6a3      	b.n	800664e <_printf_float+0xb6>
 8006906:	2301      	movs	r3, #1
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	9206      	str	r2, [sp, #24]
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	f43f ae9c 	beq.w	800664e <_printf_float+0xb6>
 8006916:	9a06      	ldr	r2, [sp, #24]
 8006918:	f10b 0b01 	add.w	fp, fp, #1
 800691c:	e7bb      	b.n	8006896 <_printf_float+0x2fe>
 800691e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	d1c0      	bne.n	80068ae <_printf_float+0x316>
 800692c:	e68f      	b.n	800664e <_printf_float+0xb6>
 800692e:	9a06      	ldr	r2, [sp, #24]
 8006930:	464b      	mov	r3, r9
 8006932:	4442      	add	r2, r8
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	d1c3      	bne.n	80068c6 <_printf_float+0x32e>
 800693e:	e686      	b.n	800664e <_printf_float+0xb6>
 8006940:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006944:	f1ba 0f01 	cmp.w	sl, #1
 8006948:	dc01      	bgt.n	800694e <_printf_float+0x3b6>
 800694a:	07db      	lsls	r3, r3, #31
 800694c:	d536      	bpl.n	80069bc <_printf_float+0x424>
 800694e:	2301      	movs	r3, #1
 8006950:	4642      	mov	r2, r8
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	47b8      	blx	r7
 8006958:	3001      	adds	r0, #1
 800695a:	f43f ae78 	beq.w	800664e <_printf_float+0xb6>
 800695e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	f43f ae70 	beq.w	800664e <_printf_float+0xb6>
 800696e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006972:	2200      	movs	r2, #0
 8006974:	2300      	movs	r3, #0
 8006976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800697a:	f7fa f8a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800697e:	b9c0      	cbnz	r0, 80069b2 <_printf_float+0x41a>
 8006980:	4653      	mov	r3, sl
 8006982:	f108 0201 	add.w	r2, r8, #1
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	d10c      	bne.n	80069aa <_printf_float+0x412>
 8006990:	e65d      	b.n	800664e <_printf_float+0xb6>
 8006992:	2301      	movs	r3, #1
 8006994:	465a      	mov	r2, fp
 8006996:	4631      	mov	r1, r6
 8006998:	4628      	mov	r0, r5
 800699a:	47b8      	blx	r7
 800699c:	3001      	adds	r0, #1
 800699e:	f43f ae56 	beq.w	800664e <_printf_float+0xb6>
 80069a2:	f108 0801 	add.w	r8, r8, #1
 80069a6:	45d0      	cmp	r8, sl
 80069a8:	dbf3      	blt.n	8006992 <_printf_float+0x3fa>
 80069aa:	464b      	mov	r3, r9
 80069ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069b0:	e6df      	b.n	8006772 <_printf_float+0x1da>
 80069b2:	f04f 0800 	mov.w	r8, #0
 80069b6:	f104 0b1a 	add.w	fp, r4, #26
 80069ba:	e7f4      	b.n	80069a6 <_printf_float+0x40e>
 80069bc:	2301      	movs	r3, #1
 80069be:	4642      	mov	r2, r8
 80069c0:	e7e1      	b.n	8006986 <_printf_float+0x3ee>
 80069c2:	2301      	movs	r3, #1
 80069c4:	464a      	mov	r2, r9
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	f43f ae3e 	beq.w	800664e <_printf_float+0xb6>
 80069d2:	f108 0801 	add.w	r8, r8, #1
 80069d6:	68e3      	ldr	r3, [r4, #12]
 80069d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069da:	1a5b      	subs	r3, r3, r1
 80069dc:	4543      	cmp	r3, r8
 80069de:	dcf0      	bgt.n	80069c2 <_printf_float+0x42a>
 80069e0:	e6fc      	b.n	80067dc <_printf_float+0x244>
 80069e2:	f04f 0800 	mov.w	r8, #0
 80069e6:	f104 0919 	add.w	r9, r4, #25
 80069ea:	e7f4      	b.n	80069d6 <_printf_float+0x43e>

080069ec <_printf_common>:
 80069ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	4616      	mov	r6, r2
 80069f2:	4698      	mov	r8, r3
 80069f4:	688a      	ldr	r2, [r1, #8]
 80069f6:	690b      	ldr	r3, [r1, #16]
 80069f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069fc:	4293      	cmp	r3, r2
 80069fe:	bfb8      	it	lt
 8006a00:	4613      	movlt	r3, r2
 8006a02:	6033      	str	r3, [r6, #0]
 8006a04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a08:	4607      	mov	r7, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	b10a      	cbz	r2, 8006a12 <_printf_common+0x26>
 8006a0e:	3301      	adds	r3, #1
 8006a10:	6033      	str	r3, [r6, #0]
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	0699      	lsls	r1, r3, #26
 8006a16:	bf42      	ittt	mi
 8006a18:	6833      	ldrmi	r3, [r6, #0]
 8006a1a:	3302      	addmi	r3, #2
 8006a1c:	6033      	strmi	r3, [r6, #0]
 8006a1e:	6825      	ldr	r5, [r4, #0]
 8006a20:	f015 0506 	ands.w	r5, r5, #6
 8006a24:	d106      	bne.n	8006a34 <_printf_common+0x48>
 8006a26:	f104 0a19 	add.w	sl, r4, #25
 8006a2a:	68e3      	ldr	r3, [r4, #12]
 8006a2c:	6832      	ldr	r2, [r6, #0]
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	42ab      	cmp	r3, r5
 8006a32:	dc26      	bgt.n	8006a82 <_printf_common+0x96>
 8006a34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a38:	6822      	ldr	r2, [r4, #0]
 8006a3a:	3b00      	subs	r3, #0
 8006a3c:	bf18      	it	ne
 8006a3e:	2301      	movne	r3, #1
 8006a40:	0692      	lsls	r2, r2, #26
 8006a42:	d42b      	bmi.n	8006a9c <_printf_common+0xb0>
 8006a44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a48:	4641      	mov	r1, r8
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	47c8      	blx	r9
 8006a4e:	3001      	adds	r0, #1
 8006a50:	d01e      	beq.n	8006a90 <_printf_common+0xa4>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	6922      	ldr	r2, [r4, #16]
 8006a56:	f003 0306 	and.w	r3, r3, #6
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	bf02      	ittt	eq
 8006a5e:	68e5      	ldreq	r5, [r4, #12]
 8006a60:	6833      	ldreq	r3, [r6, #0]
 8006a62:	1aed      	subeq	r5, r5, r3
 8006a64:	68a3      	ldr	r3, [r4, #8]
 8006a66:	bf0c      	ite	eq
 8006a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a6c:	2500      	movne	r5, #0
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	bfc4      	itt	gt
 8006a72:	1a9b      	subgt	r3, r3, r2
 8006a74:	18ed      	addgt	r5, r5, r3
 8006a76:	2600      	movs	r6, #0
 8006a78:	341a      	adds	r4, #26
 8006a7a:	42b5      	cmp	r5, r6
 8006a7c:	d11a      	bne.n	8006ab4 <_printf_common+0xc8>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	e008      	b.n	8006a94 <_printf_common+0xa8>
 8006a82:	2301      	movs	r3, #1
 8006a84:	4652      	mov	r2, sl
 8006a86:	4641      	mov	r1, r8
 8006a88:	4638      	mov	r0, r7
 8006a8a:	47c8      	blx	r9
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d103      	bne.n	8006a98 <_printf_common+0xac>
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a98:	3501      	adds	r5, #1
 8006a9a:	e7c6      	b.n	8006a2a <_printf_common+0x3e>
 8006a9c:	18e1      	adds	r1, r4, r3
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	2030      	movs	r0, #48	@ 0x30
 8006aa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006aa6:	4422      	add	r2, r4
 8006aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006aac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ab0:	3302      	adds	r3, #2
 8006ab2:	e7c7      	b.n	8006a44 <_printf_common+0x58>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	4641      	mov	r1, r8
 8006aba:	4638      	mov	r0, r7
 8006abc:	47c8      	blx	r9
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d0e6      	beq.n	8006a90 <_printf_common+0xa4>
 8006ac2:	3601      	adds	r6, #1
 8006ac4:	e7d9      	b.n	8006a7a <_printf_common+0x8e>
	...

08006ac8 <_printf_i>:
 8006ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006acc:	7e0f      	ldrb	r7, [r1, #24]
 8006ace:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ad0:	2f78      	cmp	r7, #120	@ 0x78
 8006ad2:	4691      	mov	r9, r2
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	469a      	mov	sl, r3
 8006ada:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ade:	d807      	bhi.n	8006af0 <_printf_i+0x28>
 8006ae0:	2f62      	cmp	r7, #98	@ 0x62
 8006ae2:	d80a      	bhi.n	8006afa <_printf_i+0x32>
 8006ae4:	2f00      	cmp	r7, #0
 8006ae6:	f000 80d2 	beq.w	8006c8e <_printf_i+0x1c6>
 8006aea:	2f58      	cmp	r7, #88	@ 0x58
 8006aec:	f000 80b9 	beq.w	8006c62 <_printf_i+0x19a>
 8006af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006af4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006af8:	e03a      	b.n	8006b70 <_printf_i+0xa8>
 8006afa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006afe:	2b15      	cmp	r3, #21
 8006b00:	d8f6      	bhi.n	8006af0 <_printf_i+0x28>
 8006b02:	a101      	add	r1, pc, #4	@ (adr r1, 8006b08 <_printf_i+0x40>)
 8006b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b08:	08006b61 	.word	0x08006b61
 8006b0c:	08006b75 	.word	0x08006b75
 8006b10:	08006af1 	.word	0x08006af1
 8006b14:	08006af1 	.word	0x08006af1
 8006b18:	08006af1 	.word	0x08006af1
 8006b1c:	08006af1 	.word	0x08006af1
 8006b20:	08006b75 	.word	0x08006b75
 8006b24:	08006af1 	.word	0x08006af1
 8006b28:	08006af1 	.word	0x08006af1
 8006b2c:	08006af1 	.word	0x08006af1
 8006b30:	08006af1 	.word	0x08006af1
 8006b34:	08006c75 	.word	0x08006c75
 8006b38:	08006b9f 	.word	0x08006b9f
 8006b3c:	08006c2f 	.word	0x08006c2f
 8006b40:	08006af1 	.word	0x08006af1
 8006b44:	08006af1 	.word	0x08006af1
 8006b48:	08006c97 	.word	0x08006c97
 8006b4c:	08006af1 	.word	0x08006af1
 8006b50:	08006b9f 	.word	0x08006b9f
 8006b54:	08006af1 	.word	0x08006af1
 8006b58:	08006af1 	.word	0x08006af1
 8006b5c:	08006c37 	.word	0x08006c37
 8006b60:	6833      	ldr	r3, [r6, #0]
 8006b62:	1d1a      	adds	r2, r3, #4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6032      	str	r2, [r6, #0]
 8006b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b70:	2301      	movs	r3, #1
 8006b72:	e09d      	b.n	8006cb0 <_printf_i+0x1e8>
 8006b74:	6833      	ldr	r3, [r6, #0]
 8006b76:	6820      	ldr	r0, [r4, #0]
 8006b78:	1d19      	adds	r1, r3, #4
 8006b7a:	6031      	str	r1, [r6, #0]
 8006b7c:	0606      	lsls	r6, r0, #24
 8006b7e:	d501      	bpl.n	8006b84 <_printf_i+0xbc>
 8006b80:	681d      	ldr	r5, [r3, #0]
 8006b82:	e003      	b.n	8006b8c <_printf_i+0xc4>
 8006b84:	0645      	lsls	r5, r0, #25
 8006b86:	d5fb      	bpl.n	8006b80 <_printf_i+0xb8>
 8006b88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b8c:	2d00      	cmp	r5, #0
 8006b8e:	da03      	bge.n	8006b98 <_printf_i+0xd0>
 8006b90:	232d      	movs	r3, #45	@ 0x2d
 8006b92:	426d      	negs	r5, r5
 8006b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b98:	4859      	ldr	r0, [pc, #356]	@ (8006d00 <_printf_i+0x238>)
 8006b9a:	230a      	movs	r3, #10
 8006b9c:	e011      	b.n	8006bc2 <_printf_i+0xfa>
 8006b9e:	6821      	ldr	r1, [r4, #0]
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	0608      	lsls	r0, r1, #24
 8006ba4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ba8:	d402      	bmi.n	8006bb0 <_printf_i+0xe8>
 8006baa:	0649      	lsls	r1, r1, #25
 8006bac:	bf48      	it	mi
 8006bae:	b2ad      	uxthmi	r5, r5
 8006bb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bb2:	4853      	ldr	r0, [pc, #332]	@ (8006d00 <_printf_i+0x238>)
 8006bb4:	6033      	str	r3, [r6, #0]
 8006bb6:	bf14      	ite	ne
 8006bb8:	230a      	movne	r3, #10
 8006bba:	2308      	moveq	r3, #8
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bc2:	6866      	ldr	r6, [r4, #4]
 8006bc4:	60a6      	str	r6, [r4, #8]
 8006bc6:	2e00      	cmp	r6, #0
 8006bc8:	bfa2      	ittt	ge
 8006bca:	6821      	ldrge	r1, [r4, #0]
 8006bcc:	f021 0104 	bicge.w	r1, r1, #4
 8006bd0:	6021      	strge	r1, [r4, #0]
 8006bd2:	b90d      	cbnz	r5, 8006bd8 <_printf_i+0x110>
 8006bd4:	2e00      	cmp	r6, #0
 8006bd6:	d04b      	beq.n	8006c70 <_printf_i+0x1a8>
 8006bd8:	4616      	mov	r6, r2
 8006bda:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bde:	fb03 5711 	mls	r7, r3, r1, r5
 8006be2:	5dc7      	ldrb	r7, [r0, r7]
 8006be4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006be8:	462f      	mov	r7, r5
 8006bea:	42bb      	cmp	r3, r7
 8006bec:	460d      	mov	r5, r1
 8006bee:	d9f4      	bls.n	8006bda <_printf_i+0x112>
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d10b      	bne.n	8006c0c <_printf_i+0x144>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	07df      	lsls	r7, r3, #31
 8006bf8:	d508      	bpl.n	8006c0c <_printf_i+0x144>
 8006bfa:	6923      	ldr	r3, [r4, #16]
 8006bfc:	6861      	ldr	r1, [r4, #4]
 8006bfe:	4299      	cmp	r1, r3
 8006c00:	bfde      	ittt	le
 8006c02:	2330      	movle	r3, #48	@ 0x30
 8006c04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c0c:	1b92      	subs	r2, r2, r6
 8006c0e:	6122      	str	r2, [r4, #16]
 8006c10:	f8cd a000 	str.w	sl, [sp]
 8006c14:	464b      	mov	r3, r9
 8006c16:	aa03      	add	r2, sp, #12
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	f7ff fee6 	bl	80069ec <_printf_common>
 8006c20:	3001      	adds	r0, #1
 8006c22:	d14a      	bne.n	8006cba <_printf_i+0x1f2>
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	b004      	add	sp, #16
 8006c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	f043 0320 	orr.w	r3, r3, #32
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	4833      	ldr	r0, [pc, #204]	@ (8006d04 <_printf_i+0x23c>)
 8006c38:	2778      	movs	r7, #120	@ 0x78
 8006c3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	6831      	ldr	r1, [r6, #0]
 8006c42:	061f      	lsls	r7, r3, #24
 8006c44:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c48:	d402      	bmi.n	8006c50 <_printf_i+0x188>
 8006c4a:	065f      	lsls	r7, r3, #25
 8006c4c:	bf48      	it	mi
 8006c4e:	b2ad      	uxthmi	r5, r5
 8006c50:	6031      	str	r1, [r6, #0]
 8006c52:	07d9      	lsls	r1, r3, #31
 8006c54:	bf44      	itt	mi
 8006c56:	f043 0320 	orrmi.w	r3, r3, #32
 8006c5a:	6023      	strmi	r3, [r4, #0]
 8006c5c:	b11d      	cbz	r5, 8006c66 <_printf_i+0x19e>
 8006c5e:	2310      	movs	r3, #16
 8006c60:	e7ac      	b.n	8006bbc <_printf_i+0xf4>
 8006c62:	4827      	ldr	r0, [pc, #156]	@ (8006d00 <_printf_i+0x238>)
 8006c64:	e7e9      	b.n	8006c3a <_printf_i+0x172>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	f023 0320 	bic.w	r3, r3, #32
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	e7f6      	b.n	8006c5e <_printf_i+0x196>
 8006c70:	4616      	mov	r6, r2
 8006c72:	e7bd      	b.n	8006bf0 <_printf_i+0x128>
 8006c74:	6833      	ldr	r3, [r6, #0]
 8006c76:	6825      	ldr	r5, [r4, #0]
 8006c78:	6961      	ldr	r1, [r4, #20]
 8006c7a:	1d18      	adds	r0, r3, #4
 8006c7c:	6030      	str	r0, [r6, #0]
 8006c7e:	062e      	lsls	r6, r5, #24
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	d501      	bpl.n	8006c88 <_printf_i+0x1c0>
 8006c84:	6019      	str	r1, [r3, #0]
 8006c86:	e002      	b.n	8006c8e <_printf_i+0x1c6>
 8006c88:	0668      	lsls	r0, r5, #25
 8006c8a:	d5fb      	bpl.n	8006c84 <_printf_i+0x1bc>
 8006c8c:	8019      	strh	r1, [r3, #0]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6123      	str	r3, [r4, #16]
 8006c92:	4616      	mov	r6, r2
 8006c94:	e7bc      	b.n	8006c10 <_printf_i+0x148>
 8006c96:	6833      	ldr	r3, [r6, #0]
 8006c98:	1d1a      	adds	r2, r3, #4
 8006c9a:	6032      	str	r2, [r6, #0]
 8006c9c:	681e      	ldr	r6, [r3, #0]
 8006c9e:	6862      	ldr	r2, [r4, #4]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7f9 fa94 	bl	80001d0 <memchr>
 8006ca8:	b108      	cbz	r0, 8006cae <_printf_i+0x1e6>
 8006caa:	1b80      	subs	r0, r0, r6
 8006cac:	6060      	str	r0, [r4, #4]
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cb8:	e7aa      	b.n	8006c10 <_printf_i+0x148>
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	4632      	mov	r2, r6
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	4640      	mov	r0, r8
 8006cc2:	47d0      	blx	sl
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d0ad      	beq.n	8006c24 <_printf_i+0x15c>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	079b      	lsls	r3, r3, #30
 8006ccc:	d413      	bmi.n	8006cf6 <_printf_i+0x22e>
 8006cce:	68e0      	ldr	r0, [r4, #12]
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	4298      	cmp	r0, r3
 8006cd4:	bfb8      	it	lt
 8006cd6:	4618      	movlt	r0, r3
 8006cd8:	e7a6      	b.n	8006c28 <_printf_i+0x160>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4632      	mov	r2, r6
 8006cde:	4649      	mov	r1, r9
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	47d0      	blx	sl
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d09d      	beq.n	8006c24 <_printf_i+0x15c>
 8006ce8:	3501      	adds	r5, #1
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	9903      	ldr	r1, [sp, #12]
 8006cee:	1a5b      	subs	r3, r3, r1
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	dcf2      	bgt.n	8006cda <_printf_i+0x212>
 8006cf4:	e7eb      	b.n	8006cce <_printf_i+0x206>
 8006cf6:	2500      	movs	r5, #0
 8006cf8:	f104 0619 	add.w	r6, r4, #25
 8006cfc:	e7f5      	b.n	8006cea <_printf_i+0x222>
 8006cfe:	bf00      	nop
 8006d00:	08008e37 	.word	0x08008e37
 8006d04:	08008e48 	.word	0x08008e48

08006d08 <std>:
 8006d08:	2300      	movs	r3, #0
 8006d0a:	b510      	push	{r4, lr}
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d16:	6083      	str	r3, [r0, #8]
 8006d18:	8181      	strh	r1, [r0, #12]
 8006d1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d1c:	81c2      	strh	r2, [r0, #14]
 8006d1e:	6183      	str	r3, [r0, #24]
 8006d20:	4619      	mov	r1, r3
 8006d22:	2208      	movs	r2, #8
 8006d24:	305c      	adds	r0, #92	@ 0x5c
 8006d26:	f000 f8f4 	bl	8006f12 <memset>
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d60 <std+0x58>)
 8006d2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <std+0x5c>)
 8006d30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <std+0x60>)
 8006d34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <std+0x64>)
 8006d38:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <std+0x68>)
 8006d3c:	6224      	str	r4, [r4, #32]
 8006d3e:	429c      	cmp	r4, r3
 8006d40:	d006      	beq.n	8006d50 <std+0x48>
 8006d42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d46:	4294      	cmp	r4, r2
 8006d48:	d002      	beq.n	8006d50 <std+0x48>
 8006d4a:	33d0      	adds	r3, #208	@ 0xd0
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	d105      	bne.n	8006d5c <std+0x54>
 8006d50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d58:	f000 b9c4 	b.w	80070e4 <__retarget_lock_init_recursive>
 8006d5c:	bd10      	pop	{r4, pc}
 8006d5e:	bf00      	nop
 8006d60:	08006e8d 	.word	0x08006e8d
 8006d64:	08006eaf 	.word	0x08006eaf
 8006d68:	08006ee7 	.word	0x08006ee7
 8006d6c:	08006f0b 	.word	0x08006f0b
 8006d70:	200003e8 	.word	0x200003e8

08006d74 <stdio_exit_handler>:
 8006d74:	4a02      	ldr	r2, [pc, #8]	@ (8006d80 <stdio_exit_handler+0xc>)
 8006d76:	4903      	ldr	r1, [pc, #12]	@ (8006d84 <stdio_exit_handler+0x10>)
 8006d78:	4803      	ldr	r0, [pc, #12]	@ (8006d88 <stdio_exit_handler+0x14>)
 8006d7a:	f000 b869 	b.w	8006e50 <_fwalk_sglue>
 8006d7e:	bf00      	nop
 8006d80:	20000018 	.word	0x20000018
 8006d84:	08008661 	.word	0x08008661
 8006d88:	20000028 	.word	0x20000028

08006d8c <cleanup_stdio>:
 8006d8c:	6841      	ldr	r1, [r0, #4]
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc0 <cleanup_stdio+0x34>)
 8006d90:	4299      	cmp	r1, r3
 8006d92:	b510      	push	{r4, lr}
 8006d94:	4604      	mov	r4, r0
 8006d96:	d001      	beq.n	8006d9c <cleanup_stdio+0x10>
 8006d98:	f001 fc62 	bl	8008660 <_fflush_r>
 8006d9c:	68a1      	ldr	r1, [r4, #8]
 8006d9e:	4b09      	ldr	r3, [pc, #36]	@ (8006dc4 <cleanup_stdio+0x38>)
 8006da0:	4299      	cmp	r1, r3
 8006da2:	d002      	beq.n	8006daa <cleanup_stdio+0x1e>
 8006da4:	4620      	mov	r0, r4
 8006da6:	f001 fc5b 	bl	8008660 <_fflush_r>
 8006daa:	68e1      	ldr	r1, [r4, #12]
 8006dac:	4b06      	ldr	r3, [pc, #24]	@ (8006dc8 <cleanup_stdio+0x3c>)
 8006dae:	4299      	cmp	r1, r3
 8006db0:	d004      	beq.n	8006dbc <cleanup_stdio+0x30>
 8006db2:	4620      	mov	r0, r4
 8006db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db8:	f001 bc52 	b.w	8008660 <_fflush_r>
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	200003e8 	.word	0x200003e8
 8006dc4:	20000450 	.word	0x20000450
 8006dc8:	200004b8 	.word	0x200004b8

08006dcc <global_stdio_init.part.0>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	4b0b      	ldr	r3, [pc, #44]	@ (8006dfc <global_stdio_init.part.0+0x30>)
 8006dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8006e00 <global_stdio_init.part.0+0x34>)
 8006dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8006e04 <global_stdio_init.part.0+0x38>)
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2104      	movs	r1, #4
 8006ddc:	f7ff ff94 	bl	8006d08 <std>
 8006de0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006de4:	2201      	movs	r2, #1
 8006de6:	2109      	movs	r1, #9
 8006de8:	f7ff ff8e 	bl	8006d08 <std>
 8006dec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006df0:	2202      	movs	r2, #2
 8006df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df6:	2112      	movs	r1, #18
 8006df8:	f7ff bf86 	b.w	8006d08 <std>
 8006dfc:	20000520 	.word	0x20000520
 8006e00:	200003e8 	.word	0x200003e8
 8006e04:	08006d75 	.word	0x08006d75

08006e08 <__sfp_lock_acquire>:
 8006e08:	4801      	ldr	r0, [pc, #4]	@ (8006e10 <__sfp_lock_acquire+0x8>)
 8006e0a:	f000 b96c 	b.w	80070e6 <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	20000529 	.word	0x20000529

08006e14 <__sfp_lock_release>:
 8006e14:	4801      	ldr	r0, [pc, #4]	@ (8006e1c <__sfp_lock_release+0x8>)
 8006e16:	f000 b967 	b.w	80070e8 <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20000529 	.word	0x20000529

08006e20 <__sinit>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	4604      	mov	r4, r0
 8006e24:	f7ff fff0 	bl	8006e08 <__sfp_lock_acquire>
 8006e28:	6a23      	ldr	r3, [r4, #32]
 8006e2a:	b11b      	cbz	r3, 8006e34 <__sinit+0x14>
 8006e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e30:	f7ff bff0 	b.w	8006e14 <__sfp_lock_release>
 8006e34:	4b04      	ldr	r3, [pc, #16]	@ (8006e48 <__sinit+0x28>)
 8006e36:	6223      	str	r3, [r4, #32]
 8006e38:	4b04      	ldr	r3, [pc, #16]	@ (8006e4c <__sinit+0x2c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f5      	bne.n	8006e2c <__sinit+0xc>
 8006e40:	f7ff ffc4 	bl	8006dcc <global_stdio_init.part.0>
 8006e44:	e7f2      	b.n	8006e2c <__sinit+0xc>
 8006e46:	bf00      	nop
 8006e48:	08006d8d 	.word	0x08006d8d
 8006e4c:	20000520 	.word	0x20000520

08006e50 <_fwalk_sglue>:
 8006e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e54:	4607      	mov	r7, r0
 8006e56:	4688      	mov	r8, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e60:	f1b9 0901 	subs.w	r9, r9, #1
 8006e64:	d505      	bpl.n	8006e72 <_fwalk_sglue+0x22>
 8006e66:	6824      	ldr	r4, [r4, #0]
 8006e68:	2c00      	cmp	r4, #0
 8006e6a:	d1f7      	bne.n	8006e5c <_fwalk_sglue+0xc>
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d907      	bls.n	8006e88 <_fwalk_sglue+0x38>
 8006e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	d003      	beq.n	8006e88 <_fwalk_sglue+0x38>
 8006e80:	4629      	mov	r1, r5
 8006e82:	4638      	mov	r0, r7
 8006e84:	47c0      	blx	r8
 8006e86:	4306      	orrs	r6, r0
 8006e88:	3568      	adds	r5, #104	@ 0x68
 8006e8a:	e7e9      	b.n	8006e60 <_fwalk_sglue+0x10>

08006e8c <__sread>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	460c      	mov	r4, r1
 8006e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e94:	f000 f8c8 	bl	8007028 <_read_r>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	bfab      	itete	ge
 8006e9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006ea0:	181b      	addge	r3, r3, r0
 8006ea2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ea6:	bfac      	ite	ge
 8006ea8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006eaa:	81a3      	strhlt	r3, [r4, #12]
 8006eac:	bd10      	pop	{r4, pc}

08006eae <__swrite>:
 8006eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb2:	461f      	mov	r7, r3
 8006eb4:	898b      	ldrh	r3, [r1, #12]
 8006eb6:	05db      	lsls	r3, r3, #23
 8006eb8:	4605      	mov	r5, r0
 8006eba:	460c      	mov	r4, r1
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	d505      	bpl.n	8006ecc <__swrite+0x1e>
 8006ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f000 f89c 	bl	8007004 <_lseek_r>
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ed6:	81a3      	strh	r3, [r4, #12]
 8006ed8:	4632      	mov	r2, r6
 8006eda:	463b      	mov	r3, r7
 8006edc:	4628      	mov	r0, r5
 8006ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee2:	f000 b8c3 	b.w	800706c <_write_r>

08006ee6 <__sseek>:
 8006ee6:	b510      	push	{r4, lr}
 8006ee8:	460c      	mov	r4, r1
 8006eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eee:	f000 f889 	bl	8007004 <_lseek_r>
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	bf15      	itete	ne
 8006ef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006efa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006efe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f02:	81a3      	strheq	r3, [r4, #12]
 8006f04:	bf18      	it	ne
 8006f06:	81a3      	strhne	r3, [r4, #12]
 8006f08:	bd10      	pop	{r4, pc}

08006f0a <__sclose>:
 8006f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f0e:	f000 b869 	b.w	8006fe4 <_close_r>

08006f12 <memset>:
 8006f12:	4402      	add	r2, r0
 8006f14:	4603      	mov	r3, r0
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d100      	bne.n	8006f1c <memset+0xa>
 8006f1a:	4770      	bx	lr
 8006f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f20:	e7f9      	b.n	8006f16 <memset+0x4>
	...

08006f24 <strtok>:
 8006f24:	4b16      	ldr	r3, [pc, #88]	@ (8006f80 <strtok+0x5c>)
 8006f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2a:	681f      	ldr	r7, [r3, #0]
 8006f2c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006f2e:	4605      	mov	r5, r0
 8006f30:	460e      	mov	r6, r1
 8006f32:	b9ec      	cbnz	r4, 8006f70 <strtok+0x4c>
 8006f34:	2050      	movs	r0, #80	@ 0x50
 8006f36:	f7ff f955 	bl	80061e4 <malloc>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6478      	str	r0, [r7, #68]	@ 0x44
 8006f3e:	b920      	cbnz	r0, 8006f4a <strtok+0x26>
 8006f40:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <strtok+0x60>)
 8006f42:	4811      	ldr	r0, [pc, #68]	@ (8006f88 <strtok+0x64>)
 8006f44:	215b      	movs	r1, #91	@ 0x5b
 8006f46:	f000 f8d1 	bl	80070ec <__assert_func>
 8006f4a:	e9c0 4400 	strd	r4, r4, [r0]
 8006f4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006f52:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006f56:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006f5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006f5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006f62:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006f66:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006f6a:	6184      	str	r4, [r0, #24]
 8006f6c:	7704      	strb	r4, [r0, #28]
 8006f6e:	6244      	str	r4, [r0, #36]	@ 0x24
 8006f70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f72:	4631      	mov	r1, r6
 8006f74:	4628      	mov	r0, r5
 8006f76:	2301      	movs	r3, #1
 8006f78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7c:	f000 b806 	b.w	8006f8c <__strtok_r>
 8006f80:	20000024 	.word	0x20000024
 8006f84:	08008e59 	.word	0x08008e59
 8006f88:	08008e70 	.word	0x08008e70

08006f8c <__strtok_r>:
 8006f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8e:	4604      	mov	r4, r0
 8006f90:	b908      	cbnz	r0, 8006f96 <__strtok_r+0xa>
 8006f92:	6814      	ldr	r4, [r2, #0]
 8006f94:	b144      	cbz	r4, 8006fa8 <__strtok_r+0x1c>
 8006f96:	4620      	mov	r0, r4
 8006f98:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006fa2:	b91e      	cbnz	r6, 8006fac <__strtok_r+0x20>
 8006fa4:	b965      	cbnz	r5, 8006fc0 <__strtok_r+0x34>
 8006fa6:	6015      	str	r5, [r2, #0]
 8006fa8:	2000      	movs	r0, #0
 8006faa:	e005      	b.n	8006fb8 <__strtok_r+0x2c>
 8006fac:	42b5      	cmp	r5, r6
 8006fae:	d1f6      	bne.n	8006f9e <__strtok_r+0x12>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f0      	bne.n	8006f96 <__strtok_r+0xa>
 8006fb4:	6014      	str	r4, [r2, #0]
 8006fb6:	7003      	strb	r3, [r0, #0]
 8006fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fba:	461c      	mov	r4, r3
 8006fbc:	e00c      	b.n	8006fd8 <__strtok_r+0x4c>
 8006fbe:	b915      	cbnz	r5, 8006fc6 <__strtok_r+0x3a>
 8006fc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fc4:	460e      	mov	r6, r1
 8006fc6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006fca:	42ab      	cmp	r3, r5
 8006fcc:	d1f7      	bne.n	8006fbe <__strtok_r+0x32>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f3      	beq.n	8006fba <__strtok_r+0x2e>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006fd8:	6014      	str	r4, [r2, #0]
 8006fda:	e7ed      	b.n	8006fb8 <__strtok_r+0x2c>

08006fdc <_localeconv_r>:
 8006fdc:	4800      	ldr	r0, [pc, #0]	@ (8006fe0 <_localeconv_r+0x4>)
 8006fde:	4770      	bx	lr
 8006fe0:	20000164 	.word	0x20000164

08006fe4 <_close_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d06      	ldr	r5, [pc, #24]	@ (8007000 <_close_r+0x1c>)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4604      	mov	r4, r0
 8006fec:	4608      	mov	r0, r1
 8006fee:	602b      	str	r3, [r5, #0]
 8006ff0:	f7fa fc92 	bl	8001918 <_close>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_close_r+0x1a>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_close_r+0x1a>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	20000524 	.word	0x20000524

08007004 <_lseek_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4d07      	ldr	r5, [pc, #28]	@ (8007024 <_lseek_r+0x20>)
 8007008:	4604      	mov	r4, r0
 800700a:	4608      	mov	r0, r1
 800700c:	4611      	mov	r1, r2
 800700e:	2200      	movs	r2, #0
 8007010:	602a      	str	r2, [r5, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	f7fa fca7 	bl	8001966 <_lseek>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_lseek_r+0x1e>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_lseek_r+0x1e>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	20000524 	.word	0x20000524

08007028 <_read_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d07      	ldr	r5, [pc, #28]	@ (8007048 <_read_r+0x20>)
 800702c:	4604      	mov	r4, r0
 800702e:	4608      	mov	r0, r1
 8007030:	4611      	mov	r1, r2
 8007032:	2200      	movs	r2, #0
 8007034:	602a      	str	r2, [r5, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f7fa fc35 	bl	80018a6 <_read>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_read_r+0x1e>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_read_r+0x1e>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20000524 	.word	0x20000524

0800704c <_sbrk_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4d06      	ldr	r5, [pc, #24]	@ (8007068 <_sbrk_r+0x1c>)
 8007050:	2300      	movs	r3, #0
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	f7fa fc92 	bl	8001980 <_sbrk>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_sbrk_r+0x1a>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_sbrk_r+0x1a>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20000524 	.word	0x20000524

0800706c <_write_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d07      	ldr	r5, [pc, #28]	@ (800708c <_write_r+0x20>)
 8007070:	4604      	mov	r4, r0
 8007072:	4608      	mov	r0, r1
 8007074:	4611      	mov	r1, r2
 8007076:	2200      	movs	r2, #0
 8007078:	602a      	str	r2, [r5, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	f7fa fc30 	bl	80018e0 <_write>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_write_r+0x1e>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_write_r+0x1e>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20000524 	.word	0x20000524

08007090 <__errno>:
 8007090:	4b01      	ldr	r3, [pc, #4]	@ (8007098 <__errno+0x8>)
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000024 	.word	0x20000024

0800709c <__libc_init_array>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	4d0d      	ldr	r5, [pc, #52]	@ (80070d4 <__libc_init_array+0x38>)
 80070a0:	4c0d      	ldr	r4, [pc, #52]	@ (80070d8 <__libc_init_array+0x3c>)
 80070a2:	1b64      	subs	r4, r4, r5
 80070a4:	10a4      	asrs	r4, r4, #2
 80070a6:	2600      	movs	r6, #0
 80070a8:	42a6      	cmp	r6, r4
 80070aa:	d109      	bne.n	80070c0 <__libc_init_array+0x24>
 80070ac:	4d0b      	ldr	r5, [pc, #44]	@ (80070dc <__libc_init_array+0x40>)
 80070ae:	4c0c      	ldr	r4, [pc, #48]	@ (80070e0 <__libc_init_array+0x44>)
 80070b0:	f001 fdf6 	bl	8008ca0 <_init>
 80070b4:	1b64      	subs	r4, r4, r5
 80070b6:	10a4      	asrs	r4, r4, #2
 80070b8:	2600      	movs	r6, #0
 80070ba:	42a6      	cmp	r6, r4
 80070bc:	d105      	bne.n	80070ca <__libc_init_array+0x2e>
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c4:	4798      	blx	r3
 80070c6:	3601      	adds	r6, #1
 80070c8:	e7ee      	b.n	80070a8 <__libc_init_array+0xc>
 80070ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ce:	4798      	blx	r3
 80070d0:	3601      	adds	r6, #1
 80070d2:	e7f2      	b.n	80070ba <__libc_init_array+0x1e>
 80070d4:	080090fc 	.word	0x080090fc
 80070d8:	080090fc 	.word	0x080090fc
 80070dc:	080090fc 	.word	0x080090fc
 80070e0:	08009100 	.word	0x08009100

080070e4 <__retarget_lock_init_recursive>:
 80070e4:	4770      	bx	lr

080070e6 <__retarget_lock_acquire_recursive>:
 80070e6:	4770      	bx	lr

080070e8 <__retarget_lock_release_recursive>:
 80070e8:	4770      	bx	lr
	...

080070ec <__assert_func>:
 80070ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ee:	4614      	mov	r4, r2
 80070f0:	461a      	mov	r2, r3
 80070f2:	4b09      	ldr	r3, [pc, #36]	@ (8007118 <__assert_func+0x2c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4605      	mov	r5, r0
 80070f8:	68d8      	ldr	r0, [r3, #12]
 80070fa:	b954      	cbnz	r4, 8007112 <__assert_func+0x26>
 80070fc:	4b07      	ldr	r3, [pc, #28]	@ (800711c <__assert_func+0x30>)
 80070fe:	461c      	mov	r4, r3
 8007100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007104:	9100      	str	r1, [sp, #0]
 8007106:	462b      	mov	r3, r5
 8007108:	4905      	ldr	r1, [pc, #20]	@ (8007120 <__assert_func+0x34>)
 800710a:	f001 fad1 	bl	80086b0 <fiprintf>
 800710e:	f001 faef 	bl	80086f0 <abort>
 8007112:	4b04      	ldr	r3, [pc, #16]	@ (8007124 <__assert_func+0x38>)
 8007114:	e7f4      	b.n	8007100 <__assert_func+0x14>
 8007116:	bf00      	nop
 8007118:	20000024 	.word	0x20000024
 800711c:	08008f05 	.word	0x08008f05
 8007120:	08008ed7 	.word	0x08008ed7
 8007124:	08008eca 	.word	0x08008eca

08007128 <quorem>:
 8007128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	6903      	ldr	r3, [r0, #16]
 800712e:	690c      	ldr	r4, [r1, #16]
 8007130:	42a3      	cmp	r3, r4
 8007132:	4607      	mov	r7, r0
 8007134:	db7e      	blt.n	8007234 <quorem+0x10c>
 8007136:	3c01      	subs	r4, #1
 8007138:	f101 0814 	add.w	r8, r1, #20
 800713c:	00a3      	lsls	r3, r4, #2
 800713e:	f100 0514 	add.w	r5, r0, #20
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800714e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007152:	3301      	adds	r3, #1
 8007154:	429a      	cmp	r2, r3
 8007156:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800715a:	fbb2 f6f3 	udiv	r6, r2, r3
 800715e:	d32e      	bcc.n	80071be <quorem+0x96>
 8007160:	f04f 0a00 	mov.w	sl, #0
 8007164:	46c4      	mov	ip, r8
 8007166:	46ae      	mov	lr, r5
 8007168:	46d3      	mov	fp, sl
 800716a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800716e:	b298      	uxth	r0, r3
 8007170:	fb06 a000 	mla	r0, r6, r0, sl
 8007174:	0c02      	lsrs	r2, r0, #16
 8007176:	0c1b      	lsrs	r3, r3, #16
 8007178:	fb06 2303 	mla	r3, r6, r3, r2
 800717c:	f8de 2000 	ldr.w	r2, [lr]
 8007180:	b280      	uxth	r0, r0
 8007182:	b292      	uxth	r2, r2
 8007184:	1a12      	subs	r2, r2, r0
 8007186:	445a      	add	r2, fp
 8007188:	f8de 0000 	ldr.w	r0, [lr]
 800718c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007190:	b29b      	uxth	r3, r3
 8007192:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007196:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800719a:	b292      	uxth	r2, r2
 800719c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071a0:	45e1      	cmp	r9, ip
 80071a2:	f84e 2b04 	str.w	r2, [lr], #4
 80071a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071aa:	d2de      	bcs.n	800716a <quorem+0x42>
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	58eb      	ldr	r3, [r5, r3]
 80071b0:	b92b      	cbnz	r3, 80071be <quorem+0x96>
 80071b2:	9b01      	ldr	r3, [sp, #4]
 80071b4:	3b04      	subs	r3, #4
 80071b6:	429d      	cmp	r5, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	d32f      	bcc.n	800721c <quorem+0xf4>
 80071bc:	613c      	str	r4, [r7, #16]
 80071be:	4638      	mov	r0, r7
 80071c0:	f001 f8c2 	bl	8008348 <__mcmp>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	db25      	blt.n	8007214 <quorem+0xec>
 80071c8:	4629      	mov	r1, r5
 80071ca:	2000      	movs	r0, #0
 80071cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80071d0:	f8d1 c000 	ldr.w	ip, [r1]
 80071d4:	fa1f fe82 	uxth.w	lr, r2
 80071d8:	fa1f f38c 	uxth.w	r3, ip
 80071dc:	eba3 030e 	sub.w	r3, r3, lr
 80071e0:	4403      	add	r3, r0
 80071e2:	0c12      	lsrs	r2, r2, #16
 80071e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071f2:	45c1      	cmp	r9, r8
 80071f4:	f841 3b04 	str.w	r3, [r1], #4
 80071f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071fc:	d2e6      	bcs.n	80071cc <quorem+0xa4>
 80071fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007206:	b922      	cbnz	r2, 8007212 <quorem+0xea>
 8007208:	3b04      	subs	r3, #4
 800720a:	429d      	cmp	r5, r3
 800720c:	461a      	mov	r2, r3
 800720e:	d30b      	bcc.n	8007228 <quorem+0x100>
 8007210:	613c      	str	r4, [r7, #16]
 8007212:	3601      	adds	r6, #1
 8007214:	4630      	mov	r0, r6
 8007216:	b003      	add	sp, #12
 8007218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	3b04      	subs	r3, #4
 8007220:	2a00      	cmp	r2, #0
 8007222:	d1cb      	bne.n	80071bc <quorem+0x94>
 8007224:	3c01      	subs	r4, #1
 8007226:	e7c6      	b.n	80071b6 <quorem+0x8e>
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	3b04      	subs	r3, #4
 800722c:	2a00      	cmp	r2, #0
 800722e:	d1ef      	bne.n	8007210 <quorem+0xe8>
 8007230:	3c01      	subs	r4, #1
 8007232:	e7ea      	b.n	800720a <quorem+0xe2>
 8007234:	2000      	movs	r0, #0
 8007236:	e7ee      	b.n	8007216 <quorem+0xee>

08007238 <_dtoa_r>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	69c7      	ldr	r7, [r0, #28]
 800723e:	b099      	sub	sp, #100	@ 0x64
 8007240:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007244:	ec55 4b10 	vmov	r4, r5, d0
 8007248:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800724a:	9109      	str	r1, [sp, #36]	@ 0x24
 800724c:	4683      	mov	fp, r0
 800724e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007250:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007252:	b97f      	cbnz	r7, 8007274 <_dtoa_r+0x3c>
 8007254:	2010      	movs	r0, #16
 8007256:	f7fe ffc5 	bl	80061e4 <malloc>
 800725a:	4602      	mov	r2, r0
 800725c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007260:	b920      	cbnz	r0, 800726c <_dtoa_r+0x34>
 8007262:	4ba7      	ldr	r3, [pc, #668]	@ (8007500 <_dtoa_r+0x2c8>)
 8007264:	21ef      	movs	r1, #239	@ 0xef
 8007266:	48a7      	ldr	r0, [pc, #668]	@ (8007504 <_dtoa_r+0x2cc>)
 8007268:	f7ff ff40 	bl	80070ec <__assert_func>
 800726c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007270:	6007      	str	r7, [r0, #0]
 8007272:	60c7      	str	r7, [r0, #12]
 8007274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	b159      	cbz	r1, 8007294 <_dtoa_r+0x5c>
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	604a      	str	r2, [r1, #4]
 8007280:	2301      	movs	r3, #1
 8007282:	4093      	lsls	r3, r2
 8007284:	608b      	str	r3, [r1, #8]
 8007286:	4658      	mov	r0, fp
 8007288:	f000 fe24 	bl	8007ed4 <_Bfree>
 800728c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	1e2b      	subs	r3, r5, #0
 8007296:	bfb9      	ittee	lt
 8007298:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800729c:	9303      	strlt	r3, [sp, #12]
 800729e:	2300      	movge	r3, #0
 80072a0:	6033      	strge	r3, [r6, #0]
 80072a2:	9f03      	ldr	r7, [sp, #12]
 80072a4:	4b98      	ldr	r3, [pc, #608]	@ (8007508 <_dtoa_r+0x2d0>)
 80072a6:	bfbc      	itt	lt
 80072a8:	2201      	movlt	r2, #1
 80072aa:	6032      	strlt	r2, [r6, #0]
 80072ac:	43bb      	bics	r3, r7
 80072ae:	d112      	bne.n	80072d6 <_dtoa_r+0x9e>
 80072b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072bc:	4323      	orrs	r3, r4
 80072be:	f000 854d 	beq.w	8007d5c <_dtoa_r+0xb24>
 80072c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800751c <_dtoa_r+0x2e4>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 854f 	beq.w	8007d6c <_dtoa_r+0xb34>
 80072ce:	f10a 0303 	add.w	r3, sl, #3
 80072d2:	f000 bd49 	b.w	8007d68 <_dtoa_r+0xb30>
 80072d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072da:	2200      	movs	r2, #0
 80072dc:	ec51 0b17 	vmov	r0, r1, d7
 80072e0:	2300      	movs	r3, #0
 80072e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072e6:	f7f9 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ea:	4680      	mov	r8, r0
 80072ec:	b158      	cbz	r0, 8007306 <_dtoa_r+0xce>
 80072ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072f0:	2301      	movs	r3, #1
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072f6:	b113      	cbz	r3, 80072fe <_dtoa_r+0xc6>
 80072f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072fa:	4b84      	ldr	r3, [pc, #528]	@ (800750c <_dtoa_r+0x2d4>)
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007520 <_dtoa_r+0x2e8>
 8007302:	f000 bd33 	b.w	8007d6c <_dtoa_r+0xb34>
 8007306:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800730a:	aa16      	add	r2, sp, #88	@ 0x58
 800730c:	a917      	add	r1, sp, #92	@ 0x5c
 800730e:	4658      	mov	r0, fp
 8007310:	f001 f8ca 	bl	80084a8 <__d2b>
 8007314:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007318:	4681      	mov	r9, r0
 800731a:	2e00      	cmp	r6, #0
 800731c:	d077      	beq.n	800740e <_dtoa_r+0x1d6>
 800731e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007320:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800732c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007330:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007334:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007338:	4619      	mov	r1, r3
 800733a:	2200      	movs	r2, #0
 800733c:	4b74      	ldr	r3, [pc, #464]	@ (8007510 <_dtoa_r+0x2d8>)
 800733e:	f7f8 ffa3 	bl	8000288 <__aeabi_dsub>
 8007342:	a369      	add	r3, pc, #420	@ (adr r3, 80074e8 <_dtoa_r+0x2b0>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f7f9 f956 	bl	80005f8 <__aeabi_dmul>
 800734c:	a368      	add	r3, pc, #416	@ (adr r3, 80074f0 <_dtoa_r+0x2b8>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f7f8 ff9b 	bl	800028c <__adddf3>
 8007356:	4604      	mov	r4, r0
 8007358:	4630      	mov	r0, r6
 800735a:	460d      	mov	r5, r1
 800735c:	f7f9 f8e2 	bl	8000524 <__aeabi_i2d>
 8007360:	a365      	add	r3, pc, #404	@ (adr r3, 80074f8 <_dtoa_r+0x2c0>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f7f9 f947 	bl	80005f8 <__aeabi_dmul>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4620      	mov	r0, r4
 8007370:	4629      	mov	r1, r5
 8007372:	f7f8 ff8b 	bl	800028c <__adddf3>
 8007376:	4604      	mov	r4, r0
 8007378:	460d      	mov	r5, r1
 800737a:	f7f9 fbed 	bl	8000b58 <__aeabi_d2iz>
 800737e:	2200      	movs	r2, #0
 8007380:	4607      	mov	r7, r0
 8007382:	2300      	movs	r3, #0
 8007384:	4620      	mov	r0, r4
 8007386:	4629      	mov	r1, r5
 8007388:	f7f9 fba8 	bl	8000adc <__aeabi_dcmplt>
 800738c:	b140      	cbz	r0, 80073a0 <_dtoa_r+0x168>
 800738e:	4638      	mov	r0, r7
 8007390:	f7f9 f8c8 	bl	8000524 <__aeabi_i2d>
 8007394:	4622      	mov	r2, r4
 8007396:	462b      	mov	r3, r5
 8007398:	f7f9 fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800739c:	b900      	cbnz	r0, 80073a0 <_dtoa_r+0x168>
 800739e:	3f01      	subs	r7, #1
 80073a0:	2f16      	cmp	r7, #22
 80073a2:	d851      	bhi.n	8007448 <_dtoa_r+0x210>
 80073a4:	4b5b      	ldr	r3, [pc, #364]	@ (8007514 <_dtoa_r+0x2dc>)
 80073a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073b2:	f7f9 fb93 	bl	8000adc <__aeabi_dcmplt>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d048      	beq.n	800744c <_dtoa_r+0x214>
 80073ba:	3f01      	subs	r7, #1
 80073bc:	2300      	movs	r3, #0
 80073be:	9312      	str	r3, [sp, #72]	@ 0x48
 80073c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073c2:	1b9b      	subs	r3, r3, r6
 80073c4:	1e5a      	subs	r2, r3, #1
 80073c6:	bf44      	itt	mi
 80073c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80073cc:	2300      	movmi	r3, #0
 80073ce:	9208      	str	r2, [sp, #32]
 80073d0:	bf54      	ite	pl
 80073d2:	f04f 0800 	movpl.w	r8, #0
 80073d6:	9308      	strmi	r3, [sp, #32]
 80073d8:	2f00      	cmp	r7, #0
 80073da:	db39      	blt.n	8007450 <_dtoa_r+0x218>
 80073dc:	9b08      	ldr	r3, [sp, #32]
 80073de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073e0:	443b      	add	r3, r7
 80073e2:	9308      	str	r3, [sp, #32]
 80073e4:	2300      	movs	r3, #0
 80073e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ea:	2b09      	cmp	r3, #9
 80073ec:	d864      	bhi.n	80074b8 <_dtoa_r+0x280>
 80073ee:	2b05      	cmp	r3, #5
 80073f0:	bfc4      	itt	gt
 80073f2:	3b04      	subgt	r3, #4
 80073f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f8:	f1a3 0302 	sub.w	r3, r3, #2
 80073fc:	bfcc      	ite	gt
 80073fe:	2400      	movgt	r4, #0
 8007400:	2401      	movle	r4, #1
 8007402:	2b03      	cmp	r3, #3
 8007404:	d863      	bhi.n	80074ce <_dtoa_r+0x296>
 8007406:	e8df f003 	tbb	[pc, r3]
 800740a:	372a      	.short	0x372a
 800740c:	5535      	.short	0x5535
 800740e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007412:	441e      	add	r6, r3
 8007414:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007418:	2b20      	cmp	r3, #32
 800741a:	bfc1      	itttt	gt
 800741c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007420:	409f      	lslgt	r7, r3
 8007422:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007426:	fa24 f303 	lsrgt.w	r3, r4, r3
 800742a:	bfd6      	itet	le
 800742c:	f1c3 0320 	rsble	r3, r3, #32
 8007430:	ea47 0003 	orrgt.w	r0, r7, r3
 8007434:	fa04 f003 	lslle.w	r0, r4, r3
 8007438:	f7f9 f864 	bl	8000504 <__aeabi_ui2d>
 800743c:	2201      	movs	r2, #1
 800743e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007442:	3e01      	subs	r6, #1
 8007444:	9214      	str	r2, [sp, #80]	@ 0x50
 8007446:	e777      	b.n	8007338 <_dtoa_r+0x100>
 8007448:	2301      	movs	r3, #1
 800744a:	e7b8      	b.n	80073be <_dtoa_r+0x186>
 800744c:	9012      	str	r0, [sp, #72]	@ 0x48
 800744e:	e7b7      	b.n	80073c0 <_dtoa_r+0x188>
 8007450:	427b      	negs	r3, r7
 8007452:	930a      	str	r3, [sp, #40]	@ 0x28
 8007454:	2300      	movs	r3, #0
 8007456:	eba8 0807 	sub.w	r8, r8, r7
 800745a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800745c:	e7c4      	b.n	80073e8 <_dtoa_r+0x1b0>
 800745e:	2300      	movs	r3, #0
 8007460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007464:	2b00      	cmp	r3, #0
 8007466:	dc35      	bgt.n	80074d4 <_dtoa_r+0x29c>
 8007468:	2301      	movs	r3, #1
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	9307      	str	r3, [sp, #28]
 800746e:	461a      	mov	r2, r3
 8007470:	920e      	str	r2, [sp, #56]	@ 0x38
 8007472:	e00b      	b.n	800748c <_dtoa_r+0x254>
 8007474:	2301      	movs	r3, #1
 8007476:	e7f3      	b.n	8007460 <_dtoa_r+0x228>
 8007478:	2300      	movs	r3, #0
 800747a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800747c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	3301      	adds	r3, #1
 8007484:	2b01      	cmp	r3, #1
 8007486:	9307      	str	r3, [sp, #28]
 8007488:	bfb8      	it	lt
 800748a:	2301      	movlt	r3, #1
 800748c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007490:	2100      	movs	r1, #0
 8007492:	2204      	movs	r2, #4
 8007494:	f102 0514 	add.w	r5, r2, #20
 8007498:	429d      	cmp	r5, r3
 800749a:	d91f      	bls.n	80074dc <_dtoa_r+0x2a4>
 800749c:	6041      	str	r1, [r0, #4]
 800749e:	4658      	mov	r0, fp
 80074a0:	f000 fcd8 	bl	8007e54 <_Balloc>
 80074a4:	4682      	mov	sl, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d13c      	bne.n	8007524 <_dtoa_r+0x2ec>
 80074aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007518 <_dtoa_r+0x2e0>)
 80074ac:	4602      	mov	r2, r0
 80074ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80074b2:	e6d8      	b.n	8007266 <_dtoa_r+0x2e>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e7e0      	b.n	800747a <_dtoa_r+0x242>
 80074b8:	2401      	movs	r4, #1
 80074ba:	2300      	movs	r3, #0
 80074bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074c0:	f04f 33ff 	mov.w	r3, #4294967295
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	9307      	str	r3, [sp, #28]
 80074c8:	2200      	movs	r2, #0
 80074ca:	2312      	movs	r3, #18
 80074cc:	e7d0      	b.n	8007470 <_dtoa_r+0x238>
 80074ce:	2301      	movs	r3, #1
 80074d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074d2:	e7f5      	b.n	80074c0 <_dtoa_r+0x288>
 80074d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	9307      	str	r3, [sp, #28]
 80074da:	e7d7      	b.n	800748c <_dtoa_r+0x254>
 80074dc:	3101      	adds	r1, #1
 80074de:	0052      	lsls	r2, r2, #1
 80074e0:	e7d8      	b.n	8007494 <_dtoa_r+0x25c>
 80074e2:	bf00      	nop
 80074e4:	f3af 8000 	nop.w
 80074e8:	636f4361 	.word	0x636f4361
 80074ec:	3fd287a7 	.word	0x3fd287a7
 80074f0:	8b60c8b3 	.word	0x8b60c8b3
 80074f4:	3fc68a28 	.word	0x3fc68a28
 80074f8:	509f79fb 	.word	0x509f79fb
 80074fc:	3fd34413 	.word	0x3fd34413
 8007500:	08008e59 	.word	0x08008e59
 8007504:	08008f13 	.word	0x08008f13
 8007508:	7ff00000 	.word	0x7ff00000
 800750c:	08008e36 	.word	0x08008e36
 8007510:	3ff80000 	.word	0x3ff80000
 8007514:	08009010 	.word	0x08009010
 8007518:	08008f6b 	.word	0x08008f6b
 800751c:	08008f0f 	.word	0x08008f0f
 8007520:	08008e35 	.word	0x08008e35
 8007524:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007528:	6018      	str	r0, [r3, #0]
 800752a:	9b07      	ldr	r3, [sp, #28]
 800752c:	2b0e      	cmp	r3, #14
 800752e:	f200 80a4 	bhi.w	800767a <_dtoa_r+0x442>
 8007532:	2c00      	cmp	r4, #0
 8007534:	f000 80a1 	beq.w	800767a <_dtoa_r+0x442>
 8007538:	2f00      	cmp	r7, #0
 800753a:	dd33      	ble.n	80075a4 <_dtoa_r+0x36c>
 800753c:	4bad      	ldr	r3, [pc, #692]	@ (80077f4 <_dtoa_r+0x5bc>)
 800753e:	f007 020f 	and.w	r2, r7, #15
 8007542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007546:	ed93 7b00 	vldr	d7, [r3]
 800754a:	05f8      	lsls	r0, r7, #23
 800754c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007550:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007554:	d516      	bpl.n	8007584 <_dtoa_r+0x34c>
 8007556:	4ba8      	ldr	r3, [pc, #672]	@ (80077f8 <_dtoa_r+0x5c0>)
 8007558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800755c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007560:	f7f9 f974 	bl	800084c <__aeabi_ddiv>
 8007564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007568:	f004 040f 	and.w	r4, r4, #15
 800756c:	2603      	movs	r6, #3
 800756e:	4da2      	ldr	r5, [pc, #648]	@ (80077f8 <_dtoa_r+0x5c0>)
 8007570:	b954      	cbnz	r4, 8007588 <_dtoa_r+0x350>
 8007572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757a:	f7f9 f967 	bl	800084c <__aeabi_ddiv>
 800757e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007582:	e028      	b.n	80075d6 <_dtoa_r+0x39e>
 8007584:	2602      	movs	r6, #2
 8007586:	e7f2      	b.n	800756e <_dtoa_r+0x336>
 8007588:	07e1      	lsls	r1, r4, #31
 800758a:	d508      	bpl.n	800759e <_dtoa_r+0x366>
 800758c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007594:	f7f9 f830 	bl	80005f8 <__aeabi_dmul>
 8007598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800759c:	3601      	adds	r6, #1
 800759e:	1064      	asrs	r4, r4, #1
 80075a0:	3508      	adds	r5, #8
 80075a2:	e7e5      	b.n	8007570 <_dtoa_r+0x338>
 80075a4:	f000 80d2 	beq.w	800774c <_dtoa_r+0x514>
 80075a8:	427c      	negs	r4, r7
 80075aa:	4b92      	ldr	r3, [pc, #584]	@ (80077f4 <_dtoa_r+0x5bc>)
 80075ac:	4d92      	ldr	r5, [pc, #584]	@ (80077f8 <_dtoa_r+0x5c0>)
 80075ae:	f004 020f 	and.w	r2, r4, #15
 80075b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075be:	f7f9 f81b 	bl	80005f8 <__aeabi_dmul>
 80075c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c6:	1124      	asrs	r4, r4, #4
 80075c8:	2300      	movs	r3, #0
 80075ca:	2602      	movs	r6, #2
 80075cc:	2c00      	cmp	r4, #0
 80075ce:	f040 80b2 	bne.w	8007736 <_dtoa_r+0x4fe>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1d3      	bne.n	800757e <_dtoa_r+0x346>
 80075d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 80b7 	beq.w	8007750 <_dtoa_r+0x518>
 80075e2:	4b86      	ldr	r3, [pc, #536]	@ (80077fc <_dtoa_r+0x5c4>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f9 fa77 	bl	8000adc <__aeabi_dcmplt>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	f000 80ae 	beq.w	8007750 <_dtoa_r+0x518>
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 80aa 	beq.w	8007750 <_dtoa_r+0x518>
 80075fc:	9b00      	ldr	r3, [sp, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	dd37      	ble.n	8007672 <_dtoa_r+0x43a>
 8007602:	1e7b      	subs	r3, r7, #1
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	4620      	mov	r0, r4
 8007608:	4b7d      	ldr	r3, [pc, #500]	@ (8007800 <_dtoa_r+0x5c8>)
 800760a:	2200      	movs	r2, #0
 800760c:	4629      	mov	r1, r5
 800760e:	f7f8 fff3 	bl	80005f8 <__aeabi_dmul>
 8007612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007616:	9c00      	ldr	r4, [sp, #0]
 8007618:	3601      	adds	r6, #1
 800761a:	4630      	mov	r0, r6
 800761c:	f7f8 ff82 	bl	8000524 <__aeabi_i2d>
 8007620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007624:	f7f8 ffe8 	bl	80005f8 <__aeabi_dmul>
 8007628:	4b76      	ldr	r3, [pc, #472]	@ (8007804 <_dtoa_r+0x5cc>)
 800762a:	2200      	movs	r2, #0
 800762c:	f7f8 fe2e 	bl	800028c <__adddf3>
 8007630:	4605      	mov	r5, r0
 8007632:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007636:	2c00      	cmp	r4, #0
 8007638:	f040 808d 	bne.w	8007756 <_dtoa_r+0x51e>
 800763c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007640:	4b71      	ldr	r3, [pc, #452]	@ (8007808 <_dtoa_r+0x5d0>)
 8007642:	2200      	movs	r2, #0
 8007644:	f7f8 fe20 	bl	8000288 <__aeabi_dsub>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007650:	462a      	mov	r2, r5
 8007652:	4633      	mov	r3, r6
 8007654:	f7f9 fa60 	bl	8000b18 <__aeabi_dcmpgt>
 8007658:	2800      	cmp	r0, #0
 800765a:	f040 828b 	bne.w	8007b74 <_dtoa_r+0x93c>
 800765e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007662:	462a      	mov	r2, r5
 8007664:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007668:	f7f9 fa38 	bl	8000adc <__aeabi_dcmplt>
 800766c:	2800      	cmp	r0, #0
 800766e:	f040 8128 	bne.w	80078c2 <_dtoa_r+0x68a>
 8007672:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007676:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800767a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800767c:	2b00      	cmp	r3, #0
 800767e:	f2c0 815a 	blt.w	8007936 <_dtoa_r+0x6fe>
 8007682:	2f0e      	cmp	r7, #14
 8007684:	f300 8157 	bgt.w	8007936 <_dtoa_r+0x6fe>
 8007688:	4b5a      	ldr	r3, [pc, #360]	@ (80077f4 <_dtoa_r+0x5bc>)
 800768a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800768e:	ed93 7b00 	vldr	d7, [r3]
 8007692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007694:	2b00      	cmp	r3, #0
 8007696:	ed8d 7b00 	vstr	d7, [sp]
 800769a:	da03      	bge.n	80076a4 <_dtoa_r+0x46c>
 800769c:	9b07      	ldr	r3, [sp, #28]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f340 8101 	ble.w	80078a6 <_dtoa_r+0x66e>
 80076a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076a8:	4656      	mov	r6, sl
 80076aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f9 f8cb 	bl	800084c <__aeabi_ddiv>
 80076b6:	f7f9 fa4f 	bl	8000b58 <__aeabi_d2iz>
 80076ba:	4680      	mov	r8, r0
 80076bc:	f7f8 ff32 	bl	8000524 <__aeabi_i2d>
 80076c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076c4:	f7f8 ff98 	bl	80005f8 <__aeabi_dmul>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076d4:	f7f8 fdd8 	bl	8000288 <__aeabi_dsub>
 80076d8:	f806 4b01 	strb.w	r4, [r6], #1
 80076dc:	9d07      	ldr	r5, [sp, #28]
 80076de:	eba6 040a 	sub.w	r4, r6, sl
 80076e2:	42a5      	cmp	r5, r4
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	f040 8117 	bne.w	800791a <_dtoa_r+0x6e2>
 80076ec:	f7f8 fdce 	bl	800028c <__adddf3>
 80076f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076f4:	4604      	mov	r4, r0
 80076f6:	460d      	mov	r5, r1
 80076f8:	f7f9 fa0e 	bl	8000b18 <__aeabi_dcmpgt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f040 80f9 	bne.w	80078f4 <_dtoa_r+0x6bc>
 8007702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007706:	4620      	mov	r0, r4
 8007708:	4629      	mov	r1, r5
 800770a:	f7f9 f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800770e:	b118      	cbz	r0, 8007718 <_dtoa_r+0x4e0>
 8007710:	f018 0f01 	tst.w	r8, #1
 8007714:	f040 80ee 	bne.w	80078f4 <_dtoa_r+0x6bc>
 8007718:	4649      	mov	r1, r9
 800771a:	4658      	mov	r0, fp
 800771c:	f000 fbda 	bl	8007ed4 <_Bfree>
 8007720:	2300      	movs	r3, #0
 8007722:	7033      	strb	r3, [r6, #0]
 8007724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007726:	3701      	adds	r7, #1
 8007728:	601f      	str	r7, [r3, #0]
 800772a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 831d 	beq.w	8007d6c <_dtoa_r+0xb34>
 8007732:	601e      	str	r6, [r3, #0]
 8007734:	e31a      	b.n	8007d6c <_dtoa_r+0xb34>
 8007736:	07e2      	lsls	r2, r4, #31
 8007738:	d505      	bpl.n	8007746 <_dtoa_r+0x50e>
 800773a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800773e:	f7f8 ff5b 	bl	80005f8 <__aeabi_dmul>
 8007742:	3601      	adds	r6, #1
 8007744:	2301      	movs	r3, #1
 8007746:	1064      	asrs	r4, r4, #1
 8007748:	3508      	adds	r5, #8
 800774a:	e73f      	b.n	80075cc <_dtoa_r+0x394>
 800774c:	2602      	movs	r6, #2
 800774e:	e742      	b.n	80075d6 <_dtoa_r+0x39e>
 8007750:	9c07      	ldr	r4, [sp, #28]
 8007752:	9704      	str	r7, [sp, #16]
 8007754:	e761      	b.n	800761a <_dtoa_r+0x3e2>
 8007756:	4b27      	ldr	r3, [pc, #156]	@ (80077f4 <_dtoa_r+0x5bc>)
 8007758:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800775a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800775e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007762:	4454      	add	r4, sl
 8007764:	2900      	cmp	r1, #0
 8007766:	d053      	beq.n	8007810 <_dtoa_r+0x5d8>
 8007768:	4928      	ldr	r1, [pc, #160]	@ (800780c <_dtoa_r+0x5d4>)
 800776a:	2000      	movs	r0, #0
 800776c:	f7f9 f86e 	bl	800084c <__aeabi_ddiv>
 8007770:	4633      	mov	r3, r6
 8007772:	462a      	mov	r2, r5
 8007774:	f7f8 fd88 	bl	8000288 <__aeabi_dsub>
 8007778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800777c:	4656      	mov	r6, sl
 800777e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007782:	f7f9 f9e9 	bl	8000b58 <__aeabi_d2iz>
 8007786:	4605      	mov	r5, r0
 8007788:	f7f8 fecc 	bl	8000524 <__aeabi_i2d>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007794:	f7f8 fd78 	bl	8000288 <__aeabi_dsub>
 8007798:	3530      	adds	r5, #48	@ 0x30
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077a2:	f806 5b01 	strb.w	r5, [r6], #1
 80077a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077aa:	f7f9 f997 	bl	8000adc <__aeabi_dcmplt>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d171      	bne.n	8007896 <_dtoa_r+0x65e>
 80077b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077b6:	4911      	ldr	r1, [pc, #68]	@ (80077fc <_dtoa_r+0x5c4>)
 80077b8:	2000      	movs	r0, #0
 80077ba:	f7f8 fd65 	bl	8000288 <__aeabi_dsub>
 80077be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077c2:	f7f9 f98b 	bl	8000adc <__aeabi_dcmplt>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f040 8095 	bne.w	80078f6 <_dtoa_r+0x6be>
 80077cc:	42a6      	cmp	r6, r4
 80077ce:	f43f af50 	beq.w	8007672 <_dtoa_r+0x43a>
 80077d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <_dtoa_r+0x5c8>)
 80077d8:	2200      	movs	r2, #0
 80077da:	f7f8 ff0d 	bl	80005f8 <__aeabi_dmul>
 80077de:	4b08      	ldr	r3, [pc, #32]	@ (8007800 <_dtoa_r+0x5c8>)
 80077e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077e4:	2200      	movs	r2, #0
 80077e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ea:	f7f8 ff05 	bl	80005f8 <__aeabi_dmul>
 80077ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077f2:	e7c4      	b.n	800777e <_dtoa_r+0x546>
 80077f4:	08009010 	.word	0x08009010
 80077f8:	08008fe8 	.word	0x08008fe8
 80077fc:	3ff00000 	.word	0x3ff00000
 8007800:	40240000 	.word	0x40240000
 8007804:	401c0000 	.word	0x401c0000
 8007808:	40140000 	.word	0x40140000
 800780c:	3fe00000 	.word	0x3fe00000
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	f7f8 fef0 	bl	80005f8 <__aeabi_dmul>
 8007818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800781c:	9415      	str	r4, [sp, #84]	@ 0x54
 800781e:	4656      	mov	r6, sl
 8007820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007824:	f7f9 f998 	bl	8000b58 <__aeabi_d2iz>
 8007828:	4605      	mov	r5, r0
 800782a:	f7f8 fe7b 	bl	8000524 <__aeabi_i2d>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007836:	f7f8 fd27 	bl	8000288 <__aeabi_dsub>
 800783a:	3530      	adds	r5, #48	@ 0x30
 800783c:	f806 5b01 	strb.w	r5, [r6], #1
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	42a6      	cmp	r6, r4
 8007846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	d124      	bne.n	800789a <_dtoa_r+0x662>
 8007850:	4bac      	ldr	r3, [pc, #688]	@ (8007b04 <_dtoa_r+0x8cc>)
 8007852:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007856:	f7f8 fd19 	bl	800028c <__adddf3>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007862:	f7f9 f959 	bl	8000b18 <__aeabi_dcmpgt>
 8007866:	2800      	cmp	r0, #0
 8007868:	d145      	bne.n	80078f6 <_dtoa_r+0x6be>
 800786a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800786e:	49a5      	ldr	r1, [pc, #660]	@ (8007b04 <_dtoa_r+0x8cc>)
 8007870:	2000      	movs	r0, #0
 8007872:	f7f8 fd09 	bl	8000288 <__aeabi_dsub>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787e:	f7f9 f92d 	bl	8000adc <__aeabi_dcmplt>
 8007882:	2800      	cmp	r0, #0
 8007884:	f43f aef5 	beq.w	8007672 <_dtoa_r+0x43a>
 8007888:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800788a:	1e73      	subs	r3, r6, #1
 800788c:	9315      	str	r3, [sp, #84]	@ 0x54
 800788e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007892:	2b30      	cmp	r3, #48	@ 0x30
 8007894:	d0f8      	beq.n	8007888 <_dtoa_r+0x650>
 8007896:	9f04      	ldr	r7, [sp, #16]
 8007898:	e73e      	b.n	8007718 <_dtoa_r+0x4e0>
 800789a:	4b9b      	ldr	r3, [pc, #620]	@ (8007b08 <_dtoa_r+0x8d0>)
 800789c:	f7f8 feac 	bl	80005f8 <__aeabi_dmul>
 80078a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078a4:	e7bc      	b.n	8007820 <_dtoa_r+0x5e8>
 80078a6:	d10c      	bne.n	80078c2 <_dtoa_r+0x68a>
 80078a8:	4b98      	ldr	r3, [pc, #608]	@ (8007b0c <_dtoa_r+0x8d4>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078b0:	f7f8 fea2 	bl	80005f8 <__aeabi_dmul>
 80078b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078b8:	f7f9 f924 	bl	8000b04 <__aeabi_dcmpge>
 80078bc:	2800      	cmp	r0, #0
 80078be:	f000 8157 	beq.w	8007b70 <_dtoa_r+0x938>
 80078c2:	2400      	movs	r4, #0
 80078c4:	4625      	mov	r5, r4
 80078c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c8:	43db      	mvns	r3, r3
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	4656      	mov	r6, sl
 80078ce:	2700      	movs	r7, #0
 80078d0:	4621      	mov	r1, r4
 80078d2:	4658      	mov	r0, fp
 80078d4:	f000 fafe 	bl	8007ed4 <_Bfree>
 80078d8:	2d00      	cmp	r5, #0
 80078da:	d0dc      	beq.n	8007896 <_dtoa_r+0x65e>
 80078dc:	b12f      	cbz	r7, 80078ea <_dtoa_r+0x6b2>
 80078de:	42af      	cmp	r7, r5
 80078e0:	d003      	beq.n	80078ea <_dtoa_r+0x6b2>
 80078e2:	4639      	mov	r1, r7
 80078e4:	4658      	mov	r0, fp
 80078e6:	f000 faf5 	bl	8007ed4 <_Bfree>
 80078ea:	4629      	mov	r1, r5
 80078ec:	4658      	mov	r0, fp
 80078ee:	f000 faf1 	bl	8007ed4 <_Bfree>
 80078f2:	e7d0      	b.n	8007896 <_dtoa_r+0x65e>
 80078f4:	9704      	str	r7, [sp, #16]
 80078f6:	4633      	mov	r3, r6
 80078f8:	461e      	mov	r6, r3
 80078fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078fe:	2a39      	cmp	r2, #57	@ 0x39
 8007900:	d107      	bne.n	8007912 <_dtoa_r+0x6da>
 8007902:	459a      	cmp	sl, r3
 8007904:	d1f8      	bne.n	80078f8 <_dtoa_r+0x6c0>
 8007906:	9a04      	ldr	r2, [sp, #16]
 8007908:	3201      	adds	r2, #1
 800790a:	9204      	str	r2, [sp, #16]
 800790c:	2230      	movs	r2, #48	@ 0x30
 800790e:	f88a 2000 	strb.w	r2, [sl]
 8007912:	781a      	ldrb	r2, [r3, #0]
 8007914:	3201      	adds	r2, #1
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	e7bd      	b.n	8007896 <_dtoa_r+0x65e>
 800791a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b08 <_dtoa_r+0x8d0>)
 800791c:	2200      	movs	r2, #0
 800791e:	f7f8 fe6b 	bl	80005f8 <__aeabi_dmul>
 8007922:	2200      	movs	r2, #0
 8007924:	2300      	movs	r3, #0
 8007926:	4604      	mov	r4, r0
 8007928:	460d      	mov	r5, r1
 800792a:	f7f9 f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800792e:	2800      	cmp	r0, #0
 8007930:	f43f aebb 	beq.w	80076aa <_dtoa_r+0x472>
 8007934:	e6f0      	b.n	8007718 <_dtoa_r+0x4e0>
 8007936:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007938:	2a00      	cmp	r2, #0
 800793a:	f000 80db 	beq.w	8007af4 <_dtoa_r+0x8bc>
 800793e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007940:	2a01      	cmp	r2, #1
 8007942:	f300 80bf 	bgt.w	8007ac4 <_dtoa_r+0x88c>
 8007946:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007948:	2a00      	cmp	r2, #0
 800794a:	f000 80b7 	beq.w	8007abc <_dtoa_r+0x884>
 800794e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007952:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007954:	4646      	mov	r6, r8
 8007956:	9a08      	ldr	r2, [sp, #32]
 8007958:	2101      	movs	r1, #1
 800795a:	441a      	add	r2, r3
 800795c:	4658      	mov	r0, fp
 800795e:	4498      	add	r8, r3
 8007960:	9208      	str	r2, [sp, #32]
 8007962:	f000 fb6b 	bl	800803c <__i2b>
 8007966:	4605      	mov	r5, r0
 8007968:	b15e      	cbz	r6, 8007982 <_dtoa_r+0x74a>
 800796a:	9b08      	ldr	r3, [sp, #32]
 800796c:	2b00      	cmp	r3, #0
 800796e:	dd08      	ble.n	8007982 <_dtoa_r+0x74a>
 8007970:	42b3      	cmp	r3, r6
 8007972:	9a08      	ldr	r2, [sp, #32]
 8007974:	bfa8      	it	ge
 8007976:	4633      	movge	r3, r6
 8007978:	eba8 0803 	sub.w	r8, r8, r3
 800797c:	1af6      	subs	r6, r6, r3
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	9308      	str	r3, [sp, #32]
 8007982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007984:	b1f3      	cbz	r3, 80079c4 <_dtoa_r+0x78c>
 8007986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 80b7 	beq.w	8007afc <_dtoa_r+0x8c4>
 800798e:	b18c      	cbz	r4, 80079b4 <_dtoa_r+0x77c>
 8007990:	4629      	mov	r1, r5
 8007992:	4622      	mov	r2, r4
 8007994:	4658      	mov	r0, fp
 8007996:	f000 fc11 	bl	80081bc <__pow5mult>
 800799a:	464a      	mov	r2, r9
 800799c:	4601      	mov	r1, r0
 800799e:	4605      	mov	r5, r0
 80079a0:	4658      	mov	r0, fp
 80079a2:	f000 fb61 	bl	8008068 <__multiply>
 80079a6:	4649      	mov	r1, r9
 80079a8:	9004      	str	r0, [sp, #16]
 80079aa:	4658      	mov	r0, fp
 80079ac:	f000 fa92 	bl	8007ed4 <_Bfree>
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	4699      	mov	r9, r3
 80079b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b6:	1b1a      	subs	r2, r3, r4
 80079b8:	d004      	beq.n	80079c4 <_dtoa_r+0x78c>
 80079ba:	4649      	mov	r1, r9
 80079bc:	4658      	mov	r0, fp
 80079be:	f000 fbfd 	bl	80081bc <__pow5mult>
 80079c2:	4681      	mov	r9, r0
 80079c4:	2101      	movs	r1, #1
 80079c6:	4658      	mov	r0, fp
 80079c8:	f000 fb38 	bl	800803c <__i2b>
 80079cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ce:	4604      	mov	r4, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 81cf 	beq.w	8007d74 <_dtoa_r+0xb3c>
 80079d6:	461a      	mov	r2, r3
 80079d8:	4601      	mov	r1, r0
 80079da:	4658      	mov	r0, fp
 80079dc:	f000 fbee 	bl	80081bc <__pow5mult>
 80079e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	4604      	mov	r4, r0
 80079e6:	f300 8095 	bgt.w	8007b14 <_dtoa_r+0x8dc>
 80079ea:	9b02      	ldr	r3, [sp, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f040 8087 	bne.w	8007b00 <_dtoa_r+0x8c8>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f040 8089 	bne.w	8007b10 <_dtoa_r+0x8d8>
 80079fe:	9b03      	ldr	r3, [sp, #12]
 8007a00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a04:	0d1b      	lsrs	r3, r3, #20
 8007a06:	051b      	lsls	r3, r3, #20
 8007a08:	b12b      	cbz	r3, 8007a16 <_dtoa_r+0x7de>
 8007a0a:	9b08      	ldr	r3, [sp, #32]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	9308      	str	r3, [sp, #32]
 8007a10:	f108 0801 	add.w	r8, r8, #1
 8007a14:	2301      	movs	r3, #1
 8007a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 81b0 	beq.w	8007d80 <_dtoa_r+0xb48>
 8007a20:	6923      	ldr	r3, [r4, #16]
 8007a22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a26:	6918      	ldr	r0, [r3, #16]
 8007a28:	f000 fabc 	bl	8007fa4 <__hi0bits>
 8007a2c:	f1c0 0020 	rsb	r0, r0, #32
 8007a30:	9b08      	ldr	r3, [sp, #32]
 8007a32:	4418      	add	r0, r3
 8007a34:	f010 001f 	ands.w	r0, r0, #31
 8007a38:	d077      	beq.n	8007b2a <_dtoa_r+0x8f2>
 8007a3a:	f1c0 0320 	rsb	r3, r0, #32
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	dd6b      	ble.n	8007b1a <_dtoa_r+0x8e2>
 8007a42:	9b08      	ldr	r3, [sp, #32]
 8007a44:	f1c0 001c 	rsb	r0, r0, #28
 8007a48:	4403      	add	r3, r0
 8007a4a:	4480      	add	r8, r0
 8007a4c:	4406      	add	r6, r0
 8007a4e:	9308      	str	r3, [sp, #32]
 8007a50:	f1b8 0f00 	cmp.w	r8, #0
 8007a54:	dd05      	ble.n	8007a62 <_dtoa_r+0x82a>
 8007a56:	4649      	mov	r1, r9
 8007a58:	4642      	mov	r2, r8
 8007a5a:	4658      	mov	r0, fp
 8007a5c:	f000 fc08 	bl	8008270 <__lshift>
 8007a60:	4681      	mov	r9, r0
 8007a62:	9b08      	ldr	r3, [sp, #32]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dd05      	ble.n	8007a74 <_dtoa_r+0x83c>
 8007a68:	4621      	mov	r1, r4
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	4658      	mov	r0, fp
 8007a6e:	f000 fbff 	bl	8008270 <__lshift>
 8007a72:	4604      	mov	r4, r0
 8007a74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d059      	beq.n	8007b2e <_dtoa_r+0x8f6>
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	4648      	mov	r0, r9
 8007a7e:	f000 fc63 	bl	8008348 <__mcmp>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	da53      	bge.n	8007b2e <_dtoa_r+0x8f6>
 8007a86:	1e7b      	subs	r3, r7, #1
 8007a88:	9304      	str	r3, [sp, #16]
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	220a      	movs	r2, #10
 8007a90:	4658      	mov	r0, fp
 8007a92:	f000 fa41 	bl	8007f18 <__multadd>
 8007a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a98:	4681      	mov	r9, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 8172 	beq.w	8007d84 <_dtoa_r+0xb4c>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	f000 fa36 	bl	8007f18 <__multadd>
 8007aac:	9b00      	ldr	r3, [sp, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	4605      	mov	r5, r0
 8007ab2:	dc67      	bgt.n	8007b84 <_dtoa_r+0x94c>
 8007ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	dc41      	bgt.n	8007b3e <_dtoa_r+0x906>
 8007aba:	e063      	b.n	8007b84 <_dtoa_r+0x94c>
 8007abc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007abe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ac2:	e746      	b.n	8007952 <_dtoa_r+0x71a>
 8007ac4:	9b07      	ldr	r3, [sp, #28]
 8007ac6:	1e5c      	subs	r4, r3, #1
 8007ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	bfbf      	itttt	lt
 8007ace:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ad0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007ad2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ad4:	1ae3      	sublt	r3, r4, r3
 8007ad6:	bfb4      	ite	lt
 8007ad8:	18d2      	addlt	r2, r2, r3
 8007ada:	1b1c      	subge	r4, r3, r4
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	bfbc      	itt	lt
 8007ae0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007ae2:	2400      	movlt	r4, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bfb5      	itete	lt
 8007ae8:	eba8 0603 	sublt.w	r6, r8, r3
 8007aec:	9b07      	ldrge	r3, [sp, #28]
 8007aee:	2300      	movlt	r3, #0
 8007af0:	4646      	movge	r6, r8
 8007af2:	e730      	b.n	8007956 <_dtoa_r+0x71e>
 8007af4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007af6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007af8:	4646      	mov	r6, r8
 8007afa:	e735      	b.n	8007968 <_dtoa_r+0x730>
 8007afc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007afe:	e75c      	b.n	80079ba <_dtoa_r+0x782>
 8007b00:	2300      	movs	r3, #0
 8007b02:	e788      	b.n	8007a16 <_dtoa_r+0x7de>
 8007b04:	3fe00000 	.word	0x3fe00000
 8007b08:	40240000 	.word	0x40240000
 8007b0c:	40140000 	.word	0x40140000
 8007b10:	9b02      	ldr	r3, [sp, #8]
 8007b12:	e780      	b.n	8007a16 <_dtoa_r+0x7de>
 8007b14:	2300      	movs	r3, #0
 8007b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b18:	e782      	b.n	8007a20 <_dtoa_r+0x7e8>
 8007b1a:	d099      	beq.n	8007a50 <_dtoa_r+0x818>
 8007b1c:	9a08      	ldr	r2, [sp, #32]
 8007b1e:	331c      	adds	r3, #28
 8007b20:	441a      	add	r2, r3
 8007b22:	4498      	add	r8, r3
 8007b24:	441e      	add	r6, r3
 8007b26:	9208      	str	r2, [sp, #32]
 8007b28:	e792      	b.n	8007a50 <_dtoa_r+0x818>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	e7f6      	b.n	8007b1c <_dtoa_r+0x8e4>
 8007b2e:	9b07      	ldr	r3, [sp, #28]
 8007b30:	9704      	str	r7, [sp, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	dc20      	bgt.n	8007b78 <_dtoa_r+0x940>
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	dd1e      	ble.n	8007b7c <_dtoa_r+0x944>
 8007b3e:	9b00      	ldr	r3, [sp, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f47f aec0 	bne.w	80078c6 <_dtoa_r+0x68e>
 8007b46:	4621      	mov	r1, r4
 8007b48:	2205      	movs	r2, #5
 8007b4a:	4658      	mov	r0, fp
 8007b4c:	f000 f9e4 	bl	8007f18 <__multadd>
 8007b50:	4601      	mov	r1, r0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4648      	mov	r0, r9
 8007b56:	f000 fbf7 	bl	8008348 <__mcmp>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f77f aeb3 	ble.w	80078c6 <_dtoa_r+0x68e>
 8007b60:	4656      	mov	r6, sl
 8007b62:	2331      	movs	r3, #49	@ 0x31
 8007b64:	f806 3b01 	strb.w	r3, [r6], #1
 8007b68:	9b04      	ldr	r3, [sp, #16]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	e6ae      	b.n	80078ce <_dtoa_r+0x696>
 8007b70:	9c07      	ldr	r4, [sp, #28]
 8007b72:	9704      	str	r7, [sp, #16]
 8007b74:	4625      	mov	r5, r4
 8007b76:	e7f3      	b.n	8007b60 <_dtoa_r+0x928>
 8007b78:	9b07      	ldr	r3, [sp, #28]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 8104 	beq.w	8007d8c <_dtoa_r+0xb54>
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	dd05      	ble.n	8007b94 <_dtoa_r+0x95c>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4632      	mov	r2, r6
 8007b8c:	4658      	mov	r0, fp
 8007b8e:	f000 fb6f 	bl	8008270 <__lshift>
 8007b92:	4605      	mov	r5, r0
 8007b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d05a      	beq.n	8007c50 <_dtoa_r+0xa18>
 8007b9a:	6869      	ldr	r1, [r5, #4]
 8007b9c:	4658      	mov	r0, fp
 8007b9e:	f000 f959 	bl	8007e54 <_Balloc>
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	b928      	cbnz	r0, 8007bb2 <_dtoa_r+0x97a>
 8007ba6:	4b84      	ldr	r3, [pc, #528]	@ (8007db8 <_dtoa_r+0xb80>)
 8007ba8:	4602      	mov	r2, r0
 8007baa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bae:	f7ff bb5a 	b.w	8007266 <_dtoa_r+0x2e>
 8007bb2:	692a      	ldr	r2, [r5, #16]
 8007bb4:	3202      	adds	r2, #2
 8007bb6:	0092      	lsls	r2, r2, #2
 8007bb8:	f105 010c 	add.w	r1, r5, #12
 8007bbc:	300c      	adds	r0, #12
 8007bbe:	f000 fd89 	bl	80086d4 <memcpy>
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4658      	mov	r0, fp
 8007bc8:	f000 fb52 	bl	8008270 <__lshift>
 8007bcc:	f10a 0301 	add.w	r3, sl, #1
 8007bd0:	9307      	str	r3, [sp, #28]
 8007bd2:	9b00      	ldr	r3, [sp, #0]
 8007bd4:	4453      	add	r3, sl
 8007bd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	462f      	mov	r7, r5
 8007be0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007be2:	4605      	mov	r5, r0
 8007be4:	9b07      	ldr	r3, [sp, #28]
 8007be6:	4621      	mov	r1, r4
 8007be8:	3b01      	subs	r3, #1
 8007bea:	4648      	mov	r0, r9
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	f7ff fa9b 	bl	8007128 <quorem>
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	9002      	str	r0, [sp, #8]
 8007bf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	f000 fba4 	bl	8008348 <__mcmp>
 8007c00:	462a      	mov	r2, r5
 8007c02:	9008      	str	r0, [sp, #32]
 8007c04:	4621      	mov	r1, r4
 8007c06:	4658      	mov	r0, fp
 8007c08:	f000 fbba 	bl	8008380 <__mdiff>
 8007c0c:	68c2      	ldr	r2, [r0, #12]
 8007c0e:	4606      	mov	r6, r0
 8007c10:	bb02      	cbnz	r2, 8007c54 <_dtoa_r+0xa1c>
 8007c12:	4601      	mov	r1, r0
 8007c14:	4648      	mov	r0, r9
 8007c16:	f000 fb97 	bl	8008348 <__mcmp>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4658      	mov	r0, fp
 8007c20:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c22:	f000 f957 	bl	8007ed4 <_Bfree>
 8007c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c2a:	9e07      	ldr	r6, [sp, #28]
 8007c2c:	ea43 0102 	orr.w	r1, r3, r2
 8007c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c32:	4319      	orrs	r1, r3
 8007c34:	d110      	bne.n	8007c58 <_dtoa_r+0xa20>
 8007c36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c3a:	d029      	beq.n	8007c90 <_dtoa_r+0xa58>
 8007c3c:	9b08      	ldr	r3, [sp, #32]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dd02      	ble.n	8007c48 <_dtoa_r+0xa10>
 8007c42:	9b02      	ldr	r3, [sp, #8]
 8007c44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c48:	9b00      	ldr	r3, [sp, #0]
 8007c4a:	f883 8000 	strb.w	r8, [r3]
 8007c4e:	e63f      	b.n	80078d0 <_dtoa_r+0x698>
 8007c50:	4628      	mov	r0, r5
 8007c52:	e7bb      	b.n	8007bcc <_dtoa_r+0x994>
 8007c54:	2201      	movs	r2, #1
 8007c56:	e7e1      	b.n	8007c1c <_dtoa_r+0x9e4>
 8007c58:	9b08      	ldr	r3, [sp, #32]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	db04      	blt.n	8007c68 <_dtoa_r+0xa30>
 8007c5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c60:	430b      	orrs	r3, r1
 8007c62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c64:	430b      	orrs	r3, r1
 8007c66:	d120      	bne.n	8007caa <_dtoa_r+0xa72>
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	dded      	ble.n	8007c48 <_dtoa_r+0xa10>
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	2201      	movs	r2, #1
 8007c70:	4658      	mov	r0, fp
 8007c72:	f000 fafd 	bl	8008270 <__lshift>
 8007c76:	4621      	mov	r1, r4
 8007c78:	4681      	mov	r9, r0
 8007c7a:	f000 fb65 	bl	8008348 <__mcmp>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	dc03      	bgt.n	8007c8a <_dtoa_r+0xa52>
 8007c82:	d1e1      	bne.n	8007c48 <_dtoa_r+0xa10>
 8007c84:	f018 0f01 	tst.w	r8, #1
 8007c88:	d0de      	beq.n	8007c48 <_dtoa_r+0xa10>
 8007c8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c8e:	d1d8      	bne.n	8007c42 <_dtoa_r+0xa0a>
 8007c90:	9a00      	ldr	r2, [sp, #0]
 8007c92:	2339      	movs	r3, #57	@ 0x39
 8007c94:	7013      	strb	r3, [r2, #0]
 8007c96:	4633      	mov	r3, r6
 8007c98:	461e      	mov	r6, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ca0:	2a39      	cmp	r2, #57	@ 0x39
 8007ca2:	d052      	beq.n	8007d4a <_dtoa_r+0xb12>
 8007ca4:	3201      	adds	r2, #1
 8007ca6:	701a      	strb	r2, [r3, #0]
 8007ca8:	e612      	b.n	80078d0 <_dtoa_r+0x698>
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	dd07      	ble.n	8007cbe <_dtoa_r+0xa86>
 8007cae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cb2:	d0ed      	beq.n	8007c90 <_dtoa_r+0xa58>
 8007cb4:	9a00      	ldr	r2, [sp, #0]
 8007cb6:	f108 0301 	add.w	r3, r8, #1
 8007cba:	7013      	strb	r3, [r2, #0]
 8007cbc:	e608      	b.n	80078d0 <_dtoa_r+0x698>
 8007cbe:	9b07      	ldr	r3, [sp, #28]
 8007cc0:	9a07      	ldr	r2, [sp, #28]
 8007cc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d028      	beq.n	8007d1e <_dtoa_r+0xae6>
 8007ccc:	4649      	mov	r1, r9
 8007cce:	2300      	movs	r3, #0
 8007cd0:	220a      	movs	r2, #10
 8007cd2:	4658      	mov	r0, fp
 8007cd4:	f000 f920 	bl	8007f18 <__multadd>
 8007cd8:	42af      	cmp	r7, r5
 8007cda:	4681      	mov	r9, r0
 8007cdc:	f04f 0300 	mov.w	r3, #0
 8007ce0:	f04f 020a 	mov.w	r2, #10
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	d107      	bne.n	8007cfa <_dtoa_r+0xac2>
 8007cea:	f000 f915 	bl	8007f18 <__multadd>
 8007cee:	4607      	mov	r7, r0
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	9b07      	ldr	r3, [sp, #28]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	9307      	str	r3, [sp, #28]
 8007cf8:	e774      	b.n	8007be4 <_dtoa_r+0x9ac>
 8007cfa:	f000 f90d 	bl	8007f18 <__multadd>
 8007cfe:	4629      	mov	r1, r5
 8007d00:	4607      	mov	r7, r0
 8007d02:	2300      	movs	r3, #0
 8007d04:	220a      	movs	r2, #10
 8007d06:	4658      	mov	r0, fp
 8007d08:	f000 f906 	bl	8007f18 <__multadd>
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	e7f0      	b.n	8007cf2 <_dtoa_r+0xaba>
 8007d10:	9b00      	ldr	r3, [sp, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bfcc      	ite	gt
 8007d16:	461e      	movgt	r6, r3
 8007d18:	2601      	movle	r6, #1
 8007d1a:	4456      	add	r6, sl
 8007d1c:	2700      	movs	r7, #0
 8007d1e:	4649      	mov	r1, r9
 8007d20:	2201      	movs	r2, #1
 8007d22:	4658      	mov	r0, fp
 8007d24:	f000 faa4 	bl	8008270 <__lshift>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4681      	mov	r9, r0
 8007d2c:	f000 fb0c 	bl	8008348 <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	dcb0      	bgt.n	8007c96 <_dtoa_r+0xa5e>
 8007d34:	d102      	bne.n	8007d3c <_dtoa_r+0xb04>
 8007d36:	f018 0f01 	tst.w	r8, #1
 8007d3a:	d1ac      	bne.n	8007c96 <_dtoa_r+0xa5e>
 8007d3c:	4633      	mov	r3, r6
 8007d3e:	461e      	mov	r6, r3
 8007d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d44:	2a30      	cmp	r2, #48	@ 0x30
 8007d46:	d0fa      	beq.n	8007d3e <_dtoa_r+0xb06>
 8007d48:	e5c2      	b.n	80078d0 <_dtoa_r+0x698>
 8007d4a:	459a      	cmp	sl, r3
 8007d4c:	d1a4      	bne.n	8007c98 <_dtoa_r+0xa60>
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	3301      	adds	r3, #1
 8007d52:	9304      	str	r3, [sp, #16]
 8007d54:	2331      	movs	r3, #49	@ 0x31
 8007d56:	f88a 3000 	strb.w	r3, [sl]
 8007d5a:	e5b9      	b.n	80078d0 <_dtoa_r+0x698>
 8007d5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007dbc <_dtoa_r+0xb84>
 8007d62:	b11b      	cbz	r3, 8007d6c <_dtoa_r+0xb34>
 8007d64:	f10a 0308 	add.w	r3, sl, #8
 8007d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	4650      	mov	r0, sl
 8007d6e:	b019      	add	sp, #100	@ 0x64
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	f77f ae37 	ble.w	80079ea <_dtoa_r+0x7b2>
 8007d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d80:	2001      	movs	r0, #1
 8007d82:	e655      	b.n	8007a30 <_dtoa_r+0x7f8>
 8007d84:	9b00      	ldr	r3, [sp, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f77f aed6 	ble.w	8007b38 <_dtoa_r+0x900>
 8007d8c:	4656      	mov	r6, sl
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4648      	mov	r0, r9
 8007d92:	f7ff f9c9 	bl	8007128 <quorem>
 8007d96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d9a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d9e:	9b00      	ldr	r3, [sp, #0]
 8007da0:	eba6 020a 	sub.w	r2, r6, sl
 8007da4:	4293      	cmp	r3, r2
 8007da6:	ddb3      	ble.n	8007d10 <_dtoa_r+0xad8>
 8007da8:	4649      	mov	r1, r9
 8007daa:	2300      	movs	r3, #0
 8007dac:	220a      	movs	r2, #10
 8007dae:	4658      	mov	r0, fp
 8007db0:	f000 f8b2 	bl	8007f18 <__multadd>
 8007db4:	4681      	mov	r9, r0
 8007db6:	e7ea      	b.n	8007d8e <_dtoa_r+0xb56>
 8007db8:	08008f6b 	.word	0x08008f6b
 8007dbc:	08008f06 	.word	0x08008f06

08007dc0 <_free_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	d041      	beq.n	8007e4c <_free_r+0x8c>
 8007dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dcc:	1f0c      	subs	r4, r1, #4
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bfb8      	it	lt
 8007dd2:	18e4      	addlt	r4, r4, r3
 8007dd4:	f7fe fab0 	bl	8006338 <__malloc_lock>
 8007dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e50 <_free_r+0x90>)
 8007dda:	6813      	ldr	r3, [r2, #0]
 8007ddc:	b933      	cbnz	r3, 8007dec <_free_r+0x2c>
 8007dde:	6063      	str	r3, [r4, #4]
 8007de0:	6014      	str	r4, [r2, #0]
 8007de2:	4628      	mov	r0, r5
 8007de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007de8:	f7fe baac 	b.w	8006344 <__malloc_unlock>
 8007dec:	42a3      	cmp	r3, r4
 8007dee:	d908      	bls.n	8007e02 <_free_r+0x42>
 8007df0:	6820      	ldr	r0, [r4, #0]
 8007df2:	1821      	adds	r1, r4, r0
 8007df4:	428b      	cmp	r3, r1
 8007df6:	bf01      	itttt	eq
 8007df8:	6819      	ldreq	r1, [r3, #0]
 8007dfa:	685b      	ldreq	r3, [r3, #4]
 8007dfc:	1809      	addeq	r1, r1, r0
 8007dfe:	6021      	streq	r1, [r4, #0]
 8007e00:	e7ed      	b.n	8007dde <_free_r+0x1e>
 8007e02:	461a      	mov	r2, r3
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	b10b      	cbz	r3, 8007e0c <_free_r+0x4c>
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	d9fa      	bls.n	8007e02 <_free_r+0x42>
 8007e0c:	6811      	ldr	r1, [r2, #0]
 8007e0e:	1850      	adds	r0, r2, r1
 8007e10:	42a0      	cmp	r0, r4
 8007e12:	d10b      	bne.n	8007e2c <_free_r+0x6c>
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	4401      	add	r1, r0
 8007e18:	1850      	adds	r0, r2, r1
 8007e1a:	4283      	cmp	r3, r0
 8007e1c:	6011      	str	r1, [r2, #0]
 8007e1e:	d1e0      	bne.n	8007de2 <_free_r+0x22>
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	6053      	str	r3, [r2, #4]
 8007e26:	4408      	add	r0, r1
 8007e28:	6010      	str	r0, [r2, #0]
 8007e2a:	e7da      	b.n	8007de2 <_free_r+0x22>
 8007e2c:	d902      	bls.n	8007e34 <_free_r+0x74>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	602b      	str	r3, [r5, #0]
 8007e32:	e7d6      	b.n	8007de2 <_free_r+0x22>
 8007e34:	6820      	ldr	r0, [r4, #0]
 8007e36:	1821      	adds	r1, r4, r0
 8007e38:	428b      	cmp	r3, r1
 8007e3a:	bf04      	itt	eq
 8007e3c:	6819      	ldreq	r1, [r3, #0]
 8007e3e:	685b      	ldreq	r3, [r3, #4]
 8007e40:	6063      	str	r3, [r4, #4]
 8007e42:	bf04      	itt	eq
 8007e44:	1809      	addeq	r1, r1, r0
 8007e46:	6021      	streq	r1, [r4, #0]
 8007e48:	6054      	str	r4, [r2, #4]
 8007e4a:	e7ca      	b.n	8007de2 <_free_r+0x22>
 8007e4c:	bd38      	pop	{r3, r4, r5, pc}
 8007e4e:	bf00      	nop
 8007e50:	200003e4 	.word	0x200003e4

08007e54 <_Balloc>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	69c6      	ldr	r6, [r0, #28]
 8007e58:	4604      	mov	r4, r0
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	b976      	cbnz	r6, 8007e7c <_Balloc+0x28>
 8007e5e:	2010      	movs	r0, #16
 8007e60:	f7fe f9c0 	bl	80061e4 <malloc>
 8007e64:	4602      	mov	r2, r0
 8007e66:	61e0      	str	r0, [r4, #28]
 8007e68:	b920      	cbnz	r0, 8007e74 <_Balloc+0x20>
 8007e6a:	4b18      	ldr	r3, [pc, #96]	@ (8007ecc <_Balloc+0x78>)
 8007e6c:	4818      	ldr	r0, [pc, #96]	@ (8007ed0 <_Balloc+0x7c>)
 8007e6e:	216b      	movs	r1, #107	@ 0x6b
 8007e70:	f7ff f93c 	bl	80070ec <__assert_func>
 8007e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e78:	6006      	str	r6, [r0, #0]
 8007e7a:	60c6      	str	r6, [r0, #12]
 8007e7c:	69e6      	ldr	r6, [r4, #28]
 8007e7e:	68f3      	ldr	r3, [r6, #12]
 8007e80:	b183      	cbz	r3, 8007ea4 <_Balloc+0x50>
 8007e82:	69e3      	ldr	r3, [r4, #28]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e8a:	b9b8      	cbnz	r0, 8007ebc <_Balloc+0x68>
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007e92:	1d72      	adds	r2, r6, #5
 8007e94:	0092      	lsls	r2, r2, #2
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 fc31 	bl	80086fe <_calloc_r>
 8007e9c:	b160      	cbz	r0, 8007eb8 <_Balloc+0x64>
 8007e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ea2:	e00e      	b.n	8007ec2 <_Balloc+0x6e>
 8007ea4:	2221      	movs	r2, #33	@ 0x21
 8007ea6:	2104      	movs	r1, #4
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 fc28 	bl	80086fe <_calloc_r>
 8007eae:	69e3      	ldr	r3, [r4, #28]
 8007eb0:	60f0      	str	r0, [r6, #12]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e4      	bne.n	8007e82 <_Balloc+0x2e>
 8007eb8:	2000      	movs	r0, #0
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	6802      	ldr	r2, [r0, #0]
 8007ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ec8:	e7f7      	b.n	8007eba <_Balloc+0x66>
 8007eca:	bf00      	nop
 8007ecc:	08008e59 	.word	0x08008e59
 8007ed0:	08008f7c 	.word	0x08008f7c

08007ed4 <_Bfree>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	69c6      	ldr	r6, [r0, #28]
 8007ed8:	4605      	mov	r5, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	b976      	cbnz	r6, 8007efc <_Bfree+0x28>
 8007ede:	2010      	movs	r0, #16
 8007ee0:	f7fe f980 	bl	80061e4 <malloc>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	61e8      	str	r0, [r5, #28]
 8007ee8:	b920      	cbnz	r0, 8007ef4 <_Bfree+0x20>
 8007eea:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <_Bfree+0x3c>)
 8007eec:	4809      	ldr	r0, [pc, #36]	@ (8007f14 <_Bfree+0x40>)
 8007eee:	218f      	movs	r1, #143	@ 0x8f
 8007ef0:	f7ff f8fc 	bl	80070ec <__assert_func>
 8007ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ef8:	6006      	str	r6, [r0, #0]
 8007efa:	60c6      	str	r6, [r0, #12]
 8007efc:	b13c      	cbz	r4, 8007f0e <_Bfree+0x3a>
 8007efe:	69eb      	ldr	r3, [r5, #28]
 8007f00:	6862      	ldr	r2, [r4, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f08:	6021      	str	r1, [r4, #0]
 8007f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	08008e59 	.word	0x08008e59
 8007f14:	08008f7c 	.word	0x08008f7c

08007f18 <__multadd>:
 8007f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1c:	690d      	ldr	r5, [r1, #16]
 8007f1e:	4607      	mov	r7, r0
 8007f20:	460c      	mov	r4, r1
 8007f22:	461e      	mov	r6, r3
 8007f24:	f101 0c14 	add.w	ip, r1, #20
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8007f2e:	b299      	uxth	r1, r3
 8007f30:	fb02 6101 	mla	r1, r2, r1, r6
 8007f34:	0c1e      	lsrs	r6, r3, #16
 8007f36:	0c0b      	lsrs	r3, r1, #16
 8007f38:	fb02 3306 	mla	r3, r2, r6, r3
 8007f3c:	b289      	uxth	r1, r1
 8007f3e:	3001      	adds	r0, #1
 8007f40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f44:	4285      	cmp	r5, r0
 8007f46:	f84c 1b04 	str.w	r1, [ip], #4
 8007f4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f4e:	dcec      	bgt.n	8007f2a <__multadd+0x12>
 8007f50:	b30e      	cbz	r6, 8007f96 <__multadd+0x7e>
 8007f52:	68a3      	ldr	r3, [r4, #8]
 8007f54:	42ab      	cmp	r3, r5
 8007f56:	dc19      	bgt.n	8007f8c <__multadd+0x74>
 8007f58:	6861      	ldr	r1, [r4, #4]
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	3101      	adds	r1, #1
 8007f5e:	f7ff ff79 	bl	8007e54 <_Balloc>
 8007f62:	4680      	mov	r8, r0
 8007f64:	b928      	cbnz	r0, 8007f72 <__multadd+0x5a>
 8007f66:	4602      	mov	r2, r0
 8007f68:	4b0c      	ldr	r3, [pc, #48]	@ (8007f9c <__multadd+0x84>)
 8007f6a:	480d      	ldr	r0, [pc, #52]	@ (8007fa0 <__multadd+0x88>)
 8007f6c:	21ba      	movs	r1, #186	@ 0xba
 8007f6e:	f7ff f8bd 	bl	80070ec <__assert_func>
 8007f72:	6922      	ldr	r2, [r4, #16]
 8007f74:	3202      	adds	r2, #2
 8007f76:	f104 010c 	add.w	r1, r4, #12
 8007f7a:	0092      	lsls	r2, r2, #2
 8007f7c:	300c      	adds	r0, #12
 8007f7e:	f000 fba9 	bl	80086d4 <memcpy>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4638      	mov	r0, r7
 8007f86:	f7ff ffa5 	bl	8007ed4 <_Bfree>
 8007f8a:	4644      	mov	r4, r8
 8007f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f90:	3501      	adds	r5, #1
 8007f92:	615e      	str	r6, [r3, #20]
 8007f94:	6125      	str	r5, [r4, #16]
 8007f96:	4620      	mov	r0, r4
 8007f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9c:	08008f6b 	.word	0x08008f6b
 8007fa0:	08008f7c 	.word	0x08008f7c

08007fa4 <__hi0bits>:
 8007fa4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007fa8:	4603      	mov	r3, r0
 8007faa:	bf36      	itet	cc
 8007fac:	0403      	lslcc	r3, r0, #16
 8007fae:	2000      	movcs	r0, #0
 8007fb0:	2010      	movcc	r0, #16
 8007fb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fb6:	bf3c      	itt	cc
 8007fb8:	021b      	lslcc	r3, r3, #8
 8007fba:	3008      	addcc	r0, #8
 8007fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fc0:	bf3c      	itt	cc
 8007fc2:	011b      	lslcc	r3, r3, #4
 8007fc4:	3004      	addcc	r0, #4
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fca:	bf3c      	itt	cc
 8007fcc:	009b      	lslcc	r3, r3, #2
 8007fce:	3002      	addcc	r0, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	db05      	blt.n	8007fe0 <__hi0bits+0x3c>
 8007fd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007fd8:	f100 0001 	add.w	r0, r0, #1
 8007fdc:	bf08      	it	eq
 8007fde:	2020      	moveq	r0, #32
 8007fe0:	4770      	bx	lr

08007fe2 <__lo0bits>:
 8007fe2:	6803      	ldr	r3, [r0, #0]
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	f013 0007 	ands.w	r0, r3, #7
 8007fea:	d00b      	beq.n	8008004 <__lo0bits+0x22>
 8007fec:	07d9      	lsls	r1, r3, #31
 8007fee:	d421      	bmi.n	8008034 <__lo0bits+0x52>
 8007ff0:	0798      	lsls	r0, r3, #30
 8007ff2:	bf49      	itett	mi
 8007ff4:	085b      	lsrmi	r3, r3, #1
 8007ff6:	089b      	lsrpl	r3, r3, #2
 8007ff8:	2001      	movmi	r0, #1
 8007ffa:	6013      	strmi	r3, [r2, #0]
 8007ffc:	bf5c      	itt	pl
 8007ffe:	6013      	strpl	r3, [r2, #0]
 8008000:	2002      	movpl	r0, #2
 8008002:	4770      	bx	lr
 8008004:	b299      	uxth	r1, r3
 8008006:	b909      	cbnz	r1, 800800c <__lo0bits+0x2a>
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	2010      	movs	r0, #16
 800800c:	b2d9      	uxtb	r1, r3
 800800e:	b909      	cbnz	r1, 8008014 <__lo0bits+0x32>
 8008010:	3008      	adds	r0, #8
 8008012:	0a1b      	lsrs	r3, r3, #8
 8008014:	0719      	lsls	r1, r3, #28
 8008016:	bf04      	itt	eq
 8008018:	091b      	lsreq	r3, r3, #4
 800801a:	3004      	addeq	r0, #4
 800801c:	0799      	lsls	r1, r3, #30
 800801e:	bf04      	itt	eq
 8008020:	089b      	lsreq	r3, r3, #2
 8008022:	3002      	addeq	r0, #2
 8008024:	07d9      	lsls	r1, r3, #31
 8008026:	d403      	bmi.n	8008030 <__lo0bits+0x4e>
 8008028:	085b      	lsrs	r3, r3, #1
 800802a:	f100 0001 	add.w	r0, r0, #1
 800802e:	d003      	beq.n	8008038 <__lo0bits+0x56>
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	4770      	bx	lr
 8008034:	2000      	movs	r0, #0
 8008036:	4770      	bx	lr
 8008038:	2020      	movs	r0, #32
 800803a:	4770      	bx	lr

0800803c <__i2b>:
 800803c:	b510      	push	{r4, lr}
 800803e:	460c      	mov	r4, r1
 8008040:	2101      	movs	r1, #1
 8008042:	f7ff ff07 	bl	8007e54 <_Balloc>
 8008046:	4602      	mov	r2, r0
 8008048:	b928      	cbnz	r0, 8008056 <__i2b+0x1a>
 800804a:	4b05      	ldr	r3, [pc, #20]	@ (8008060 <__i2b+0x24>)
 800804c:	4805      	ldr	r0, [pc, #20]	@ (8008064 <__i2b+0x28>)
 800804e:	f240 1145 	movw	r1, #325	@ 0x145
 8008052:	f7ff f84b 	bl	80070ec <__assert_func>
 8008056:	2301      	movs	r3, #1
 8008058:	6144      	str	r4, [r0, #20]
 800805a:	6103      	str	r3, [r0, #16]
 800805c:	bd10      	pop	{r4, pc}
 800805e:	bf00      	nop
 8008060:	08008f6b 	.word	0x08008f6b
 8008064:	08008f7c 	.word	0x08008f7c

08008068 <__multiply>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	4614      	mov	r4, r2
 800806e:	690a      	ldr	r2, [r1, #16]
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	429a      	cmp	r2, r3
 8008074:	bfa8      	it	ge
 8008076:	4623      	movge	r3, r4
 8008078:	460f      	mov	r7, r1
 800807a:	bfa4      	itt	ge
 800807c:	460c      	movge	r4, r1
 800807e:	461f      	movge	r7, r3
 8008080:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008084:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008088:	68a3      	ldr	r3, [r4, #8]
 800808a:	6861      	ldr	r1, [r4, #4]
 800808c:	eb0a 0609 	add.w	r6, sl, r9
 8008090:	42b3      	cmp	r3, r6
 8008092:	b085      	sub	sp, #20
 8008094:	bfb8      	it	lt
 8008096:	3101      	addlt	r1, #1
 8008098:	f7ff fedc 	bl	8007e54 <_Balloc>
 800809c:	b930      	cbnz	r0, 80080ac <__multiply+0x44>
 800809e:	4602      	mov	r2, r0
 80080a0:	4b44      	ldr	r3, [pc, #272]	@ (80081b4 <__multiply+0x14c>)
 80080a2:	4845      	ldr	r0, [pc, #276]	@ (80081b8 <__multiply+0x150>)
 80080a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80080a8:	f7ff f820 	bl	80070ec <__assert_func>
 80080ac:	f100 0514 	add.w	r5, r0, #20
 80080b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080b4:	462b      	mov	r3, r5
 80080b6:	2200      	movs	r2, #0
 80080b8:	4543      	cmp	r3, r8
 80080ba:	d321      	bcc.n	8008100 <__multiply+0x98>
 80080bc:	f107 0114 	add.w	r1, r7, #20
 80080c0:	f104 0214 	add.w	r2, r4, #20
 80080c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80080c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80080cc:	9302      	str	r3, [sp, #8]
 80080ce:	1b13      	subs	r3, r2, r4
 80080d0:	3b15      	subs	r3, #21
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	3304      	adds	r3, #4
 80080d8:	f104 0715 	add.w	r7, r4, #21
 80080dc:	42ba      	cmp	r2, r7
 80080de:	bf38      	it	cc
 80080e0:	2304      	movcc	r3, #4
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	9b02      	ldr	r3, [sp, #8]
 80080e6:	9103      	str	r1, [sp, #12]
 80080e8:	428b      	cmp	r3, r1
 80080ea:	d80c      	bhi.n	8008106 <__multiply+0x9e>
 80080ec:	2e00      	cmp	r6, #0
 80080ee:	dd03      	ble.n	80080f8 <__multiply+0x90>
 80080f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d05b      	beq.n	80081b0 <__multiply+0x148>
 80080f8:	6106      	str	r6, [r0, #16]
 80080fa:	b005      	add	sp, #20
 80080fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008100:	f843 2b04 	str.w	r2, [r3], #4
 8008104:	e7d8      	b.n	80080b8 <__multiply+0x50>
 8008106:	f8b1 a000 	ldrh.w	sl, [r1]
 800810a:	f1ba 0f00 	cmp.w	sl, #0
 800810e:	d024      	beq.n	800815a <__multiply+0xf2>
 8008110:	f104 0e14 	add.w	lr, r4, #20
 8008114:	46a9      	mov	r9, r5
 8008116:	f04f 0c00 	mov.w	ip, #0
 800811a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800811e:	f8d9 3000 	ldr.w	r3, [r9]
 8008122:	fa1f fb87 	uxth.w	fp, r7
 8008126:	b29b      	uxth	r3, r3
 8008128:	fb0a 330b 	mla	r3, sl, fp, r3
 800812c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008130:	f8d9 7000 	ldr.w	r7, [r9]
 8008134:	4463      	add	r3, ip
 8008136:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800813a:	fb0a c70b 	mla	r7, sl, fp, ip
 800813e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008148:	4572      	cmp	r2, lr
 800814a:	f849 3b04 	str.w	r3, [r9], #4
 800814e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008152:	d8e2      	bhi.n	800811a <__multiply+0xb2>
 8008154:	9b01      	ldr	r3, [sp, #4]
 8008156:	f845 c003 	str.w	ip, [r5, r3]
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008160:	3104      	adds	r1, #4
 8008162:	f1b9 0f00 	cmp.w	r9, #0
 8008166:	d021      	beq.n	80081ac <__multiply+0x144>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	f104 0c14 	add.w	ip, r4, #20
 800816e:	46ae      	mov	lr, r5
 8008170:	f04f 0a00 	mov.w	sl, #0
 8008174:	f8bc b000 	ldrh.w	fp, [ip]
 8008178:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800817c:	fb09 770b 	mla	r7, r9, fp, r7
 8008180:	4457      	add	r7, sl
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008188:	f84e 3b04 	str.w	r3, [lr], #4
 800818c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008190:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008194:	f8be 3000 	ldrh.w	r3, [lr]
 8008198:	fb09 330a 	mla	r3, r9, sl, r3
 800819c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80081a0:	4562      	cmp	r2, ip
 80081a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081a6:	d8e5      	bhi.n	8008174 <__multiply+0x10c>
 80081a8:	9f01      	ldr	r7, [sp, #4]
 80081aa:	51eb      	str	r3, [r5, r7]
 80081ac:	3504      	adds	r5, #4
 80081ae:	e799      	b.n	80080e4 <__multiply+0x7c>
 80081b0:	3e01      	subs	r6, #1
 80081b2:	e79b      	b.n	80080ec <__multiply+0x84>
 80081b4:	08008f6b 	.word	0x08008f6b
 80081b8:	08008f7c 	.word	0x08008f7c

080081bc <__pow5mult>:
 80081bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c0:	4615      	mov	r5, r2
 80081c2:	f012 0203 	ands.w	r2, r2, #3
 80081c6:	4607      	mov	r7, r0
 80081c8:	460e      	mov	r6, r1
 80081ca:	d007      	beq.n	80081dc <__pow5mult+0x20>
 80081cc:	4c25      	ldr	r4, [pc, #148]	@ (8008264 <__pow5mult+0xa8>)
 80081ce:	3a01      	subs	r2, #1
 80081d0:	2300      	movs	r3, #0
 80081d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081d6:	f7ff fe9f 	bl	8007f18 <__multadd>
 80081da:	4606      	mov	r6, r0
 80081dc:	10ad      	asrs	r5, r5, #2
 80081de:	d03d      	beq.n	800825c <__pow5mult+0xa0>
 80081e0:	69fc      	ldr	r4, [r7, #28]
 80081e2:	b97c      	cbnz	r4, 8008204 <__pow5mult+0x48>
 80081e4:	2010      	movs	r0, #16
 80081e6:	f7fd fffd 	bl	80061e4 <malloc>
 80081ea:	4602      	mov	r2, r0
 80081ec:	61f8      	str	r0, [r7, #28]
 80081ee:	b928      	cbnz	r0, 80081fc <__pow5mult+0x40>
 80081f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008268 <__pow5mult+0xac>)
 80081f2:	481e      	ldr	r0, [pc, #120]	@ (800826c <__pow5mult+0xb0>)
 80081f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081f8:	f7fe ff78 	bl	80070ec <__assert_func>
 80081fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008200:	6004      	str	r4, [r0, #0]
 8008202:	60c4      	str	r4, [r0, #12]
 8008204:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008208:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800820c:	b94c      	cbnz	r4, 8008222 <__pow5mult+0x66>
 800820e:	f240 2171 	movw	r1, #625	@ 0x271
 8008212:	4638      	mov	r0, r7
 8008214:	f7ff ff12 	bl	800803c <__i2b>
 8008218:	2300      	movs	r3, #0
 800821a:	f8c8 0008 	str.w	r0, [r8, #8]
 800821e:	4604      	mov	r4, r0
 8008220:	6003      	str	r3, [r0, #0]
 8008222:	f04f 0900 	mov.w	r9, #0
 8008226:	07eb      	lsls	r3, r5, #31
 8008228:	d50a      	bpl.n	8008240 <__pow5mult+0x84>
 800822a:	4631      	mov	r1, r6
 800822c:	4622      	mov	r2, r4
 800822e:	4638      	mov	r0, r7
 8008230:	f7ff ff1a 	bl	8008068 <__multiply>
 8008234:	4631      	mov	r1, r6
 8008236:	4680      	mov	r8, r0
 8008238:	4638      	mov	r0, r7
 800823a:	f7ff fe4b 	bl	8007ed4 <_Bfree>
 800823e:	4646      	mov	r6, r8
 8008240:	106d      	asrs	r5, r5, #1
 8008242:	d00b      	beq.n	800825c <__pow5mult+0xa0>
 8008244:	6820      	ldr	r0, [r4, #0]
 8008246:	b938      	cbnz	r0, 8008258 <__pow5mult+0x9c>
 8008248:	4622      	mov	r2, r4
 800824a:	4621      	mov	r1, r4
 800824c:	4638      	mov	r0, r7
 800824e:	f7ff ff0b 	bl	8008068 <__multiply>
 8008252:	6020      	str	r0, [r4, #0]
 8008254:	f8c0 9000 	str.w	r9, [r0]
 8008258:	4604      	mov	r4, r0
 800825a:	e7e4      	b.n	8008226 <__pow5mult+0x6a>
 800825c:	4630      	mov	r0, r6
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	bf00      	nop
 8008264:	08008fd8 	.word	0x08008fd8
 8008268:	08008e59 	.word	0x08008e59
 800826c:	08008f7c 	.word	0x08008f7c

08008270 <__lshift>:
 8008270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	460c      	mov	r4, r1
 8008276:	6849      	ldr	r1, [r1, #4]
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800827e:	68a3      	ldr	r3, [r4, #8]
 8008280:	4607      	mov	r7, r0
 8008282:	4691      	mov	r9, r2
 8008284:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008288:	f108 0601 	add.w	r6, r8, #1
 800828c:	42b3      	cmp	r3, r6
 800828e:	db0b      	blt.n	80082a8 <__lshift+0x38>
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff fddf 	bl	8007e54 <_Balloc>
 8008296:	4605      	mov	r5, r0
 8008298:	b948      	cbnz	r0, 80082ae <__lshift+0x3e>
 800829a:	4602      	mov	r2, r0
 800829c:	4b28      	ldr	r3, [pc, #160]	@ (8008340 <__lshift+0xd0>)
 800829e:	4829      	ldr	r0, [pc, #164]	@ (8008344 <__lshift+0xd4>)
 80082a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082a4:	f7fe ff22 	bl	80070ec <__assert_func>
 80082a8:	3101      	adds	r1, #1
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	e7ee      	b.n	800828c <__lshift+0x1c>
 80082ae:	2300      	movs	r3, #0
 80082b0:	f100 0114 	add.w	r1, r0, #20
 80082b4:	f100 0210 	add.w	r2, r0, #16
 80082b8:	4618      	mov	r0, r3
 80082ba:	4553      	cmp	r3, sl
 80082bc:	db33      	blt.n	8008326 <__lshift+0xb6>
 80082be:	6920      	ldr	r0, [r4, #16]
 80082c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082c4:	f104 0314 	add.w	r3, r4, #20
 80082c8:	f019 091f 	ands.w	r9, r9, #31
 80082cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082d4:	d02b      	beq.n	800832e <__lshift+0xbe>
 80082d6:	f1c9 0e20 	rsb	lr, r9, #32
 80082da:	468a      	mov	sl, r1
 80082dc:	2200      	movs	r2, #0
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	fa00 f009 	lsl.w	r0, r0, r9
 80082e4:	4310      	orrs	r0, r2
 80082e6:	f84a 0b04 	str.w	r0, [sl], #4
 80082ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ee:	459c      	cmp	ip, r3
 80082f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80082f4:	d8f3      	bhi.n	80082de <__lshift+0x6e>
 80082f6:	ebac 0304 	sub.w	r3, ip, r4
 80082fa:	3b15      	subs	r3, #21
 80082fc:	f023 0303 	bic.w	r3, r3, #3
 8008300:	3304      	adds	r3, #4
 8008302:	f104 0015 	add.w	r0, r4, #21
 8008306:	4584      	cmp	ip, r0
 8008308:	bf38      	it	cc
 800830a:	2304      	movcc	r3, #4
 800830c:	50ca      	str	r2, [r1, r3]
 800830e:	b10a      	cbz	r2, 8008314 <__lshift+0xa4>
 8008310:	f108 0602 	add.w	r6, r8, #2
 8008314:	3e01      	subs	r6, #1
 8008316:	4638      	mov	r0, r7
 8008318:	612e      	str	r6, [r5, #16]
 800831a:	4621      	mov	r1, r4
 800831c:	f7ff fdda 	bl	8007ed4 <_Bfree>
 8008320:	4628      	mov	r0, r5
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	f842 0f04 	str.w	r0, [r2, #4]!
 800832a:	3301      	adds	r3, #1
 800832c:	e7c5      	b.n	80082ba <__lshift+0x4a>
 800832e:	3904      	subs	r1, #4
 8008330:	f853 2b04 	ldr.w	r2, [r3], #4
 8008334:	f841 2f04 	str.w	r2, [r1, #4]!
 8008338:	459c      	cmp	ip, r3
 800833a:	d8f9      	bhi.n	8008330 <__lshift+0xc0>
 800833c:	e7ea      	b.n	8008314 <__lshift+0xa4>
 800833e:	bf00      	nop
 8008340:	08008f6b 	.word	0x08008f6b
 8008344:	08008f7c 	.word	0x08008f7c

08008348 <__mcmp>:
 8008348:	690a      	ldr	r2, [r1, #16]
 800834a:	4603      	mov	r3, r0
 800834c:	6900      	ldr	r0, [r0, #16]
 800834e:	1a80      	subs	r0, r0, r2
 8008350:	b530      	push	{r4, r5, lr}
 8008352:	d10e      	bne.n	8008372 <__mcmp+0x2a>
 8008354:	3314      	adds	r3, #20
 8008356:	3114      	adds	r1, #20
 8008358:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800835c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008360:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008364:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008368:	4295      	cmp	r5, r2
 800836a:	d003      	beq.n	8008374 <__mcmp+0x2c>
 800836c:	d205      	bcs.n	800837a <__mcmp+0x32>
 800836e:	f04f 30ff 	mov.w	r0, #4294967295
 8008372:	bd30      	pop	{r4, r5, pc}
 8008374:	42a3      	cmp	r3, r4
 8008376:	d3f3      	bcc.n	8008360 <__mcmp+0x18>
 8008378:	e7fb      	b.n	8008372 <__mcmp+0x2a>
 800837a:	2001      	movs	r0, #1
 800837c:	e7f9      	b.n	8008372 <__mcmp+0x2a>
	...

08008380 <__mdiff>:
 8008380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	4689      	mov	r9, r1
 8008386:	4606      	mov	r6, r0
 8008388:	4611      	mov	r1, r2
 800838a:	4648      	mov	r0, r9
 800838c:	4614      	mov	r4, r2
 800838e:	f7ff ffdb 	bl	8008348 <__mcmp>
 8008392:	1e05      	subs	r5, r0, #0
 8008394:	d112      	bne.n	80083bc <__mdiff+0x3c>
 8008396:	4629      	mov	r1, r5
 8008398:	4630      	mov	r0, r6
 800839a:	f7ff fd5b 	bl	8007e54 <_Balloc>
 800839e:	4602      	mov	r2, r0
 80083a0:	b928      	cbnz	r0, 80083ae <__mdiff+0x2e>
 80083a2:	4b3f      	ldr	r3, [pc, #252]	@ (80084a0 <__mdiff+0x120>)
 80083a4:	f240 2137 	movw	r1, #567	@ 0x237
 80083a8:	483e      	ldr	r0, [pc, #248]	@ (80084a4 <__mdiff+0x124>)
 80083aa:	f7fe fe9f 	bl	80070ec <__assert_func>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083b4:	4610      	mov	r0, r2
 80083b6:	b003      	add	sp, #12
 80083b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	bfbc      	itt	lt
 80083be:	464b      	movlt	r3, r9
 80083c0:	46a1      	movlt	r9, r4
 80083c2:	4630      	mov	r0, r6
 80083c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80083c8:	bfba      	itte	lt
 80083ca:	461c      	movlt	r4, r3
 80083cc:	2501      	movlt	r5, #1
 80083ce:	2500      	movge	r5, #0
 80083d0:	f7ff fd40 	bl	8007e54 <_Balloc>
 80083d4:	4602      	mov	r2, r0
 80083d6:	b918      	cbnz	r0, 80083e0 <__mdiff+0x60>
 80083d8:	4b31      	ldr	r3, [pc, #196]	@ (80084a0 <__mdiff+0x120>)
 80083da:	f240 2145 	movw	r1, #581	@ 0x245
 80083de:	e7e3      	b.n	80083a8 <__mdiff+0x28>
 80083e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083e4:	6926      	ldr	r6, [r4, #16]
 80083e6:	60c5      	str	r5, [r0, #12]
 80083e8:	f109 0310 	add.w	r3, r9, #16
 80083ec:	f109 0514 	add.w	r5, r9, #20
 80083f0:	f104 0e14 	add.w	lr, r4, #20
 80083f4:	f100 0b14 	add.w	fp, r0, #20
 80083f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	46d9      	mov	r9, fp
 8008404:	f04f 0c00 	mov.w	ip, #0
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800840e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	fa1f f38a 	uxth.w	r3, sl
 8008418:	4619      	mov	r1, r3
 800841a:	b283      	uxth	r3, r0
 800841c:	1acb      	subs	r3, r1, r3
 800841e:	0c00      	lsrs	r0, r0, #16
 8008420:	4463      	add	r3, ip
 8008422:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008426:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800842a:	b29b      	uxth	r3, r3
 800842c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008430:	4576      	cmp	r6, lr
 8008432:	f849 3b04 	str.w	r3, [r9], #4
 8008436:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800843a:	d8e5      	bhi.n	8008408 <__mdiff+0x88>
 800843c:	1b33      	subs	r3, r6, r4
 800843e:	3b15      	subs	r3, #21
 8008440:	f023 0303 	bic.w	r3, r3, #3
 8008444:	3415      	adds	r4, #21
 8008446:	3304      	adds	r3, #4
 8008448:	42a6      	cmp	r6, r4
 800844a:	bf38      	it	cc
 800844c:	2304      	movcc	r3, #4
 800844e:	441d      	add	r5, r3
 8008450:	445b      	add	r3, fp
 8008452:	461e      	mov	r6, r3
 8008454:	462c      	mov	r4, r5
 8008456:	4544      	cmp	r4, r8
 8008458:	d30e      	bcc.n	8008478 <__mdiff+0xf8>
 800845a:	f108 0103 	add.w	r1, r8, #3
 800845e:	1b49      	subs	r1, r1, r5
 8008460:	f021 0103 	bic.w	r1, r1, #3
 8008464:	3d03      	subs	r5, #3
 8008466:	45a8      	cmp	r8, r5
 8008468:	bf38      	it	cc
 800846a:	2100      	movcc	r1, #0
 800846c:	440b      	add	r3, r1
 800846e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008472:	b191      	cbz	r1, 800849a <__mdiff+0x11a>
 8008474:	6117      	str	r7, [r2, #16]
 8008476:	e79d      	b.n	80083b4 <__mdiff+0x34>
 8008478:	f854 1b04 	ldr.w	r1, [r4], #4
 800847c:	46e6      	mov	lr, ip
 800847e:	0c08      	lsrs	r0, r1, #16
 8008480:	fa1c fc81 	uxtah	ip, ip, r1
 8008484:	4471      	add	r1, lr
 8008486:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800848a:	b289      	uxth	r1, r1
 800848c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008490:	f846 1b04 	str.w	r1, [r6], #4
 8008494:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008498:	e7dd      	b.n	8008456 <__mdiff+0xd6>
 800849a:	3f01      	subs	r7, #1
 800849c:	e7e7      	b.n	800846e <__mdiff+0xee>
 800849e:	bf00      	nop
 80084a0:	08008f6b 	.word	0x08008f6b
 80084a4:	08008f7c 	.word	0x08008f7c

080084a8 <__d2b>:
 80084a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084ac:	460f      	mov	r7, r1
 80084ae:	2101      	movs	r1, #1
 80084b0:	ec59 8b10 	vmov	r8, r9, d0
 80084b4:	4616      	mov	r6, r2
 80084b6:	f7ff fccd 	bl	8007e54 <_Balloc>
 80084ba:	4604      	mov	r4, r0
 80084bc:	b930      	cbnz	r0, 80084cc <__d2b+0x24>
 80084be:	4602      	mov	r2, r0
 80084c0:	4b23      	ldr	r3, [pc, #140]	@ (8008550 <__d2b+0xa8>)
 80084c2:	4824      	ldr	r0, [pc, #144]	@ (8008554 <__d2b+0xac>)
 80084c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80084c8:	f7fe fe10 	bl	80070ec <__assert_func>
 80084cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084d4:	b10d      	cbz	r5, 80084da <__d2b+0x32>
 80084d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	f1b8 0300 	subs.w	r3, r8, #0
 80084e0:	d023      	beq.n	800852a <__d2b+0x82>
 80084e2:	4668      	mov	r0, sp
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	f7ff fd7c 	bl	8007fe2 <__lo0bits>
 80084ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084ee:	b1d0      	cbz	r0, 8008526 <__d2b+0x7e>
 80084f0:	f1c0 0320 	rsb	r3, r0, #32
 80084f4:	fa02 f303 	lsl.w	r3, r2, r3
 80084f8:	430b      	orrs	r3, r1
 80084fa:	40c2      	lsrs	r2, r0
 80084fc:	6163      	str	r3, [r4, #20]
 80084fe:	9201      	str	r2, [sp, #4]
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	61a3      	str	r3, [r4, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	bf0c      	ite	eq
 8008508:	2201      	moveq	r2, #1
 800850a:	2202      	movne	r2, #2
 800850c:	6122      	str	r2, [r4, #16]
 800850e:	b1a5      	cbz	r5, 800853a <__d2b+0x92>
 8008510:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008514:	4405      	add	r5, r0
 8008516:	603d      	str	r5, [r7, #0]
 8008518:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800851c:	6030      	str	r0, [r6, #0]
 800851e:	4620      	mov	r0, r4
 8008520:	b003      	add	sp, #12
 8008522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008526:	6161      	str	r1, [r4, #20]
 8008528:	e7ea      	b.n	8008500 <__d2b+0x58>
 800852a:	a801      	add	r0, sp, #4
 800852c:	f7ff fd59 	bl	8007fe2 <__lo0bits>
 8008530:	9b01      	ldr	r3, [sp, #4]
 8008532:	6163      	str	r3, [r4, #20]
 8008534:	3020      	adds	r0, #32
 8008536:	2201      	movs	r2, #1
 8008538:	e7e8      	b.n	800850c <__d2b+0x64>
 800853a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800853e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008542:	6038      	str	r0, [r7, #0]
 8008544:	6918      	ldr	r0, [r3, #16]
 8008546:	f7ff fd2d 	bl	8007fa4 <__hi0bits>
 800854a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800854e:	e7e5      	b.n	800851c <__d2b+0x74>
 8008550:	08008f6b 	.word	0x08008f6b
 8008554:	08008f7c 	.word	0x08008f7c

08008558 <__sflush_r>:
 8008558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008560:	0716      	lsls	r6, r2, #28
 8008562:	4605      	mov	r5, r0
 8008564:	460c      	mov	r4, r1
 8008566:	d454      	bmi.n	8008612 <__sflush_r+0xba>
 8008568:	684b      	ldr	r3, [r1, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	dc02      	bgt.n	8008574 <__sflush_r+0x1c>
 800856e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008570:	2b00      	cmp	r3, #0
 8008572:	dd48      	ble.n	8008606 <__sflush_r+0xae>
 8008574:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008576:	2e00      	cmp	r6, #0
 8008578:	d045      	beq.n	8008606 <__sflush_r+0xae>
 800857a:	2300      	movs	r3, #0
 800857c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008580:	682f      	ldr	r7, [r5, #0]
 8008582:	6a21      	ldr	r1, [r4, #32]
 8008584:	602b      	str	r3, [r5, #0]
 8008586:	d030      	beq.n	80085ea <__sflush_r+0x92>
 8008588:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	0759      	lsls	r1, r3, #29
 800858e:	d505      	bpl.n	800859c <__sflush_r+0x44>
 8008590:	6863      	ldr	r3, [r4, #4]
 8008592:	1ad2      	subs	r2, r2, r3
 8008594:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008596:	b10b      	cbz	r3, 800859c <__sflush_r+0x44>
 8008598:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800859a:	1ad2      	subs	r2, r2, r3
 800859c:	2300      	movs	r3, #0
 800859e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085a0:	6a21      	ldr	r1, [r4, #32]
 80085a2:	4628      	mov	r0, r5
 80085a4:	47b0      	blx	r6
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	d106      	bne.n	80085ba <__sflush_r+0x62>
 80085ac:	6829      	ldr	r1, [r5, #0]
 80085ae:	291d      	cmp	r1, #29
 80085b0:	d82b      	bhi.n	800860a <__sflush_r+0xb2>
 80085b2:	4a2a      	ldr	r2, [pc, #168]	@ (800865c <__sflush_r+0x104>)
 80085b4:	410a      	asrs	r2, r1
 80085b6:	07d6      	lsls	r6, r2, #31
 80085b8:	d427      	bmi.n	800860a <__sflush_r+0xb2>
 80085ba:	2200      	movs	r2, #0
 80085bc:	6062      	str	r2, [r4, #4]
 80085be:	04d9      	lsls	r1, r3, #19
 80085c0:	6922      	ldr	r2, [r4, #16]
 80085c2:	6022      	str	r2, [r4, #0]
 80085c4:	d504      	bpl.n	80085d0 <__sflush_r+0x78>
 80085c6:	1c42      	adds	r2, r0, #1
 80085c8:	d101      	bne.n	80085ce <__sflush_r+0x76>
 80085ca:	682b      	ldr	r3, [r5, #0]
 80085cc:	b903      	cbnz	r3, 80085d0 <__sflush_r+0x78>
 80085ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80085d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085d2:	602f      	str	r7, [r5, #0]
 80085d4:	b1b9      	cbz	r1, 8008606 <__sflush_r+0xae>
 80085d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085da:	4299      	cmp	r1, r3
 80085dc:	d002      	beq.n	80085e4 <__sflush_r+0x8c>
 80085de:	4628      	mov	r0, r5
 80085e0:	f7ff fbee 	bl	8007dc0 <_free_r>
 80085e4:	2300      	movs	r3, #0
 80085e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80085e8:	e00d      	b.n	8008606 <__sflush_r+0xae>
 80085ea:	2301      	movs	r3, #1
 80085ec:	4628      	mov	r0, r5
 80085ee:	47b0      	blx	r6
 80085f0:	4602      	mov	r2, r0
 80085f2:	1c50      	adds	r0, r2, #1
 80085f4:	d1c9      	bne.n	800858a <__sflush_r+0x32>
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0c6      	beq.n	800858a <__sflush_r+0x32>
 80085fc:	2b1d      	cmp	r3, #29
 80085fe:	d001      	beq.n	8008604 <__sflush_r+0xac>
 8008600:	2b16      	cmp	r3, #22
 8008602:	d11e      	bne.n	8008642 <__sflush_r+0xea>
 8008604:	602f      	str	r7, [r5, #0]
 8008606:	2000      	movs	r0, #0
 8008608:	e022      	b.n	8008650 <__sflush_r+0xf8>
 800860a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800860e:	b21b      	sxth	r3, r3
 8008610:	e01b      	b.n	800864a <__sflush_r+0xf2>
 8008612:	690f      	ldr	r7, [r1, #16]
 8008614:	2f00      	cmp	r7, #0
 8008616:	d0f6      	beq.n	8008606 <__sflush_r+0xae>
 8008618:	0793      	lsls	r3, r2, #30
 800861a:	680e      	ldr	r6, [r1, #0]
 800861c:	bf08      	it	eq
 800861e:	694b      	ldreq	r3, [r1, #20]
 8008620:	600f      	str	r7, [r1, #0]
 8008622:	bf18      	it	ne
 8008624:	2300      	movne	r3, #0
 8008626:	eba6 0807 	sub.w	r8, r6, r7
 800862a:	608b      	str	r3, [r1, #8]
 800862c:	f1b8 0f00 	cmp.w	r8, #0
 8008630:	dde9      	ble.n	8008606 <__sflush_r+0xae>
 8008632:	6a21      	ldr	r1, [r4, #32]
 8008634:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008636:	4643      	mov	r3, r8
 8008638:	463a      	mov	r2, r7
 800863a:	4628      	mov	r0, r5
 800863c:	47b0      	blx	r6
 800863e:	2800      	cmp	r0, #0
 8008640:	dc08      	bgt.n	8008654 <__sflush_r+0xfc>
 8008642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	f04f 30ff 	mov.w	r0, #4294967295
 8008650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008654:	4407      	add	r7, r0
 8008656:	eba8 0800 	sub.w	r8, r8, r0
 800865a:	e7e7      	b.n	800862c <__sflush_r+0xd4>
 800865c:	dfbffffe 	.word	0xdfbffffe

08008660 <_fflush_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	690b      	ldr	r3, [r1, #16]
 8008664:	4605      	mov	r5, r0
 8008666:	460c      	mov	r4, r1
 8008668:	b913      	cbnz	r3, 8008670 <_fflush_r+0x10>
 800866a:	2500      	movs	r5, #0
 800866c:	4628      	mov	r0, r5
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	b118      	cbz	r0, 800867a <_fflush_r+0x1a>
 8008672:	6a03      	ldr	r3, [r0, #32]
 8008674:	b90b      	cbnz	r3, 800867a <_fflush_r+0x1a>
 8008676:	f7fe fbd3 	bl	8006e20 <__sinit>
 800867a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0f3      	beq.n	800866a <_fflush_r+0xa>
 8008682:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008684:	07d0      	lsls	r0, r2, #31
 8008686:	d404      	bmi.n	8008692 <_fflush_r+0x32>
 8008688:	0599      	lsls	r1, r3, #22
 800868a:	d402      	bmi.n	8008692 <_fflush_r+0x32>
 800868c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800868e:	f7fe fd2a 	bl	80070e6 <__retarget_lock_acquire_recursive>
 8008692:	4628      	mov	r0, r5
 8008694:	4621      	mov	r1, r4
 8008696:	f7ff ff5f 	bl	8008558 <__sflush_r>
 800869a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800869c:	07da      	lsls	r2, r3, #31
 800869e:	4605      	mov	r5, r0
 80086a0:	d4e4      	bmi.n	800866c <_fflush_r+0xc>
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	059b      	lsls	r3, r3, #22
 80086a6:	d4e1      	bmi.n	800866c <_fflush_r+0xc>
 80086a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086aa:	f7fe fd1d 	bl	80070e8 <__retarget_lock_release_recursive>
 80086ae:	e7dd      	b.n	800866c <_fflush_r+0xc>

080086b0 <fiprintf>:
 80086b0:	b40e      	push	{r1, r2, r3}
 80086b2:	b503      	push	{r0, r1, lr}
 80086b4:	4601      	mov	r1, r0
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	4805      	ldr	r0, [pc, #20]	@ (80086d0 <fiprintf+0x20>)
 80086ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	f000 f879 	bl	80087b8 <_vfiprintf_r>
 80086c6:	b002      	add	sp, #8
 80086c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086cc:	b003      	add	sp, #12
 80086ce:	4770      	bx	lr
 80086d0:	20000024 	.word	0x20000024

080086d4 <memcpy>:
 80086d4:	440a      	add	r2, r1
 80086d6:	4291      	cmp	r1, r2
 80086d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80086dc:	d100      	bne.n	80086e0 <memcpy+0xc>
 80086de:	4770      	bx	lr
 80086e0:	b510      	push	{r4, lr}
 80086e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ea:	4291      	cmp	r1, r2
 80086ec:	d1f9      	bne.n	80086e2 <memcpy+0xe>
 80086ee:	bd10      	pop	{r4, pc}

080086f0 <abort>:
 80086f0:	b508      	push	{r3, lr}
 80086f2:	2006      	movs	r0, #6
 80086f4:	f000 fa34 	bl	8008b60 <raise>
 80086f8:	2001      	movs	r0, #1
 80086fa:	f7f9 f8c9 	bl	8001890 <_exit>

080086fe <_calloc_r>:
 80086fe:	b570      	push	{r4, r5, r6, lr}
 8008700:	fba1 5402 	umull	r5, r4, r1, r2
 8008704:	b93c      	cbnz	r4, 8008716 <_calloc_r+0x18>
 8008706:	4629      	mov	r1, r5
 8008708:	f7fd fd96 	bl	8006238 <_malloc_r>
 800870c:	4606      	mov	r6, r0
 800870e:	b928      	cbnz	r0, 800871c <_calloc_r+0x1e>
 8008710:	2600      	movs	r6, #0
 8008712:	4630      	mov	r0, r6
 8008714:	bd70      	pop	{r4, r5, r6, pc}
 8008716:	220c      	movs	r2, #12
 8008718:	6002      	str	r2, [r0, #0]
 800871a:	e7f9      	b.n	8008710 <_calloc_r+0x12>
 800871c:	462a      	mov	r2, r5
 800871e:	4621      	mov	r1, r4
 8008720:	f7fe fbf7 	bl	8006f12 <memset>
 8008724:	e7f5      	b.n	8008712 <_calloc_r+0x14>

08008726 <__ascii_mbtowc>:
 8008726:	b082      	sub	sp, #8
 8008728:	b901      	cbnz	r1, 800872c <__ascii_mbtowc+0x6>
 800872a:	a901      	add	r1, sp, #4
 800872c:	b142      	cbz	r2, 8008740 <__ascii_mbtowc+0x1a>
 800872e:	b14b      	cbz	r3, 8008744 <__ascii_mbtowc+0x1e>
 8008730:	7813      	ldrb	r3, [r2, #0]
 8008732:	600b      	str	r3, [r1, #0]
 8008734:	7812      	ldrb	r2, [r2, #0]
 8008736:	1e10      	subs	r0, r2, #0
 8008738:	bf18      	it	ne
 800873a:	2001      	movne	r0, #1
 800873c:	b002      	add	sp, #8
 800873e:	4770      	bx	lr
 8008740:	4610      	mov	r0, r2
 8008742:	e7fb      	b.n	800873c <__ascii_mbtowc+0x16>
 8008744:	f06f 0001 	mvn.w	r0, #1
 8008748:	e7f8      	b.n	800873c <__ascii_mbtowc+0x16>

0800874a <__ascii_wctomb>:
 800874a:	4603      	mov	r3, r0
 800874c:	4608      	mov	r0, r1
 800874e:	b141      	cbz	r1, 8008762 <__ascii_wctomb+0x18>
 8008750:	2aff      	cmp	r2, #255	@ 0xff
 8008752:	d904      	bls.n	800875e <__ascii_wctomb+0x14>
 8008754:	228a      	movs	r2, #138	@ 0x8a
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	4770      	bx	lr
 800875e:	700a      	strb	r2, [r1, #0]
 8008760:	2001      	movs	r0, #1
 8008762:	4770      	bx	lr

08008764 <__sfputc_r>:
 8008764:	6893      	ldr	r3, [r2, #8]
 8008766:	3b01      	subs	r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	b410      	push	{r4}
 800876c:	6093      	str	r3, [r2, #8]
 800876e:	da08      	bge.n	8008782 <__sfputc_r+0x1e>
 8008770:	6994      	ldr	r4, [r2, #24]
 8008772:	42a3      	cmp	r3, r4
 8008774:	db01      	blt.n	800877a <__sfputc_r+0x16>
 8008776:	290a      	cmp	r1, #10
 8008778:	d103      	bne.n	8008782 <__sfputc_r+0x1e>
 800877a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800877e:	f000 b933 	b.w	80089e8 <__swbuf_r>
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	1c58      	adds	r0, r3, #1
 8008786:	6010      	str	r0, [r2, #0]
 8008788:	7019      	strb	r1, [r3, #0]
 800878a:	4608      	mov	r0, r1
 800878c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008790:	4770      	bx	lr

08008792 <__sfputs_r>:
 8008792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008794:	4606      	mov	r6, r0
 8008796:	460f      	mov	r7, r1
 8008798:	4614      	mov	r4, r2
 800879a:	18d5      	adds	r5, r2, r3
 800879c:	42ac      	cmp	r4, r5
 800879e:	d101      	bne.n	80087a4 <__sfputs_r+0x12>
 80087a0:	2000      	movs	r0, #0
 80087a2:	e007      	b.n	80087b4 <__sfputs_r+0x22>
 80087a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a8:	463a      	mov	r2, r7
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7ff ffda 	bl	8008764 <__sfputc_r>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d1f3      	bne.n	800879c <__sfputs_r+0xa>
 80087b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087b8 <_vfiprintf_r>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	460d      	mov	r5, r1
 80087be:	b09d      	sub	sp, #116	@ 0x74
 80087c0:	4614      	mov	r4, r2
 80087c2:	4698      	mov	r8, r3
 80087c4:	4606      	mov	r6, r0
 80087c6:	b118      	cbz	r0, 80087d0 <_vfiprintf_r+0x18>
 80087c8:	6a03      	ldr	r3, [r0, #32]
 80087ca:	b90b      	cbnz	r3, 80087d0 <_vfiprintf_r+0x18>
 80087cc:	f7fe fb28 	bl	8006e20 <__sinit>
 80087d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087d2:	07d9      	lsls	r1, r3, #31
 80087d4:	d405      	bmi.n	80087e2 <_vfiprintf_r+0x2a>
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	059a      	lsls	r2, r3, #22
 80087da:	d402      	bmi.n	80087e2 <_vfiprintf_r+0x2a>
 80087dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087de:	f7fe fc82 	bl	80070e6 <__retarget_lock_acquire_recursive>
 80087e2:	89ab      	ldrh	r3, [r5, #12]
 80087e4:	071b      	lsls	r3, r3, #28
 80087e6:	d501      	bpl.n	80087ec <_vfiprintf_r+0x34>
 80087e8:	692b      	ldr	r3, [r5, #16]
 80087ea:	b99b      	cbnz	r3, 8008814 <_vfiprintf_r+0x5c>
 80087ec:	4629      	mov	r1, r5
 80087ee:	4630      	mov	r0, r6
 80087f0:	f000 f938 	bl	8008a64 <__swsetup_r>
 80087f4:	b170      	cbz	r0, 8008814 <_vfiprintf_r+0x5c>
 80087f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087f8:	07dc      	lsls	r4, r3, #31
 80087fa:	d504      	bpl.n	8008806 <_vfiprintf_r+0x4e>
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	b01d      	add	sp, #116	@ 0x74
 8008802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008806:	89ab      	ldrh	r3, [r5, #12]
 8008808:	0598      	lsls	r0, r3, #22
 800880a:	d4f7      	bmi.n	80087fc <_vfiprintf_r+0x44>
 800880c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800880e:	f7fe fc6b 	bl	80070e8 <__retarget_lock_release_recursive>
 8008812:	e7f3      	b.n	80087fc <_vfiprintf_r+0x44>
 8008814:	2300      	movs	r3, #0
 8008816:	9309      	str	r3, [sp, #36]	@ 0x24
 8008818:	2320      	movs	r3, #32
 800881a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800881e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008822:	2330      	movs	r3, #48	@ 0x30
 8008824:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80089d4 <_vfiprintf_r+0x21c>
 8008828:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800882c:	f04f 0901 	mov.w	r9, #1
 8008830:	4623      	mov	r3, r4
 8008832:	469a      	mov	sl, r3
 8008834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008838:	b10a      	cbz	r2, 800883e <_vfiprintf_r+0x86>
 800883a:	2a25      	cmp	r2, #37	@ 0x25
 800883c:	d1f9      	bne.n	8008832 <_vfiprintf_r+0x7a>
 800883e:	ebba 0b04 	subs.w	fp, sl, r4
 8008842:	d00b      	beq.n	800885c <_vfiprintf_r+0xa4>
 8008844:	465b      	mov	r3, fp
 8008846:	4622      	mov	r2, r4
 8008848:	4629      	mov	r1, r5
 800884a:	4630      	mov	r0, r6
 800884c:	f7ff ffa1 	bl	8008792 <__sfputs_r>
 8008850:	3001      	adds	r0, #1
 8008852:	f000 80a7 	beq.w	80089a4 <_vfiprintf_r+0x1ec>
 8008856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008858:	445a      	add	r2, fp
 800885a:	9209      	str	r2, [sp, #36]	@ 0x24
 800885c:	f89a 3000 	ldrb.w	r3, [sl]
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 809f 	beq.w	80089a4 <_vfiprintf_r+0x1ec>
 8008866:	2300      	movs	r3, #0
 8008868:	f04f 32ff 	mov.w	r2, #4294967295
 800886c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008870:	f10a 0a01 	add.w	sl, sl, #1
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	9307      	str	r3, [sp, #28]
 8008878:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800887c:	931a      	str	r3, [sp, #104]	@ 0x68
 800887e:	4654      	mov	r4, sl
 8008880:	2205      	movs	r2, #5
 8008882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008886:	4853      	ldr	r0, [pc, #332]	@ (80089d4 <_vfiprintf_r+0x21c>)
 8008888:	f7f7 fca2 	bl	80001d0 <memchr>
 800888c:	9a04      	ldr	r2, [sp, #16]
 800888e:	b9d8      	cbnz	r0, 80088c8 <_vfiprintf_r+0x110>
 8008890:	06d1      	lsls	r1, r2, #27
 8008892:	bf44      	itt	mi
 8008894:	2320      	movmi	r3, #32
 8008896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800889a:	0713      	lsls	r3, r2, #28
 800889c:	bf44      	itt	mi
 800889e:	232b      	movmi	r3, #43	@ 0x2b
 80088a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088a4:	f89a 3000 	ldrb.w	r3, [sl]
 80088a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088aa:	d015      	beq.n	80088d8 <_vfiprintf_r+0x120>
 80088ac:	9a07      	ldr	r2, [sp, #28]
 80088ae:	4654      	mov	r4, sl
 80088b0:	2000      	movs	r0, #0
 80088b2:	f04f 0c0a 	mov.w	ip, #10
 80088b6:	4621      	mov	r1, r4
 80088b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088bc:	3b30      	subs	r3, #48	@ 0x30
 80088be:	2b09      	cmp	r3, #9
 80088c0:	d94b      	bls.n	800895a <_vfiprintf_r+0x1a2>
 80088c2:	b1b0      	cbz	r0, 80088f2 <_vfiprintf_r+0x13a>
 80088c4:	9207      	str	r2, [sp, #28]
 80088c6:	e014      	b.n	80088f2 <_vfiprintf_r+0x13a>
 80088c8:	eba0 0308 	sub.w	r3, r0, r8
 80088cc:	fa09 f303 	lsl.w	r3, r9, r3
 80088d0:	4313      	orrs	r3, r2
 80088d2:	9304      	str	r3, [sp, #16]
 80088d4:	46a2      	mov	sl, r4
 80088d6:	e7d2      	b.n	800887e <_vfiprintf_r+0xc6>
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	1d19      	adds	r1, r3, #4
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	9103      	str	r1, [sp, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bfbb      	ittet	lt
 80088e4:	425b      	neglt	r3, r3
 80088e6:	f042 0202 	orrlt.w	r2, r2, #2
 80088ea:	9307      	strge	r3, [sp, #28]
 80088ec:	9307      	strlt	r3, [sp, #28]
 80088ee:	bfb8      	it	lt
 80088f0:	9204      	strlt	r2, [sp, #16]
 80088f2:	7823      	ldrb	r3, [r4, #0]
 80088f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80088f6:	d10a      	bne.n	800890e <_vfiprintf_r+0x156>
 80088f8:	7863      	ldrb	r3, [r4, #1]
 80088fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80088fc:	d132      	bne.n	8008964 <_vfiprintf_r+0x1ac>
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	1d1a      	adds	r2, r3, #4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	9203      	str	r2, [sp, #12]
 8008906:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800890a:	3402      	adds	r4, #2
 800890c:	9305      	str	r3, [sp, #20]
 800890e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089e4 <_vfiprintf_r+0x22c>
 8008912:	7821      	ldrb	r1, [r4, #0]
 8008914:	2203      	movs	r2, #3
 8008916:	4650      	mov	r0, sl
 8008918:	f7f7 fc5a 	bl	80001d0 <memchr>
 800891c:	b138      	cbz	r0, 800892e <_vfiprintf_r+0x176>
 800891e:	9b04      	ldr	r3, [sp, #16]
 8008920:	eba0 000a 	sub.w	r0, r0, sl
 8008924:	2240      	movs	r2, #64	@ 0x40
 8008926:	4082      	lsls	r2, r0
 8008928:	4313      	orrs	r3, r2
 800892a:	3401      	adds	r4, #1
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008932:	4829      	ldr	r0, [pc, #164]	@ (80089d8 <_vfiprintf_r+0x220>)
 8008934:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008938:	2206      	movs	r2, #6
 800893a:	f7f7 fc49 	bl	80001d0 <memchr>
 800893e:	2800      	cmp	r0, #0
 8008940:	d03f      	beq.n	80089c2 <_vfiprintf_r+0x20a>
 8008942:	4b26      	ldr	r3, [pc, #152]	@ (80089dc <_vfiprintf_r+0x224>)
 8008944:	bb1b      	cbnz	r3, 800898e <_vfiprintf_r+0x1d6>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	3307      	adds	r3, #7
 800894a:	f023 0307 	bic.w	r3, r3, #7
 800894e:	3308      	adds	r3, #8
 8008950:	9303      	str	r3, [sp, #12]
 8008952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008954:	443b      	add	r3, r7
 8008956:	9309      	str	r3, [sp, #36]	@ 0x24
 8008958:	e76a      	b.n	8008830 <_vfiprintf_r+0x78>
 800895a:	fb0c 3202 	mla	r2, ip, r2, r3
 800895e:	460c      	mov	r4, r1
 8008960:	2001      	movs	r0, #1
 8008962:	e7a8      	b.n	80088b6 <_vfiprintf_r+0xfe>
 8008964:	2300      	movs	r3, #0
 8008966:	3401      	adds	r4, #1
 8008968:	9305      	str	r3, [sp, #20]
 800896a:	4619      	mov	r1, r3
 800896c:	f04f 0c0a 	mov.w	ip, #10
 8008970:	4620      	mov	r0, r4
 8008972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008976:	3a30      	subs	r2, #48	@ 0x30
 8008978:	2a09      	cmp	r2, #9
 800897a:	d903      	bls.n	8008984 <_vfiprintf_r+0x1cc>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0c6      	beq.n	800890e <_vfiprintf_r+0x156>
 8008980:	9105      	str	r1, [sp, #20]
 8008982:	e7c4      	b.n	800890e <_vfiprintf_r+0x156>
 8008984:	fb0c 2101 	mla	r1, ip, r1, r2
 8008988:	4604      	mov	r4, r0
 800898a:	2301      	movs	r3, #1
 800898c:	e7f0      	b.n	8008970 <_vfiprintf_r+0x1b8>
 800898e:	ab03      	add	r3, sp, #12
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	462a      	mov	r2, r5
 8008994:	4b12      	ldr	r3, [pc, #72]	@ (80089e0 <_vfiprintf_r+0x228>)
 8008996:	a904      	add	r1, sp, #16
 8008998:	4630      	mov	r0, r6
 800899a:	f7fd fdfd 	bl	8006598 <_printf_float>
 800899e:	4607      	mov	r7, r0
 80089a0:	1c78      	adds	r0, r7, #1
 80089a2:	d1d6      	bne.n	8008952 <_vfiprintf_r+0x19a>
 80089a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089a6:	07d9      	lsls	r1, r3, #31
 80089a8:	d405      	bmi.n	80089b6 <_vfiprintf_r+0x1fe>
 80089aa:	89ab      	ldrh	r3, [r5, #12]
 80089ac:	059a      	lsls	r2, r3, #22
 80089ae:	d402      	bmi.n	80089b6 <_vfiprintf_r+0x1fe>
 80089b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089b2:	f7fe fb99 	bl	80070e8 <__retarget_lock_release_recursive>
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	065b      	lsls	r3, r3, #25
 80089ba:	f53f af1f 	bmi.w	80087fc <_vfiprintf_r+0x44>
 80089be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089c0:	e71e      	b.n	8008800 <_vfiprintf_r+0x48>
 80089c2:	ab03      	add	r3, sp, #12
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	462a      	mov	r2, r5
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <_vfiprintf_r+0x228>)
 80089ca:	a904      	add	r1, sp, #16
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7fe f87b 	bl	8006ac8 <_printf_i>
 80089d2:	e7e4      	b.n	800899e <_vfiprintf_r+0x1e6>
 80089d4:	080090e2 	.word	0x080090e2
 80089d8:	080090ec 	.word	0x080090ec
 80089dc:	08006599 	.word	0x08006599
 80089e0:	08008793 	.word	0x08008793
 80089e4:	080090e8 	.word	0x080090e8

080089e8 <__swbuf_r>:
 80089e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ea:	460e      	mov	r6, r1
 80089ec:	4614      	mov	r4, r2
 80089ee:	4605      	mov	r5, r0
 80089f0:	b118      	cbz	r0, 80089fa <__swbuf_r+0x12>
 80089f2:	6a03      	ldr	r3, [r0, #32]
 80089f4:	b90b      	cbnz	r3, 80089fa <__swbuf_r+0x12>
 80089f6:	f7fe fa13 	bl	8006e20 <__sinit>
 80089fa:	69a3      	ldr	r3, [r4, #24]
 80089fc:	60a3      	str	r3, [r4, #8]
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	071a      	lsls	r2, r3, #28
 8008a02:	d501      	bpl.n	8008a08 <__swbuf_r+0x20>
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	b943      	cbnz	r3, 8008a1a <__swbuf_r+0x32>
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f000 f82a 	bl	8008a64 <__swsetup_r>
 8008a10:	b118      	cbz	r0, 8008a1a <__swbuf_r+0x32>
 8008a12:	f04f 37ff 	mov.w	r7, #4294967295
 8008a16:	4638      	mov	r0, r7
 8008a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	6922      	ldr	r2, [r4, #16]
 8008a1e:	1a98      	subs	r0, r3, r2
 8008a20:	6963      	ldr	r3, [r4, #20]
 8008a22:	b2f6      	uxtb	r6, r6
 8008a24:	4283      	cmp	r3, r0
 8008a26:	4637      	mov	r7, r6
 8008a28:	dc05      	bgt.n	8008a36 <__swbuf_r+0x4e>
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f7ff fe17 	bl	8008660 <_fflush_r>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d1ed      	bne.n	8008a12 <__swbuf_r+0x2a>
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	701e      	strb	r6, [r3, #0]
 8008a44:	6962      	ldr	r2, [r4, #20]
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d004      	beq.n	8008a56 <__swbuf_r+0x6e>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	07db      	lsls	r3, r3, #31
 8008a50:	d5e1      	bpl.n	8008a16 <__swbuf_r+0x2e>
 8008a52:	2e0a      	cmp	r6, #10
 8008a54:	d1df      	bne.n	8008a16 <__swbuf_r+0x2e>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f7ff fe01 	bl	8008660 <_fflush_r>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d0d9      	beq.n	8008a16 <__swbuf_r+0x2e>
 8008a62:	e7d6      	b.n	8008a12 <__swbuf_r+0x2a>

08008a64 <__swsetup_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4b29      	ldr	r3, [pc, #164]	@ (8008b0c <__swsetup_r+0xa8>)
 8008a68:	4605      	mov	r5, r0
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	b118      	cbz	r0, 8008a78 <__swsetup_r+0x14>
 8008a70:	6a03      	ldr	r3, [r0, #32]
 8008a72:	b90b      	cbnz	r3, 8008a78 <__swsetup_r+0x14>
 8008a74:	f7fe f9d4 	bl	8006e20 <__sinit>
 8008a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7c:	0719      	lsls	r1, r3, #28
 8008a7e:	d422      	bmi.n	8008ac6 <__swsetup_r+0x62>
 8008a80:	06da      	lsls	r2, r3, #27
 8008a82:	d407      	bmi.n	8008a94 <__swsetup_r+0x30>
 8008a84:	2209      	movs	r2, #9
 8008a86:	602a      	str	r2, [r5, #0]
 8008a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a8c:	81a3      	strh	r3, [r4, #12]
 8008a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a92:	e033      	b.n	8008afc <__swsetup_r+0x98>
 8008a94:	0758      	lsls	r0, r3, #29
 8008a96:	d512      	bpl.n	8008abe <__swsetup_r+0x5a>
 8008a98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a9a:	b141      	cbz	r1, 8008aae <__swsetup_r+0x4a>
 8008a9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008aa0:	4299      	cmp	r1, r3
 8008aa2:	d002      	beq.n	8008aaa <__swsetup_r+0x46>
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f7ff f98b 	bl	8007dc0 <_free_r>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ab4:	81a3      	strh	r3, [r4, #12]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	6063      	str	r3, [r4, #4]
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f043 0308 	orr.w	r3, r3, #8
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	6923      	ldr	r3, [r4, #16]
 8008ac8:	b94b      	cbnz	r3, 8008ade <__swsetup_r+0x7a>
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad4:	d003      	beq.n	8008ade <__swsetup_r+0x7a>
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f000 f883 	bl	8008be4 <__smakebuf_r>
 8008ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae2:	f013 0201 	ands.w	r2, r3, #1
 8008ae6:	d00a      	beq.n	8008afe <__swsetup_r+0x9a>
 8008ae8:	2200      	movs	r2, #0
 8008aea:	60a2      	str	r2, [r4, #8]
 8008aec:	6962      	ldr	r2, [r4, #20]
 8008aee:	4252      	negs	r2, r2
 8008af0:	61a2      	str	r2, [r4, #24]
 8008af2:	6922      	ldr	r2, [r4, #16]
 8008af4:	b942      	cbnz	r2, 8008b08 <__swsetup_r+0xa4>
 8008af6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008afa:	d1c5      	bne.n	8008a88 <__swsetup_r+0x24>
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
 8008afe:	0799      	lsls	r1, r3, #30
 8008b00:	bf58      	it	pl
 8008b02:	6962      	ldrpl	r2, [r4, #20]
 8008b04:	60a2      	str	r2, [r4, #8]
 8008b06:	e7f4      	b.n	8008af2 <__swsetup_r+0x8e>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7f7      	b.n	8008afc <__swsetup_r+0x98>
 8008b0c:	20000024 	.word	0x20000024

08008b10 <_raise_r>:
 8008b10:	291f      	cmp	r1, #31
 8008b12:	b538      	push	{r3, r4, r5, lr}
 8008b14:	4605      	mov	r5, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	d904      	bls.n	8008b24 <_raise_r+0x14>
 8008b1a:	2316      	movs	r3, #22
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b26:	b112      	cbz	r2, 8008b2e <_raise_r+0x1e>
 8008b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b2c:	b94b      	cbnz	r3, 8008b42 <_raise_r+0x32>
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f000 f830 	bl	8008b94 <_getpid_r>
 8008b34:	4622      	mov	r2, r4
 8008b36:	4601      	mov	r1, r0
 8008b38:	4628      	mov	r0, r5
 8008b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b3e:	f000 b817 	b.w	8008b70 <_kill_r>
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d00a      	beq.n	8008b5c <_raise_r+0x4c>
 8008b46:	1c59      	adds	r1, r3, #1
 8008b48:	d103      	bne.n	8008b52 <_raise_r+0x42>
 8008b4a:	2316      	movs	r3, #22
 8008b4c:	6003      	str	r3, [r0, #0]
 8008b4e:	2001      	movs	r0, #1
 8008b50:	e7e7      	b.n	8008b22 <_raise_r+0x12>
 8008b52:	2100      	movs	r1, #0
 8008b54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4798      	blx	r3
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e7e0      	b.n	8008b22 <_raise_r+0x12>

08008b60 <raise>:
 8008b60:	4b02      	ldr	r3, [pc, #8]	@ (8008b6c <raise+0xc>)
 8008b62:	4601      	mov	r1, r0
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	f7ff bfd3 	b.w	8008b10 <_raise_r>
 8008b6a:	bf00      	nop
 8008b6c:	20000024 	.word	0x20000024

08008b70 <_kill_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d07      	ldr	r5, [pc, #28]	@ (8008b90 <_kill_r+0x20>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	f7f8 fe77 	bl	8001870 <_kill>
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	d102      	bne.n	8008b8c <_kill_r+0x1c>
 8008b86:	682b      	ldr	r3, [r5, #0]
 8008b88:	b103      	cbz	r3, 8008b8c <_kill_r+0x1c>
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000524 	.word	0x20000524

08008b94 <_getpid_r>:
 8008b94:	f7f8 be64 	b.w	8001860 <_getpid>

08008b98 <__swhatbuf_r>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	b096      	sub	sp, #88	@ 0x58
 8008ba4:	4615      	mov	r5, r2
 8008ba6:	461e      	mov	r6, r3
 8008ba8:	da0d      	bge.n	8008bc6 <__swhatbuf_r+0x2e>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bb0:	f04f 0100 	mov.w	r1, #0
 8008bb4:	bf14      	ite	ne
 8008bb6:	2340      	movne	r3, #64	@ 0x40
 8008bb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	6031      	str	r1, [r6, #0]
 8008bc0:	602b      	str	r3, [r5, #0]
 8008bc2:	b016      	add	sp, #88	@ 0x58
 8008bc4:	bd70      	pop	{r4, r5, r6, pc}
 8008bc6:	466a      	mov	r2, sp
 8008bc8:	f000 f848 	bl	8008c5c <_fstat_r>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	dbec      	blt.n	8008baa <__swhatbuf_r+0x12>
 8008bd0:	9901      	ldr	r1, [sp, #4]
 8008bd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bda:	4259      	negs	r1, r3
 8008bdc:	4159      	adcs	r1, r3
 8008bde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008be2:	e7eb      	b.n	8008bbc <__swhatbuf_r+0x24>

08008be4 <__smakebuf_r>:
 8008be4:	898b      	ldrh	r3, [r1, #12]
 8008be6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008be8:	079d      	lsls	r5, r3, #30
 8008bea:	4606      	mov	r6, r0
 8008bec:	460c      	mov	r4, r1
 8008bee:	d507      	bpl.n	8008c00 <__smakebuf_r+0x1c>
 8008bf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	6123      	str	r3, [r4, #16]
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	6163      	str	r3, [r4, #20]
 8008bfc:	b003      	add	sp, #12
 8008bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c00:	ab01      	add	r3, sp, #4
 8008c02:	466a      	mov	r2, sp
 8008c04:	f7ff ffc8 	bl	8008b98 <__swhatbuf_r>
 8008c08:	9f00      	ldr	r7, [sp, #0]
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7fd fb12 	bl	8006238 <_malloc_r>
 8008c14:	b948      	cbnz	r0, 8008c2a <__smakebuf_r+0x46>
 8008c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1a:	059a      	lsls	r2, r3, #22
 8008c1c:	d4ee      	bmi.n	8008bfc <__smakebuf_r+0x18>
 8008c1e:	f023 0303 	bic.w	r3, r3, #3
 8008c22:	f043 0302 	orr.w	r3, r3, #2
 8008c26:	81a3      	strh	r3, [r4, #12]
 8008c28:	e7e2      	b.n	8008bf0 <__smakebuf_r+0xc>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	6020      	str	r0, [r4, #0]
 8008c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c32:	81a3      	strh	r3, [r4, #12]
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c3a:	b15b      	cbz	r3, 8008c54 <__smakebuf_r+0x70>
 8008c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c40:	4630      	mov	r0, r6
 8008c42:	f000 f81d 	bl	8008c80 <_isatty_r>
 8008c46:	b128      	cbz	r0, 8008c54 <__smakebuf_r+0x70>
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	f023 0303 	bic.w	r3, r3, #3
 8008c4e:	f043 0301 	orr.w	r3, r3, #1
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	431d      	orrs	r5, r3
 8008c58:	81a5      	strh	r5, [r4, #12]
 8008c5a:	e7cf      	b.n	8008bfc <__smakebuf_r+0x18>

08008c5c <_fstat_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4d07      	ldr	r5, [pc, #28]	@ (8008c7c <_fstat_r+0x20>)
 8008c60:	2300      	movs	r3, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	4611      	mov	r1, r2
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	f7f8 fe61 	bl	8001930 <_fstat>
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	d102      	bne.n	8008c78 <_fstat_r+0x1c>
 8008c72:	682b      	ldr	r3, [r5, #0]
 8008c74:	b103      	cbz	r3, 8008c78 <_fstat_r+0x1c>
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	bd38      	pop	{r3, r4, r5, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000524 	.word	0x20000524

08008c80 <_isatty_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4d06      	ldr	r5, [pc, #24]	@ (8008c9c <_isatty_r+0x1c>)
 8008c84:	2300      	movs	r3, #0
 8008c86:	4604      	mov	r4, r0
 8008c88:	4608      	mov	r0, r1
 8008c8a:	602b      	str	r3, [r5, #0]
 8008c8c:	f7f8 fe60 	bl	8001950 <_isatty>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d102      	bne.n	8008c9a <_isatty_r+0x1a>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	b103      	cbz	r3, 8008c9a <_isatty_r+0x1a>
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	20000524 	.word	0x20000524

08008ca0 <_init>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr

08008cac <_fini>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	bf00      	nop
 8008cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb2:	bc08      	pop	{r3}
 8008cb4:	469e      	mov	lr, r3
 8008cb6:	4770      	bx	lr
