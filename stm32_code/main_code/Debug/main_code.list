
main_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a844  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800a9d8  0800a9d8  0000b9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2b4  0800b2b4  0000d838  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2b4  0800b2b4  0000c2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2bc  0800b2bc  0000d838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2bc  0800b2bc  0000c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2c0  0800b2c0  0000c2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000838  20000000  0800b2c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000838  0800bafc  0000d838  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c44  0800bafc  0000dc44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d838  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f49  00000000  00000000  0000d868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003084  00000000  00000000  000217b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00024838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d79  00000000  00000000  000259a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c2b  00000000  00000000  00026721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167a0  00000000  00000000  0004f34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f51b8  00000000  00000000  00065aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015aca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a50  00000000  00000000  0015ace8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00160738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000838 	.word	0x20000838
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9bc 	.word	0x0800a9bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000083c 	.word	0x2000083c
 80001cc:	0800a9bc 	.word	0x0800a9bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_UART_RxCpltCallback>:
extern int argc;
extern char* argv[10];



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0a4      	sub	sp, #144	@ 0x90
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Check which UART triggered the callback
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a58      	ldr	r2, [pc, #352]	@ (8001028 <HAL_UART_RxCpltCallback+0x170>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f040 8171 	bne.w	80011ae <HAL_UART_RxCpltCallback+0x2f6>
        // Process received data
    	char* token;
        argc = 0;
 8000ecc:	4b57      	ldr	r3, [pc, #348]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
        const char delim[] = " ";
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

        // Storing the command name
        token = strtok(command, delim);
 8000ed8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000edc:	4619      	mov	r1, r3
 8000ede:	4854      	ldr	r0, [pc, #336]	@ (8001030 <HAL_UART_RxCpltCallback+0x178>)
 8000ee0:	f007 fc4e 	bl	8008780 <strtok>
 8000ee4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
        argv[argc] = token;
 8000ee8:	4b50      	ldr	r3, [pc, #320]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4951      	ldr	r1, [pc, #324]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000eee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        argc++;
 8000ef6:	4b4d      	ldr	r3, [pc, #308]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a4b      	ldr	r2, [pc, #300]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000efe:	6013      	str	r3, [r2, #0]

        // Storing the command parameters
        while(token!=NULL){
 8000f00:	e013      	b.n	8000f2a <HAL_UART_RxCpltCallback+0x72>
            token = strtok(NULL, delim);
 8000f02:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000f06:	4619      	mov	r1, r3
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f007 fc39 	bl	8008780 <strtok>
 8000f0e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
            argv[argc] = token;
 8000f12:	4b46      	ldr	r3, [pc, #280]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4947      	ldr	r1, [pc, #284]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f18:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            argc++;
 8000f20:	4b42      	ldr	r3, [pc, #264]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	4a41      	ldr	r2, [pc, #260]	@ (800102c <HAL_UART_RxCpltCallback+0x174>)
 8000f28:	6013      	str	r3, [r2, #0]
        while(token!=NULL){
 8000f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1e7      	bne.n	8000f02 <HAL_UART_RxCpltCallback+0x4a>
        }

        
        if (state==LISTENING_STATE){
 8000f32:	4b41      	ldr	r3, [pc, #260]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 809e 	bne.w	8001078 <HAL_UART_RxCpltCallback+0x1c0>

            if (strcmp(argv[0],"move")==0){
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	493e      	ldr	r1, [pc, #248]	@ (800103c <HAL_UART_RxCpltCallback+0x184>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff f944 	bl	80001d0 <strcmp>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d103      	bne.n	8000f56 <HAL_UART_RxCpltCallback+0x9e>
                state = MOVING_STATE;
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f50:	2203      	movs	r2, #3
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e090      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"turn")==0){
 8000f56:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4939      	ldr	r1, [pc, #228]	@ (8001040 <HAL_UART_RxCpltCallback+0x188>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f937 	bl	80001d0 <strcmp>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d103      	bne.n	8000f70 <HAL_UART_RxCpltCallback+0xb8>
                state = TURNING_STATE;
 8000f68:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e083      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"change")==0){
 8000f70:	4b30      	ldr	r3, [pc, #192]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4933      	ldr	r1, [pc, #204]	@ (8001044 <HAL_UART_RxCpltCallback+0x18c>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff f92a 	bl	80001d0 <strcmp>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <HAL_UART_RxCpltCallback+0xd2>
                state = VARIABLE_CHANGE_STATE;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f84:	2206      	movs	r2, #6
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e076      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"home")==0){
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	492e      	ldr	r1, [pc, #184]	@ (8001048 <HAL_UART_RxCpltCallback+0x190>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f91d 	bl	80001d0 <strcmp>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d103      	bne.n	8000fa4 <HAL_UART_RxCpltCallback+0xec>
                state = HOMING_STATE;
 8000f9c:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e069      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }
            else if (strcmp(argv[0],"picture")==0){
 8000fa4:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4928      	ldr	r1, [pc, #160]	@ (800104c <HAL_UART_RxCpltCallback+0x194>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff f910 	bl	80001d0 <strcmp>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d103      	bne.n	8000fbe <HAL_UART_RxCpltCallback+0x106>
                state = PICTURING_STATE;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000fb8:	2208      	movs	r2, #8
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e05c      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"getFirmware")==0){
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4923      	ldr	r1, [pc, #140]	@ (8001050 <HAL_UART_RxCpltCallback+0x198>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f903 	bl	80001d0 <strcmp>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <HAL_UART_RxCpltCallback+0x120>
                state = FIRMWARE_SENDING_STATE;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000fd2:	2209      	movs	r2, #9
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e04f      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }

            else if (strcmp(argv[0],"moveTo")==0){
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	491d      	ldr	r1, [pc, #116]	@ (8001054 <HAL_UART_RxCpltCallback+0x19c>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f8f6 	bl	80001d0 <strcmp>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <HAL_UART_RxCpltCallback+0x13a>
                state = MOVING_TO_STATE;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8000fec:	2205      	movs	r2, #5
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e042      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }
            
            else if (strcmp(argv[0],"computeStep")==0){
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4918      	ldr	r1, [pc, #96]	@ (8001058 <HAL_UART_RxCpltCallback+0x1a0>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8e9 	bl	80001d0 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <HAL_UART_RxCpltCallback+0x154>
                state = STEP_COMPUTING_STATE;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8001006:	2207      	movs	r2, #7
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e035      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
            }
            else if (strcmp(argv[0],"play")==0){
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_UART_RxCpltCallback+0x17c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4912      	ldr	r1, [pc, #72]	@ (800105c <HAL_UART_RxCpltCallback+0x1a4>)
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f8dc 	bl	80001d0 <strcmp>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d120      	bne.n	8001060 <HAL_UART_RxCpltCallback+0x1a8>
                state = CAPTURING_STATE;
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_UART_RxCpltCallback+0x180>)
 8001020:	220c      	movs	r2, #12
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e028      	b.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	20000a94 	.word	0x20000a94
 8001030:	20000a14 	.word	0x20000a14
 8001034:	20000a98 	.word	0x20000a98
 8001038:	20000ac0 	.word	0x20000ac0
 800103c:	0800a9d8 	.word	0x0800a9d8
 8001040:	0800a9e0 	.word	0x0800a9e0
 8001044:	0800a9e8 	.word	0x0800a9e8
 8001048:	0800a9f0 	.word	0x0800a9f0
 800104c:	0800a9f8 	.word	0x0800a9f8
 8001050:	0800aa00 	.word	0x0800aa00
 8001054:	0800aa0c 	.word	0x0800aa0c
 8001058:	0800aa14 	.word	0x0800aa14
 800105c:	0800aa20 	.word	0x0800aa20
                
            }
            else if (strcmp(argv[0], "playTestSequence")== 0){
 8001060:	4b55      	ldr	r3, [pc, #340]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4955      	ldr	r1, [pc, #340]	@ (80011bc <HAL_UART_RxCpltCallback+0x304>)
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f8b2 	bl	80001d0 <strcmp>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <HAL_UART_RxCpltCallback+0x1c0>
                state = TESTING_SEQUENCE_STATE; 
 8001072:	4b53      	ldr	r3, [pc, #332]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001074:	220d      	movs	r2, #13
 8001076:	601a      	str	r2, [r3, #0]
            }

    
        }

        if (state == CAPTURING_STATE){
 8001078:	4b51      	ldr	r3, [pc, #324]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d12c      	bne.n	80010da <HAL_UART_RxCpltCallback+0x222>
            if (strcmp(argv[0],"stop")==0){
 8001080:	4b4d      	ldr	r3, [pc, #308]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	494f      	ldr	r1, [pc, #316]	@ (80011c4 <HAL_UART_RxCpltCallback+0x30c>)
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8a2 	bl	80001d0 <strcmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_UART_RxCpltCallback+0x1e0>
                state = STOPPING_STATE;
 8001092:	4b4b      	ldr	r3, [pc, #300]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001094:	220a      	movs	r2, #10
 8001096:	601a      	str	r2, [r3, #0]
            }
            if (strcmp(argv[0],"pause")==0){
 8001098:	4b47      	ldr	r3, [pc, #284]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	494a      	ldr	r1, [pc, #296]	@ (80011c8 <HAL_UART_RxCpltCallback+0x310>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f896 	bl	80001d0 <strcmp>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d117      	bne.n	80010da <HAL_UART_RxCpltCallback+0x222>
                // Notifying pc of the change of steps
                char message[BUFF_SIZE] = {" "};
 80010aa:	2320      	movs	r3, #32
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	227c      	movs	r2, #124	@ 0x7c
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f007 fb47 	bl	800874a <memset>
                snprintf(message, sizeof(message), "logCapture Paused capture");
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	4a42      	ldr	r2, [pc, #264]	@ (80011cc <HAL_UART_RxCpltCallback+0x314>)
 80010c2:	2180      	movs	r1, #128	@ 0x80
 80010c4:	4618      	mov	r0, r3
 80010c6:	f007 fac9 	bl	800865c <sniprintf>
                transmit_to_pc(&message);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f88a 	bl	80011e8 <transmit_to_pc>
                state = PAUSED_STATE;
 80010d4:	4b3a      	ldr	r3, [pc, #232]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
            }
    
        }
        if (state == TESTING_SEQUENCE_STATE){
 80010da:	4b39      	ldr	r3, [pc, #228]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b0d      	cmp	r3, #13
 80010e0:	d12c      	bne.n	800113c <HAL_UART_RxCpltCallback+0x284>
            if (strcmp(argv[0],"stopTestSequence")==0){
 80010e2:	4b35      	ldr	r3, [pc, #212]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	493a      	ldr	r1, [pc, #232]	@ (80011d0 <HAL_UART_RxCpltCallback+0x318>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f871 	bl	80001d0 <strcmp>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <HAL_UART_RxCpltCallback+0x242>
                state = STOPPING_SEQUENCE_STATE;
 80010f4:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 80010f6:	220b      	movs	r2, #11
 80010f8:	601a      	str	r2, [r3, #0]
            }
            if (strcmp(argv[0],"pauseTestSequence")==0){
 80010fa:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4935      	ldr	r1, [pc, #212]	@ (80011d4 <HAL_UART_RxCpltCallback+0x31c>)
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f865 	bl	80001d0 <strcmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d117      	bne.n	800113c <HAL_UART_RxCpltCallback+0x284>
                // Notifying pc of the change of steps
                char message[BUFF_SIZE] = {" "};
 800110c:	2320      	movs	r3, #32
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	227c      	movs	r2, #124	@ 0x7c
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f007 fb16 	bl	800874a <memset>
                snprintf(message, sizeof(message), "logTest Paused the test of the capture sequence");
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <HAL_UART_RxCpltCallback+0x320>)
 8001124:	2180      	movs	r1, #128	@ 0x80
 8001126:	4618      	mov	r0, r3
 8001128:	f007 fa98 	bl	800865c <sniprintf>
                transmit_to_pc(&message);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f859 	bl	80011e8 <transmit_to_pc>
                state = PAUSED_STATE;
 8001136:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
            }
    
        }
        if (state == PAUSED_STATE){
 800113c:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d12f      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x2ec>
            if (strcmp(argv[0],"play")==0){
 8001144:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4924      	ldr	r1, [pc, #144]	@ (80011dc <HAL_UART_RxCpltCallback+0x324>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f840 	bl	80001d0 <strcmp>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <HAL_UART_RxCpltCallback+0x2a4>
                state = CAPTURING_STATE;
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001158:	220c      	movs	r2, #12
 800115a:	601a      	str	r2, [r3, #0]
            }
            if (strcmp(argv[0],"stop")==0){
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4918      	ldr	r1, [pc, #96]	@ (80011c4 <HAL_UART_RxCpltCallback+0x30c>)
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f834 	bl	80001d0 <strcmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <HAL_UART_RxCpltCallback+0x2bc>
                state = STOPPING_STATE;
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001170:	220a      	movs	r2, #10
 8001172:	601a      	str	r2, [r3, #0]
            }

            if (strcmp(argv[0],"playTestSequence")==0){
 8001174:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4910      	ldr	r1, [pc, #64]	@ (80011bc <HAL_UART_RxCpltCallback+0x304>)
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f828 	bl	80001d0 <strcmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <HAL_UART_RxCpltCallback+0x2d4>
                state = TESTING_SEQUENCE_STATE;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 8001188:	220d      	movs	r2, #13
 800118a:	601a      	str	r2, [r3, #0]
            }
            if (strcmp(argv[0],"stopTestSequence")==0){
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_UART_RxCpltCallback+0x300>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	490f      	ldr	r1, [pc, #60]	@ (80011d0 <HAL_UART_RxCpltCallback+0x318>)
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f81c 	bl	80001d0 <strcmp>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x2ec>
                state = STOPPING_SEQUENCE_STATE;
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_UART_RxCpltCallback+0x308>)
 80011a0:	220b      	movs	r2, #11
 80011a2:	601a      	str	r2, [r3, #0]
            }
        }
        


        HAL_UART_Receive_IT(&huart2, &command, BUFF_SIZE);  // Restart reception
 80011a4:	2280      	movs	r2, #128	@ 0x80
 80011a6:	490e      	ldr	r1, [pc, #56]	@ (80011e0 <HAL_UART_RxCpltCallback+0x328>)
 80011a8:	480e      	ldr	r0, [pc, #56]	@ (80011e4 <HAL_UART_RxCpltCallback+0x32c>)
 80011aa:	f005 f9a3 	bl	80064f4 <HAL_UART_Receive_IT>

    }
}
 80011ae:	bf00      	nop
 80011b0:	3790      	adds	r7, #144	@ 0x90
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000a98 	.word	0x20000a98
 80011bc:	0800aa28 	.word	0x0800aa28
 80011c0:	20000ac0 	.word	0x20000ac0
 80011c4:	0800aa3c 	.word	0x0800aa3c
 80011c8:	0800aa44 	.word	0x0800aa44
 80011cc:	0800aa4c 	.word	0x0800aa4c
 80011d0:	0800aa68 	.word	0x0800aa68
 80011d4:	0800aa7c 	.word	0x0800aa7c
 80011d8:	0800aa90 	.word	0x0800aa90
 80011dc:	0800aa20 	.word	0x0800aa20
 80011e0:	20000a14 	.word	0x20000a14
 80011e4:	2000098c 	.word	0x2000098c

080011e8 <transmit_to_pc>:

void transmit_to_pc(char** message){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, message, BUFF_SIZE, 1000);
 80011f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <transmit_to_pc+0x20>)
 80011fa:	f005 f8f1 	bl	80063e0 <HAL_UART_Transmit>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000098c 	.word	0x2000098c

0800120c <send1Pulse>:
int r_pulse_nb = 180; //number of pulse to move 1°

int current_x = 0;
int current_theta = 0;

void send1Pulse(int n_driver){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	uint16_t GPIO_PIN;
	GPIO_PIN = (n_driver==T_MOTOR)?GPIO_PIN_5:GPIO_PIN_7;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d101      	bne.n	800121e <send1Pulse+0x12>
 800121a:	2320      	movs	r3, #32
 800121c:	e000      	b.n	8001220 <send1Pulse+0x14>
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN, 1);
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122c:	f002 fb74 	bl	8003918 <HAL_GPIO_WritePin>
	delayMicroseconds(step_time_us);
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <send1Pulse+0x44>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f001 ff41 	bl	80030bc <delayMicroseconds>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN, 0);
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001244:	f002 fb68 	bl	8003918 <HAL_GPIO_WritePin>

}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000

08001254 <sendNPulse>:

void sendNPulse(int N, int n_driver){
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i<N; i++){
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e00d      	b.n	8001280 <sendNPulse+0x2c>
		send1Pulse(n_driver);
 8001264:	6838      	ldr	r0, [r7, #0]
 8001266:	f7ff ffd1 	bl	800120c <send1Pulse>
		delayMicroseconds(wait_between_steps_us[n_driver-1]);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <sendNPulse+0x40>)
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	4618      	mov	r0, r3
 8001276:	f001 ff21 	bl	80030bc <delayMicroseconds>
	for (int i = 0; i<N; i++){
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbed      	blt.n	8001264 <sendNPulse+0x10>
	}
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000004 	.word	0x20000004

08001298 <translate>:


// ------------ Moving functions ---------------------------
void translate(int dx){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

	int coeff;
	if (dx >= 0){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db06      	blt.n	80012b4 <translate+0x1c>
        coeff = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
        setDirection(T_MOTOR, FORWARD);
 80012aa:	2101      	movs	r1, #1
 80012ac:	2002      	movs	r0, #2
 80012ae:	f000 f9b1 	bl	8001614 <setDirection>
 80012b2:	e006      	b.n	80012c2 <translate+0x2a>
    }
	else {
        coeff = -1;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	60fb      	str	r3, [r7, #12]
		setDirection(T_MOTOR, BACKWARD);
 80012ba:	2100      	movs	r1, #0
 80012bc:	2002      	movs	r0, #2
 80012be:	f000 f9a9 	bl	8001614 <setDirection>
    }
	
	int nb_pulses = coeff*dx*t_pulse_nb;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	4a09      	ldr	r2, [pc, #36]	@ (80012f0 <translate+0x58>)
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	60bb      	str	r3, [r7, #8]
	sendNPulse(nb_pulses, T_MOTOR);
 80012d4:	2102      	movs	r1, #2
 80012d6:	68b8      	ldr	r0, [r7, #8]
 80012d8:	f7ff ffbc 	bl	8001254 <sendNPulse>


	current_x += dx;
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <translate+0x5c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a03      	ldr	r2, [pc, #12]	@ (80012f4 <translate+0x5c>)
 80012e6:	6013      	str	r3, [r2, #0]

}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000000c 	.word	0x2000000c
 80012f4:	20000854 	.word	0x20000854

080012f8 <rotate>:

void rotate(int dtheta){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	int coeff;
	if (dtheta >= 0){
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db06      	blt.n	8001314 <rotate+0x1c>
        coeff = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
        setDirection(R_MOTOR, FORWARD);
 800130a:	2101      	movs	r1, #1
 800130c:	2001      	movs	r0, #1
 800130e:	f000 f981 	bl	8001614 <setDirection>
 8001312:	e006      	b.n	8001322 <rotate+0x2a>
    } else {
		coeff = -1;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	60fb      	str	r3, [r7, #12]
		setDirection(R_MOTOR, BACKWARD);
 800131a:	2100      	movs	r1, #0
 800131c:	2001      	movs	r0, #1
 800131e:	f000 f979 	bl	8001614 <setDirection>
    }
	
	int nb_pulses = coeff*dtheta*r_pulse_nb;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <rotate+0x58>)
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	60bb      	str	r3, [r7, #8]
	sendNPulse(nb_pulses, R_MOTOR);
 8001334:	2101      	movs	r1, #1
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f7ff ff8c 	bl	8001254 <sendNPulse>

	current_theta += dtheta;
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <rotate+0x5c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	4a03      	ldr	r2, [pc, #12]	@ (8001354 <rotate+0x5c>)
 8001346:	6013      	str	r3, [r2, #0]

}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000010 	.word	0x20000010
 8001354:	20000858 	.word	0x20000858

08001358 <move>:

void move(int dx, int dtheta, int capture){
 8001358:	b580      	push	{r7, lr}
 800135a:	b0a8      	sub	sp, #160	@ 0xa0
 800135c:	af04      	add	r7, sp, #16
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
	setSleep(T_MOTOR, ENABLE);
 8001364:	2101      	movs	r1, #1
 8001366:	2002      	movs	r0, #2
 8001368:	f000 f9be 	bl	80016e8 <setSleep>
	setSleep(R_MOTOR, ENABLE);
 800136c:	2101      	movs	r1, #1
 800136e:	2001      	movs	r0, #1
 8001370:	f000 f9ba 	bl	80016e8 <setSleep>
	translate(dx);
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f7ff ff8f 	bl	8001298 <translate>
	rotate(dtheta);
 800137a:	68b8      	ldr	r0, [r7, #8]
 800137c:	f7ff ffbc 	bl	80012f8 <rotate>
	setSleep(T_MOTOR, DISABLE);
 8001380:	2100      	movs	r1, #0
 8001382:	2002      	movs	r0, #2
 8001384:	f000 f9b0 	bl	80016e8 <setSleep>
	setSleep(R_MOTOR, DISABLE);
 8001388:	2100      	movs	r1, #0
 800138a:	2001      	movs	r0, #1
 800138c:	f000 f9ac 	bl	80016e8 <setSleep>

	char message[BUFF_SIZE] = {" "};
 8001390:	2320      	movs	r3, #32
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	227c      	movs	r2, #124	@ 0x7c
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f007 f9d4 	bl	800874a <memset>
	snprintf(message, sizeof(message), "position %d %d", current_x, current_theta);
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <move+0xf8>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <move+0xfc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f107 0010 	add.w	r0, r7, #16
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	4a29      	ldr	r2, [pc, #164]	@ (8001458 <move+0x100>)
 80013b4:	2180      	movs	r1, #128	@ 0x80
 80013b6:	f007 f951 	bl	800865c <sniprintf>
	transmit_to_pc(&message);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff12 	bl	80011e8 <transmit_to_pc>
	memset(message, 0, BUFF_SIZE);
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	2280      	movs	r2, #128	@ 0x80
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 f9bc 	bl	800874a <memset>
	
	if (capture == 1){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d11b      	bne.n	8001410 <move+0xb8>
		snprintf(message, sizeof(message), "logCapture Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <move+0xf8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001454 <move+0xfc>)
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	f107 0010 	add.w	r0, r7, #16
 80013e4:	9202      	str	r2, [sp, #8]
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <move+0x104>)
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	f007 f933 	bl	800865c <sniprintf>
		transmit_to_pc(&message);
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fef4 	bl	80011e8 <transmit_to_pc>
		memset(message, 0, BUFF_SIZE);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f007 f99e 	bl	800874a <memset>
		transmit_to_pc(&message);
		memset(message, 0, BUFF_SIZE);
	}
	
	
}
 800140e:	e01a      	b.n	8001446 <move+0xee>
		snprintf(message, sizeof(message), "logTest Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <move+0xf8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0f      	ldr	r2, [pc, #60]	@ (8001454 <move+0xfc>)
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	f107 0010 	add.w	r0, r7, #16
 800141c:	9202      	str	r2, [sp, #8]
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <move+0x108>)
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	f007 f917 	bl	800865c <sniprintf>
		transmit_to_pc(&message);
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fed8 	bl	80011e8 <transmit_to_pc>
		memset(message, 0, BUFF_SIZE);
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2280      	movs	r2, #128	@ 0x80
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f007 f982 	bl	800874a <memset>
}
 8001446:	bf00      	nop
 8001448:	3790      	adds	r7, #144	@ 0x90
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000854 	.word	0x20000854
 8001454:	20000858 	.word	0x20000858
 8001458:	0800aac0 	.word	0x0800aac0
 800145c:	0800aad0 	.word	0x0800aad0
 8001460:	0800ab10 	.word	0x0800ab10

08001464 <move_to>:

void move_to(int x, int theta, int capture){
 8001464:	b580      	push	{r7, lr}
 8001466:	b0aa      	sub	sp, #168	@ 0xa8
 8001468:	af04      	add	r7, sp, #16
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	int dx = x - current_x;
 8001470:	4b46      	ldr	r3, [pc, #280]	@ (800158c <move_to+0x128>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int dtheta = theta - current_theta;
 800147c:	4b44      	ldr	r3, [pc, #272]	@ (8001590 <move_to+0x12c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    setSleep(T_MOTOR, ENABLE);
 8001488:	2101      	movs	r1, #1
 800148a:	2002      	movs	r0, #2
 800148c:	f000 f92c 	bl	80016e8 <setSleep>
	setSleep(R_MOTOR, ENABLE);
 8001490:	2101      	movs	r1, #1
 8001492:	2001      	movs	r0, #1
 8001494:	f000 f928 	bl	80016e8 <setSleep>
	translate(dx);
 8001498:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800149c:	f7ff fefc 	bl	8001298 <translate>
	rotate(dtheta);
 80014a0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80014a4:	f7ff ff28 	bl	80012f8 <rotate>
	setSleep(T_MOTOR, DISABLE);
 80014a8:	2100      	movs	r1, #0
 80014aa:	2002      	movs	r0, #2
 80014ac:	f000 f91c 	bl	80016e8 <setSleep>
	setSleep(R_MOTOR, DISABLE);
 80014b0:	2100      	movs	r1, #0
 80014b2:	2001      	movs	r0, #1
 80014b4:	f000 f918 	bl	80016e8 <setSleep>

	current_x = x;
 80014b8:	4a34      	ldr	r2, [pc, #208]	@ (800158c <move_to+0x128>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6013      	str	r3, [r2, #0]
	current_theta = theta;
 80014be:	4a34      	ldr	r2, [pc, #208]	@ (8001590 <move_to+0x12c>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	6013      	str	r3, [r2, #0]

	char message[BUFF_SIZE] = {" "};
 80014c4:	2320      	movs	r3, #32
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	227c      	movs	r2, #124	@ 0x7c
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f007 f93a 	bl	800874a <memset>
	snprintf(message, sizeof(message), "position %d %d", current_x, current_theta);
 80014d6:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <move_to+0x128>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <move_to+0x12c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f107 0010 	add.w	r0, r7, #16
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001594 <move_to+0x130>)
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	f007 f8b7 	bl	800865c <sniprintf>
	transmit_to_pc(&message);
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fe78 	bl	80011e8 <transmit_to_pc>
	memset(message, 0, BUFF_SIZE);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	2280      	movs	r2, #128	@ 0x80
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f007 f922 	bl	800874a <memset>

	if (capture == 1){
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d11d      	bne.n	8001548 <move_to+0xe4>
		snprintf(message, sizeof(message), "logCapture Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <move_to+0x128>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a1f      	ldr	r2, [pc, #124]	@ (8001590 <move_to+0x12c>)
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	f107 0010 	add.w	r0, r7, #16
 8001518:	9202      	str	r2, [sp, #8]
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001526:	4a1c      	ldr	r2, [pc, #112]	@ (8001598 <move_to+0x134>)
 8001528:	2180      	movs	r1, #128	@ 0x80
 800152a:	f007 f897 	bl	800865c <sniprintf>
		transmit_to_pc(&message);
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fe58 	bl	80011e8 <transmit_to_pc>
		memset(message, 0, BUFF_SIZE);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	2280      	movs	r2, #128	@ 0x80
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f007 f902 	bl	800874a <memset>
	else{
		snprintf(message, sizeof(message), "logTest Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
		transmit_to_pc(&message);
		memset(message, 0, BUFF_SIZE);
	}
}
 8001546:	e01c      	b.n	8001582 <move_to+0x11e>
		snprintf(message, sizeof(message), "logTest Moved of (%d mm, %d °) | Position : (%d mm, %d °)", dx, dtheta, current_x, current_theta);
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <move_to+0x128>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a10      	ldr	r2, [pc, #64]	@ (8001590 <move_to+0x12c>)
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	f107 0010 	add.w	r0, r7, #16
 8001554:	9202      	str	r2, [sp, #8]
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001562:	4a0e      	ldr	r2, [pc, #56]	@ (800159c <move_to+0x138>)
 8001564:	2180      	movs	r1, #128	@ 0x80
 8001566:	f007 f879 	bl	800865c <sniprintf>
		transmit_to_pc(&message);
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fe3a 	bl	80011e8 <transmit_to_pc>
		memset(message, 0, BUFF_SIZE);
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	2280      	movs	r2, #128	@ 0x80
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f007 f8e4 	bl	800874a <memset>
}
 8001582:	bf00      	nop
 8001584:	3798      	adds	r7, #152	@ 0x98
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000854 	.word	0x20000854
 8001590:	20000858 	.word	0x20000858
 8001594:	0800aac0 	.word	0x0800aac0
 8001598:	0800aad0 	.word	0x0800aad0
 800159c:	0800ab10 	.word	0x0800ab10

080015a0 <setMicrosteppingMode>:


// ------------ Mode functions ---------------------------

void setMicrosteppingMode(int stepping_mode){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	   |  H  |  H  |  L  | Eighth Step          | 2W1-2 Phase      |
	   |  H  |  H  |  H  | Sixteenth Step       | 4W1-2 Phase      |

	   Note: by setting the stepping mode in {0,1,2,3,4}, MSx is just the x-th bits of the stepping mode
	*/
	int MS1 = stepping_mode&0x1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
	int MS2 = (stepping_mode&0x2)>>1;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	105b      	asrs	r3, r3, #1
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
	int MS3 = (stepping_mode&0x4)>>2;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	109b      	asrs	r3, r3, #2
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]

	if (stepping_mode==SIXTEENTH_STEP){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d105      	bne.n	80015d6 <setMicrosteppingMode+0x36>
		MS1 = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
		MS2 = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
		MS3 = 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]

	// PA9 -> MS1
	// PC7 -> MS2
	// PB6 -> MS3

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, MS1);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e4:	f002 f998 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, MS2);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	2180      	movs	r1, #128	@ 0x80
 80015f0:	4806      	ldr	r0, [pc, #24]	@ (800160c <setMicrosteppingMode+0x6c>)
 80015f2:	f002 f991 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, MS3);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	2140      	movs	r1, #64	@ 0x40
 80015fe:	4804      	ldr	r0, [pc, #16]	@ (8001610 <setMicrosteppingMode+0x70>)
 8001600:	f002 f98a 	bl	8003918 <HAL_GPIO_WritePin>


}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	48000800 	.word	0x48000800
 8001610:	48000400 	.word	0x48000400

08001614 <setDirection>:

void setDirection(int n_driver, int direction){
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]

	if (n_driver==T_MOTOR){
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d109      	bne.n	8001638 <setDirection+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, direction);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800162e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001632:	f002 f971 	bl	8003918 <HAL_GPIO_WritePin>
 8001636:	e00a      	b.n	800164e <setDirection+0x3a>
	}

	else if (n_driver==R_MOTOR){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <setDirection+0x3a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, direction);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001648:	4804      	ldr	r0, [pc, #16]	@ (800165c <setDirection+0x48>)
 800164a:	f002 f965 	bl	8003918 <HAL_GPIO_WritePin>
	}

	// Required time to wait before sending a step : 200 ns
	delayMicroseconds(1);
 800164e:	2001      	movs	r0, #1
 8001650:	f001 fd34 	bl	80030bc <delayMicroseconds>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	48000400 	.word	0x48000400

08001660 <setEnable>:

void setEnable(int n_driver, int state){
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	if (n_driver==R_MOTOR){
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <setEnable+0x22>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, state);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	2101      	movs	r1, #1
 8001678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167c:	f002 f94c 	bl	8003918 <HAL_GPIO_WritePin>
    }

    else if (n_driver==T_MOTOR){
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, state);
    }
}
 8001680:	e00a      	b.n	8001698 <setEnable+0x38>
    else if (n_driver==T_MOTOR){
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d107      	bne.n	8001698 <setEnable+0x38>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, state);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	2102      	movs	r1, #2
 8001690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001694:	f002 f940 	bl	8003918 <HAL_GPIO_WritePin>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <setReset>:

void setReset(int n_driver, int state){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	if (n_driver==R_MOTOR){
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <setReset+0x20>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, state);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	2120      	movs	r1, #32
 80016b8:	480a      	ldr	r0, [pc, #40]	@ (80016e4 <setReset+0x44>)
 80016ba:	f002 f92d 	bl	8003918 <HAL_GPIO_WritePin>
 80016be:	e009      	b.n	80016d4 <setReset+0x34>
    }

    else if (n_driver==T_MOTOR){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d106      	bne.n	80016d4 <setReset+0x34>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, state);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	2110      	movs	r1, #16
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <setReset+0x44>)
 80016d0:	f002 f922 	bl	8003918 <HAL_GPIO_WritePin>
    }

	// Required time to wait before sending a step : 200 ns
	delayMicroseconds(1);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f001 fcf1 	bl	80030bc <delayMicroseconds>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	48000400 	.word	0x48000400

080016e8 <setSleep>:

void setSleep(int n_driver, int state){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	if (n_driver==R_MOTOR){
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d109      	bne.n	800170c <setSleep+0x24>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, state);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001706:	f002 f907 	bl	8003918 <HAL_GPIO_WritePin>
 800170a:	e009      	b.n	8001720 <setSleep+0x38>
    }

    else if (n_driver==T_MOTOR){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d106      	bne.n	8001720 <setSleep+0x38>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, state);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	2108      	movs	r1, #8
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <setSleep+0x48>)
 800171c:	f002 f8fc 	bl	8003918 <HAL_GPIO_WritePin>
    }
	
	// Required time to wait before sending a step : 1 ms
	delayMicroseconds(2000);
 8001720:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001724:	f001 fcca 	bl	80030bc <delayMicroseconds>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	48000400 	.word	0x48000400

08001734 <initializeDrivers>:


// ------------ Initialization functions ---------------------------

void initializeDrivers(){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	setMicrosteppingMode(SIXTEENTH_STEP);
 8001738:	2004      	movs	r0, #4
 800173a:	f7ff ff31 	bl	80015a0 <setMicrosteppingMode>


	setReset(T_MOTOR, ENABLE);
 800173e:	2101      	movs	r1, #1
 8001740:	2002      	movs	r0, #2
 8001742:	f7ff ffad 	bl	80016a0 <setReset>
	setReset(R_MOTOR, ENABLE);
 8001746:	2101      	movs	r1, #1
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff ffa9 	bl	80016a0 <setReset>

	setSleep(T_MOTOR, DISABLE);
 800174e:	2100      	movs	r1, #0
 8001750:	2002      	movs	r0, #2
 8001752:	f7ff ffc9 	bl	80016e8 <setSleep>
	setSleep(R_MOTOR, DISABLE);
 8001756:	2100      	movs	r1, #0
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff ffc5 	bl	80016e8 <setSleep>

	setDirection(T_MOTOR, FORWARD);
 800175e:	2101      	movs	r1, #1
 8001760:	2002      	movs	r0, #2
 8001762:	f7ff ff57 	bl	8001614 <setDirection>
	setDirection(R_MOTOR, FORWARD);
 8001766:	2101      	movs	r1, #1
 8001768:	2001      	movs	r0, #1
 800176a:	f7ff ff53 	bl	8001614 <setDirection>

	setEnable(T_MOTOR, DISABLE);
 800176e:	2100      	movs	r1, #0
 8001770:	2002      	movs	r0, #2
 8001772:	f7ff ff75 	bl	8001660 <setEnable>
	setEnable(R_MOTOR, DISABLE);
 8001776:	2100      	movs	r1, #0
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff ff71 	bl	8001660 <setEnable>

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <home_motors>:

void home_motors(){
 8001784:	b580      	push	{r7, lr}
 8001786:	b0a4      	sub	sp, #144	@ 0x90
 8001788:	af02      	add	r7, sp, #8
	setDirection(T_MOTOR, BACKWARD);
 800178a:	2100      	movs	r1, #0
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff ff41 	bl	8001614 <setDirection>

	int flag = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	setSleep(T_MOTOR, ENABLE);
 8001798:	2101      	movs	r1, #1
 800179a:	2002      	movs	r0, #2
 800179c:	f7ff ffa4 	bl	80016e8 <setSleep>
	setSleep(R_MOTOR, ENABLE);
 80017a0:	2101      	movs	r1, #1
 80017a2:	2001      	movs	r0, #1
 80017a4:	f7ff ffa0 	bl	80016e8 <setSleep>



    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0){
 80017a8:	e007      	b.n	80017ba <home_motors+0x36>
		send1Pulse(T_MOTOR);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff fd2e 	bl	800120c <send1Pulse>
		delayMicroseconds(wait_between_steps_us[1]);
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <home_motors+0x9c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 fc81 	bl	80030bc <delayMicroseconds>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0){
 80017ba:	2110      	movs	r1, #16
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c0:	f002 f892 	bl	80038e8 <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ef      	bne.n	80017aa <home_motors+0x26>
	}

    setSleep(T_MOTOR, DISABLE);
 80017ca:	2100      	movs	r1, #0
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7ff ff8b 	bl	80016e8 <setSleep>
    setSleep(R_MOTOR, DISABLE);
 80017d2:	2100      	movs	r1, #0
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff ff87 	bl	80016e8 <setSleep>


	current_x = 0;
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <home_motors+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
	current_theta = 0;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <home_motors+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

	char message[BUFF_SIZE] = {" "};
 80017e6:	2320      	movs	r3, #32
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	227c      	movs	r2, #124	@ 0x7c
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f006 ffa9 	bl	800874a <memset>
	snprintf(message, sizeof(message), "position %d %d", current_x, current_theta);
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <home_motors+0xa0>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <home_motors+0xa4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1d38      	adds	r0, r7, #4
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	4a09      	ldr	r2, [pc, #36]	@ (800182c <home_motors+0xa8>)
 8001808:	2180      	movs	r1, #128	@ 0x80
 800180a:	f006 ff27 	bl	800865c <sniprintf>
	transmit_to_pc(&message);
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fce9 	bl	80011e8 <transmit_to_pc>

}
 8001816:	bf00      	nop
 8001818:	3788      	adds	r7, #136	@ 0x88
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000004 	.word	0x20000004
 8001824:	20000854 	.word	0x20000854
 8001828:	20000858 	.word	0x20000858
 800182c:	0800aac0 	.word	0x0800aac0

08001830 <get_translation_time>:


int get_translation_time(int dx){
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	int nb_pulses = t_pulse_nb*dx; // number of pulses to move of dx
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <get_translation_time+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	60fb      	str	r3, [r7, #12]

	int pulse_time_us = step_time_us + wait_between_steps_us[1];
 8001844:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <get_translation_time+0x58>)
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <get_translation_time+0x5c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4413      	add	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]

	return (int)(float)(pulse_time_us*nb_pulses)/(float)(1000000);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	fb02 f303 	mul.w	r3, r2, r3
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001868:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001890 <get_translation_time+0x60>
 800186c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001874:	ee17 3a90 	vmov	r3, s15
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	2000000c 	.word	0x2000000c
 8001888:	20000004 	.word	0x20000004
 800188c:	20000000 	.word	0x20000000
 8001890:	49742400 	.word	0x49742400

08001894 <get_rotation_time>:

int get_rotation_time(int dtheta){
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	int nb_pulses = r_pulse_nb*dtheta; // number of pulses to rotate of dtheta
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <get_rotation_time+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	60fb      	str	r3, [r7, #12]

    int pulse_time_us = step_time_us + wait_between_steps_us[0];
 80018a8:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <get_rotation_time+0x58>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <get_rotation_time+0x5c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]

    return (int)(float)(pulse_time_us*nb_pulses)/(float)(1000000);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018cc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80018f4 <get_rotation_time+0x60>
 80018d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	20000010 	.word	0x20000010
 80018ec:	20000004 	.word	0x20000004
 80018f0:	20000000 	.word	0x20000000
 80018f4:	49742400 	.word	0x49742400

080018f8 <update_speeds>:


void update_speeds(int t_speed, int r_speed){
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
	wait_between_steps_us[0] = ROTATION_MAX_WAITING_TIME + ((float)(r_speed)/(float)(100))*(ROTATION_MIN_WAITING_TIME-ROTATION_MAX_WAITING_TIME);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800196c <update_speeds+0x74>
 8001910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001914:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001970 <update_speeds+0x78>
 8001918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001974 <update_speeds+0x7c>
 8001920:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001928:	ee17 2a90 	vmov	r2, s15
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <update_speeds+0x80>)
 800192e:	601a      	str	r2, [r3, #0]
	wait_between_steps_us[1] = TRANSLATION_MAX_WAITING_TIME + ((float)(t_speed)/(float)(100))*(TRANSLATION_MIN_WAITING_TIME-TRANSLATION_MAX_WAITING_TIME);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800196c <update_speeds+0x74>
 800193e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001942:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001970 <update_speeds+0x78>
 8001946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001974 <update_speeds+0x7c>
 800194e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001956:	ee17 2a90 	vmov	r2, s15
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <update_speeds+0x80>)
 800195c:	605a      	str	r2, [r3, #4]
	
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	42c80000 	.word	0x42c80000
 8001970:	c43b8000 	.word	0xc43b8000
 8001974:	447a0000 	.word	0x447a0000
 8001978:	20000004 	.word	0x20000004

0800197c <find_value>:
        {"saving_time",0, "s"},
        {"margin_time",0,"s"},
        {"mode", 0, ""}
    };

int find_value(char* name){
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < NB_VAR; i++){
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e01a      	b.n	80019c0 <find_value+0x44>
        if (strcmp(name, variables[i].name) == 0){
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4a0e      	ldr	r2, [pc, #56]	@ (80019d0 <find_value+0x54>)
 8001996:	4413      	add	r3, r2
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7fe fc18 	bl	80001d0 <strcmp>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <find_value+0x3e>
            return variables[i].value;
 80019a6:	490a      	ldr	r1, [pc, #40]	@ (80019d0 <find_value+0x54>)
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	440b      	add	r3, r1
 80019b4:	3340      	adds	r3, #64	@ 0x40
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e005      	b.n	80019c6 <find_value+0x4a>
    for (int i = 0; i < NB_VAR; i++){
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3301      	adds	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b13      	cmp	r3, #19
 80019c4:	dde1      	ble.n	800198a <find_value+0xe>
        }
    }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000014 	.word	0x20000014

080019d4 <init>:


void init(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
    // Initializing the time reference counter
    __HAL_TIM_SET_COUNTER(&htim5, 0);  // Reset the counter to 0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <init+0x34>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim5);
 80019e0:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <init+0x34>)
 80019e2:	f003 fb29 	bl	8005038 <HAL_TIM_Base_Start>
   
    // Initializing the IR emmition timer
    HAL_TIM_Base_Start(&htim16);
 80019e6:	4809      	ldr	r0, [pc, #36]	@ (8001a0c <init+0x38>)
 80019e8:	f003 fb26 	bl	8005038 <HAL_TIM_Base_Start>
    TIM16->CCR1 = 1000; // setting the compare register to half the period (to generate a square signal)
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <init+0x3c>)
 80019ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019f2:	635a      	str	r2, [r3, #52]	@ 0x34
    //HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
   
   
    // Initializing the command buffer and receiving command over UART
    HAL_UART_Receive_IT(&huart2, command, BUFF_SIZE);
 80019f4:	2280      	movs	r2, #128	@ 0x80
 80019f6:	4907      	ldr	r1, [pc, #28]	@ (8001a14 <init+0x40>)
 80019f8:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <init+0x44>)
 80019fa:	f004 fd7b 	bl	80064f4 <HAL_UART_Receive_IT>
   
    initializeDrivers();
 80019fe:	f7ff fe99 	bl	8001734 <initializeDrivers>


}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200008f4 	.word	0x200008f4
 8001a0c:	20000940 	.word	0x20000940
 8001a10:	40014400 	.word	0x40014400
 8001a14:	20000a14 	.word	0x20000a14
 8001a18:	2000098c 	.word	0x2000098c

08001a1c <sendBit1>:
#include "communication.h"

extern TIM_HandleTypeDef htim16;

// IR CODE //
void sendBit1() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    // Start PWM for 1200 µs for logic "1" pulse
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001a20:	2100      	movs	r1, #0
 8001a22:	4808      	ldr	r0, [pc, #32]	@ (8001a44 <sendBit1+0x28>)
 8001a24:	f003 fbd2 	bl	80051cc <HAL_TIM_PWM_Start>
    delayMicroseconds(1200);
 8001a28:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001a2c:	f001 fb46 	bl	80030bc <delayMicroseconds>

    // Stop PWM to represent "off" period of 600 µs
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8001a30:	2100      	movs	r1, #0
 8001a32:	4804      	ldr	r0, [pc, #16]	@ (8001a44 <sendBit1+0x28>)
 8001a34:	f003 fcd0 	bl	80053d8 <HAL_TIM_PWM_Stop>
    delayMicroseconds(600);
 8001a38:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a3c:	f001 fb3e 	bl	80030bc <delayMicroseconds>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000940 	.word	0x20000940

08001a48 <sendBit0>:

void sendBit0() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    // Start PWM for 600 µs for logic "0" pulse
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4808      	ldr	r0, [pc, #32]	@ (8001a70 <sendBit0+0x28>)
 8001a50:	f003 fbbc 	bl	80051cc <HAL_TIM_PWM_Start>
    delayMicroseconds(600);  // Custom microsecond delay function
 8001a54:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a58:	f001 fb30 	bl	80030bc <delayMicroseconds>

    // Stop PWM to represent "off" period of 600 µs
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4804      	ldr	r0, [pc, #16]	@ (8001a70 <sendBit0+0x28>)
 8001a60:	f003 fcba 	bl	80053d8 <HAL_TIM_PWM_Stop>
    delayMicroseconds(600);  // Same low duration as the pulse for "0"
 8001a64:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a68:	f001 fb28 	bl	80030bc <delayMicroseconds>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000940 	.word	0x20000940

08001a74 <sendSIRCSData>:

void sendSIRCSData(int data) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

	// Start pulse
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4816      	ldr	r0, [pc, #88]	@ (8001ad8 <sendSIRCSData+0x64>)
 8001a80:	f003 fba4 	bl	80051cc <HAL_TIM_PWM_Start>
    delayMicroseconds(2400);  // 2.4 ms "on" for start pulse
 8001a84:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001a88:	f001 fb18 	bl	80030bc <delayMicroseconds>
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4812      	ldr	r0, [pc, #72]	@ (8001ad8 <sendSIRCSData+0x64>)
 8001a90:	f003 fca2 	bl	80053d8 <HAL_TIM_PWM_Stop>
    delayMicroseconds(600);  // 0.6 ms "off" period
 8001a94:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a98:	f001 fb10 	bl	80030bc <delayMicroseconds>

    // Transmit 32 bits of data
    for (int i = 0; i < 20; i++) {
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e011      	b.n	8001ac6 <sendSIRCSData+0x52>

        if (data & (1UL << (19 - i))) {
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f1c3 0313 	rsb	r3, r3, #19
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <sendSIRCSData+0x48>

            sendBit1();
 8001ab6:	f7ff ffb1 	bl	8001a1c <sendBit1>
 8001aba:	e001      	b.n	8001ac0 <sendSIRCSData+0x4c>

        } else {

            sendBit0();
 8001abc:	f7ff ffc4 	bl	8001a48 <sendBit0>
    for (int i = 0; i < 20; i++) {
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b13      	cmp	r3, #19
 8001aca:	ddea      	ble.n	8001aa2 <sendSIRCSData+0x2e>

        }
    }

}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000940 	.word	0x20000940

08001adc <takePicture>:

void takePicture(int capture){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0a4      	sub	sp, #144	@ 0x90
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	int data = 0b10110100101110001111;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <takePicture+0x94>)
 8001ae6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	for (int i = 0; i<3; i++){
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001af0:	e008      	b.n	8001b04 <takePicture+0x28>
	  sendSIRCSData(data);
 8001af2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001af6:	f7ff ffbd 	bl	8001a74 <sendSIRCSData>
	for (int i = 0; i<3; i++){
 8001afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001afe:	3301      	adds	r3, #1
 8001b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	ddf2      	ble.n	8001af2 <takePicture+0x16>
	}

    if (capture == 1){
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d115      	bne.n	8001b3e <takePicture+0x62>
        char message[BUFF_SIZE] = {" "};
 8001b12:	2320      	movs	r3, #32
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	227c      	movs	r2, #124	@ 0x7c
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f006 fe13 	bl	800874a <memset>
        snprintf(message, sizeof(message), "logCapture Picture taken");
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4a12      	ldr	r2, [pc, #72]	@ (8001b74 <takePicture+0x98>)
 8001b2a:	2180      	movs	r1, #128	@ 0x80
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f006 fd95 	bl	800865c <sniprintf>
        transmit_to_pc(&message);
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fb56 	bl	80011e8 <transmit_to_pc>
        snprintf(message, sizeof(message), "logTest Picture taken");
        transmit_to_pc(&message);
    }


}
 8001b3c:	e014      	b.n	8001b68 <takePicture+0x8c>
        char message[BUFF_SIZE] = {" "};
 8001b3e:	2320      	movs	r3, #32
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	227c      	movs	r2, #124	@ 0x7c
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f006 fdfd 	bl	800874a <memset>
        snprintf(message, sizeof(message), "logTest Picture taken");
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <takePicture+0x9c>)
 8001b56:	2180      	movs	r1, #128	@ 0x80
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f006 fd7f 	bl	800865c <sniprintf>
        transmit_to_pc(&message);
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb40 	bl	80011e8 <transmit_to_pc>
}
 8001b68:	bf00      	nop
 8001b6a:	3790      	adds	r7, #144	@ 0x90
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	000b4b8f 	.word	0x000b4b8f
 8001b74:	0800ab4c 	.word	0x0800ab4c
 8001b78:	0800ab68 	.word	0x0800ab68

08001b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b80:	f001 fafc 	bl	800317c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b84:	f000 f812 	bl	8001bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b88:	f000 f9f4 	bl	8001f74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b8c:	f000 f9c2 	bl	8001f14 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001b90:	f000 f948 	bl	8001e24 <MX_TIM16_Init>
  MX_TIM5_Init();
 8001b94:	f000 f8f8 	bl	8001d88 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001b98:	f000 f85a 	bl	8001c50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b9c:	f000 f8a6 	bl	8001cec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  init();
 8001ba0:	f7ff ff18 	bl	80019d4 <init>
  run();
 8001ba4:	f000 fa8c 	bl	80020c0 <run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <main+0x2c>

08001bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b096      	sub	sp, #88	@ 0x58
 8001bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	2244      	movs	r2, #68	@ 0x44
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f006 fdc5 	bl	800874a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bd2:	f001 fec7 	bl	8003964 <HAL_PWREx_ControlVoltageScaling>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bdc:	f000 fa6a 	bl	80020b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be0:	2302      	movs	r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bea:	2310      	movs	r3, #16
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 fefe 	bl	8003a10 <HAL_RCC_OscConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c1a:	f000 fa4b 	bl	80020b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1e:	230f      	movs	r3, #15
 8001c20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c22:	2303      	movs	r3, #3
 8001c24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c32:	463b      	mov	r3, r7
 8001c34:	2104      	movs	r1, #4
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 fac6 	bl	80041c8 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c42:	f000 fa37 	bl	80020b4 <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3758      	adds	r7, #88	@ 0x58
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c96:	4814      	ldr	r0, [pc, #80]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c98:	f003 f976 	bl	8004f88 <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ca2:	f000 fa07 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001caa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001cb4:	f003 fd3a 	bl	800572c <HAL_TIM_ConfigClockSource>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001cbe:	f000 f9f9 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001cd0:	f004 fa32 	bl	8006138 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cda:	f000 f9eb 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000085c 	.word	0x2000085c

08001cec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <MX_TIM3_Init+0x94>)
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d84 <MX_TIM3_Init+0x98>)
 8001d0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <MX_TIM3_Init+0x94>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <MX_TIM3_Init+0x94>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <MX_TIM3_Init+0x94>)
 8001d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d24:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <MX_TIM3_Init+0x94>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <MX_TIM3_Init+0x94>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d30:	4813      	ldr	r0, [pc, #76]	@ (8001d80 <MX_TIM3_Init+0x94>)
 8001d32:	f003 f929 	bl	8004f88 <HAL_TIM_Base_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d3c:	f000 f9ba 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <MX_TIM3_Init+0x94>)
 8001d4e:	f003 fced 	bl	800572c <HAL_TIM_ConfigClockSource>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001d58:	f000 f9ac 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <MX_TIM3_Init+0x94>)
 8001d6a:	f004 f9e5 	bl	8006138 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d74:	f000 f99e 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200008a8 	.word	0x200008a8
 8001d84:	40000400 	.word	0x40000400

08001d88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001da8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e20 <MX_TIM5_Init+0x98>)
 8001daa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dae:	224f      	movs	r2, #79	@ 0x4f
 8001db0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001db8:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dcc:	4813      	ldr	r0, [pc, #76]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dce:	f003 f8db 	bl	8004f88 <HAL_TIM_Base_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001dd8:	f000 f96c 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	4619      	mov	r1, r3
 8001de8:	480c      	ldr	r0, [pc, #48]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dea:	f003 fc9f 	bl	800572c <HAL_TIM_ConfigClockSource>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001df4:	f000 f95e 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001e06:	f004 f997 	bl	8006138 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001e10:	f000 f950 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200008f4 	.word	0x200008f4
 8001e20:	40000c00 	.word	0x40000c00

08001e24 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b092      	sub	sp, #72	@ 0x48
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]
 8001e3a:	615a      	str	r2, [r3, #20]
 8001e3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	222c      	movs	r2, #44	@ 0x2c
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f006 fc80 	bl	800874a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e4a:	4b30      	ldr	r3, [pc, #192]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001e4c:	4a30      	ldr	r2, [pc, #192]	@ (8001f10 <MX_TIM16_Init+0xec>)
 8001e4e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001e50:	4b2e      	ldr	r3, [pc, #184]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e56:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000-1;
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001e5e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001e62:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e6a:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e76:	4825      	ldr	r0, [pc, #148]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001e78:	f003 f886 	bl	8004f88 <HAL_TIM_Base_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001e82:	f000 f917 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001e86:	4821      	ldr	r0, [pc, #132]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001e88:	f003 f93e 	bl	8005108 <HAL_TIM_PWM_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001e92:	f000 f90f 	bl	80020b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e96:	2360      	movs	r3, #96	@ 0x60
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4814      	ldr	r0, [pc, #80]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001ebc:	f003 fb22 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001ec6:	f000 f8f5 	bl	80020b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ede:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001ee8:	463b      	mov	r3, r7
 8001eea:	4619      	mov	r1, r3
 8001eec:	4807      	ldr	r0, [pc, #28]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001eee:	f004 f9ab 	bl	8006248 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001ef8:	f000 f8dc 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001efc:	4803      	ldr	r0, [pc, #12]	@ (8001f0c <MX_TIM16_Init+0xe8>)
 8001efe:	f000 ff31 	bl	8002d64 <HAL_TIM_MspPostInit>

}
 8001f02:	bf00      	nop
 8001f04:	3748      	adds	r7, #72	@ 0x48
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000940 	.word	0x20000940
 8001f10:	40014400 	.word	0x40014400

08001f14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f1a:	4a15      	ldr	r2, [pc, #84]	@ (8001f70 <MX_USART2_UART_Init+0x5c>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f58:	f004 f9f4 	bl	8006344 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f62:	f000 f8a7 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000098c 	.word	0x2000098c
 8001f70:	40004400 	.word	0x40004400

08001f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	4a46      	ldr	r2, [pc, #280]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f96:	4b44      	ldr	r3, [pc, #272]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa2:	4b41      	ldr	r3, [pc, #260]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	4a40      	ldr	r2, [pc, #256]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fae:	4b3e      	ldr	r3, [pc, #248]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b3b      	ldr	r3, [pc, #236]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc6:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	4a34      	ldr	r2, [pc, #208]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fde:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <MX_GPIO_Init+0x134>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7
 8001fea:	2200      	movs	r2, #0
 8001fec:	f240 71a3 	movw	r1, #1955	@ 0x7a3
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff4:	f001 fc90 	bl	8003918 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8001ffe:	482b      	ldr	r0, [pc, #172]	@ (80020ac <MX_GPIO_Init+0x138>)
 8002000:	f001 fc8a 	bl	8003918 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002004:	2200      	movs	r2, #0
 8002006:	2180      	movs	r1, #128	@ 0x80
 8002008:	4829      	ldr	r0, [pc, #164]	@ (80020b0 <MX_GPIO_Init+0x13c>)
 800200a:	f001 fc85 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800200e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002014:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4822      	ldr	r0, [pc, #136]	@ (80020b0 <MX_GPIO_Init+0x13c>)
 8002026:	f001 fab5 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA7
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7
 800202a:	f240 73a3 	movw	r3, #1955	@ 0x7a3
 800202e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002046:	f001 faa5 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800204a:	2310      	movs	r3, #16
 800204c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002060:	f001 fa98 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002064:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 8002068:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	480b      	ldr	r0, [pc, #44]	@ (80020ac <MX_GPIO_Init+0x138>)
 800207e:	f001 fa89 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002086:	2301      	movs	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <MX_GPIO_Init+0x13c>)
 800209a:	f001 fa7b 	bl	8003594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	@ 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000400 	.word	0x48000400
 80020b0:	48000800 	.word	0x48000800

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b8:	b672      	cpsid	i
}
 80020ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <Error_Handler+0x8>

080020c0 <run>:

int translation_index = 0;
int rotation_index = 0;


void run(){
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	ed2d 8b02 	vpush	{d8}
 80020c6:	b0bf      	sub	sp, #252	@ 0xfc
 80020c8:	af04      	add	r7, sp, #16
    while (1){
        if (state == MOVING_STATE){
 80020ca:	4b85      	ldr	r3, [pc, #532]	@ (80022e0 <run+0x220>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d110      	bne.n	80020f4 <run+0x34>
            int distance = atoi(argv[1]);
 80020d2:	4b84      	ldr	r3, [pc, #528]	@ (80022e4 <run+0x224>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f005 fd1e 	bl	8007b18 <atoi>
 80020dc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
            move(distance, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80020e8:	f7ff f936 	bl	8001358 <move>

            state = LISTENING_STATE;
 80020ec:	4b7c      	ldr	r3, [pc, #496]	@ (80022e0 <run+0x220>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e7ea      	b.n	80020ca <run+0xa>
            
        }
      
        else if (state == TURNING_STATE){
 80020f4:	4b7a      	ldr	r3, [pc, #488]	@ (80022e0 <run+0x220>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d110      	bne.n	800211e <run+0x5e>
            int angle = atoi(argv[1]);
 80020fc:	4b79      	ldr	r3, [pc, #484]	@ (80022e4 <run+0x224>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	f005 fd09 	bl	8007b18 <atoi>
 8002106:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
            move(0, angle, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff f921 	bl	8001358 <move>

            state = LISTENING_STATE;
 8002116:	4b72      	ldr	r3, [pc, #456]	@ (80022e0 <run+0x220>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e7d5      	b.n	80020ca <run+0xa>
        }

        else if (state == VARIABLE_CHANGE_STATE){
 800211e:	4b70      	ldr	r3, [pc, #448]	@ (80022e0 <run+0x220>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b06      	cmp	r3, #6
 8002124:	d160      	bne.n	80021e8 <run+0x128>
            char unit[64];
            for (int i = 0; i < NB_VAR; i++){
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800212c:	e034      	b.n	8002198 <run+0xd8>
                if (strcmp(argv[1], variables[i].name) == 0){
 800212e:	4b6d      	ldr	r3, [pc, #436]	@ (80022e4 <run+0x224>)
 8002130:	6858      	ldr	r0, [r3, #4]
 8002132:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4a6a      	ldr	r2, [pc, #424]	@ (80022e8 <run+0x228>)
 8002140:	4413      	add	r3, r2
 8002142:	4619      	mov	r1, r3
 8002144:	f7fe f844 	bl	80001d0 <strcmp>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11f      	bne.n	800218e <run+0xce>
                    variables[i].value = atoi(argv[2]);
 800214e:	4b65      	ldr	r3, [pc, #404]	@ (80022e4 <run+0x224>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f005 fce0 	bl	8007b18 <atoi>
 8002158:	4601      	mov	r1, r0
 800215a:	4863      	ldr	r0, [pc, #396]	@ (80022e8 <run+0x228>)
 800215c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	4403      	add	r3, r0
 800216a:	3340      	adds	r3, #64	@ 0x40
 800216c:	6019      	str	r1, [r3, #0]
                    strncpy(unit, variables[i].unit, sizeof(unit));
 800216e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	3340      	adds	r3, #64	@ 0x40
 800217c:	4a5a      	ldr	r2, [pc, #360]	@ (80022e8 <run+0x228>)
 800217e:	4413      	add	r3, r2
 8002180:	1d19      	adds	r1, r3, #4
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2240      	movs	r2, #64	@ 0x40
 8002186:	4618      	mov	r0, r3
 8002188:	f006 fae7 	bl	800875a <strncpy>
                    break;
 800218c:	e008      	b.n	80021a0 <run+0xe0>
            for (int i = 0; i < NB_VAR; i++){
 800218e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002192:	3301      	adds	r3, #1
 8002194:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800219c:	2b13      	cmp	r3, #19
 800219e:	ddc6      	ble.n	800212e <run+0x6e>
                }
            }

            // Notifying pc of the successful variable change
            char message[BUFF_SIZE] = {" "};
 80021a0:	2320      	movs	r3, #32
 80021a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021a8:	227c      	movs	r2, #124	@ 0x7c
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f006 facc 	bl	800874a <memset>
            snprintf(message, sizeof(message), "logSettings Variable : %s set to : %d %s", argv[1], atoi(argv[2]), unit);
 80021b2:	4b4c      	ldr	r3, [pc, #304]	@ (80022e4 <run+0x224>)
 80021b4:	685c      	ldr	r4, [r3, #4]
 80021b6:	4b4b      	ldr	r3, [pc, #300]	@ (80022e4 <run+0x224>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 fcac 	bl	8007b18 <atoi>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	9200      	str	r2, [sp, #0]
 80021cc:	4623      	mov	r3, r4
 80021ce:	4a47      	ldr	r2, [pc, #284]	@ (80022ec <run+0x22c>)
 80021d0:	2180      	movs	r1, #128	@ 0x80
 80021d2:	f006 fa43 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 80021d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f804 	bl	80011e8 <transmit_to_pc>

            state = LISTENING_STATE;
 80021e0:	4b3f      	ldr	r3, [pc, #252]	@ (80022e0 <run+0x220>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e770      	b.n	80020ca <run+0xa>
        }

        else if (state == CAPTURING_STATE){
 80021e8:	4b3d      	ldr	r3, [pc, #244]	@ (80022e0 <run+0x220>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	f040 8195 	bne.w	800251c <run+0x45c>

            char message[BUFF_SIZE] = {" "};
 80021f2:	2320      	movs	r3, #32
 80021f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021fa:	227c      	movs	r2, #124	@ 0x7c
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f006 faa3 	bl	800874a <memset>
            snprintf(message, sizeof(message), "progress %d %d %d", pictures_taken, pictures_taken_for_this_packet, packets_completed);
 8002204:	4b3a      	ldr	r3, [pc, #232]	@ (80022f0 <run+0x230>)
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	4b3a      	ldr	r3, [pc, #232]	@ (80022f4 <run+0x234>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a3a      	ldr	r2, [pc, #232]	@ (80022f8 <run+0x238>)
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002214:	9201      	str	r2, [sp, #4]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	460b      	mov	r3, r1
 800221a:	4a38      	ldr	r2, [pc, #224]	@ (80022fc <run+0x23c>)
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	f006 fa1d 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 8002222:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe ffde 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 800222c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f006 fa88 	bl	800874a <memset>

            int x = find_value("translation_starting_point") + (int)(translation_index*t_step);
 800223a:	4831      	ldr	r0, [pc, #196]	@ (8002300 <run+0x240>)
 800223c:	f7ff fb9e 	bl	800197c <find_value>
 8002240:	4603      	mov	r3, r0
 8002242:	4a30      	ldr	r2, [pc, #192]	@ (8002304 <run+0x244>)
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	ee07 2a90 	vmov	s15, r2
 800224a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224e:	4a2e      	ldr	r2, [pc, #184]	@ (8002308 <run+0x248>)
 8002250:	edd2 7a00 	vldr	s15, [r2]
 8002254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225c:	ee17 2a90 	vmov	r2, s15
 8002260:	4413      	add	r3, r2
 8002262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            int theta = find_value("rotation_starting_point")+ (int)(rotation_index*t_step);
 8002266:	4829      	ldr	r0, [pc, #164]	@ (800230c <run+0x24c>)
 8002268:	f7ff fb88 	bl	800197c <find_value>
 800226c:	4603      	mov	r3, r0
 800226e:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <run+0x250>)
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	ee07 2a90 	vmov	s15, r2
 8002276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227a:	4a23      	ldr	r2, [pc, #140]	@ (8002308 <run+0x248>)
 800227c:	edd2 7a00 	vldr	s15, [r2]
 8002280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002288:	ee17 2a90 	vmov	r2, s15
 800228c:	4413      	add	r3, r2
 800228e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            move_to(x, theta,1);
 8002292:	2201      	movs	r2, #1
 8002294:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002298:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800229c:	f7ff f8e2 	bl	8001464 <move_to>

            if (find_value("mode")==TRANSLATION_FIRST){
 80022a0:	481c      	ldr	r0, [pc, #112]	@ (8002314 <run+0x254>)
 80022a2:	f7ff fb6b 	bl	800197c <find_value>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d145      	bne.n	8002338 <run+0x278>
                translation_index ++;
 80022ac:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <run+0x244>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	4a14      	ldr	r2, [pc, #80]	@ (8002304 <run+0x244>)
 80022b4:	6013      	str	r3, [r2, #0]
                var1 = current_x;
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <run+0x258>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a18      	ldr	r2, [pc, #96]	@ (800231c <run+0x25c>)
 80022bc:	6013      	str	r3, [r2, #0]
                verif1 = find_value("translation_ending_point");
 80022be:	4818      	ldr	r0, [pc, #96]	@ (8002320 <run+0x260>)
 80022c0:	f7ff fb5c 	bl	800197c <find_value>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4a17      	ldr	r2, [pc, #92]	@ (8002324 <run+0x264>)
 80022c8:	6013      	str	r3, [r2, #0]
                var2 = current_theta;
 80022ca:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <run+0x268>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a17      	ldr	r2, [pc, #92]	@ (800232c <run+0x26c>)
 80022d0:	6013      	str	r3, [r2, #0]
                verif2 = find_value("rotation_ending_point");
 80022d2:	4817      	ldr	r0, [pc, #92]	@ (8002330 <run+0x270>)
 80022d4:	f7ff fb52 	bl	800197c <find_value>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a16      	ldr	r2, [pc, #88]	@ (8002334 <run+0x274>)
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e044      	b.n	800236a <run+0x2aa>
 80022e0:	20000ac0 	.word	0x20000ac0
 80022e4:	20000a98 	.word	0x20000a98
 80022e8:	20000014 	.word	0x20000014
 80022ec:	0800ab80 	.word	0x0800ab80
 80022f0:	20000adc 	.word	0x20000adc
 80022f4:	20000ae0 	.word	0x20000ae0
 80022f8:	20000ae4 	.word	0x20000ae4
 80022fc:	0800abac 	.word	0x0800abac
 8002300:	0800abc0 	.word	0x0800abc0
 8002304:	20000ae8 	.word	0x20000ae8
 8002308:	2000065c 	.word	0x2000065c
 800230c:	0800abdc 	.word	0x0800abdc
 8002310:	20000aec 	.word	0x20000aec
 8002314:	0800abf4 	.word	0x0800abf4
 8002318:	20000854 	.word	0x20000854
 800231c:	20000ac4 	.word	0x20000ac4
 8002320:	0800abfc 	.word	0x0800abfc
 8002324:	20000acc 	.word	0x20000acc
 8002328:	20000858 	.word	0x20000858
 800232c:	20000ac8 	.word	0x20000ac8
 8002330:	0800ac18 	.word	0x0800ac18
 8002334:	20000ad0 	.word	0x20000ad0

            }
            else {
                rotation_index ++;
 8002338:	4ba9      	ldr	r3, [pc, #676]	@ (80025e0 <run+0x520>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	4aa8      	ldr	r2, [pc, #672]	@ (80025e0 <run+0x520>)
 8002340:	6013      	str	r3, [r2, #0]
                var1 = current_theta;
 8002342:	4ba8      	ldr	r3, [pc, #672]	@ (80025e4 <run+0x524>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4aa8      	ldr	r2, [pc, #672]	@ (80025e8 <run+0x528>)
 8002348:	6013      	str	r3, [r2, #0]
                verif1 = find_value("rotation_ending_point");
 800234a:	48a8      	ldr	r0, [pc, #672]	@ (80025ec <run+0x52c>)
 800234c:	f7ff fb16 	bl	800197c <find_value>
 8002350:	4603      	mov	r3, r0
 8002352:	4aa7      	ldr	r2, [pc, #668]	@ (80025f0 <run+0x530>)
 8002354:	6013      	str	r3, [r2, #0]
                var2 = current_x;
 8002356:	4ba7      	ldr	r3, [pc, #668]	@ (80025f4 <run+0x534>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4aa7      	ldr	r2, [pc, #668]	@ (80025f8 <run+0x538>)
 800235c:	6013      	str	r3, [r2, #0]
                verif2 = find_value("translation_ending_point");
 800235e:	48a7      	ldr	r0, [pc, #668]	@ (80025fc <run+0x53c>)
 8002360:	f7ff fb0c 	bl	800197c <find_value>
 8002364:	4603      	mov	r3, r0
 8002366:	4aa6      	ldr	r2, [pc, #664]	@ (8002600 <run+0x540>)
 8002368:	6013      	str	r3, [r2, #0]
            }
            

            delayMicroseconds(500000); // waiting 0.5s after the movement to take the picture
 800236a:	48a6      	ldr	r0, [pc, #664]	@ (8002604 <run+0x544>)
 800236c:	f000 fea6 	bl	80030bc <delayMicroseconds>
            takePicture(1);
 8002370:	2001      	movs	r0, #1
 8002372:	f7ff fbb3 	bl	8001adc <takePicture>
            pictures_taken++;
 8002376:	4ba4      	ldr	r3, [pc, #656]	@ (8002608 <run+0x548>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	4aa2      	ldr	r2, [pc, #648]	@ (8002608 <run+0x548>)
 800237e:	6013      	str	r3, [r2, #0]
            pictures_taken_for_this_packet++;
 8002380:	4ba2      	ldr	r3, [pc, #648]	@ (800260c <run+0x54c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4aa1      	ldr	r2, [pc, #644]	@ (800260c <run+0x54c>)
 8002388:	6013      	str	r3, [r2, #0]

            // Notifying pc of the progress of the capture
           
            snprintf(message, sizeof(message), "progress %d %d %d", pictures_taken, pictures_taken_for_this_packet, packets_completed);
 800238a:	4b9f      	ldr	r3, [pc, #636]	@ (8002608 <run+0x548>)
 800238c:	6819      	ldr	r1, [r3, #0]
 800238e:	4b9f      	ldr	r3, [pc, #636]	@ (800260c <run+0x54c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a9f      	ldr	r2, [pc, #636]	@ (8002610 <run+0x550>)
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800239a:	9201      	str	r2, [sp, #4]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	460b      	mov	r3, r1
 80023a0:	4a9c      	ldr	r2, [pc, #624]	@ (8002614 <run+0x554>)
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	f006 f95a 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 80023a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe ff1b 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 80023b2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023b6:	2280      	movs	r2, #128	@ 0x80
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f006 f9c5 	bl	800874a <memset>

            int total_time = find_value("exposure_time")+find_value("saving_time")+find_value("margin_time");
 80023c0:	4895      	ldr	r0, [pc, #596]	@ (8002618 <run+0x558>)
 80023c2:	f7ff fadb 	bl	800197c <find_value>
 80023c6:	4604      	mov	r4, r0
 80023c8:	4894      	ldr	r0, [pc, #592]	@ (800261c <run+0x55c>)
 80023ca:	f7ff fad7 	bl	800197c <find_value>
 80023ce:	4603      	mov	r3, r0
 80023d0:	441c      	add	r4, r3
 80023d2:	4893      	ldr	r0, [pc, #588]	@ (8002620 <run+0x560>)
 80023d4:	f7ff fad2 	bl	800197c <find_value>
 80023d8:	4603      	mov	r3, r0
 80023da:	4423      	add	r3, r4
 80023dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            delayMicroseconds(total_time*1000000);
 80023e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023e4:	4a8f      	ldr	r2, [pc, #572]	@ (8002624 <run+0x564>)
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fe66 	bl	80030bc <delayMicroseconds>

            if (var1 >= verif1){
 80023f0:	4b7d      	ldr	r3, [pc, #500]	@ (80025e8 <run+0x528>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b7e      	ldr	r3, [pc, #504]	@ (80025f0 <run+0x530>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f6ff ae66 	blt.w	80020ca <run+0xa>
                if (var2 >= verif2){
 80023fe:	4b7e      	ldr	r3, [pc, #504]	@ (80025f8 <run+0x538>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b7f      	ldr	r3, [pc, #508]	@ (8002600 <run+0x540>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	db70      	blt.n	80024ec <run+0x42c>
                    snprintf(message, sizeof(message), "logCapture End of the Capture");
 800240a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800240e:	4a86      	ldr	r2, [pc, #536]	@ (8002628 <run+0x568>)
 8002410:	2180      	movs	r1, #128	@ 0x80
 8002412:	4618      	mov	r0, r3
 8002414:	f006 f922 	bl	800865c <sniprintf>
                    transmit_to_pc(&message);
 8002418:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fee3 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 8002422:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002426:	2280      	movs	r2, #128	@ 0x80
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f006 f98d 	bl	800874a <memset>
                    
                    snprintf(message, sizeof(message), "logCapture Return to the home position");
 8002430:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002434:	4a7d      	ldr	r2, [pc, #500]	@ (800262c <run+0x56c>)
 8002436:	2180      	movs	r1, #128	@ 0x80
 8002438:	4618      	mov	r0, r3
 800243a:	f006 f90f 	bl	800865c <sniprintf>
                    transmit_to_pc(&message);
 800243e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fed0 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 8002448:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800244c:	2280      	movs	r2, #128	@ 0x80
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f006 f97a 	bl	800874a <memset>
                    
                    packets_completed ++;
 8002456:	4b6e      	ldr	r3, [pc, #440]	@ (8002610 <run+0x550>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	4a6c      	ldr	r2, [pc, #432]	@ (8002610 <run+0x550>)
 800245e:	6013      	str	r3, [r2, #0]
                    snprintf(message, sizeof(message), "progress %d %d %d", pictures_taken, pictures_taken_for_this_packet, packets_completed);
 8002460:	4b69      	ldr	r3, [pc, #420]	@ (8002608 <run+0x548>)
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	4b69      	ldr	r3, [pc, #420]	@ (800260c <run+0x54c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a69      	ldr	r2, [pc, #420]	@ (8002610 <run+0x550>)
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002470:	9201      	str	r2, [sp, #4]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	460b      	mov	r3, r1
 8002476:	4a67      	ldr	r2, [pc, #412]	@ (8002614 <run+0x554>)
 8002478:	2180      	movs	r1, #128	@ 0x80
 800247a:	f006 f8ef 	bl	800865c <sniprintf>
                    transmit_to_pc(&message);
 800247e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe feb0 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 8002488:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800248c:	2280      	movs	r2, #128	@ 0x80
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f006 f95a 	bl	800874a <memset>

                    move_to(0,0,1);
 8002496:	2201      	movs	r2, #1
 8002498:	2100      	movs	r1, #0
 800249a:	2000      	movs	r0, #0
 800249c:	f7fe ffe2 	bl	8001464 <move_to>
                    packets_completed = 0;
 80024a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002610 <run+0x550>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
                    pictures_taken = 0;
 80024a6:	4b58      	ldr	r3, [pc, #352]	@ (8002608 <run+0x548>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
                    pictures_taken_for_this_packet = 0;
 80024ac:	4b57      	ldr	r3, [pc, #348]	@ (800260c <run+0x54c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

                    translation_index = 0;
 80024b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002630 <run+0x570>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
                    rotation_index = 0;
 80024b8:	4b49      	ldr	r3, [pc, #292]	@ (80025e0 <run+0x520>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

                    snprintf(message, sizeof(message), "end capture");
 80024be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002634 <run+0x574>)
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	4618      	mov	r0, r3
 80024c8:	f006 f8c8 	bl	800865c <sniprintf>
                    transmit_to_pc(&message);
 80024cc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fe89 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 80024d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024da:	2280      	movs	r2, #128	@ 0x80
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f006 f933 	bl	800874a <memset>
                    
                    
                    state = LISTENING_STATE;
 80024e4:	4b54      	ldr	r3, [pc, #336]	@ (8002638 <run+0x578>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e5ee      	b.n	80020ca <run+0xa>
                }
                else {

                    if (find_value("mode")==TRANSLATION_FIRST){
 80024ec:	4853      	ldr	r0, [pc, #332]	@ (800263c <run+0x57c>)
 80024ee:	f7ff fa45 	bl	800197c <find_value>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d108      	bne.n	800250a <run+0x44a>
                        translation_index = 0;
 80024f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002630 <run+0x570>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
                        rotation_index++;
 80024fe:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <run+0x520>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	4a36      	ldr	r2, [pc, #216]	@ (80025e0 <run+0x520>)
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	e5df      	b.n	80020ca <run+0xa>

                    }
                    else {
                        rotation_index = 0;
 800250a:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <run+0x520>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
                        translation_index++;
 8002510:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <run+0x570>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a46      	ldr	r2, [pc, #280]	@ (8002630 <run+0x570>)
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e5d6      	b.n	80020ca <run+0xa>
                }
            }  

        }

        else if (state == TESTING_SEQUENCE_STATE){
 800251c:	4b46      	ldr	r3, [pc, #280]	@ (8002638 <run+0x578>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b0d      	cmp	r3, #13
 8002522:	f040 8124 	bne.w	800276e <run+0x6ae>

            int x = find_value("translation_starting_point") + (int)(translation_index*t_step);
 8002526:	4846      	ldr	r0, [pc, #280]	@ (8002640 <run+0x580>)
 8002528:	f7ff fa28 	bl	800197c <find_value>
 800252c:	4603      	mov	r3, r0
 800252e:	4a40      	ldr	r2, [pc, #256]	@ (8002630 <run+0x570>)
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	ee07 2a90 	vmov	s15, r2
 8002536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800253a:	4a42      	ldr	r2, [pc, #264]	@ (8002644 <run+0x584>)
 800253c:	edd2 7a00 	vldr	s15, [r2]
 8002540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002548:	ee17 2a90 	vmov	r2, s15
 800254c:	4413      	add	r3, r2
 800254e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            int theta = find_value("rotation_starting_point")+ (int)(rotation_index*t_step);
 8002552:	483d      	ldr	r0, [pc, #244]	@ (8002648 <run+0x588>)
 8002554:	f7ff fa12 	bl	800197c <find_value>
 8002558:	4603      	mov	r3, r0
 800255a:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <run+0x520>)
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	ee07 2a90 	vmov	s15, r2
 8002562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002566:	4a37      	ldr	r2, [pc, #220]	@ (8002644 <run+0x584>)
 8002568:	edd2 7a00 	vldr	s15, [r2]
 800256c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002574:	ee17 2a90 	vmov	r2, s15
 8002578:	4413      	add	r3, r2
 800257a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            move_to(x, theta,0);
 800257e:	2200      	movs	r2, #0
 8002580:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8002584:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8002588:	f7fe ff6c 	bl	8001464 <move_to>

            char message[BUFF_SIZE] = {0};
 800258c:	2300      	movs	r3, #0
 800258e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002590:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002594:	227c      	movs	r2, #124	@ 0x7c
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f006 f8d6 	bl	800874a <memset>

            if (find_value("mode")==TRANSLATION_FIRST){
 800259e:	4827      	ldr	r0, [pc, #156]	@ (800263c <run+0x57c>)
 80025a0:	f7ff f9ec 	bl	800197c <find_value>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d150      	bne.n	800264c <run+0x58c>
                translation_index ++;
 80025aa:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <run+0x570>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002630 <run+0x570>)
 80025b2:	6013      	str	r3, [r2, #0]
                var1 = current_x;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <run+0x534>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	@ (80025e8 <run+0x528>)
 80025ba:	6013      	str	r3, [r2, #0]
                verif1 = find_value("translation_ending_point");
 80025bc:	480f      	ldr	r0, [pc, #60]	@ (80025fc <run+0x53c>)
 80025be:	f7ff f9dd 	bl	800197c <find_value>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <run+0x530>)
 80025c6:	6013      	str	r3, [r2, #0]
                var2 = current_theta;
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <run+0x524>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <run+0x538>)
 80025ce:	6013      	str	r3, [r2, #0]
                verif2 = find_value("rotation_ending_point");
 80025d0:	4806      	ldr	r0, [pc, #24]	@ (80025ec <run+0x52c>)
 80025d2:	f7ff f9d3 	bl	800197c <find_value>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a09      	ldr	r2, [pc, #36]	@ (8002600 <run+0x540>)
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e04f      	b.n	800267e <run+0x5be>
 80025de:	bf00      	nop
 80025e0:	20000aec 	.word	0x20000aec
 80025e4:	20000858 	.word	0x20000858
 80025e8:	20000ac4 	.word	0x20000ac4
 80025ec:	0800ac18 	.word	0x0800ac18
 80025f0:	20000acc 	.word	0x20000acc
 80025f4:	20000854 	.word	0x20000854
 80025f8:	20000ac8 	.word	0x20000ac8
 80025fc:	0800abfc 	.word	0x0800abfc
 8002600:	20000ad0 	.word	0x20000ad0
 8002604:	0007a120 	.word	0x0007a120
 8002608:	20000adc 	.word	0x20000adc
 800260c:	20000ae0 	.word	0x20000ae0
 8002610:	20000ae4 	.word	0x20000ae4
 8002614:	0800abac 	.word	0x0800abac
 8002618:	0800ac30 	.word	0x0800ac30
 800261c:	0800ac40 	.word	0x0800ac40
 8002620:	0800ac4c 	.word	0x0800ac4c
 8002624:	000f4240 	.word	0x000f4240
 8002628:	0800ac58 	.word	0x0800ac58
 800262c:	0800ac78 	.word	0x0800ac78
 8002630:	20000ae8 	.word	0x20000ae8
 8002634:	0800aca0 	.word	0x0800aca0
 8002638:	20000ac0 	.word	0x20000ac0
 800263c:	0800abf4 	.word	0x0800abf4
 8002640:	0800abc0 	.word	0x0800abc0
 8002644:	2000065c 	.word	0x2000065c
 8002648:	0800abdc 	.word	0x0800abdc

            }
            else {
                rotation_index ++;
 800264c:	4bb3      	ldr	r3, [pc, #716]	@ (800291c <run+0x85c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	4ab2      	ldr	r2, [pc, #712]	@ (800291c <run+0x85c>)
 8002654:	6013      	str	r3, [r2, #0]
                var1 = current_theta;
 8002656:	4bb2      	ldr	r3, [pc, #712]	@ (8002920 <run+0x860>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4ab2      	ldr	r2, [pc, #712]	@ (8002924 <run+0x864>)
 800265c:	6013      	str	r3, [r2, #0]
                verif1 = find_value("rotation_ending_point");
 800265e:	48b2      	ldr	r0, [pc, #712]	@ (8002928 <run+0x868>)
 8002660:	f7ff f98c 	bl	800197c <find_value>
 8002664:	4603      	mov	r3, r0
 8002666:	4ab1      	ldr	r2, [pc, #708]	@ (800292c <run+0x86c>)
 8002668:	6013      	str	r3, [r2, #0]
                var2 = current_x;
 800266a:	4bb1      	ldr	r3, [pc, #708]	@ (8002930 <run+0x870>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4ab1      	ldr	r2, [pc, #708]	@ (8002934 <run+0x874>)
 8002670:	6013      	str	r3, [r2, #0]
                verif2 = find_value("translation_ending_point");
 8002672:	48b1      	ldr	r0, [pc, #708]	@ (8002938 <run+0x878>)
 8002674:	f7ff f982 	bl	800197c <find_value>
 8002678:	4603      	mov	r3, r0
 800267a:	4ab0      	ldr	r2, [pc, #704]	@ (800293c <run+0x87c>)
 800267c:	6013      	str	r3, [r2, #0]
            }
            
            int total_time = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            delayMicroseconds(total_time*1000000);
 8002684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002688:	4aad      	ldr	r2, [pc, #692]	@ (8002940 <run+0x880>)
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fd14 	bl	80030bc <delayMicroseconds>

            if (var1 >= verif1){
 8002694:	4ba3      	ldr	r3, [pc, #652]	@ (8002924 <run+0x864>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4ba4      	ldr	r3, [pc, #656]	@ (800292c <run+0x86c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	f6ff ad14 	blt.w	80020ca <run+0xa>
                if (var2 >= verif2){
 80026a2:	4ba4      	ldr	r3, [pc, #656]	@ (8002934 <run+0x874>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4ba5      	ldr	r3, [pc, #660]	@ (800293c <run+0x87c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	db47      	blt.n	800273e <run+0x67e>
                    
                    snprintf(message, sizeof(message), "logTest End of the Sequence Test");
 80026ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026b2:	4aa4      	ldr	r2, [pc, #656]	@ (8002944 <run+0x884>)
 80026b4:	2180      	movs	r1, #128	@ 0x80
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 ffd0 	bl	800865c <sniprintf>
                    transmit_to_pc(&message);
 80026bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fd91 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 80026c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026ca:	2280      	movs	r2, #128	@ 0x80
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f006 f83b 	bl	800874a <memset>
                    
                    snprintf(message, sizeof(message), "logTest Return to the home position");
 80026d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026d8:	4a9b      	ldr	r2, [pc, #620]	@ (8002948 <run+0x888>)
 80026da:	2180      	movs	r1, #128	@ 0x80
 80026dc:	4618      	mov	r0, r3
 80026de:	f005 ffbd 	bl	800865c <sniprintf>
                    transmit_to_pc(&message);
 80026e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fd7e 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 80026ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80026f0:	2280      	movs	r2, #128	@ 0x80
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f006 f828 	bl	800874a <memset>
                    
                    move_to(0,0,0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe feb0 	bl	8001464 <move_to>

                    

                    translation_index = 0;
 8002704:	4b91      	ldr	r3, [pc, #580]	@ (800294c <run+0x88c>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
                    rotation_index = 0;
 800270a:	4b84      	ldr	r3, [pc, #528]	@ (800291c <run+0x85c>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

                    snprintf(message, sizeof(message), "end testSequence");
 8002710:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002714:	4a8e      	ldr	r2, [pc, #568]	@ (8002950 <run+0x890>)
 8002716:	2180      	movs	r1, #128	@ 0x80
 8002718:	4618      	mov	r0, r3
 800271a:	f005 ff9f 	bl	800865c <sniprintf>
                    transmit_to_pc(&message);
 800271e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fd60 	bl	80011e8 <transmit_to_pc>
                    memset(message, 0, BUFF_SIZE);
 8002728:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800272c:	2280      	movs	r2, #128	@ 0x80
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f006 f80a 	bl	800874a <memset>
                    
                    state = LISTENING_STATE;
 8002736:	4b87      	ldr	r3, [pc, #540]	@ (8002954 <run+0x894>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e4c5      	b.n	80020ca <run+0xa>
                }
                else {

                    if (find_value("mode")==TRANSLATION_FIRST){
 800273e:	4886      	ldr	r0, [pc, #536]	@ (8002958 <run+0x898>)
 8002740:	f7ff f91c 	bl	800197c <find_value>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d108      	bne.n	800275c <run+0x69c>
                        translation_index = 0;
 800274a:	4b80      	ldr	r3, [pc, #512]	@ (800294c <run+0x88c>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
                        rotation_index++;
 8002750:	4b72      	ldr	r3, [pc, #456]	@ (800291c <run+0x85c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	4a71      	ldr	r2, [pc, #452]	@ (800291c <run+0x85c>)
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e4b6      	b.n	80020ca <run+0xa>

                    }
                    else {
                        rotation_index = 0;
 800275c:	4b6f      	ldr	r3, [pc, #444]	@ (800291c <run+0x85c>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
                        translation_index++;
 8002762:	4b7a      	ldr	r3, [pc, #488]	@ (800294c <run+0x88c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	4a78      	ldr	r2, [pc, #480]	@ (800294c <run+0x88c>)
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e4ad      	b.n	80020ca <run+0xa>
                }
            }

        }

        else if (state == HOMING_STATE){
 800276e:	4b79      	ldr	r3, [pc, #484]	@ (8002954 <run+0x894>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d11a      	bne.n	80027ac <run+0x6ec>
            home_motors();
 8002776:	f7ff f805 	bl	8001784 <home_motors>

            // Notifying pc of the successful homing
            char message[BUFF_SIZE] = {" "};
 800277a:	2320      	movs	r3, #32
 800277c:	647b      	str	r3, [r7, #68]	@ 0x44
 800277e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002782:	227c      	movs	r2, #124	@ 0x7c
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f005 ffdf 	bl	800874a <memset>
            snprintf(message, sizeof(message), "logTest Homed motors | Position (0 mm, 0°)");
 800278c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002790:	4a72      	ldr	r2, [pc, #456]	@ (800295c <run+0x89c>)
 8002792:	2180      	movs	r1, #128	@ 0x80
 8002794:	4618      	mov	r0, r3
 8002796:	f005 ff61 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 800279a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fd22 	bl	80011e8 <transmit_to_pc>

            state = LISTENING_STATE;
 80027a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002954 <run+0x894>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e48e      	b.n	80020ca <run+0xa>
        }

        else if (state == STOPPING_STATE){
 80027ac:	4b69      	ldr	r3, [pc, #420]	@ (8002954 <run+0x894>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b0a      	cmp	r3, #10
 80027b2:	d146      	bne.n	8002842 <run+0x782>
            // Notifying pc of the successful homing
            char message[BUFF_SIZE] = {" "};
 80027b4:	2320      	movs	r3, #32
 80027b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027bc:	227c      	movs	r2, #124	@ 0x7c
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f005 ffc2 	bl	800874a <memset>
            snprintf(message, sizeof(message), "logCapture Stopped capture | return to home position");
 80027c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027ca:	4a65      	ldr	r2, [pc, #404]	@ (8002960 <run+0x8a0>)
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 ff44 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 80027d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fd05 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 80027de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027e2:	2280      	movs	r2, #128	@ 0x80
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f005 ffaf 	bl	800874a <memset>

            

            move_to(0,0,1);
 80027ec:	2201      	movs	r2, #1
 80027ee:	2100      	movs	r1, #0
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe fe37 	bl	8001464 <move_to>

            snprintf(message, sizeof(message), "end capture");
 80027f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002964 <run+0x8a4>)
 80027fc:	2180      	movs	r1, #128	@ 0x80
 80027fe:	4618      	mov	r0, r3
 8002800:	f005 ff2c 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 8002804:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fced 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 800280e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002812:	2280      	movs	r2, #128	@ 0x80
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f005 ff97 	bl	800874a <memset>

            packets_completed = 0;
 800281c:	4b52      	ldr	r3, [pc, #328]	@ (8002968 <run+0x8a8>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
            pictures_taken = 0;
 8002822:	4b52      	ldr	r3, [pc, #328]	@ (800296c <run+0x8ac>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
            pictures_taken_for_this_packet = 0;
 8002828:	4b51      	ldr	r3, [pc, #324]	@ (8002970 <run+0x8b0>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

            translation_index = 0;
 800282e:	4b47      	ldr	r3, [pc, #284]	@ (800294c <run+0x88c>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
            rotation_index = 0;
 8002834:	4b39      	ldr	r3, [pc, #228]	@ (800291c <run+0x85c>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]

            state = LISTENING_STATE;
 800283a:	4b46      	ldr	r3, [pc, #280]	@ (8002954 <run+0x894>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e443      	b.n	80020ca <run+0xa>
        }

        else if (state == STOPPING_SEQUENCE_STATE){
 8002842:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <run+0x894>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b0b      	cmp	r3, #11
 8002848:	d13d      	bne.n	80028c6 <run+0x806>
            // Notifying pc of the successful homing
            char message[BUFF_SIZE] = {" "};
 800284a:	2320      	movs	r3, #32
 800284c:	647b      	str	r3, [r7, #68]	@ 0x44
 800284e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002852:	227c      	movs	r2, #124	@ 0x7c
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f005 ff77 	bl	800874a <memset>
            snprintf(message, sizeof(message), "logTest Stopped the test of the capture sequence | return to home position");
 800285c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002860:	4a44      	ldr	r2, [pc, #272]	@ (8002974 <run+0x8b4>)
 8002862:	2180      	movs	r1, #128	@ 0x80
 8002864:	4618      	mov	r0, r3
 8002866:	f005 fef9 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 800286a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fcba 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 8002874:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002878:	2280      	movs	r2, #128	@ 0x80
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f005 ff64 	bl	800874a <memset>

            


            move_to(0,0,0);
 8002882:	2200      	movs	r2, #0
 8002884:	2100      	movs	r1, #0
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe fdec 	bl	8001464 <move_to>

            snprintf(message, sizeof(message), "end testSequence");
 800288c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002890:	4a2f      	ldr	r2, [pc, #188]	@ (8002950 <run+0x890>)
 8002892:	2180      	movs	r1, #128	@ 0x80
 8002894:	4618      	mov	r0, r3
 8002896:	f005 fee1 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 800289a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fca2 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, BUFF_SIZE);
 80028a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028a8:	2280      	movs	r2, #128	@ 0x80
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 ff4c 	bl	800874a <memset>

            translation_index = 0;
 80028b2:	4b26      	ldr	r3, [pc, #152]	@ (800294c <run+0x88c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
            rotation_index = 0;
 80028b8:	4b18      	ldr	r3, [pc, #96]	@ (800291c <run+0x85c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

            state = LISTENING_STATE;
 80028be:	4b25      	ldr	r3, [pc, #148]	@ (8002954 <run+0x894>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e401      	b.n	80020ca <run+0xa>
        }

        else if (state == PICTURING_STATE) {
 80028c6:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <run+0x894>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d107      	bne.n	80028de <run+0x81e>
            takePicture(0);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7ff f904 	bl	8001adc <takePicture>
            state = LISTENING_STATE;
 80028d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002954 <run+0x894>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f7ff bbf6 	b.w	80020ca <run+0xa>
        }

        else if (state == FIRMWARE_SENDING_STATE) {
 80028de:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <run+0x894>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b09      	cmp	r3, #9
 80028e4:	d14c      	bne.n	8002980 <run+0x8c0>

            // Notifying pc of the firmware version
            char message[BUFF_SIZE] = {" "};
 80028e6:	2320      	movs	r3, #32
 80028e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028ee:	227c      	movs	r2, #124	@ 0x7c
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 ff29 	bl	800874a <memset>
            snprintf(message, sizeof(message), "firmware %s", firmware);
 80028f8:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80028fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <run+0x8b8>)
 80028fe:	4a1f      	ldr	r2, [pc, #124]	@ (800297c <run+0x8bc>)
 8002900:	2180      	movs	r1, #128	@ 0x80
 8002902:	f005 feab 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 8002906:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fc6c 	bl	80011e8 <transmit_to_pc>
            state = LISTENING_STATE;
 8002910:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <run+0x894>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f7ff bbd8 	b.w	80020ca <run+0xa>
 800291a:	bf00      	nop
 800291c:	20000aec 	.word	0x20000aec
 8002920:	20000858 	.word	0x20000858
 8002924:	20000ac4 	.word	0x20000ac4
 8002928:	0800ac18 	.word	0x0800ac18
 800292c:	20000acc 	.word	0x20000acc
 8002930:	20000854 	.word	0x20000854
 8002934:	20000ac8 	.word	0x20000ac8
 8002938:	0800abfc 	.word	0x0800abfc
 800293c:	20000ad0 	.word	0x20000ad0
 8002940:	000f4240 	.word	0x000f4240
 8002944:	0800acac 	.word	0x0800acac
 8002948:	0800acd0 	.word	0x0800acd0
 800294c:	20000ae8 	.word	0x20000ae8
 8002950:	0800acf4 	.word	0x0800acf4
 8002954:	20000ac0 	.word	0x20000ac0
 8002958:	0800abf4 	.word	0x0800abf4
 800295c:	0800ad08 	.word	0x0800ad08
 8002960:	0800ad34 	.word	0x0800ad34
 8002964:	0800aca0 	.word	0x0800aca0
 8002968:	20000ae4 	.word	0x20000ae4
 800296c:	20000adc 	.word	0x20000adc
 8002970:	20000ae0 	.word	0x20000ae0
 8002974:	0800ad6c 	.word	0x0800ad6c
 8002978:	20000654 	.word	0x20000654
 800297c:	0800adb8 	.word	0x0800adb8
        }

        else if (state == MOVING_TO_STATE) {
 8002980:	4ba4      	ldr	r3, [pc, #656]	@ (8002c14 <run+0xb54>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d115      	bne.n	80029b4 <run+0x8f4>

            move_to(atoi(argv[1]), atoi(argv[2]), 0);
 8002988:	4ba3      	ldr	r3, [pc, #652]	@ (8002c18 <run+0xb58>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	f005 f8c3 	bl	8007b18 <atoi>
 8002992:	4604      	mov	r4, r0
 8002994:	4ba0      	ldr	r3, [pc, #640]	@ (8002c18 <run+0xb58>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4618      	mov	r0, r3
 800299a:	f005 f8bd 	bl	8007b18 <atoi>
 800299e:	4603      	mov	r3, r0
 80029a0:	2200      	movs	r2, #0
 80029a2:	4619      	mov	r1, r3
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7fe fd5d 	bl	8001464 <move_to>

            state = LISTENING_STATE;
 80029aa:	4b9a      	ldr	r3, [pc, #616]	@ (8002c14 <run+0xb54>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f7ff bb8b 	b.w	80020ca <run+0xa>
        }

        else if (state == STEP_COMPUTING_STATE){
 80029b4:	4b97      	ldr	r3, [pc, #604]	@ (8002c14 <run+0xb54>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b07      	cmp	r3, #7
 80029ba:	f47f ab86 	bne.w	80020ca <run+0xa>

            t_step = (float)(find_value("translation_ending_point")-find_value("translation_starting_point"))/(float)(find_value("translation_number_of_points")-1);
 80029be:	4897      	ldr	r0, [pc, #604]	@ (8002c1c <run+0xb5c>)
 80029c0:	f7fe ffdc 	bl	800197c <find_value>
 80029c4:	4604      	mov	r4, r0
 80029c6:	4896      	ldr	r0, [pc, #600]	@ (8002c20 <run+0xb60>)
 80029c8:	f7fe ffd8 	bl	800197c <find_value>
 80029cc:	4603      	mov	r3, r0
 80029ce:	1ae3      	subs	r3, r4, r3
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80029d8:	4892      	ldr	r0, [pc, #584]	@ (8002c24 <run+0xb64>)
 80029da:	f7fe ffcf 	bl	800197c <find_value>
 80029de:	4603      	mov	r3, r0
 80029e0:	3b01      	subs	r3, #1
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ea:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80029ee:	4b8e      	ldr	r3, [pc, #568]	@ (8002c28 <run+0xb68>)
 80029f0:	edc3 7a00 	vstr	s15, [r3]
            r_step = (float)(find_value("rotation_ending_point")-find_value("rotation_starting_point"))/(float)(find_value("rotation_number_of_points")-1);
 80029f4:	488d      	ldr	r0, [pc, #564]	@ (8002c2c <run+0xb6c>)
 80029f6:	f7fe ffc1 	bl	800197c <find_value>
 80029fa:	4604      	mov	r4, r0
 80029fc:	488c      	ldr	r0, [pc, #560]	@ (8002c30 <run+0xb70>)
 80029fe:	f7fe ffbd 	bl	800197c <find_value>
 8002a02:	4603      	mov	r3, r0
 8002a04:	1ae3      	subs	r3, r4, r3
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002a0e:	4889      	ldr	r0, [pc, #548]	@ (8002c34 <run+0xb74>)
 8002a10:	f7fe ffb4 	bl	800197c <find_value>
 8002a14:	4603      	mov	r3, r0
 8002a16:	3b01      	subs	r3, #1
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a20:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002a24:	4b84      	ldr	r3, [pc, #528]	@ (8002c38 <run+0xb78>)
 8002a26:	edc3 7a00 	vstr	s15, [r3]

            total_picture_number = find_value("translation_number_of_points")*find_value("rotation_number_of_points");
 8002a2a:	487e      	ldr	r0, [pc, #504]	@ (8002c24 <run+0xb64>)
 8002a2c:	f7fe ffa6 	bl	800197c <find_value>
 8002a30:	4604      	mov	r4, r0
 8002a32:	4880      	ldr	r0, [pc, #512]	@ (8002c34 <run+0xb74>)
 8002a34:	f7fe ffa2 	bl	800197c <find_value>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	fb04 f303 	mul.w	r3, r4, r3
 8002a3e:	4a7f      	ldr	r2, [pc, #508]	@ (8002c3c <run+0xb7c>)
 8002a40:	6013      	str	r3, [r2, #0]
            update_speeds(find_value("translation_speed"), find_value("rotation_speed"));
 8002a42:	487f      	ldr	r0, [pc, #508]	@ (8002c40 <run+0xb80>)
 8002a44:	f7fe ff9a 	bl	800197c <find_value>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	487e      	ldr	r0, [pc, #504]	@ (8002c44 <run+0xb84>)
 8002a4c:	f7fe ff96 	bl	800197c <find_value>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4619      	mov	r1, r3
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7fe ff4f 	bl	80018f8 <update_speeds>

            /////////////////// Evaluating the capture time //////////////////////////////////
            total_time_seconds = 0;
 8002a5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c48 <run+0xb88>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
            // time of translations
            total_time_seconds += 2*get_translation_time((int)t_step)*(find_value("translation_number_of_points")-1)*find_value("rotation_number_of_points");
 8002a60:	4b71      	ldr	r3, [pc, #452]	@ (8002c28 <run+0xb68>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a6a:	ee17 0a90 	vmov	r0, s15
 8002a6e:	f7fe fedf 	bl	8001830 <get_translation_time>
 8002a72:	4604      	mov	r4, r0
 8002a74:	486b      	ldr	r0, [pc, #428]	@ (8002c24 <run+0xb64>)
 8002a76:	f7fe ff81 	bl	800197c <find_value>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	fb03 f404 	mul.w	r4, r3, r4
 8002a82:	486c      	ldr	r0, [pc, #432]	@ (8002c34 <run+0xb74>)
 8002a84:	f7fe ff7a 	bl	800197c <find_value>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	fb04 f303 	mul.w	r3, r4, r3
 8002a8e:	005a      	lsls	r2, r3, #1
 8002a90:	4b6d      	ldr	r3, [pc, #436]	@ (8002c48 <run+0xb88>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4413      	add	r3, r2
 8002a96:	4a6c      	ldr	r2, [pc, #432]	@ (8002c48 <run+0xb88>)
 8002a98:	6013      	str	r3, [r2, #0]
            
            // time of rotations
            total_time_seconds += 2*get_rotation_time((int)r_step)*(find_value("rotation_number_of_points")-1);
 8002a9a:	4b67      	ldr	r3, [pc, #412]	@ (8002c38 <run+0xb78>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa4:	ee17 0a90 	vmov	r0, s15
 8002aa8:	f7fe fef4 	bl	8001894 <get_rotation_time>
 8002aac:	4604      	mov	r4, r0
 8002aae:	4861      	ldr	r0, [pc, #388]	@ (8002c34 <run+0xb74>)
 8002ab0:	f7fe ff64 	bl	800197c <find_value>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	fb04 f303 	mul.w	r3, r4, r3
 8002abc:	005a      	lsls	r2, r3, #1
 8002abe:	4b62      	ldr	r3, [pc, #392]	@ (8002c48 <run+0xb88>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a60      	ldr	r2, [pc, #384]	@ (8002c48 <run+0xb88>)
 8002ac6:	6013      	str	r3, [r2, #0]
            
            // time of waiting
            total_time_seconds += (find_value("exposure_time")+find_value("saving_time")+find_value("margin_time")+0.5)*total_picture_number;
 8002ac8:	4860      	ldr	r0, [pc, #384]	@ (8002c4c <run+0xb8c>)
 8002aca:	f7fe ff57 	bl	800197c <find_value>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	485f      	ldr	r0, [pc, #380]	@ (8002c50 <run+0xb90>)
 8002ad2:	f7fe ff53 	bl	800197c <find_value>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	441c      	add	r4, r3
 8002ada:	485e      	ldr	r0, [pc, #376]	@ (8002c54 <run+0xb94>)
 8002adc:	f7fe ff4e 	bl	800197c <find_value>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4423      	add	r3, r4
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fd2d 	bl	8000544 <__aeabi_i2d>
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	4b5a      	ldr	r3, [pc, #360]	@ (8002c58 <run+0xb98>)
 8002af0:	f7fd fbdc 	bl	80002ac <__adddf3>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
 8002afc:	4b4f      	ldr	r3, [pc, #316]	@ (8002c3c <run+0xb7c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fd1f 	bl	8000544 <__aeabi_i2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fd83 	bl	8000618 <__aeabi_dmul>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4614      	mov	r4, r2
 8002b18:	461d      	mov	r5, r3
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c48 <run+0xb88>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fd10 	bl	8000544 <__aeabi_i2d>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4620      	mov	r0, r4
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	f7fd fbbe 	bl	80002ac <__adddf3>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	f7fe f81e 	bl	8000b78 <__aeabi_d2iz>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4a42      	ldr	r2, [pc, #264]	@ (8002c48 <run+0xb88>)
 8002b40:	6013      	str	r3, [r2, #0]

            // Notifying pc of the change of steps

            char message[BUFF_SIZE] = {" "};
 8002b42:	2320      	movs	r3, #32
 8002b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b4a:	227c      	movs	r2, #124	@ 0x7c
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f005 fdfb 	bl	800874a <memset>
            snprintf(message, sizeof(message), "estimatedTime %d",total_time_seconds);
 8002b54:	4b3c      	ldr	r3, [pc, #240]	@ (8002c48 <run+0xb88>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c5c <run+0xb9c>)
 8002b5e:	2180      	movs	r1, #128	@ 0x80
 8002b60:	f005 fd7c 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 8002b64:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fb3d 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, sizeof(message));
 8002b6e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b72:	2280      	movs	r2, #128	@ 0x80
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f005 fde7 	bl	800874a <memset>

            
            snprintf(message, sizeof(message), "logSettings Changed steps | Translation step : %f mm, Rotation step : %f°", t_step, r_step);
 8002b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <run+0xb68>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fcf1 	bl	8000568 <__aeabi_f2d>
 8002b86:	4604      	mov	r4, r0
 8002b88:	460d      	mov	r5, r1
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <run+0xb78>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fcea 	bl	8000568 <__aeabi_f2d>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002b9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ba0:	e9cd 4500 	strd	r4, r5, [sp]
 8002ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8002c60 <run+0xba0>)
 8002ba6:	2180      	movs	r1, #128	@ 0x80
 8002ba8:	f005 fd58 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 8002bac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fb19 	bl	80011e8 <transmit_to_pc>
            memset(message, 0, sizeof(message));
 8002bb6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bba:	2280      	movs	r2, #128	@ 0x80
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f005 fdc3 	bl	800874a <memset>

            snprintf(message, sizeof(message), "total %d %d %d %d %d",find_value("translation_ending_point"),find_value("rotation_ending_point"), find_value("translation_number_of_points"), find_value("rotation_number_of_points"), total_picture_number);
 8002bc4:	4815      	ldr	r0, [pc, #84]	@ (8002c1c <run+0xb5c>)
 8002bc6:	f7fe fed9 	bl	800197c <find_value>
 8002bca:	4606      	mov	r6, r0
 8002bcc:	4817      	ldr	r0, [pc, #92]	@ (8002c2c <run+0xb6c>)
 8002bce:	f7fe fed5 	bl	800197c <find_value>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	4813      	ldr	r0, [pc, #76]	@ (8002c24 <run+0xb64>)
 8002bd6:	f7fe fed1 	bl	800197c <find_value>
 8002bda:	4605      	mov	r5, r0
 8002bdc:	4815      	ldr	r0, [pc, #84]	@ (8002c34 <run+0xb74>)
 8002bde:	f7fe fecd 	bl	800197c <find_value>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b15      	ldr	r3, [pc, #84]	@ (8002c3c <run+0xb7c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002bec:	9303      	str	r3, [sp, #12]
 8002bee:	9202      	str	r2, [sp, #8]
 8002bf0:	9501      	str	r5, [sp, #4]
 8002bf2:	9400      	str	r4, [sp, #0]
 8002bf4:	4633      	mov	r3, r6
 8002bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c64 <run+0xba4>)
 8002bf8:	2180      	movs	r1, #128	@ 0x80
 8002bfa:	f005 fd2f 	bl	800865c <sniprintf>
            transmit_to_pc(&message);
 8002bfe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe faf0 	bl	80011e8 <transmit_to_pc>

            state = LISTENING_STATE;
 8002c08:	4b02      	ldr	r3, [pc, #8]	@ (8002c14 <run+0xb54>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
        if (state == MOVING_STATE){
 8002c0e:	f7ff ba5c 	b.w	80020ca <run+0xa>
 8002c12:	bf00      	nop
 8002c14:	20000ac0 	.word	0x20000ac0
 8002c18:	20000a98 	.word	0x20000a98
 8002c1c:	0800abfc 	.word	0x0800abfc
 8002c20:	0800abc0 	.word	0x0800abc0
 8002c24:	0800adc4 	.word	0x0800adc4
 8002c28:	2000065c 	.word	0x2000065c
 8002c2c:	0800ac18 	.word	0x0800ac18
 8002c30:	0800abdc 	.word	0x0800abdc
 8002c34:	0800ade4 	.word	0x0800ade4
 8002c38:	20000660 	.word	0x20000660
 8002c3c:	20000ad4 	.word	0x20000ad4
 8002c40:	0800ae00 	.word	0x0800ae00
 8002c44:	0800ae14 	.word	0x0800ae14
 8002c48:	20000ad8 	.word	0x20000ad8
 8002c4c:	0800ac30 	.word	0x0800ac30
 8002c50:	0800ac40 	.word	0x0800ac40
 8002c54:	0800ac4c 	.word	0x0800ac4c
 8002c58:	3fe00000 	.word	0x3fe00000
 8002c5c:	0800ae24 	.word	0x0800ae24
 8002c60:	0800ae38 	.word	0x0800ae38
 8002c64:	0800ae84 	.word	0x0800ae84

08002c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <HAL_MspInit+0x44>)
 8002c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c72:	4a0e      	ldr	r2, [pc, #56]	@ (8002cac <HAL_MspInit+0x44>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <HAL_MspInit+0x44>)
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <HAL_MspInit+0x44>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8a:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <HAL_MspInit+0x44>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_MspInit+0x44>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc2:	4b24      	ldr	r3, [pc, #144]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	4a23      	ldr	r2, [pc, #140]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cce:	4b21      	ldr	r3, [pc, #132]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002cda:	e034      	b.n	8002d46 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d58 <HAL_TIM_Base_MspInit+0xa8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10c      	bne.n	8002d00 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	4a1a      	ldr	r2, [pc, #104]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf2:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
}
 8002cfe:	e022      	b.n	8002d46 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a15      	ldr	r2, [pc, #84]	@ (8002d5c <HAL_TIM_Base_MspInit+0xac>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10c      	bne.n	8002d24 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d0a:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0e:	4a11      	ldr	r2, [pc, #68]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d16:	4b0f      	ldr	r3, [pc, #60]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
}
 8002d22:	e010      	b.n	8002d46 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <HAL_TIM_Base_MspInit+0xb0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10b      	bne.n	8002d46 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d32:	4a08      	ldr	r2, [pc, #32]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d38:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_TIM_Base_MspInit+0xa4>)
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
}
 8002d46:	bf00      	nop
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000c00 	.word	0x40000c00
 8002d60:	40014400 	.word	0x40014400

08002d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 030c 	add.w	r3, r7, #12
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a11      	ldr	r2, [pc, #68]	@ (8002dc8 <HAL_TIM_MspPostInit+0x64>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d11c      	bne.n	8002dc0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_TIM_MspPostInit+0x68>)
 8002d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8a:	4a10      	ldr	r2, [pc, #64]	@ (8002dcc <HAL_TIM_MspPostInit+0x68>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <HAL_TIM_MspPostInit+0x68>)
 8002d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d9e:	2340      	movs	r3, #64	@ 0x40
 8002da0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002dae:	230e      	movs	r3, #14
 8002db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	4619      	mov	r1, r3
 8002db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dbc:	f000 fbea 	bl	8003594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002dc0:	bf00      	nop
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b0ac      	sub	sp, #176	@ 0xb0
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	2288      	movs	r2, #136	@ 0x88
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f005 fcaa 	bl	800874a <memset>
  if(huart->Instance==USART2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a25      	ldr	r2, [pc, #148]	@ (8002e90 <HAL_UART_MspInit+0xc0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d143      	bne.n	8002e88 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e00:	2302      	movs	r3, #2
 8002e02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e04:	2300      	movs	r3, #0
 8002e06:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 fbff 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e18:	f7ff f94c 	bl	80020b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <HAL_UART_MspInit+0xc4>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e20:	4a1c      	ldr	r2, [pc, #112]	@ (8002e94 <HAL_UART_MspInit+0xc4>)
 8002e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e28:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <HAL_UART_MspInit+0xc4>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e34:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <HAL_UART_MspInit+0xc4>)
 8002e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e38:	4a16      	ldr	r2, [pc, #88]	@ (8002e94 <HAL_UART_MspInit+0xc4>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e40:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <HAL_UART_MspInit+0xc4>)
 8002e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e64:	2307      	movs	r3, #7
 8002e66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e74:	f000 fb8e 	bl	8003594 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2026      	movs	r0, #38	@ 0x26
 8002e7e:	f000 fad4 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e82:	2026      	movs	r0, #38	@ 0x26
 8002e84:	f000 faed 	bl	8003462 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e88:	bf00      	nop
 8002e8a:	37b0      	adds	r7, #176	@ 0xb0
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40004400 	.word	0x40004400
 8002e94:	40021000 	.word	0x40021000

08002e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <NMI_Handler+0x4>

08002ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <HardFault_Handler+0x4>

08002ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <MemManage_Handler+0x4>

08002eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <BusFault_Handler+0x4>

08002eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <UsageFault_Handler+0x4>

08002ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eee:	f000 f9a1 	bl	8003234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <USART2_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002efc:	4802      	ldr	r0, [pc, #8]	@ (8002f08 <USART2_IRQHandler+0x10>)
 8002efe:	f003 fb45 	bl	800658c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	2000098c 	.word	0x2000098c

08002f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return 1;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <_kill>:

int _kill(int pid, int sig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f26:	f005 fcd1 	bl	80088cc <__errno>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2216      	movs	r2, #22
 8002f2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_exit>:

void _exit (int status)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ffe7 	bl	8002f1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f4e:	bf00      	nop
 8002f50:	e7fd      	b.n	8002f4e <_exit+0x12>

08002f52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e00a      	b.n	8002f7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f64:	f3af 8000 	nop.w
 8002f68:	4601      	mov	r1, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	60ba      	str	r2, [r7, #8]
 8002f70:	b2ca      	uxtb	r2, r1
 8002f72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	dbf0      	blt.n	8002f64 <_read+0x12>
  }

  return len;
 8002f82:	687b      	ldr	r3, [r7, #4]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e009      	b.n	8002fb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	60ba      	str	r2, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	dbf1      	blt.n	8002f9e <_write+0x12>
  }
  return len;
 8002fba:	687b      	ldr	r3, [r7, #4]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_close>:

int _close(int file)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fec:	605a      	str	r2, [r3, #4]
  return 0;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <_isatty>:

int _isatty(int file)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003004:	2301      	movs	r3, #1
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003012:	b480      	push	{r7}
 8003014:	b085      	sub	sp, #20
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003034:	4a14      	ldr	r2, [pc, #80]	@ (8003088 <_sbrk+0x5c>)
 8003036:	4b15      	ldr	r3, [pc, #84]	@ (800308c <_sbrk+0x60>)
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003040:	4b13      	ldr	r3, [pc, #76]	@ (8003090 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003048:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <_sbrk+0x64>)
 800304a:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <_sbrk+0x68>)
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d207      	bcs.n	800306c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800305c:	f005 fc36 	bl	80088cc <__errno>
 8003060:	4603      	mov	r3, r0
 8003062:	220c      	movs	r2, #12
 8003064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	e009      	b.n	8003080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800306c:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <_sbrk+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003072:	4b07      	ldr	r3, [pc, #28]	@ (8003090 <_sbrk+0x64>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	4a05      	ldr	r2, [pc, #20]	@ (8003090 <_sbrk+0x64>)
 800307c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20018000 	.word	0x20018000
 800308c:	00000400 	.word	0x00000400
 8003090:	20000af0 	.word	0x20000af0
 8003094:	20000c48 	.word	0x20000c48

08003098 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800309c:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <SystemInit+0x20>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	4a05      	ldr	r2, [pc, #20]	@ (80030b8 <SystemInit+0x20>)
 80030a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <delayMicroseconds>:
#include "stm32l4xx.h"

void delayMicroseconds(int delay){
 80030bc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
	int startingValue = TIM5->CNT;
 80030c6:	4917      	ldr	r1, [pc, #92]	@ (8003124 <delayMicroseconds+0x68>)
 80030c8:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80030ca:	60f9      	str	r1, [r7, #12]

	// Handling the timer overflow
	if (startingValue >= 4294967295-delay-1){
 80030cc:	68f9      	ldr	r1, [r7, #12]
 80030ce:	17c8      	asrs	r0, r1, #31
 80030d0:	460c      	mov	r4, r1
 80030d2:	4605      	mov	r5, r0
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	17c8      	asrs	r0, r1, #31
 80030d8:	4688      	mov	r8, r1
 80030da:	4681      	mov	r9, r0
 80030dc:	f06f 0001 	mvn.w	r0, #1
 80030e0:	2100      	movs	r1, #0
 80030e2:	ebb0 0208 	subs.w	r2, r0, r8
 80030e6:	eb61 0309 	sbc.w	r3, r1, r9
 80030ea:	4294      	cmp	r4, r2
 80030ec:	eb75 0303 	sbcs.w	r3, r5, r3
 80030f0:	db04      	blt.n	80030fc <delayMicroseconds+0x40>
		TIM5->CNT = 0;
 80030f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003124 <delayMicroseconds+0x68>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	625a      	str	r2, [r3, #36]	@ 0x24
		startingValue = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
	}

	int readValue = startingValue;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	60bb      	str	r3, [r7, #8]
	while(readValue-startingValue<delay){
 8003100:	e002      	b.n	8003108 <delayMicroseconds+0x4c>
		readValue =TIM5->CNT;
 8003102:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <delayMicroseconds+0x68>)
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	60bb      	str	r3, [r7, #8]
	while(readValue-startingValue<delay){
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	dcf6      	bgt.n	8003102 <delayMicroseconds+0x46>
	}
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40000c00 	.word	0x40000c00

08003128 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003160 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800312c:	f7ff ffb4 	bl	8003098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003130:	480c      	ldr	r0, [pc, #48]	@ (8003164 <LoopForever+0x6>)
  ldr r1, =_edata
 8003132:	490d      	ldr	r1, [pc, #52]	@ (8003168 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003134:	4a0d      	ldr	r2, [pc, #52]	@ (800316c <LoopForever+0xe>)
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003138:	e002      	b.n	8003140 <LoopCopyDataInit>

0800313a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800313c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313e:	3304      	adds	r3, #4

08003140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003144:	d3f9      	bcc.n	800313a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003146:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003148:	4c0a      	ldr	r4, [pc, #40]	@ (8003174 <LoopForever+0x16>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800314c:	e001      	b.n	8003152 <LoopFillZerobss>

0800314e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003150:	3204      	adds	r2, #4

08003152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003154:	d3fb      	bcc.n	800314e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003156:	f005 fbbf 	bl	80088d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800315a:	f7fe fd0f 	bl	8001b7c <main>

0800315e <LoopForever>:

LoopForever:
    b LoopForever
 800315e:	e7fe      	b.n	800315e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003160:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003168:	20000838 	.word	0x20000838
  ldr r2, =_sidata
 800316c:	0800b2c4 	.word	0x0800b2c4
  ldr r2, =_sbss
 8003170:	20000838 	.word	0x20000838
  ldr r4, =_ebss
 8003174:	20000c44 	.word	0x20000c44

08003178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003178:	e7fe      	b.n	8003178 <ADC1_2_IRQHandler>
	...

0800317c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003186:	4b0c      	ldr	r3, [pc, #48]	@ (80031b8 <HAL_Init+0x3c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a0b      	ldr	r2, [pc, #44]	@ (80031b8 <HAL_Init+0x3c>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003190:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003192:	2003      	movs	r0, #3
 8003194:	f000 f93e 	bl	8003414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003198:	2000      	movs	r0, #0
 800319a:	f000 f80f 	bl	80031bc <HAL_InitTick>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	71fb      	strb	r3, [r7, #7]
 80031a8:	e001      	b.n	80031ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031aa:	f7ff fd5d 	bl	8002c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031ae:	79fb      	ldrb	r3, [r7, #7]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40022000 	.word	0x40022000

080031bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80031c8:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <HAL_InitTick+0x6c>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d023      	beq.n	8003218 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031d0:	4b16      	ldr	r3, [pc, #88]	@ (800322c <HAL_InitTick+0x70>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <HAL_InitTick+0x6c>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031de:	fbb3 f3f1 	udiv	r3, r3, r1
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f949 	bl	800347e <HAL_SYSTICK_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10f      	bne.n	8003212 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b0f      	cmp	r3, #15
 80031f6:	d809      	bhi.n	800320c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f8:	2200      	movs	r2, #0
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	f000 f913 	bl	800342a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003204:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <HAL_InitTick+0x74>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e007      	b.n	800321c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e004      	b.n	800321c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
 8003216:	e001      	b.n	800321c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000066c 	.word	0x2000066c
 800322c:	20000664 	.word	0x20000664
 8003230:	20000668 	.word	0x20000668

08003234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_IncTick+0x20>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_IncTick+0x24>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <HAL_IncTick+0x24>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	2000066c 	.word	0x2000066c
 8003258:	20000af4 	.word	0x20000af4

0800325c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <HAL_GetTick+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000af4 	.word	0x20000af4

08003274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003284:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003290:	4013      	ands	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800329c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a6:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	60d3      	str	r3, [r2, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <__NVIC_GetPriorityGrouping+0x18>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	f003 0307 	and.w	r3, r3, #7
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db0b      	blt.n	8003302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	4907      	ldr	r1, [pc, #28]	@ (8003310 <__NVIC_EnableIRQ+0x38>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2001      	movs	r0, #1
 80032fa:	fa00 f202 	lsl.w	r2, r0, r2
 80032fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000e100 	.word	0xe000e100

08003314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003324:	2b00      	cmp	r3, #0
 8003326:	db0a      	blt.n	800333e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	490c      	ldr	r1, [pc, #48]	@ (8003360 <__NVIC_SetPriority+0x4c>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	0112      	lsls	r2, r2, #4
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	440b      	add	r3, r1
 8003338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800333c:	e00a      	b.n	8003354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4908      	ldr	r1, [pc, #32]	@ (8003364 <__NVIC_SetPriority+0x50>)
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	3b04      	subs	r3, #4
 800334c:	0112      	lsls	r2, r2, #4
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	440b      	add	r3, r1
 8003352:	761a      	strb	r2, [r3, #24]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000e100 	.word	0xe000e100
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	@ 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f1c3 0307 	rsb	r3, r3, #7
 8003382:	2b04      	cmp	r3, #4
 8003384:	bf28      	it	cs
 8003386:	2304      	movcs	r3, #4
 8003388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3304      	adds	r3, #4
 800338e:	2b06      	cmp	r3, #6
 8003390:	d902      	bls.n	8003398 <NVIC_EncodePriority+0x30>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3b03      	subs	r3, #3
 8003396:	e000      	b.n	800339a <NVIC_EncodePriority+0x32>
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	401a      	ands	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	43d9      	mvns	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	4313      	orrs	r3, r2
         );
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3724      	adds	r7, #36	@ 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033e0:	d301      	bcc.n	80033e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e2:	2301      	movs	r3, #1
 80033e4:	e00f      	b.n	8003406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003410 <SysTick_Config+0x40>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ee:	210f      	movs	r1, #15
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	f7ff ff8e 	bl	8003314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <SysTick_Config+0x40>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033fe:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <SysTick_Config+0x40>)
 8003400:	2207      	movs	r2, #7
 8003402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	e000e010 	.word	0xe000e010

08003414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ff29 	bl	8003274 <__NVIC_SetPriorityGrouping>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800343c:	f7ff ff3e 	bl	80032bc <__NVIC_GetPriorityGrouping>
 8003440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	6978      	ldr	r0, [r7, #20]
 8003448:	f7ff ff8e 	bl	8003368 <NVIC_EncodePriority>
 800344c:	4602      	mov	r2, r0
 800344e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff5d 	bl	8003314 <__NVIC_SetPriority>
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff31 	bl	80032d8 <__NVIC_EnableIRQ>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ffa2 	bl	80033d0 <SysTick_Config>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d008      	beq.n	80034c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2204      	movs	r2, #4
 80034b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e022      	b.n	8003506 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 020e 	bic.w	r2, r2, #14
 80034ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e4:	f003 021c 	and.w	r2, r3, #28
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	2101      	movs	r1, #1
 80034ee:	fa01 f202 	lsl.w	r2, r1, r2
 80034f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003504:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d005      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2204      	movs	r2, #4
 800352e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e029      	b.n	800358a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 020e 	bic.w	r2, r2, #14
 8003544:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f003 021c 	and.w	r2, r3, #28
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
    }
  }
  return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a2:	e17f      	b.n	80038a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8171 	beq.w	800389e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d005      	beq.n	80035d4 <HAL_GPIO_Init+0x40>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d130      	bne.n	8003636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360a:	2201      	movs	r2, #1
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f003 0201 	and.w	r2, r3, #1
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b03      	cmp	r3, #3
 8003640:	d118      	bne.n	8003674 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003648:	2201      	movs	r2, #1
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	08db      	lsrs	r3, r3, #3
 800365e:	f003 0201 	and.w	r2, r3, #1
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b03      	cmp	r3, #3
 800367e:	d017      	beq.n	80036b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	2203      	movs	r2, #3
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d123      	bne.n	8003704 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3208      	adds	r2, #8
 80036c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	220f      	movs	r2, #15
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	08da      	lsrs	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3208      	adds	r2, #8
 80036fe:	6939      	ldr	r1, [r7, #16]
 8003700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2203      	movs	r2, #3
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0203 	and.w	r2, r3, #3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80ac 	beq.w	800389e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003746:	4b5f      	ldr	r3, [pc, #380]	@ (80038c4 <HAL_GPIO_Init+0x330>)
 8003748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374a:	4a5e      	ldr	r2, [pc, #376]	@ (80038c4 <HAL_GPIO_Init+0x330>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6613      	str	r3, [r2, #96]	@ 0x60
 8003752:	4b5c      	ldr	r3, [pc, #368]	@ (80038c4 <HAL_GPIO_Init+0x330>)
 8003754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800375e:	4a5a      	ldr	r2, [pc, #360]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	3302      	adds	r3, #2
 8003766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	220f      	movs	r2, #15
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003788:	d025      	beq.n	80037d6 <HAL_GPIO_Init+0x242>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4f      	ldr	r2, [pc, #316]	@ (80038cc <HAL_GPIO_Init+0x338>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01f      	beq.n	80037d2 <HAL_GPIO_Init+0x23e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a4e      	ldr	r2, [pc, #312]	@ (80038d0 <HAL_GPIO_Init+0x33c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d019      	beq.n	80037ce <HAL_GPIO_Init+0x23a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a4d      	ldr	r2, [pc, #308]	@ (80038d4 <HAL_GPIO_Init+0x340>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <HAL_GPIO_Init+0x236>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a4c      	ldr	r2, [pc, #304]	@ (80038d8 <HAL_GPIO_Init+0x344>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00d      	beq.n	80037c6 <HAL_GPIO_Init+0x232>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a4b      	ldr	r2, [pc, #300]	@ (80038dc <HAL_GPIO_Init+0x348>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <HAL_GPIO_Init+0x22e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a4a      	ldr	r2, [pc, #296]	@ (80038e0 <HAL_GPIO_Init+0x34c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_GPIO_Init+0x22a>
 80037ba:	2306      	movs	r3, #6
 80037bc:	e00c      	b.n	80037d8 <HAL_GPIO_Init+0x244>
 80037be:	2307      	movs	r3, #7
 80037c0:	e00a      	b.n	80037d8 <HAL_GPIO_Init+0x244>
 80037c2:	2305      	movs	r3, #5
 80037c4:	e008      	b.n	80037d8 <HAL_GPIO_Init+0x244>
 80037c6:	2304      	movs	r3, #4
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x244>
 80037ca:	2303      	movs	r3, #3
 80037cc:	e004      	b.n	80037d8 <HAL_GPIO_Init+0x244>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e002      	b.n	80037d8 <HAL_GPIO_Init+0x244>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_GPIO_Init+0x244>
 80037d6:	2300      	movs	r3, #0
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	f002 0203 	and.w	r2, r2, #3
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	4093      	lsls	r3, r2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037e8:	4937      	ldr	r1, [pc, #220]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037f6:	4b3b      	ldr	r3, [pc, #236]	@ (80038e4 <HAL_GPIO_Init+0x350>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	43db      	mvns	r3, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800381a:	4a32      	ldr	r2, [pc, #200]	@ (80038e4 <HAL_GPIO_Init+0x350>)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003820:	4b30      	ldr	r3, [pc, #192]	@ (80038e4 <HAL_GPIO_Init+0x350>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003844:	4a27      	ldr	r2, [pc, #156]	@ (80038e4 <HAL_GPIO_Init+0x350>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800384a:	4b26      	ldr	r3, [pc, #152]	@ (80038e4 <HAL_GPIO_Init+0x350>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800386e:	4a1d      	ldr	r2, [pc, #116]	@ (80038e4 <HAL_GPIO_Init+0x350>)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003874:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <HAL_GPIO_Init+0x350>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003898:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <HAL_GPIO_Init+0x350>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	3301      	adds	r3, #1
 80038a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa22 f303 	lsr.w	r3, r2, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f47f ae78 	bne.w	80035a4 <HAL_GPIO_Init+0x10>
  }
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010000 	.word	0x40010000
 80038cc:	48000400 	.word	0x48000400
 80038d0:	48000800 	.word	0x48000800
 80038d4:	48000c00 	.word	0x48000c00
 80038d8:	48001000 	.word	0x48001000
 80038dc:	48001400 	.word	0x48001400
 80038e0:	48001800 	.word	0x48001800
 80038e4:	40010400 	.word	0x40010400

080038e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	887b      	ldrh	r3, [r7, #2]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
 8003904:	e001      	b.n	800390a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003934:	e002      	b.n	800393c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800394c:	4b04      	ldr	r3, [pc, #16]	@ (8003960 <HAL_PWREx_GetVoltageRange+0x18>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40007000 	.word	0x40007000

08003964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003972:	d130      	bne.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003974:	4b23      	ldr	r3, [pc, #140]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800397c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003980:	d038      	beq.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003982:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800398a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003990:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003992:	4b1d      	ldr	r3, [pc, #116]	@ (8003a08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2232      	movs	r2, #50	@ 0x32
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	3301      	adds	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a8:	e002      	b.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039b0:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039bc:	d102      	bne.n	80039c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f2      	bne.n	80039aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d0:	d110      	bne.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e00f      	b.n	80039f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e2:	d007      	beq.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039e4:	4b07      	ldr	r3, [pc, #28]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039ec:	4a05      	ldr	r2, [pc, #20]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40007000 	.word	0x40007000
 8003a08:	20000664 	.word	0x20000664
 8003a0c:	431bde83 	.word	0x431bde83

08003a10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e3ca      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a22:	4b97      	ldr	r3, [pc, #604]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a2c:	4b94      	ldr	r3, [pc, #592]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80e4 	beq.w	8003c0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_RCC_OscConfig+0x4a>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	f040 808b 	bne.w	8003b68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	f040 8087 	bne.w	8003b68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a5a:	4b89      	ldr	r3, [pc, #548]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_RCC_OscConfig+0x62>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e3a2      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1a      	ldr	r2, [r3, #32]
 8003a76:	4b82      	ldr	r3, [pc, #520]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_RCC_OscConfig+0x7c>
 8003a82:	4b7f      	ldr	r3, [pc, #508]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a8a:	e005      	b.n	8003a98 <HAL_RCC_OscConfig+0x88>
 8003a8c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d223      	bcs.n	8003ae4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fd55 	bl	8004550 <RCC_SetFlashLatencyFromMSIRange>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e383      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ab0:	4b73      	ldr	r3, [pc, #460]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a72      	ldr	r2, [pc, #456]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b70      	ldr	r3, [pc, #448]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	496d      	ldr	r1, [pc, #436]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ace:	4b6c      	ldr	r3, [pc, #432]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	4968      	ldr	r1, [pc, #416]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
 8003ae2:	e025      	b.n	8003b30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ae4:	4b66      	ldr	r3, [pc, #408]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a65      	ldr	r2, [pc, #404]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003aea:	f043 0308 	orr.w	r3, r3, #8
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b63      	ldr	r3, [pc, #396]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4960      	ldr	r1, [pc, #384]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b02:	4b5f      	ldr	r3, [pc, #380]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	495b      	ldr	r1, [pc, #364]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fd15 	bl	8004550 <RCC_SetFlashLatencyFromMSIRange>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e343      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b30:	f000 fc4a 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b52      	ldr	r3, [pc, #328]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	4950      	ldr	r1, [pc, #320]	@ (8003c84 <HAL_RCC_OscConfig+0x274>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003c88 <HAL_RCC_OscConfig+0x278>)
 8003b4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b50:	4b4e      	ldr	r3, [pc, #312]	@ (8003c8c <HAL_RCC_OscConfig+0x27c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fb31 	bl	80031bc <HAL_InitTick>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d052      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	e327      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d032      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b70:	4b43      	ldr	r3, [pc, #268]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a42      	ldr	r2, [pc, #264]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b7c:	f7ff fb6e 	bl	800325c <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b84:	f7ff fb6a 	bl	800325c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e310      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b96:	4b3a      	ldr	r3, [pc, #232]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ba2:	4b37      	ldr	r3, [pc, #220]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a36      	ldr	r2, [pc, #216]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	f043 0308 	orr.w	r3, r3, #8
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b34      	ldr	r3, [pc, #208]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4931      	ldr	r1, [pc, #196]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	492c      	ldr	r1, [pc, #176]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
 8003bd4:	e01a      	b.n	8003c0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a29      	ldr	r2, [pc, #164]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003be2:	f7ff fb3b 	bl	800325c <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bea:	f7ff fb37 	bl	800325c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e2dd      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bfc:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f0      	bne.n	8003bea <HAL_RCC_OscConfig+0x1da>
 8003c08:	e000      	b.n	8003c0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d074      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d005      	beq.n	8003c2a <HAL_RCC_OscConfig+0x21a>
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b0c      	cmp	r3, #12
 8003c22:	d10e      	bne.n	8003c42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d10b      	bne.n	8003c42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d064      	beq.n	8003d00 <HAL_RCC_OscConfig+0x2f0>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d160      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e2ba      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x24a>
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0b      	ldr	r2, [pc, #44]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	e026      	b.n	8003ca8 <HAL_RCC_OscConfig+0x298>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c62:	d115      	bne.n	8003c90 <HAL_RCC_OscConfig+0x280>
 8003c64:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a05      	ldr	r2, [pc, #20]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	4b03      	ldr	r3, [pc, #12]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a02      	ldr	r2, [pc, #8]	@ (8003c80 <HAL_RCC_OscConfig+0x270>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	e014      	b.n	8003ca8 <HAL_RCC_OscConfig+0x298>
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	0800ae9c 	.word	0x0800ae9c
 8003c88:	20000664 	.word	0x20000664
 8003c8c:	20000668 	.word	0x20000668
 8003c90:	4ba0      	ldr	r3, [pc, #640]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a9f      	ldr	r2, [pc, #636]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a9c      	ldr	r2, [pc, #624]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d013      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7ff fad4 	bl	800325c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7ff fad0 	bl	800325c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	@ 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e276      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cca:	4b92      	ldr	r3, [pc, #584]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x2a8>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7ff fac0 	bl	800325c <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7ff fabc 	bl	800325c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	@ 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e262      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf2:	4b88      	ldr	r3, [pc, #544]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x2d0>
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d060      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_OscConfig+0x310>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d119      	bne.n	8003d4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d116      	bne.n	8003d4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d20:	4b7c      	ldr	r3, [pc, #496]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_OscConfig+0x328>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e23f      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	4b76      	ldr	r3, [pc, #472]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	4973      	ldr	r1, [pc, #460]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4c:	e040      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d023      	beq.n	8003d9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d56:	4b6f      	ldr	r3, [pc, #444]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7ff fa7b 	bl	800325c <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6a:	f7ff fa77 	bl	800325c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e21d      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d7c:	4b65      	ldr	r3, [pc, #404]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d88:	4b62      	ldr	r3, [pc, #392]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	495f      	ldr	r1, [pc, #380]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
 8003d9c:	e018      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a5c      	ldr	r2, [pc, #368]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7ff fa57 	bl	800325c <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db2:	f7ff fa53 	bl	800325c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e1f9      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dc4:	4b53      	ldr	r3, [pc, #332]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d03c      	beq.n	8003e56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dea:	4a4a      	ldr	r2, [pc, #296]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7ff fa32 	bl	800325c <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfc:	f7ff fa2e 	bl	800325c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1d4      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e0e:	4b41      	ldr	r3, [pc, #260]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0ef      	beq.n	8003dfc <HAL_RCC_OscConfig+0x3ec>
 8003e1c:	e01b      	b.n	8003e56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e24:	4a3b      	ldr	r2, [pc, #236]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7ff fa15 	bl	800325c <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e36:	f7ff fa11 	bl	800325c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e1b7      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e48:	4b32      	ldr	r3, [pc, #200]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1ef      	bne.n	8003e36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a6 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e64:	2300      	movs	r3, #0
 8003e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e68:	4b2a      	ldr	r3, [pc, #168]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e74:	4b27      	ldr	r3, [pc, #156]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e78:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e80:	4b24      	ldr	r3, [pc, #144]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e90:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <HAL_RCC_OscConfig+0x508>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d118      	bne.n	8003ece <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003f18 <HAL_RCC_OscConfig+0x508>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f18 <HAL_RCC_OscConfig+0x508>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea8:	f7ff f9d8 	bl	800325c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7ff f9d4 	bl	800325c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e17a      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec2:	4b15      	ldr	r3, [pc, #84]	@ (8003f18 <HAL_RCC_OscConfig+0x508>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d108      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4d8>
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003edc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ee6:	e029      	b.n	8003f3c <HAL_RCC_OscConfig+0x52c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d115      	bne.n	8003f1c <HAL_RCC_OscConfig+0x50c>
 8003ef0:	4b08      	ldr	r3, [pc, #32]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef6:	4a07      	ldr	r2, [pc, #28]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f00:	4b04      	ldr	r3, [pc, #16]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f06:	4a03      	ldr	r2, [pc, #12]	@ (8003f14 <HAL_RCC_OscConfig+0x504>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f10:	e014      	b.n	8003f3c <HAL_RCC_OscConfig+0x52c>
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	4b9c      	ldr	r3, [pc, #624]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f22:	4a9b      	ldr	r2, [pc, #620]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f2c:	4b98      	ldr	r3, [pc, #608]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f32:	4a97      	ldr	r2, [pc, #604]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8003f34:	f023 0304 	bic.w	r3, r3, #4
 8003f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d016      	beq.n	8003f72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7ff f98a 	bl	800325c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7ff f986 	bl	800325c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e12a      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f62:	4b8b      	ldr	r3, [pc, #556]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ed      	beq.n	8003f4c <HAL_RCC_OscConfig+0x53c>
 8003f70:	e015      	b.n	8003f9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f72:	f7ff f973 	bl	800325c <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7ff f96f 	bl	800325c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e113      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f90:	4b7f      	ldr	r3, [pc, #508]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ed      	bne.n	8003f7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9e:	7ffb      	ldrb	r3, [r7, #31]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa4:	4b7a      	ldr	r3, [pc, #488]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa8:	4a79      	ldr	r2, [pc, #484]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8003faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80fe 	beq.w	80041b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	f040 80d0 	bne.w	8004164 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fc4:	4b72      	ldr	r3, [pc, #456]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f003 0203 	and.w	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d130      	bne.n	800403a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d127      	bne.n	800403a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d11f      	bne.n	800403a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004004:	2a07      	cmp	r2, #7
 8004006:	bf14      	ite	ne
 8004008:	2201      	movne	r2, #1
 800400a:	2200      	moveq	r2, #0
 800400c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800400e:	4293      	cmp	r3, r2
 8004010:	d113      	bne.n	800403a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d109      	bne.n	800403a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	085b      	lsrs	r3, r3, #1
 8004032:	3b01      	subs	r3, #1
 8004034:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d06e      	beq.n	8004118 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d069      	beq.n	8004114 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004040:	4b53      	ldr	r3, [pc, #332]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800404c:	4b50      	ldr	r3, [pc, #320]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0ad      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800405c:	4b4c      	ldr	r3, [pc, #304]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a4b      	ldr	r2, [pc, #300]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004066:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004068:	f7ff f8f8 	bl	800325c <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7ff f8f4 	bl	800325c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e09a      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004082:	4b43      	ldr	r3, [pc, #268]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408e:	4b40      	ldr	r3, [pc, #256]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	4b40      	ldr	r3, [pc, #256]	@ (8004194 <HAL_RCC_OscConfig+0x784>)
 8004094:	4013      	ands	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800409e:	3a01      	subs	r2, #1
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	4311      	orrs	r1, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040a8:	0212      	lsls	r2, r2, #8
 80040aa:	4311      	orrs	r1, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040b0:	0852      	lsrs	r2, r2, #1
 80040b2:	3a01      	subs	r2, #1
 80040b4:	0552      	lsls	r2, r2, #21
 80040b6:	4311      	orrs	r1, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040bc:	0852      	lsrs	r2, r2, #1
 80040be:	3a01      	subs	r2, #1
 80040c0:	0652      	lsls	r2, r2, #25
 80040c2:	4311      	orrs	r1, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040c8:	0912      	lsrs	r2, r2, #4
 80040ca:	0452      	lsls	r2, r2, #17
 80040cc:	430a      	orrs	r2, r1
 80040ce:	4930      	ldr	r1, [pc, #192]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 80040e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040ec:	f7ff f8b6 	bl	800325c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7ff f8b2 	bl	800325c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e058      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	4b22      	ldr	r3, [pc, #136]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004112:	e050      	b.n	80041b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e04f      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004118:	4b1d      	ldr	r3, [pc, #116]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d148      	bne.n	80041b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004124:	4b1a      	ldr	r3, [pc, #104]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a19      	ldr	r2, [pc, #100]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004130:	4b17      	ldr	r3, [pc, #92]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a16      	ldr	r2, [pc, #88]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004136:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800413a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800413c:	f7ff f88e 	bl	800325c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7ff f88a 	bl	800325c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e030      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004156:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x734>
 8004162:	e028      	b.n	80041b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b0c      	cmp	r3, #12
 8004168:	d023      	beq.n	80041b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416a:	4b09      	ldr	r3, [pc, #36]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a08      	ldr	r2, [pc, #32]	@ (8004190 <HAL_RCC_OscConfig+0x780>)
 8004170:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7ff f871 	bl	800325c <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800417c:	e00c      	b.n	8004198 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417e:	f7ff f86d 	bl	800325c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d905      	bls.n	8004198 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e013      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
 8004190:	40021000 	.word	0x40021000
 8004194:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004198:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <HAL_RCC_OscConfig+0x7b0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ec      	bne.n	800417e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <HAL_RCC_OscConfig+0x7b0>)
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	4905      	ldr	r1, [pc, #20]	@ (80041c0 <HAL_RCC_OscConfig+0x7b0>)
 80041aa:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <HAL_RCC_OscConfig+0x7b4>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	60cb      	str	r3, [r1, #12]
 80041b0:	e001      	b.n	80041b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	feeefffc 	.word	0xfeeefffc

080041c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0e7      	b.n	80043ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041dc:	4b75      	ldr	r3, [pc, #468]	@ (80043b4 <HAL_RCC_ClockConfig+0x1ec>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d910      	bls.n	800420c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ea:	4b72      	ldr	r3, [pc, #456]	@ (80043b4 <HAL_RCC_ClockConfig+0x1ec>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 0207 	bic.w	r2, r3, #7
 80041f2:	4970      	ldr	r1, [pc, #448]	@ (80043b4 <HAL_RCC_ClockConfig+0x1ec>)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b6e      	ldr	r3, [pc, #440]	@ (80043b4 <HAL_RCC_ClockConfig+0x1ec>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cf      	b.n	80043ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d010      	beq.n	800423a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	4b66      	ldr	r3, [pc, #408]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004224:	429a      	cmp	r2, r3
 8004226:	d908      	bls.n	800423a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b63      	ldr	r3, [pc, #396]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4960      	ldr	r1, [pc, #384]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04c      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424e:	4b5a      	ldr	r3, [pc, #360]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d121      	bne.n	800429e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e0a6      	b.n	80043ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004266:	4b54      	ldr	r3, [pc, #336]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d115      	bne.n	800429e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e09a      	b.n	80043ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800427e:	4b4e      	ldr	r3, [pc, #312]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e08e      	b.n	80043ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800428e:	4b4a      	ldr	r3, [pc, #296]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e086      	b.n	80043ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800429e:	4b46      	ldr	r3, [pc, #280]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 0203 	bic.w	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4943      	ldr	r1, [pc, #268]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b0:	f7fe ffd4 	bl	800325c <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b8:	f7fe ffd0 	bl	800325c <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e06e      	b.n	80043ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	4b3a      	ldr	r3, [pc, #232]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 020c 	and.w	r2, r3, #12
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1eb      	bne.n	80042b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	4b31      	ldr	r3, [pc, #196]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d208      	bcs.n	800430e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b2e      	ldr	r3, [pc, #184]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	492b      	ldr	r1, [pc, #172]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800430e:	4b29      	ldr	r3, [pc, #164]	@ (80043b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d210      	bcs.n	800433e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431c:	4b25      	ldr	r3, [pc, #148]	@ (80043b4 <HAL_RCC_ClockConfig+0x1ec>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 0207 	bic.w	r2, r3, #7
 8004324:	4923      	ldr	r1, [pc, #140]	@ (80043b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	4313      	orrs	r3, r2
 800432a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432c:	4b21      	ldr	r3, [pc, #132]	@ (80043b4 <HAL_RCC_ClockConfig+0x1ec>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d001      	beq.n	800433e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e036      	b.n	80043ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434a:	4b1b      	ldr	r3, [pc, #108]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4918      	ldr	r1, [pc, #96]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004368:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4910      	ldr	r1, [pc, #64]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004378:	4313      	orrs	r3, r2
 800437a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800437c:	f000 f824 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	490b      	ldr	r1, [pc, #44]	@ (80043bc <HAL_RCC_ClockConfig+0x1f4>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
 8004398:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <HAL_RCC_ClockConfig+0x1f8>)
 800439a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800439c:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <HAL_RCC_ClockConfig+0x1fc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe ff0b 	bl	80031bc <HAL_InitTick>
 80043a6:	4603      	mov	r3, r0
 80043a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80043aa:	7afb      	ldrb	r3, [r7, #11]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40022000 	.word	0x40022000
 80043b8:	40021000 	.word	0x40021000
 80043bc:	0800ae9c 	.word	0x0800ae9c
 80043c0:	20000664 	.word	0x20000664
 80043c4:	20000668 	.word	0x20000668

080043c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	@ 0x24
 80043cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	2300      	movs	r3, #0
 80043d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d6:	4b3e      	ldr	r3, [pc, #248]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043e0:	4b3b      	ldr	r3, [pc, #236]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x34>
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d121      	bne.n	800443a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d11e      	bne.n	800443a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043fc:	4b34      	ldr	r3, [pc, #208]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d107      	bne.n	8004418 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004408:	4b31      	ldr	r3, [pc, #196]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	e005      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004418:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004424:	4a2b      	ldr	r2, [pc, #172]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10d      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004438:	e00a      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b04      	cmp	r3, #4
 800443e:	d102      	bne.n	8004446 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004440:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e004      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d101      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800444c:	4b23      	ldr	r3, [pc, #140]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x114>)
 800444e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b0c      	cmp	r3, #12
 8004454:	d134      	bne.n	80044c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004456:	4b1e      	ldr	r3, [pc, #120]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d003      	beq.n	800446e <HAL_RCC_GetSysClockFreq+0xa6>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b03      	cmp	r3, #3
 800446a:	d003      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0xac>
 800446c:	e005      	b.n	800447a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800446e:	4b1a      	ldr	r3, [pc, #104]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004470:	617b      	str	r3, [r7, #20]
      break;
 8004472:	e005      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004474:	4b19      	ldr	r3, [pc, #100]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x114>)
 8004476:	617b      	str	r3, [r7, #20]
      break;
 8004478:	e002      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	617b      	str	r3, [r7, #20]
      break;
 800447e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004480:	4b13      	ldr	r3, [pc, #76]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	3301      	adds	r3, #1
 800448c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800448e:	4b10      	ldr	r3, [pc, #64]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	fb03 f202 	mul.w	r2, r3, r2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	0e5b      	lsrs	r3, r3, #25
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	3301      	adds	r3, #1
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044c0:	69bb      	ldr	r3, [r7, #24]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3724      	adds	r7, #36	@ 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	0800aeb4 	.word	0x0800aeb4
 80044d8:	00f42400 	.word	0x00f42400
 80044dc:	007a1200 	.word	0x007a1200

080044e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e4:	4b03      	ldr	r3, [pc, #12]	@ (80044f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044e6:	681b      	ldr	r3, [r3, #0]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20000664 	.word	0x20000664

080044f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044fc:	f7ff fff0 	bl	80044e0 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4904      	ldr	r1, [pc, #16]	@ (8004520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40021000 	.word	0x40021000
 8004520:	0800aeac 	.word	0x0800aeac

08004524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004528:	f7ff ffda 	bl	80044e0 <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b06      	ldr	r3, [pc, #24]	@ (8004548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	0adb      	lsrs	r3, r3, #11
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4904      	ldr	r1, [pc, #16]	@ (800454c <HAL_RCC_GetPCLK2Freq+0x28>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000
 800454c:	0800aeac 	.word	0x0800aeac

08004550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800455c:	4b2a      	ldr	r3, [pc, #168]	@ (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800455e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004568:	f7ff f9ee 	bl	8003948 <HAL_PWREx_GetVoltageRange>
 800456c:	6178      	str	r0, [r7, #20]
 800456e:	e014      	b.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	4b25      	ldr	r3, [pc, #148]	@ (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004574:	4a24      	ldr	r2, [pc, #144]	@ (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800457a:	6593      	str	r3, [r2, #88]	@ 0x58
 800457c:	4b22      	ldr	r3, [pc, #136]	@ (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004588:	f7ff f9de 	bl	8003948 <HAL_PWREx_GetVoltageRange>
 800458c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800458e:	4b1e      	ldr	r3, [pc, #120]	@ (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004598:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a0:	d10b      	bne.n	80045ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b80      	cmp	r3, #128	@ 0x80
 80045a6:	d919      	bls.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80045ac:	d902      	bls.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ae:	2302      	movs	r3, #2
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e013      	b.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045b4:	2301      	movs	r3, #1
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	e010      	b.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b80      	cmp	r3, #128	@ 0x80
 80045be:	d902      	bls.n	80045c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045c0:	2303      	movs	r3, #3
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e00a      	b.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b80      	cmp	r3, #128	@ 0x80
 80045ca:	d102      	bne.n	80045d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045cc:	2302      	movs	r3, #2
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e004      	b.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b70      	cmp	r3, #112	@ 0x70
 80045d6:	d101      	bne.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d8:	2301      	movs	r3, #1
 80045da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045dc:	4b0b      	ldr	r3, [pc, #44]	@ (800460c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 0207 	bic.w	r2, r3, #7
 80045e4:	4909      	ldr	r1, [pc, #36]	@ (800460c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045ec:	4b07      	ldr	r3, [pc, #28]	@ (800460c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d001      	beq.n	80045fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	40022000 	.word	0x40022000

08004610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004618:	2300      	movs	r3, #0
 800461a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800461c:	2300      	movs	r3, #0
 800461e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004628:	2b00      	cmp	r3, #0
 800462a:	d041      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004630:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004634:	d02a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004636:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800463a:	d824      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800463c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004640:	d008      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004642:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004646:	d81e      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800464c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004650:	d010      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004652:	e018      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004654:	4b86      	ldr	r3, [pc, #536]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a85      	ldr	r2, [pc, #532]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800465e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004660:	e015      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3304      	adds	r3, #4
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fabb 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004672:	e00c      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3320      	adds	r3, #32
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fba6 	bl	8004dcc <RCCEx_PLLSAI2_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004684:	e003      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	74fb      	strb	r3, [r7, #19]
      break;
 800468a:	e000      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800468c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800468e:	7cfb      	ldrb	r3, [r7, #19]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004694:	4b76      	ldr	r3, [pc, #472]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046a2:	4973      	ldr	r1, [pc, #460]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046aa:	e001      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d041      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046c4:	d02a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046ca:	d824      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046d0:	d008      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046d6:	d81e      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046e0:	d010      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046e2:	e018      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046e4:	4b62      	ldr	r3, [pc, #392]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a61      	ldr	r2, [pc, #388]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046f0:	e015      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fa73 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004702:	e00c      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3320      	adds	r3, #32
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fb5e 	bl	8004dcc <RCCEx_PLLSAI2_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	74fb      	strb	r3, [r7, #19]
      break;
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800471c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471e:	7cfb      	ldrb	r3, [r7, #19]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004724:	4b52      	ldr	r3, [pc, #328]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004732:	494f      	ldr	r1, [pc, #316]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800473a:	e001      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80a0 	beq.w	800488e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004752:	4b47      	ldr	r3, [pc, #284]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004762:	2300      	movs	r3, #0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00d      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004768:	4b41      	ldr	r3, [pc, #260]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476c:	4a40      	ldr	r2, [pc, #256]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6593      	str	r3, [r2, #88]	@ 0x58
 8004774:	4b3e      	ldr	r3, [pc, #248]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004780:	2301      	movs	r3, #1
 8004782:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004784:	4b3b      	ldr	r3, [pc, #236]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a3a      	ldr	r2, [pc, #232]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800478a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004790:	f7fe fd64 	bl	800325c <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004796:	e009      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004798:	f7fe fd60 	bl	800325c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d902      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	74fb      	strb	r3, [r7, #19]
        break;
 80047aa:	e005      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ac:	4b31      	ldr	r3, [pc, #196]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ef      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d15c      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047be:	4b2c      	ldr	r3, [pc, #176]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01f      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d019      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047dc:	4b24      	ldr	r3, [pc, #144]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e8:	4b21      	ldr	r3, [pc, #132]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	4a20      	ldr	r2, [pc, #128]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004808:	4a19      	ldr	r2, [pc, #100]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fe fd1f 	bl	800325c <HAL_GetTick>
 800481e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004820:	e00b      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fe fd1b 	bl	800325c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d902      	bls.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	74fb      	strb	r3, [r7, #19]
            break;
 8004838:	e006      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483a:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ec      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484e:	4b08      	ldr	r3, [pc, #32]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004854:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800485e:	4904      	ldr	r1, [pc, #16]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004866:	e009      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	74bb      	strb	r3, [r7, #18]
 800486c:	e006      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800486e:	bf00      	nop
 8004870:	40021000 	.word	0x40021000
 8004874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800487c:	7c7b      	ldrb	r3, [r7, #17]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004882:	4b9e      	ldr	r3, [pc, #632]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	4a9d      	ldr	r2, [pc, #628]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800488c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800489a:	4b98      	ldr	r3, [pc, #608]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a0:	f023 0203 	bic.w	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	4994      	ldr	r1, [pc, #592]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048bc:	4b8f      	ldr	r3, [pc, #572]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c2:	f023 020c 	bic.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ca:	498c      	ldr	r1, [pc, #560]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048de:	4b87      	ldr	r3, [pc, #540]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	4983      	ldr	r1, [pc, #524]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004900:	4b7e      	ldr	r3, [pc, #504]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004906:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	497b      	ldr	r1, [pc, #492]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004922:	4b76      	ldr	r3, [pc, #472]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004928:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004930:	4972      	ldr	r1, [pc, #456]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004944:	4b6d      	ldr	r3, [pc, #436]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004952:	496a      	ldr	r1, [pc, #424]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004966:	4b65      	ldr	r3, [pc, #404]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004974:	4961      	ldr	r1, [pc, #388]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004988:	4b5c      	ldr	r3, [pc, #368]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004996:	4959      	ldr	r1, [pc, #356]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049aa:	4b54      	ldr	r3, [pc, #336]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b8:	4950      	ldr	r1, [pc, #320]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049cc:	4b4b      	ldr	r3, [pc, #300]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049da:	4948      	ldr	r1, [pc, #288]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ee:	4b43      	ldr	r3, [pc, #268]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fc:	493f      	ldr	r1, [pc, #252]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d028      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a10:	4b3a      	ldr	r3, [pc, #232]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a1e:	4937      	ldr	r1, [pc, #220]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a30:	4b32      	ldr	r3, [pc, #200]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a31      	ldr	r2, [pc, #196]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a3a:	60d3      	str	r3, [r2, #12]
 8004a3c:	e011      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a46:	d10c      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f8c8 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d028      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a6e:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7c:	491f      	ldr	r1, [pc, #124]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a8c:	d106      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	4a1a      	ldr	r2, [pc, #104]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a98:	60d3      	str	r3, [r2, #12]
 8004a9a:	e011      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f899 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d02b      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004acc:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ada:	4908      	ldr	r1, [pc, #32]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aea:	d109      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aec:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a02      	ldr	r2, [pc, #8]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004af6:	60d3      	str	r3, [r2, #12]
 8004af8:	e014      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f867 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02f      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b30:	4b2b      	ldr	r3, [pc, #172]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b3e:	4928      	ldr	r1, [pc, #160]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	2102      	movs	r1, #2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f844 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d014      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	74bb      	strb	r3, [r7, #18]
 8004b6a:	e011      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3320      	adds	r3, #32
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f925 	bl	8004dcc <RCCEx_PLLSAI2_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b86:	7cfb      	ldrb	r3, [r7, #19]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b9c:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004baa:	490d      	ldr	r1, [pc, #52]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bbe:	4b08      	ldr	r3, [pc, #32]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bce:	4904      	ldr	r1, [pc, #16]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021000 	.word	0x40021000

08004be4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bf2:	4b75      	ldr	r3, [pc, #468]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d018      	beq.n	8004c30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bfe:	4b72      	ldr	r3, [pc, #456]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0203 	and.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d10d      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
       ||
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c16:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
       ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d047      	beq.n	8004cba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	e044      	b.n	8004cba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d018      	beq.n	8004c6a <RCCEx_PLLSAI1_Config+0x86>
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d825      	bhi.n	8004c88 <RCCEx_PLLSAI1_Config+0xa4>
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d002      	beq.n	8004c46 <RCCEx_PLLSAI1_Config+0x62>
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d009      	beq.n	8004c58 <RCCEx_PLLSAI1_Config+0x74>
 8004c44:	e020      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c46:	4b60      	ldr	r3, [pc, #384]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d11d      	bne.n	8004c8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c56:	e01a      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c58:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d116      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c68:	e013      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c6a:	4b57      	ldr	r3, [pc, #348]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c76:	4b54      	ldr	r3, [pc, #336]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c86:	e006      	b.n	8004c96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e004      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e002      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	4944      	ldr	r1, [pc, #272]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d17d      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cc0:	4b41      	ldr	r3, [pc, #260]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a40      	ldr	r2, [pc, #256]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ccc:	f7fe fac6 	bl	800325c <HAL_GetTick>
 8004cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cd2:	e009      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cd4:	f7fe fac2 	bl	800325c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d902      	bls.n	8004ce8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ce6:	e005      	b.n	8004cf4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ce8:	4b37      	ldr	r3, [pc, #220]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ef      	bne.n	8004cd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d160      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d111      	bne.n	8004d24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d00:	4b31      	ldr	r3, [pc, #196]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6892      	ldr	r2, [r2, #8]
 8004d10:	0211      	lsls	r1, r2, #8
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68d2      	ldr	r2, [r2, #12]
 8004d16:	0912      	lsrs	r2, r2, #4
 8004d18:	0452      	lsls	r2, r2, #17
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	492a      	ldr	r1, [pc, #168]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	610b      	str	r3, [r1, #16]
 8004d22:	e027      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d112      	bne.n	8004d50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d2a:	4b27      	ldr	r3, [pc, #156]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d32:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6892      	ldr	r2, [r2, #8]
 8004d3a:	0211      	lsls	r1, r2, #8
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6912      	ldr	r2, [r2, #16]
 8004d40:	0852      	lsrs	r2, r2, #1
 8004d42:	3a01      	subs	r2, #1
 8004d44:	0552      	lsls	r2, r2, #21
 8004d46:	430a      	orrs	r2, r1
 8004d48:	491f      	ldr	r1, [pc, #124]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	610b      	str	r3, [r1, #16]
 8004d4e:	e011      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d50:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6892      	ldr	r2, [r2, #8]
 8004d60:	0211      	lsls	r1, r2, #8
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6952      	ldr	r2, [r2, #20]
 8004d66:	0852      	lsrs	r2, r2, #1
 8004d68:	3a01      	subs	r2, #1
 8004d6a:	0652      	lsls	r2, r2, #25
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	4916      	ldr	r1, [pc, #88]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d74:	4b14      	ldr	r3, [pc, #80]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a13      	ldr	r2, [pc, #76]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fe fa6c 	bl	800325c <HAL_GetTick>
 8004d84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d86:	e009      	b.n	8004d9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d88:	f7fe fa68 	bl	800325c <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d902      	bls.n	8004d9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	73fb      	strb	r3, [r7, #15]
          break;
 8004d9a:	e005      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ef      	beq.n	8004d88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dae:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	4904      	ldr	r1, [pc, #16]	@ (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40021000 	.word	0x40021000

08004dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dda:	4b6a      	ldr	r3, [pc, #424]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d018      	beq.n	8004e18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004de6:	4b67      	ldr	r3, [pc, #412]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0203 	and.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d10d      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
       ||
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dfe:	4b61      	ldr	r3, [pc, #388]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d047      	beq.n	8004ea2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
 8004e16:	e044      	b.n	8004ea2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d018      	beq.n	8004e52 <RCCEx_PLLSAI2_Config+0x86>
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d825      	bhi.n	8004e70 <RCCEx_PLLSAI2_Config+0xa4>
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d002      	beq.n	8004e2e <RCCEx_PLLSAI2_Config+0x62>
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d009      	beq.n	8004e40 <RCCEx_PLLSAI2_Config+0x74>
 8004e2c:	e020      	b.n	8004e70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e2e:	4b55      	ldr	r3, [pc, #340]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11d      	bne.n	8004e76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3e:	e01a      	b.n	8004e76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e40:	4b50      	ldr	r3, [pc, #320]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e50:	e013      	b.n	8004e7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e52:	4b4c      	ldr	r3, [pc, #304]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e5e:	4b49      	ldr	r3, [pc, #292]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e6e:	e006      	b.n	8004e7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      break;
 8004e74:	e004      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e76:	bf00      	nop
 8004e78:	e002      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e86:	4b3f      	ldr	r3, [pc, #252]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	4939      	ldr	r1, [pc, #228]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d167      	bne.n	8004f78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ea8:	4b36      	ldr	r3, [pc, #216]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a35      	ldr	r2, [pc, #212]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb4:	f7fe f9d2 	bl	800325c <HAL_GetTick>
 8004eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eba:	e009      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ebc:	f7fe f9ce 	bl	800325c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d902      	bls.n	8004ed0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ece:	e005      	b.n	8004edc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ef      	bne.n	8004ebc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d14a      	bne.n	8004f78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d111      	bne.n	8004f0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ee8:	4b26      	ldr	r3, [pc, #152]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6892      	ldr	r2, [r2, #8]
 8004ef8:	0211      	lsls	r1, r2, #8
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68d2      	ldr	r2, [r2, #12]
 8004efe:	0912      	lsrs	r2, r2, #4
 8004f00:	0452      	lsls	r2, r2, #17
 8004f02:	430a      	orrs	r2, r1
 8004f04:	491f      	ldr	r1, [pc, #124]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	614b      	str	r3, [r1, #20]
 8004f0a:	e011      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6892      	ldr	r2, [r2, #8]
 8004f1c:	0211      	lsls	r1, r2, #8
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6912      	ldr	r2, [r2, #16]
 8004f22:	0852      	lsrs	r2, r2, #1
 8004f24:	3a01      	subs	r2, #1
 8004f26:	0652      	lsls	r2, r2, #25
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	4916      	ldr	r1, [pc, #88]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f30:	4b14      	ldr	r3, [pc, #80]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a13      	ldr	r2, [pc, #76]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3c:	f7fe f98e 	bl	800325c <HAL_GetTick>
 8004f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f42:	e009      	b.n	8004f58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f44:	f7fe f98a 	bl	800325c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d902      	bls.n	8004f58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	73fb      	strb	r3, [r7, #15]
          break;
 8004f56:	e005      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f58:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ef      	beq.n	8004f44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f6a:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	4904      	ldr	r1, [pc, #16]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000

08004f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e049      	b.n	800502e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fd fe7e 	bl	8002cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f000 fc7a 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d001      	beq.n	8005050 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e047      	b.n	80050e0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a23      	ldr	r2, [pc, #140]	@ (80050ec <HAL_TIM_Base_Start+0xb4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d01d      	beq.n	800509e <HAL_TIM_Base_Start+0x66>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506a:	d018      	beq.n	800509e <HAL_TIM_Base_Start+0x66>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1f      	ldr	r2, [pc, #124]	@ (80050f0 <HAL_TIM_Base_Start+0xb8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_TIM_Base_Start+0x66>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1e      	ldr	r2, [pc, #120]	@ (80050f4 <HAL_TIM_Base_Start+0xbc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <HAL_TIM_Base_Start+0x66>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1c      	ldr	r2, [pc, #112]	@ (80050f8 <HAL_TIM_Base_Start+0xc0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_TIM_Base_Start+0x66>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1b      	ldr	r2, [pc, #108]	@ (80050fc <HAL_TIM_Base_Start+0xc4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_TIM_Base_Start+0x66>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a19      	ldr	r2, [pc, #100]	@ (8005100 <HAL_TIM_Base_Start+0xc8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d115      	bne.n	80050ca <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	4b17      	ldr	r3, [pc, #92]	@ (8005104 <HAL_TIM_Base_Start+0xcc>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d015      	beq.n	80050dc <HAL_TIM_Base_Start+0xa4>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b6:	d011      	beq.n	80050dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c8:	e008      	b.n	80050dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e000      	b.n	80050de <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40012c00 	.word	0x40012c00
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40013400 	.word	0x40013400
 8005100:	40014000 	.word	0x40014000
 8005104:	00010007 	.word	0x00010007

08005108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e049      	b.n	80051ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f841 	bl	80051b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f000 fbba 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <HAL_TIM_PWM_Start+0x24>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	e03c      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d109      	bne.n	800520a <HAL_TIM_PWM_Start+0x3e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e02f      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d109      	bne.n	8005224 <HAL_TIM_PWM_Start+0x58>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e022      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d109      	bne.n	800523e <HAL_TIM_PWM_Start+0x72>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e015      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b10      	cmp	r3, #16
 8005242:	d109      	bne.n	8005258 <HAL_TIM_PWM_Start+0x8c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e008      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e09c      	b.n	80053ac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Start+0xb6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005280:	e023      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Start+0xc6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005290:	e01b      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_PWM_Start+0xd6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052a0:	e013      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b0c      	cmp	r3, #12
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_PWM_Start+0xe6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052b0:	e00b      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_PWM_Start+0xf6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052c0:	e003      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2201      	movs	r2, #1
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 ff0a 	bl	80060ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a35      	ldr	r2, [pc, #212]	@ (80053b4 <HAL_TIM_PWM_Start+0x1e8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_TIM_PWM_Start+0x13e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a34      	ldr	r2, [pc, #208]	@ (80053b8 <HAL_TIM_PWM_Start+0x1ec>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIM_PWM_Start+0x13e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a32      	ldr	r2, [pc, #200]	@ (80053bc <HAL_TIM_PWM_Start+0x1f0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIM_PWM_Start+0x13e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a31      	ldr	r2, [pc, #196]	@ (80053c0 <HAL_TIM_PWM_Start+0x1f4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIM_PWM_Start+0x13e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2f      	ldr	r2, [pc, #188]	@ (80053c4 <HAL_TIM_PWM_Start+0x1f8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <HAL_TIM_PWM_Start+0x142>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_TIM_PWM_Start+0x144>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005322:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a22      	ldr	r2, [pc, #136]	@ (80053b4 <HAL_TIM_PWM_Start+0x1e8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01d      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005336:	d018      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a22      	ldr	r2, [pc, #136]	@ (80053c8 <HAL_TIM_PWM_Start+0x1fc>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a21      	ldr	r2, [pc, #132]	@ (80053cc <HAL_TIM_PWM_Start+0x200>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00e      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1f      	ldr	r2, [pc, #124]	@ (80053d0 <HAL_TIM_PWM_Start+0x204>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d009      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <HAL_TIM_PWM_Start+0x1ec>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d004      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a15      	ldr	r2, [pc, #84]	@ (80053bc <HAL_TIM_PWM_Start+0x1f0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d115      	bne.n	8005396 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	4b18      	ldr	r3, [pc, #96]	@ (80053d4 <HAL_TIM_PWM_Start+0x208>)
 8005372:	4013      	ands	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b06      	cmp	r3, #6
 800537a:	d015      	beq.n	80053a8 <HAL_TIM_PWM_Start+0x1dc>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005382:	d011      	beq.n	80053a8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005394:	e008      	b.n	80053a8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0201 	orr.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e000      	b.n	80053aa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	00010007 	.word	0x00010007

080053d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fe7e 	bl	80060ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a3e      	ldr	r2, [pc, #248]	@ (80054f0 <HAL_TIM_PWM_Stop+0x118>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_TIM_PWM_Stop+0x4a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a3d      	ldr	r2, [pc, #244]	@ (80054f4 <HAL_TIM_PWM_Stop+0x11c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00e      	beq.n	8005422 <HAL_TIM_PWM_Stop+0x4a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a3b      	ldr	r2, [pc, #236]	@ (80054f8 <HAL_TIM_PWM_Stop+0x120>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_TIM_PWM_Stop+0x4a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a3a      	ldr	r2, [pc, #232]	@ (80054fc <HAL_TIM_PWM_Stop+0x124>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIM_PWM_Stop+0x4a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a38      	ldr	r2, [pc, #224]	@ (8005500 <HAL_TIM_PWM_Stop+0x128>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Stop+0x4e>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <HAL_TIM_PWM_Stop+0x50>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d017      	beq.n	800545c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10f      	bne.n	800545c <HAL_TIM_PWM_Stop+0x84>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	f240 4344 	movw	r3, #1092	@ 0x444
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d107      	bne.n	800545c <HAL_TIM_PWM_Stop+0x84>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800545a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10f      	bne.n	800548c <HAL_TIM_PWM_Stop+0xb4>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	f240 4344 	movw	r3, #1092	@ 0x444
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <HAL_TIM_PWM_Stop+0xb4>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d104      	bne.n	800549c <HAL_TIM_PWM_Stop+0xc4>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800549a:	e023      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d104      	bne.n	80054ac <HAL_TIM_PWM_Stop+0xd4>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054aa:	e01b      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d104      	bne.n	80054bc <HAL_TIM_PWM_Stop+0xe4>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ba:	e013      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d104      	bne.n	80054cc <HAL_TIM_PWM_Stop+0xf4>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054ca:	e00b      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d104      	bne.n	80054dc <HAL_TIM_PWM_Stop+0x104>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054da:	e003      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40013400 	.word	0x40013400
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800

08005504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800551e:	2302      	movs	r3, #2
 8005520:	e0ff      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b14      	cmp	r3, #20
 800552e:	f200 80f0 	bhi.w	8005712 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005532:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	0800558d 	.word	0x0800558d
 800553c:	08005713 	.word	0x08005713
 8005540:	08005713 	.word	0x08005713
 8005544:	08005713 	.word	0x08005713
 8005548:	080055cd 	.word	0x080055cd
 800554c:	08005713 	.word	0x08005713
 8005550:	08005713 	.word	0x08005713
 8005554:	08005713 	.word	0x08005713
 8005558:	0800560f 	.word	0x0800560f
 800555c:	08005713 	.word	0x08005713
 8005560:	08005713 	.word	0x08005713
 8005564:	08005713 	.word	0x08005713
 8005568:	0800564f 	.word	0x0800564f
 800556c:	08005713 	.word	0x08005713
 8005570:	08005713 	.word	0x08005713
 8005574:	08005713 	.word	0x08005713
 8005578:	08005691 	.word	0x08005691
 800557c:	08005713 	.word	0x08005713
 8005580:	08005713 	.word	0x08005713
 8005584:	08005713 	.word	0x08005713
 8005588:	080056d1 	.word	0x080056d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fa3a 	bl	8005a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0208 	orr.w	r2, r2, #8
 80055a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0204 	bic.w	r2, r2, #4
 80055b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6999      	ldr	r1, [r3, #24]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	619a      	str	r2, [r3, #24]
      break;
 80055ca:	e0a5      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 faaa 	bl	8005b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	619a      	str	r2, [r3, #24]
      break;
 800560c:	e084      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fb13 	bl	8005c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0208 	orr.w	r2, r2, #8
 8005628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0204 	bic.w	r2, r2, #4
 8005638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69d9      	ldr	r1, [r3, #28]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	61da      	str	r2, [r3, #28]
      break;
 800564c:	e064      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fb7b 	bl	8005d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69d9      	ldr	r1, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	021a      	lsls	r2, r3, #8
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	61da      	str	r2, [r3, #28]
      break;
 800568e:	e043      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fbc4 	bl	8005e24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0208 	orr.w	r2, r2, #8
 80056aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0204 	bic.w	r2, r2, #4
 80056ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056ce:	e023      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fc08 	bl	8005eec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	021a      	lsls	r2, r3, #8
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005710:	e002      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
      break;
 8005716:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005720:	7dfb      	ldrb	r3, [r7, #23]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop

0800572c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIM_ConfigClockSource+0x1c>
 8005744:	2302      	movs	r3, #2
 8005746:	e0b6      	b.n	80058b6 <HAL_TIM_ConfigClockSource+0x18a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005766:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800576a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005784:	d03e      	beq.n	8005804 <HAL_TIM_ConfigClockSource+0xd8>
 8005786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800578a:	f200 8087 	bhi.w	800589c <HAL_TIM_ConfigClockSource+0x170>
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005792:	f000 8086 	beq.w	80058a2 <HAL_TIM_ConfigClockSource+0x176>
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800579a:	d87f      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x170>
 800579c:	2b70      	cmp	r3, #112	@ 0x70
 800579e:	d01a      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0xaa>
 80057a0:	2b70      	cmp	r3, #112	@ 0x70
 80057a2:	d87b      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x170>
 80057a4:	2b60      	cmp	r3, #96	@ 0x60
 80057a6:	d050      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x11e>
 80057a8:	2b60      	cmp	r3, #96	@ 0x60
 80057aa:	d877      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x170>
 80057ac:	2b50      	cmp	r3, #80	@ 0x50
 80057ae:	d03c      	beq.n	800582a <HAL_TIM_ConfigClockSource+0xfe>
 80057b0:	2b50      	cmp	r3, #80	@ 0x50
 80057b2:	d873      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x170>
 80057b4:	2b40      	cmp	r3, #64	@ 0x40
 80057b6:	d058      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x13e>
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	d86f      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x170>
 80057bc:	2b30      	cmp	r3, #48	@ 0x30
 80057be:	d064      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x15e>
 80057c0:	2b30      	cmp	r3, #48	@ 0x30
 80057c2:	d86b      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x170>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d060      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x15e>
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d867      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x170>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d05c      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x15e>
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d05a      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x15e>
 80057d4:	e062      	b.n	800589c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057e6:	f000 fc61 	bl	80060ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	609a      	str	r2, [r3, #8]
      break;
 8005802:	e04f      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005814:	f000 fc4a 	bl	80060ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005826:	609a      	str	r2, [r3, #8]
      break;
 8005828:	e03c      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005836:	461a      	mov	r2, r3
 8005838:	f000 fbbe 	bl	8005fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2150      	movs	r1, #80	@ 0x50
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fc17 	bl	8006076 <TIM_ITRx_SetConfig>
      break;
 8005848:	e02c      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fbdd 	bl	8006016 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2160      	movs	r1, #96	@ 0x60
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fc07 	bl	8006076 <TIM_ITRx_SetConfig>
      break;
 8005868:	e01c      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005876:	461a      	mov	r2, r3
 8005878:	f000 fb9e 	bl	8005fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2140      	movs	r1, #64	@ 0x40
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fbf7 	bl	8006076 <TIM_ITRx_SetConfig>
      break;
 8005888:	e00c      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4619      	mov	r1, r3
 8005894:	4610      	mov	r0, r2
 8005896:	f000 fbee 	bl	8006076 <TIM_ITRx_SetConfig>
      break;
 800589a:	e003      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      break;
 80058a0:	e000      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80058a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a46      	ldr	r2, [pc, #280]	@ (80059ec <TIM_Base_SetConfig+0x12c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058de:	d00f      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a43      	ldr	r2, [pc, #268]	@ (80059f0 <TIM_Base_SetConfig+0x130>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00b      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a42      	ldr	r2, [pc, #264]	@ (80059f4 <TIM_Base_SetConfig+0x134>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a41      	ldr	r2, [pc, #260]	@ (80059f8 <TIM_Base_SetConfig+0x138>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a40      	ldr	r2, [pc, #256]	@ (80059fc <TIM_Base_SetConfig+0x13c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d108      	bne.n	8005912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a35      	ldr	r2, [pc, #212]	@ (80059ec <TIM_Base_SetConfig+0x12c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005920:	d01b      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a32      	ldr	r2, [pc, #200]	@ (80059f0 <TIM_Base_SetConfig+0x130>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d017      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a31      	ldr	r2, [pc, #196]	@ (80059f4 <TIM_Base_SetConfig+0x134>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a30      	ldr	r2, [pc, #192]	@ (80059f8 <TIM_Base_SetConfig+0x138>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00f      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2f      	ldr	r2, [pc, #188]	@ (80059fc <TIM_Base_SetConfig+0x13c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2e      	ldr	r2, [pc, #184]	@ (8005a00 <TIM_Base_SetConfig+0x140>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2d      	ldr	r2, [pc, #180]	@ (8005a04 <TIM_Base_SetConfig+0x144>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2c      	ldr	r2, [pc, #176]	@ (8005a08 <TIM_Base_SetConfig+0x148>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d108      	bne.n	800596c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a16      	ldr	r2, [pc, #88]	@ (80059ec <TIM_Base_SetConfig+0x12c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00f      	beq.n	80059b8 <TIM_Base_SetConfig+0xf8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a18      	ldr	r2, [pc, #96]	@ (80059fc <TIM_Base_SetConfig+0x13c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_Base_SetConfig+0xf8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a17      	ldr	r2, [pc, #92]	@ (8005a00 <TIM_Base_SetConfig+0x140>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_Base_SetConfig+0xf8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a16      	ldr	r2, [pc, #88]	@ (8005a04 <TIM_Base_SetConfig+0x144>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_Base_SetConfig+0xf8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a15      	ldr	r2, [pc, #84]	@ (8005a08 <TIM_Base_SetConfig+0x148>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d103      	bne.n	80059c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f023 0201 	bic.w	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	611a      	str	r2, [r3, #16]
  }
}
 80059de:	bf00      	nop
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40013400 	.word	0x40013400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800

08005a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f023 0201 	bic.w	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0302 	bic.w	r3, r3, #2
 8005a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a2c      	ldr	r2, [pc, #176]	@ (8005b18 <TIM_OC1_SetConfig+0x10c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00f      	beq.n	8005a8c <TIM_OC1_SetConfig+0x80>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005b1c <TIM_OC1_SetConfig+0x110>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00b      	beq.n	8005a8c <TIM_OC1_SetConfig+0x80>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a2a      	ldr	r2, [pc, #168]	@ (8005b20 <TIM_OC1_SetConfig+0x114>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d007      	beq.n	8005a8c <TIM_OC1_SetConfig+0x80>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a29      	ldr	r2, [pc, #164]	@ (8005b24 <TIM_OC1_SetConfig+0x118>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d003      	beq.n	8005a8c <TIM_OC1_SetConfig+0x80>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a28      	ldr	r2, [pc, #160]	@ (8005b28 <TIM_OC1_SetConfig+0x11c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d10c      	bne.n	8005aa6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0308 	bic.w	r3, r3, #8
 8005a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f023 0304 	bic.w	r3, r3, #4
 8005aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b18 <TIM_OC1_SetConfig+0x10c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00f      	beq.n	8005ace <TIM_OC1_SetConfig+0xc2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8005b1c <TIM_OC1_SetConfig+0x110>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <TIM_OC1_SetConfig+0xc2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a19      	ldr	r2, [pc, #100]	@ (8005b20 <TIM_OC1_SetConfig+0x114>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <TIM_OC1_SetConfig+0xc2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a18      	ldr	r2, [pc, #96]	@ (8005b24 <TIM_OC1_SetConfig+0x118>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC1_SetConfig+0xc2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <TIM_OC1_SetConfig+0x11c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d111      	bne.n	8005af2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800

08005b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f023 0210 	bic.w	r2, r3, #16
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f023 0320 	bic.w	r3, r3, #32
 8005b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a28      	ldr	r2, [pc, #160]	@ (8005c2c <TIM_OC2_SetConfig+0x100>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_OC2_SetConfig+0x6c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a27      	ldr	r2, [pc, #156]	@ (8005c30 <TIM_OC2_SetConfig+0x104>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d10d      	bne.n	8005bb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c2c <TIM_OC2_SetConfig+0x100>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00f      	beq.n	8005bdc <TIM_OC2_SetConfig+0xb0>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8005c30 <TIM_OC2_SetConfig+0x104>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <TIM_OC2_SetConfig+0xb0>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005c34 <TIM_OC2_SetConfig+0x108>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_OC2_SetConfig+0xb0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1a      	ldr	r2, [pc, #104]	@ (8005c38 <TIM_OC2_SetConfig+0x10c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC2_SetConfig+0xb0>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a19      	ldr	r2, [pc, #100]	@ (8005c3c <TIM_OC2_SetConfig+0x110>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d113      	bne.n	8005c04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005be2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40013400 	.word	0x40013400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40014400 	.word	0x40014400
 8005c3c:	40014800 	.word	0x40014800

08005c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a27      	ldr	r2, [pc, #156]	@ (8005d3c <TIM_OC3_SetConfig+0xfc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_OC3_SetConfig+0x6a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a26      	ldr	r2, [pc, #152]	@ (8005d40 <TIM_OC3_SetConfig+0x100>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d10d      	bne.n	8005cc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d3c <TIM_OC3_SetConfig+0xfc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <TIM_OC3_SetConfig+0xae>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d40 <TIM_OC3_SetConfig+0x100>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <TIM_OC3_SetConfig+0xae>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d44 <TIM_OC3_SetConfig+0x104>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <TIM_OC3_SetConfig+0xae>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	@ (8005d48 <TIM_OC3_SetConfig+0x108>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_OC3_SetConfig+0xae>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <TIM_OC3_SetConfig+0x10c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d113      	bne.n	8005d16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	621a      	str	r2, [r3, #32]
}
 8005d30:	bf00      	nop
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800

08005d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	031b      	lsls	r3, r3, #12
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a18      	ldr	r2, [pc, #96]	@ (8005e10 <TIM_OC4_SetConfig+0xc0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00f      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x84>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a17      	ldr	r2, [pc, #92]	@ (8005e14 <TIM_OC4_SetConfig+0xc4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x84>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a16      	ldr	r2, [pc, #88]	@ (8005e18 <TIM_OC4_SetConfig+0xc8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x84>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a15      	ldr	r2, [pc, #84]	@ (8005e1c <TIM_OC4_SetConfig+0xcc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x84>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a14      	ldr	r2, [pc, #80]	@ (8005e20 <TIM_OC4_SetConfig+0xd0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d109      	bne.n	8005de8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	019b      	lsls	r3, r3, #6
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40013400 	.word	0x40013400
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40014400 	.word	0x40014400
 8005e20:	40014800 	.word	0x40014800

08005e24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a17      	ldr	r2, [pc, #92]	@ (8005ed8 <TIM_OC5_SetConfig+0xb4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00f      	beq.n	8005e9e <TIM_OC5_SetConfig+0x7a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <TIM_OC5_SetConfig+0xb8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00b      	beq.n	8005e9e <TIM_OC5_SetConfig+0x7a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a15      	ldr	r2, [pc, #84]	@ (8005ee0 <TIM_OC5_SetConfig+0xbc>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d007      	beq.n	8005e9e <TIM_OC5_SetConfig+0x7a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a14      	ldr	r2, [pc, #80]	@ (8005ee4 <TIM_OC5_SetConfig+0xc0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <TIM_OC5_SetConfig+0x7a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a13      	ldr	r2, [pc, #76]	@ (8005ee8 <TIM_OC5_SetConfig+0xc4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d109      	bne.n	8005eb2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	621a      	str	r2, [r3, #32]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	40012c00 	.word	0x40012c00
 8005edc:	40013400 	.word	0x40013400
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	40014800 	.word	0x40014800

08005eec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	051b      	lsls	r3, r3, #20
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a18      	ldr	r2, [pc, #96]	@ (8005fa4 <TIM_OC6_SetConfig+0xb8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00f      	beq.n	8005f68 <TIM_OC6_SetConfig+0x7c>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <TIM_OC6_SetConfig+0xbc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00b      	beq.n	8005f68 <TIM_OC6_SetConfig+0x7c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <TIM_OC6_SetConfig+0xc0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d007      	beq.n	8005f68 <TIM_OC6_SetConfig+0x7c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <TIM_OC6_SetConfig+0xc4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d003      	beq.n	8005f68 <TIM_OC6_SetConfig+0x7c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a14      	ldr	r2, [pc, #80]	@ (8005fb4 <TIM_OC6_SetConfig+0xc8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d109      	bne.n	8005f7c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	029b      	lsls	r3, r3, #10
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40012c00 	.word	0x40012c00
 8005fa8:	40013400 	.word	0x40013400
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40014400 	.word	0x40014400
 8005fb4:	40014800 	.word	0x40014800

08005fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 030a 	bic.w	r3, r3, #10
 8005ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006016:	b480      	push	{r7}
 8006018:	b087      	sub	sp, #28
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f023 0210 	bic.w	r2, r3, #16
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006040:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	031b      	lsls	r3, r3, #12
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006052:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	621a      	str	r2, [r3, #32]
}
 800606a:	bf00      	nop
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	f043 0307 	orr.w	r3, r3, #7
 8006098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	609a      	str	r2, [r3, #8]
}
 80060a0:	bf00      	nop
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	021a      	lsls	r2, r3, #8
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	609a      	str	r2, [r3, #8]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	2201      	movs	r2, #1
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1a      	ldr	r2, [r3, #32]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	43db      	mvns	r3, r3
 800610e:	401a      	ands	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	fa01 f303 	lsl.w	r3, r1, r3
 8006124:	431a      	orrs	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
	...

08006138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800614c:	2302      	movs	r3, #2
 800614e:	e068      	b.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2e      	ldr	r2, [pc, #184]	@ (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d004      	beq.n	8006184 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2d      	ldr	r2, [pc, #180]	@ (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d108      	bne.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800618a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01d      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c2:	d018      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1a      	ldr	r2, [pc, #104]	@ (800623c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a18      	ldr	r2, [pc, #96]	@ (8006240 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d009      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a13      	ldr	r2, [pc, #76]	@ (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a14      	ldr	r2, [pc, #80]	@ (8006244 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10c      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40013400 	.word	0x40013400
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00
 8006244:	40014000 	.word	0x40014000

08006248 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006260:	2302      	movs	r3, #2
 8006262:	e065      	b.n	8006330 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a16      	ldr	r2, [pc, #88]	@ (800633c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d004      	beq.n	80062f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a14      	ldr	r2, [pc, #80]	@ (8006340 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d115      	bne.n	800631e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	051b      	lsls	r3, r3, #20
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40012c00 	.word	0x40012c00
 8006340:	40013400 	.word	0x40013400

08006344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e040      	b.n	80063d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fc fd32 	bl	8002dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	@ 0x24
 8006370:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fedc 	bl	8007148 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fc21 	bl	8006bd8 <UART_SetConfig>
 8006396:	4603      	mov	r3, r0
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e01b      	b.n	80063d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 ff5b 	bl	800728c <UART_CheckIdleState>
 80063d6:	4603      	mov	r3, r0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	@ 0x28
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d177      	bne.n	80064e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_UART_Transmit+0x24>
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e070      	b.n	80064ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2221      	movs	r2, #33	@ 0x21
 8006414:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006416:	f7fc ff21 	bl	800325c <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006434:	d108      	bne.n	8006448 <HAL_UART_Transmit+0x68>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	e003      	b.n	8006450 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006450:	e02f      	b.n	80064b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2200      	movs	r2, #0
 800645a:	2180      	movs	r1, #128	@ 0x80
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 ffbd 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e03b      	b.n	80064ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10b      	bne.n	8006490 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	881a      	ldrh	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006484:	b292      	uxth	r2, r2
 8006486:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	3302      	adds	r3, #2
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	e007      	b.n	80064a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	781a      	ldrb	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	3301      	adds	r3, #1
 800649e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1c9      	bne.n	8006452 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2200      	movs	r2, #0
 80064c6:	2140      	movs	r1, #64	@ 0x40
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 ff87 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e005      	b.n	80064ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e000      	b.n	80064ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3720      	adds	r7, #32
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	@ 0x28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006508:	2b20      	cmp	r3, #32
 800650a:	d137      	bne.n	800657c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_UART_Receive_IT+0x24>
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e030      	b.n	800657e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <HAL_UART_Receive_IT+0x94>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d01f      	beq.n	800656c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d018      	beq.n	800656c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	613b      	str	r3, [r7, #16]
   return(result);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	623b      	str	r3, [r7, #32]
 800655a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	69f9      	ldr	r1, [r7, #28]
 800655e:	6a3a      	ldr	r2, [r7, #32]
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	61bb      	str	r3, [r7, #24]
   return(result);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e6      	bne.n	800653a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	461a      	mov	r2, r3
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 ffa0 	bl	80074b8 <UART_Start_Receive_IT>
 8006578:	4603      	mov	r3, r0
 800657a:	e000      	b.n	800657e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800657c:	2302      	movs	r3, #2
  }
}
 800657e:	4618      	mov	r0, r3
 8006580:	3728      	adds	r7, #40	@ 0x28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40008000 	.word	0x40008000

0800658c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b0ba      	sub	sp, #232	@ 0xe8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80065b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80065ba:	4013      	ands	r3, r2
 80065bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d115      	bne.n	80065f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00f      	beq.n	80065f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 82ca 	beq.w	8006b7e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
      }
      return;
 80065f2:	e2c4      	b.n	8006b7e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80065f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8117 	beq.w	800682c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800660a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800660e:	4b85      	ldr	r3, [pc, #532]	@ (8006824 <HAL_UART_IRQHandler+0x298>)
 8006610:	4013      	ands	r3, r2
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 810a 	beq.w	800682c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d011      	beq.n	8006648 <HAL_UART_IRQHandler+0xbc>
 8006624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2201      	movs	r2, #1
 8006636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800663e:	f043 0201 	orr.w	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d011      	beq.n	8006678 <HAL_UART_IRQHandler+0xec>
 8006654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2202      	movs	r2, #2
 8006666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800666e:	f043 0204 	orr.w	r2, r3, #4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d011      	beq.n	80066a8 <HAL_UART_IRQHandler+0x11c>
 8006684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2204      	movs	r2, #4
 8006696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800669e:	f043 0202 	orr.w	r2, r3, #2
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d017      	beq.n	80066e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2208      	movs	r2, #8
 80066d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066da:	f043 0208 	orr.w	r2, r3, #8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d012      	beq.n	8006716 <HAL_UART_IRQHandler+0x18a>
 80066f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00c      	beq.n	8006716 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8230 	beq.w	8006b82 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00d      	beq.n	800674a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800672e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d007      	beq.n	800674a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006750:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675e:	2b40      	cmp	r3, #64	@ 0x40
 8006760:	d005      	beq.n	800676e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006766:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04f      	beq.n	800680e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 ff68 	bl	8007644 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677e:	2b40      	cmp	r3, #64	@ 0x40
 8006780:	d141      	bne.n	8006806 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3308      	adds	r3, #8
 8006788:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006798:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800679c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3308      	adds	r3, #8
 80067aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1d9      	bne.n	8006782 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d013      	beq.n	80067fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067da:	4a13      	ldr	r2, [pc, #76]	@ (8006828 <HAL_UART_IRQHandler+0x29c>)
 80067dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fc fe95 	bl	8003512 <HAL_DMA_Abort_IT>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d017      	beq.n	800681e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fc:	e00f      	b.n	800681e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9d4 	bl	8006bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	e00b      	b.n	800681e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f9d0 	bl	8006bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	e007      	b.n	800681e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f9cc 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800681c:	e1b1      	b.n	8006b82 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681e:	bf00      	nop
    return;
 8006820:	e1af      	b.n	8006b82 <HAL_UART_IRQHandler+0x5f6>
 8006822:	bf00      	nop
 8006824:	04000120 	.word	0x04000120
 8006828:	0800770d 	.word	0x0800770d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006830:	2b01      	cmp	r3, #1
 8006832:	f040 816a 	bne.w	8006b0a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 8163 	beq.w	8006b0a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 815c 	beq.w	8006b0a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2210      	movs	r2, #16
 8006858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006864:	2b40      	cmp	r3, #64	@ 0x40
 8006866:	f040 80d4 	bne.w	8006a12 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006876:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80ad 	beq.w	80069da <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800688a:	429a      	cmp	r2, r3
 800688c:	f080 80a5 	bcs.w	80069da <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006896:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f040 8086 	bne.w	80069b8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1da      	bne.n	80068ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006906:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3308      	adds	r3, #8
 8006916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800691a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800691e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006922:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800692c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e1      	bne.n	80068f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006948:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3308      	adds	r3, #8
 8006952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006956:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006958:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800695c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e3      	bne.n	8006932 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006988:	f023 0310 	bic.w	r3, r3, #16
 800698c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800699a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800699c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e4      	bne.n	8006978 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fc fd6f 	bl	8003496 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8f4 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80069d8:	e0d5      	b.n	8006b86 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069e4:	429a      	cmp	r2, r3
 80069e6:	f040 80ce 	bne.w	8006b86 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	f040 80c5 	bne.w	8006b86 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f8d8 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
      return;
 8006a10:	e0b9      	b.n	8006b86 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 80ab 	beq.w	8006b8a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 80a6 	beq.w	8006b8a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e4      	bne.n	8006a3e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	623b      	str	r3, [r7, #32]
   return(result);
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	f023 0301 	bic.w	r3, r3, #1
 8006a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a98:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e3      	bne.n	8006a74 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f023 0310 	bic.w	r3, r3, #16
 8006ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ae2:	61fb      	str	r3, [r7, #28]
 8006ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	69b9      	ldr	r1, [r7, #24]
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	617b      	str	r3, [r7, #20]
   return(result);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e4      	bne.n	8006ac0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2202      	movs	r2, #2
 8006afa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f85c 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b08:	e03f      	b.n	8006b8a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00e      	beq.n	8006b34 <HAL_UART_IRQHandler+0x5a8>
 8006b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d008      	beq.n	8006b34 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 ffe9 	bl	8007b04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b32:	e02d      	b.n	8006b90 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00e      	beq.n	8006b5e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01c      	beq.n	8006b8e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
    }
    return;
 8006b5c:	e017      	b.n	8006b8e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d012      	beq.n	8006b90 <HAL_UART_IRQHandler+0x604>
 8006b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fdde 	bl	8007738 <UART_EndTransmit_IT>
    return;
 8006b7c:	e008      	b.n	8006b90 <HAL_UART_IRQHandler+0x604>
      return;
 8006b7e:	bf00      	nop
 8006b80:	e006      	b.n	8006b90 <HAL_UART_IRQHandler+0x604>
    return;
 8006b82:	bf00      	nop
 8006b84:	e004      	b.n	8006b90 <HAL_UART_IRQHandler+0x604>
      return;
 8006b86:	bf00      	nop
 8006b88:	e002      	b.n	8006b90 <HAL_UART_IRQHandler+0x604>
      return;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <HAL_UART_IRQHandler+0x604>
    return;
 8006b8e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b90:	37e8      	adds	r7, #232	@ 0xe8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop

08006b98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bdc:	b08a      	sub	sp, #40	@ 0x28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4ba4      	ldr	r3, [pc, #656]	@ (8006e98 <UART_SetConfig+0x2c0>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a99      	ldr	r2, [pc, #612]	@ (8006e9c <UART_SetConfig+0x2c4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d004      	beq.n	8006c44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c40:	4313      	orrs	r3, r2
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c54:	430a      	orrs	r2, r1
 8006c56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a90      	ldr	r2, [pc, #576]	@ (8006ea0 <UART_SetConfig+0x2c8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d126      	bne.n	8006cb0 <UART_SetConfig+0xd8>
 8006c62:	4b90      	ldr	r3, [pc, #576]	@ (8006ea4 <UART_SetConfig+0x2cc>)
 8006c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c68:	f003 0303 	and.w	r3, r3, #3
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d81b      	bhi.n	8006ca8 <UART_SetConfig+0xd0>
 8006c70:	a201      	add	r2, pc, #4	@ (adr r2, 8006c78 <UART_SetConfig+0xa0>)
 8006c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c76:	bf00      	nop
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c99 	.word	0x08006c99
 8006c80:	08006c91 	.word	0x08006c91
 8006c84:	08006ca1 	.word	0x08006ca1
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c8e:	e116      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006c90:	2302      	movs	r3, #2
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c96:	e112      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c9e:	e10e      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ca6:	e10a      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cae:	e106      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ea8 <UART_SetConfig+0x2d0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d138      	bne.n	8006d2c <UART_SetConfig+0x154>
 8006cba:	4b7a      	ldr	r3, [pc, #488]	@ (8006ea4 <UART_SetConfig+0x2cc>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc0:	f003 030c 	and.w	r3, r3, #12
 8006cc4:	2b0c      	cmp	r3, #12
 8006cc6:	d82d      	bhi.n	8006d24 <UART_SetConfig+0x14c>
 8006cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0xf8>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d25 	.word	0x08006d25
 8006cd8:	08006d25 	.word	0x08006d25
 8006cdc:	08006d25 	.word	0x08006d25
 8006ce0:	08006d15 	.word	0x08006d15
 8006ce4:	08006d25 	.word	0x08006d25
 8006ce8:	08006d25 	.word	0x08006d25
 8006cec:	08006d25 	.word	0x08006d25
 8006cf0:	08006d0d 	.word	0x08006d0d
 8006cf4:	08006d25 	.word	0x08006d25
 8006cf8:	08006d25 	.word	0x08006d25
 8006cfc:	08006d25 	.word	0x08006d25
 8006d00:	08006d1d 	.word	0x08006d1d
 8006d04:	2300      	movs	r3, #0
 8006d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d0a:	e0d8      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d12:	e0d4      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d14:	2304      	movs	r3, #4
 8006d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d1a:	e0d0      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d1c:	2308      	movs	r3, #8
 8006d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d22:	e0cc      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d24:	2310      	movs	r3, #16
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2a:	e0c8      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a5e      	ldr	r2, [pc, #376]	@ (8006eac <UART_SetConfig+0x2d4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d125      	bne.n	8006d82 <UART_SetConfig+0x1aa>
 8006d36:	4b5b      	ldr	r3, [pc, #364]	@ (8006ea4 <UART_SetConfig+0x2cc>)
 8006d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d40:	2b30      	cmp	r3, #48	@ 0x30
 8006d42:	d016      	beq.n	8006d72 <UART_SetConfig+0x19a>
 8006d44:	2b30      	cmp	r3, #48	@ 0x30
 8006d46:	d818      	bhi.n	8006d7a <UART_SetConfig+0x1a2>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d00a      	beq.n	8006d62 <UART_SetConfig+0x18a>
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d814      	bhi.n	8006d7a <UART_SetConfig+0x1a2>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <UART_SetConfig+0x182>
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d008      	beq.n	8006d6a <UART_SetConfig+0x192>
 8006d58:	e00f      	b.n	8006d7a <UART_SetConfig+0x1a2>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d60:	e0ad      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d62:	2302      	movs	r3, #2
 8006d64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d68:	e0a9      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d6a:	2304      	movs	r3, #4
 8006d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d70:	e0a5      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d72:	2308      	movs	r3, #8
 8006d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d78:	e0a1      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d7a:	2310      	movs	r3, #16
 8006d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d80:	e09d      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a4a      	ldr	r2, [pc, #296]	@ (8006eb0 <UART_SetConfig+0x2d8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d125      	bne.n	8006dd8 <UART_SetConfig+0x200>
 8006d8c:	4b45      	ldr	r3, [pc, #276]	@ (8006ea4 <UART_SetConfig+0x2cc>)
 8006d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d98:	d016      	beq.n	8006dc8 <UART_SetConfig+0x1f0>
 8006d9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d9c:	d818      	bhi.n	8006dd0 <UART_SetConfig+0x1f8>
 8006d9e:	2b80      	cmp	r3, #128	@ 0x80
 8006da0:	d00a      	beq.n	8006db8 <UART_SetConfig+0x1e0>
 8006da2:	2b80      	cmp	r3, #128	@ 0x80
 8006da4:	d814      	bhi.n	8006dd0 <UART_SetConfig+0x1f8>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <UART_SetConfig+0x1d8>
 8006daa:	2b40      	cmp	r3, #64	@ 0x40
 8006dac:	d008      	beq.n	8006dc0 <UART_SetConfig+0x1e8>
 8006dae:	e00f      	b.n	8006dd0 <UART_SetConfig+0x1f8>
 8006db0:	2300      	movs	r3, #0
 8006db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006db6:	e082      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006db8:	2302      	movs	r3, #2
 8006dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dbe:	e07e      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc6:	e07a      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006dc8:	2308      	movs	r3, #8
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dce:	e076      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd6:	e072      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a35      	ldr	r2, [pc, #212]	@ (8006eb4 <UART_SetConfig+0x2dc>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d12a      	bne.n	8006e38 <UART_SetConfig+0x260>
 8006de2:	4b30      	ldr	r3, [pc, #192]	@ (8006ea4 <UART_SetConfig+0x2cc>)
 8006de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006df0:	d01a      	beq.n	8006e28 <UART_SetConfig+0x250>
 8006df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006df6:	d81b      	bhi.n	8006e30 <UART_SetConfig+0x258>
 8006df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dfc:	d00c      	beq.n	8006e18 <UART_SetConfig+0x240>
 8006dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e02:	d815      	bhi.n	8006e30 <UART_SetConfig+0x258>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <UART_SetConfig+0x238>
 8006e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e0c:	d008      	beq.n	8006e20 <UART_SetConfig+0x248>
 8006e0e:	e00f      	b.n	8006e30 <UART_SetConfig+0x258>
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e16:	e052      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e1e:	e04e      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e20:	2304      	movs	r3, #4
 8006e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e26:	e04a      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e28:	2308      	movs	r3, #8
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2e:	e046      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e30:	2310      	movs	r3, #16
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e36:	e042      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	@ (8006e9c <UART_SetConfig+0x2c4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d13a      	bne.n	8006eb8 <UART_SetConfig+0x2e0>
 8006e42:	4b18      	ldr	r3, [pc, #96]	@ (8006ea4 <UART_SetConfig+0x2cc>)
 8006e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e50:	d01a      	beq.n	8006e88 <UART_SetConfig+0x2b0>
 8006e52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e56:	d81b      	bhi.n	8006e90 <UART_SetConfig+0x2b8>
 8006e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e5c:	d00c      	beq.n	8006e78 <UART_SetConfig+0x2a0>
 8006e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e62:	d815      	bhi.n	8006e90 <UART_SetConfig+0x2b8>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <UART_SetConfig+0x298>
 8006e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6c:	d008      	beq.n	8006e80 <UART_SetConfig+0x2a8>
 8006e6e:	e00f      	b.n	8006e90 <UART_SetConfig+0x2b8>
 8006e70:	2300      	movs	r3, #0
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e76:	e022      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7e:	e01e      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e80:	2304      	movs	r3, #4
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e86:	e01a      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8e:	e016      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e90:	2310      	movs	r3, #16
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e96:	e012      	b.n	8006ebe <UART_SetConfig+0x2e6>
 8006e98:	efff69f3 	.word	0xefff69f3
 8006e9c:	40008000 	.word	0x40008000
 8006ea0:	40013800 	.word	0x40013800
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	40004400 	.word	0x40004400
 8006eac:	40004800 	.word	0x40004800
 8006eb0:	40004c00 	.word	0x40004c00
 8006eb4:	40005000 	.word	0x40005000
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a9f      	ldr	r2, [pc, #636]	@ (8007140 <UART_SetConfig+0x568>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d17a      	bne.n	8006fbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d824      	bhi.n	8006f1a <UART_SetConfig+0x342>
 8006ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed8 <UART_SetConfig+0x300>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006f1b 	.word	0x08006f1b
 8006ee0:	08006f05 	.word	0x08006f05
 8006ee4:	08006f1b 	.word	0x08006f1b
 8006ee8:	08006f0b 	.word	0x08006f0b
 8006eec:	08006f1b 	.word	0x08006f1b
 8006ef0:	08006f1b 	.word	0x08006f1b
 8006ef4:	08006f1b 	.word	0x08006f1b
 8006ef8:	08006f13 	.word	0x08006f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006efc:	f7fd fafc 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 8006f00:	61f8      	str	r0, [r7, #28]
        break;
 8006f02:	e010      	b.n	8006f26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f04:	4b8f      	ldr	r3, [pc, #572]	@ (8007144 <UART_SetConfig+0x56c>)
 8006f06:	61fb      	str	r3, [r7, #28]
        break;
 8006f08:	e00d      	b.n	8006f26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f0a:	f7fd fa5d 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8006f0e:	61f8      	str	r0, [r7, #28]
        break;
 8006f10:	e009      	b.n	8006f26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f16:	61fb      	str	r3, [r7, #28]
        break;
 8006f18:	e005      	b.n	8006f26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80fb 	beq.w	8007124 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	4413      	add	r3, r2
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d305      	bcc.n	8006f4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d903      	bls.n	8006f52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f50:	e0e8      	b.n	8007124 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	2200      	movs	r2, #0
 8006f56:	461c      	mov	r4, r3
 8006f58:	4615      	mov	r5, r2
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	022b      	lsls	r3, r5, #8
 8006f64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f68:	0222      	lsls	r2, r4, #8
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	6849      	ldr	r1, [r1, #4]
 8006f6e:	0849      	lsrs	r1, r1, #1
 8006f70:	2000      	movs	r0, #0
 8006f72:	4688      	mov	r8, r1
 8006f74:	4681      	mov	r9, r0
 8006f76:	eb12 0a08 	adds.w	sl, r2, r8
 8006f7a:	eb43 0b09 	adc.w	fp, r3, r9
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	603b      	str	r3, [r7, #0]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	4659      	mov	r1, fp
 8006f90:	f7f9 fe1a 	bl	8000bc8 <__aeabi_uldivmod>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4613      	mov	r3, r2
 8006f9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fa2:	d308      	bcc.n	8006fb6 <UART_SetConfig+0x3de>
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006faa:	d204      	bcs.n	8006fb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	60da      	str	r2, [r3, #12]
 8006fb4:	e0b6      	b.n	8007124 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fbc:	e0b2      	b.n	8007124 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc6:	d15e      	bne.n	8007086 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d828      	bhi.n	8007022 <UART_SetConfig+0x44a>
 8006fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <UART_SetConfig+0x400>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	08006ffd 	.word	0x08006ffd
 8006fdc:	08007005 	.word	0x08007005
 8006fe0:	0800700d 	.word	0x0800700d
 8006fe4:	08007023 	.word	0x08007023
 8006fe8:	08007013 	.word	0x08007013
 8006fec:	08007023 	.word	0x08007023
 8006ff0:	08007023 	.word	0x08007023
 8006ff4:	08007023 	.word	0x08007023
 8006ff8:	0800701b 	.word	0x0800701b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ffc:	f7fd fa7c 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 8007000:	61f8      	str	r0, [r7, #28]
        break;
 8007002:	e014      	b.n	800702e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007004:	f7fd fa8e 	bl	8004524 <HAL_RCC_GetPCLK2Freq>
 8007008:	61f8      	str	r0, [r7, #28]
        break;
 800700a:	e010      	b.n	800702e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800700c:	4b4d      	ldr	r3, [pc, #308]	@ (8007144 <UART_SetConfig+0x56c>)
 800700e:	61fb      	str	r3, [r7, #28]
        break;
 8007010:	e00d      	b.n	800702e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007012:	f7fd f9d9 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8007016:	61f8      	str	r0, [r7, #28]
        break;
 8007018:	e009      	b.n	800702e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800701a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800701e:	61fb      	str	r3, [r7, #28]
        break;
 8007020:	e005      	b.n	800702e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800702c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d077      	beq.n	8007124 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	005a      	lsls	r2, r3, #1
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	085b      	lsrs	r3, r3, #1
 800703e:	441a      	add	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	fbb2 f3f3 	udiv	r3, r2, r3
 8007048:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b0f      	cmp	r3, #15
 800704e:	d916      	bls.n	800707e <UART_SetConfig+0x4a6>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007056:	d212      	bcs.n	800707e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f023 030f 	bic.w	r3, r3, #15
 8007060:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	085b      	lsrs	r3, r3, #1
 8007066:	b29b      	uxth	r3, r3
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	b29a      	uxth	r2, r3
 800706e:	8afb      	ldrh	r3, [r7, #22]
 8007070:	4313      	orrs	r3, r2
 8007072:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	8afa      	ldrh	r2, [r7, #22]
 800707a:	60da      	str	r2, [r3, #12]
 800707c:	e052      	b.n	8007124 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007084:	e04e      	b.n	8007124 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007086:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800708a:	2b08      	cmp	r3, #8
 800708c:	d827      	bhi.n	80070de <UART_SetConfig+0x506>
 800708e:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <UART_SetConfig+0x4bc>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c9 	.word	0x080070c9
 80070a0:	080070df 	.word	0x080070df
 80070a4:	080070cf 	.word	0x080070cf
 80070a8:	080070df 	.word	0x080070df
 80070ac:	080070df 	.word	0x080070df
 80070b0:	080070df 	.word	0x080070df
 80070b4:	080070d7 	.word	0x080070d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b8:	f7fd fa1e 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 80070bc:	61f8      	str	r0, [r7, #28]
        break;
 80070be:	e014      	b.n	80070ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c0:	f7fd fa30 	bl	8004524 <HAL_RCC_GetPCLK2Freq>
 80070c4:	61f8      	str	r0, [r7, #28]
        break;
 80070c6:	e010      	b.n	80070ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007144 <UART_SetConfig+0x56c>)
 80070ca:	61fb      	str	r3, [r7, #28]
        break;
 80070cc:	e00d      	b.n	80070ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ce:	f7fd f97b 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 80070d2:	61f8      	str	r0, [r7, #28]
        break;
 80070d4:	e009      	b.n	80070ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070da:	61fb      	str	r3, [r7, #28]
        break;
 80070dc:	e005      	b.n	80070ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070e8:	bf00      	nop
    }

    if (pclk != 0U)
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d019      	beq.n	8007124 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	085a      	lsrs	r2, r3, #1
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	441a      	add	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	2b0f      	cmp	r3, #15
 8007108:	d909      	bls.n	800711e <UART_SetConfig+0x546>
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007110:	d205      	bcs.n	800711e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60da      	str	r2, [r3, #12]
 800711c:	e002      	b.n	8007124 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007130:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007134:	4618      	mov	r0, r3
 8007136:	3728      	adds	r7, #40	@ 0x28
 8007138:	46bd      	mov	sp, r7
 800713a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713e:	bf00      	nop
 8007140:	40008000 	.word	0x40008000
 8007144:	00f42400 	.word	0x00f42400

08007148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01a      	beq.n	800725e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007246:	d10a      	bne.n	800725e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	605a      	str	r2, [r3, #4]
  }
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b098      	sub	sp, #96	@ 0x60
 8007290:	af02      	add	r7, sp, #8
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800729c:	f7fb ffde 	bl	800325c <HAL_GetTick>
 80072a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d12e      	bne.n	800730e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b8:	2200      	movs	r2, #0
 80072ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f88c 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d021      	beq.n	800730e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072de:	653b      	str	r3, [r7, #80]	@ 0x50
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e062      	b.n	80073d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b04      	cmp	r3, #4
 800731a:	d149      	bne.n	80073b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800731c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007324:	2200      	movs	r2, #0
 8007326:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f856 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d03c      	beq.n	80073b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	623b      	str	r3, [r7, #32]
   return(result);
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800734a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007354:	633b      	str	r3, [r7, #48]	@ 0x30
 8007356:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800735a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e6      	bne.n	8007336 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	60fb      	str	r3, [r7, #12]
   return(result);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0301 	bic.w	r3, r3, #1
 800737e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007388:	61fa      	str	r2, [r7, #28]
 800738a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	69b9      	ldr	r1, [r7, #24]
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	617b      	str	r3, [r7, #20]
   return(result);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e5      	bne.n	8007368 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e011      	b.n	80073d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3758      	adds	r7, #88	@ 0x58
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ec:	e04f      	b.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f4:	d04b      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f6:	f7fb ff31 	bl	800325c <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	429a      	cmp	r2, r3
 8007404:	d302      	bcc.n	800740c <UART_WaitOnFlagUntilTimeout+0x30>
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e04e      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d037      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b80      	cmp	r3, #128	@ 0x80
 8007422:	d034      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	d031      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b08      	cmp	r3, #8
 8007436:	d110      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2208      	movs	r2, #8
 800743e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f8ff 	bl	8007644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2208      	movs	r2, #8
 800744a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e029      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007468:	d111      	bne.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f8e5 	bl	8007644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e00f      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69da      	ldr	r2, [r3, #28]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4013      	ands	r3, r2
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	429a      	cmp	r2, r3
 800749c:	bf0c      	ite	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	2300      	movne	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d0a0      	beq.n	80073ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b097      	sub	sp, #92	@ 0x5c
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	88fa      	ldrh	r2, [r7, #6]
 80074d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ea:	d10e      	bne.n	800750a <UART_Start_Receive_IT+0x52>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <UART_Start_Receive_IT+0x48>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074fe:	e02d      	b.n	800755c <UART_Start_Receive_IT+0xa4>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	22ff      	movs	r2, #255	@ 0xff
 8007504:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007508:	e028      	b.n	800755c <UART_Start_Receive_IT+0xa4>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10d      	bne.n	800752e <UART_Start_Receive_IT+0x76>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d104      	bne.n	8007524 <UART_Start_Receive_IT+0x6c>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	22ff      	movs	r2, #255	@ 0xff
 800751e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007522:	e01b      	b.n	800755c <UART_Start_Receive_IT+0xa4>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	227f      	movs	r2, #127	@ 0x7f
 8007528:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800752c:	e016      	b.n	800755c <UART_Start_Receive_IT+0xa4>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007536:	d10d      	bne.n	8007554 <UART_Start_Receive_IT+0x9c>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d104      	bne.n	800754a <UART_Start_Receive_IT+0x92>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	227f      	movs	r2, #127	@ 0x7f
 8007544:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007548:	e008      	b.n	800755c <UART_Start_Receive_IT+0xa4>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	223f      	movs	r2, #63	@ 0x3f
 800754e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007552:	e003      	b.n	800755c <UART_Start_Receive_IT+0xa4>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2222      	movs	r2, #34	@ 0x22
 8007568:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3308      	adds	r3, #8
 8007572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	f043 0301 	orr.w	r3, r3, #1
 8007582:	657b      	str	r3, [r7, #84]	@ 0x54
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3308      	adds	r3, #8
 800758a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800758c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800758e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800759a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e5      	bne.n	800756c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a8:	d107      	bne.n	80075ba <UART_Start_Receive_IT+0x102>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d103      	bne.n	80075ba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4a21      	ldr	r2, [pc, #132]	@ (800763c <UART_Start_Receive_IT+0x184>)
 80075b6:	669a      	str	r2, [r3, #104]	@ 0x68
 80075b8:	e002      	b.n	80075c0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4a20      	ldr	r2, [pc, #128]	@ (8007640 <UART_Start_Receive_IT+0x188>)
 80075be:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d019      	beq.n	80075fc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80075dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80075f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e6      	bne.n	80075c8 <UART_Start_Receive_IT+0x110>
 80075fa:	e018      	b.n	800762e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	613b      	str	r3, [r7, #16]
   return(result);
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f043 0320 	orr.w	r3, r3, #32
 8007610:	653b      	str	r3, [r7, #80]	@ 0x50
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800761a:	623b      	str	r3, [r7, #32]
 800761c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	69f9      	ldr	r1, [r7, #28]
 8007620:	6a3a      	ldr	r2, [r7, #32]
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	61bb      	str	r3, [r7, #24]
   return(result);
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e6      	bne.n	80075fc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	375c      	adds	r7, #92	@ 0x5c
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	08007949 	.word	0x08007949
 8007640:	0800778d 	.word	0x0800778d

08007644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b095      	sub	sp, #84	@ 0x54
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800766a:	643b      	str	r3, [r7, #64]	@ 0x40
 800766c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e6      	bne.n	800764c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	61fb      	str	r3, [r7, #28]
   return(result);
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	f023 0301 	bic.w	r3, r3, #1
 8007694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800769e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e5      	bne.n	800767e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d118      	bne.n	80076ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f023 0310 	bic.w	r3, r3, #16
 80076ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	6979      	ldr	r1, [r7, #20]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	613b      	str	r3, [r7, #16]
   return(result);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e6      	bne.n	80076ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007700:	bf00      	nop
 8007702:	3754      	adds	r7, #84	@ 0x54
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff fa3e 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	60bb      	str	r3, [r7, #8]
   return(result);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007754:	61fb      	str	r3, [r7, #28]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6979      	ldr	r1, [r7, #20]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	613b      	str	r3, [r7, #16]
   return(result);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e6      	bne.n	8007740 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff fa0a 	bl	8006b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007784:	bf00      	nop
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b09c      	sub	sp, #112	@ 0x70
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800779a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077a4:	2b22      	cmp	r3, #34	@ 0x22
 80077a6:	f040 80be 	bne.w	8007926 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80077b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80077b8:	b2d9      	uxtb	r1, r3
 80077ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c4:	400a      	ands	r2, r1
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f040 80a3 	bne.w	800793a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007812:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007814:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007818:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e6      	bne.n	80077f4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	667b      	str	r3, [r7, #100]	@ 0x64
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007846:	647a      	str	r2, [r7, #68]	@ 0x44
 8007848:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800784c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e5      	bne.n	8007826 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a34      	ldr	r2, [pc, #208]	@ (8007944 <UART_RxISR_8BIT+0x1b8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d01f      	beq.n	80078b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d018      	beq.n	80078b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	623b      	str	r3, [r7, #32]
   return(result);
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800789a:	663b      	str	r3, [r7, #96]	@ 0x60
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80078a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e6      	bne.n	8007886 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d12e      	bne.n	800791e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	e853 3f00 	ldrex	r3, [r3]
 80078d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 0310 	bic.w	r3, r3, #16
 80078da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078e4:	61fb      	str	r3, [r7, #28]
 80078e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	69b9      	ldr	r1, [r7, #24]
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	617b      	str	r3, [r7, #20]
   return(result);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e6      	bne.n	80078c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b10      	cmp	r3, #16
 8007904:	d103      	bne.n	800790e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2210      	movs	r2, #16
 800790c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff f952 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800791c:	e00d      	b.n	800793a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7f9 faca 	bl	8000eb8 <HAL_UART_RxCpltCallback>
}
 8007924:	e009      	b.n	800793a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	8b1b      	ldrh	r3, [r3, #24]
 800792c:	b29a      	uxth	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0208 	orr.w	r2, r2, #8
 8007936:	b292      	uxth	r2, r2
 8007938:	831a      	strh	r2, [r3, #24]
}
 800793a:	bf00      	nop
 800793c:	3770      	adds	r7, #112	@ 0x70
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40008000 	.word	0x40008000

08007948 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b09c      	sub	sp, #112	@ 0x70
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007956:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007960:	2b22      	cmp	r3, #34	@ 0x22
 8007962:	f040 80be 	bne.w	8007ae2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800796c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007974:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007976:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800797a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800797e:	4013      	ands	r3, r2
 8007980:	b29a      	uxth	r2, r3
 8007982:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007984:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798a:	1c9a      	adds	r2, r3, #2
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 80a3 	bne.w	8007af6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80079d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e6      	bne.n	80079b0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3308      	adds	r3, #8
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	f023 0301 	bic.w	r3, r3, #1
 80079f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3308      	adds	r3, #8
 8007a00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a02:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e5      	bne.n	80079e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a34      	ldr	r2, [pc, #208]	@ (8007b00 <UART_RxISR_16BIT+0x1b8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d01f      	beq.n	8007a74 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d018      	beq.n	8007a74 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a62:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d12e      	bne.n	8007ada <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f023 0310 	bic.w	r3, r3, #16
 8007a96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007aa0:	61bb      	str	r3, [r7, #24]
 8007aa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6979      	ldr	r1, [r7, #20]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	613b      	str	r3, [r7, #16]
   return(result);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e6      	bne.n	8007a82 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f003 0310 	and.w	r3, r3, #16
 8007abe:	2b10      	cmp	r3, #16
 8007ac0:	d103      	bne.n	8007aca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2210      	movs	r2, #16
 8007ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff f874 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ad8:	e00d      	b.n	8007af6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7f9 f9ec 	bl	8000eb8 <HAL_UART_RxCpltCallback>
}
 8007ae0:	e009      	b.n	8007af6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	8b1b      	ldrh	r3, [r3, #24]
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0208 	orr.w	r2, r2, #8
 8007af2:	b292      	uxth	r2, r2
 8007af4:	831a      	strh	r2, [r3, #24]
}
 8007af6:	bf00      	nop
 8007af8:	3770      	adds	r7, #112	@ 0x70
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	40008000 	.word	0x40008000

08007b04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <atoi>:
 8007b18:	220a      	movs	r2, #10
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	f000 b87a 	b.w	8007c14 <strtol>

08007b20 <_strtol_l.constprop.0>:
 8007b20:	2b24      	cmp	r3, #36	@ 0x24
 8007b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b26:	4686      	mov	lr, r0
 8007b28:	4690      	mov	r8, r2
 8007b2a:	d801      	bhi.n	8007b30 <_strtol_l.constprop.0+0x10>
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d106      	bne.n	8007b3e <_strtol_l.constprop.0+0x1e>
 8007b30:	f000 fecc 	bl	80088cc <__errno>
 8007b34:	2316      	movs	r3, #22
 8007b36:	6003      	str	r3, [r0, #0]
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3e:	4834      	ldr	r0, [pc, #208]	@ (8007c10 <_strtol_l.constprop.0+0xf0>)
 8007b40:	460d      	mov	r5, r1
 8007b42:	462a      	mov	r2, r5
 8007b44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b48:	5d06      	ldrb	r6, [r0, r4]
 8007b4a:	f016 0608 	ands.w	r6, r6, #8
 8007b4e:	d1f8      	bne.n	8007b42 <_strtol_l.constprop.0+0x22>
 8007b50:	2c2d      	cmp	r4, #45	@ 0x2d
 8007b52:	d12d      	bne.n	8007bb0 <_strtol_l.constprop.0+0x90>
 8007b54:	782c      	ldrb	r4, [r5, #0]
 8007b56:	2601      	movs	r6, #1
 8007b58:	1c95      	adds	r5, r2, #2
 8007b5a:	f033 0210 	bics.w	r2, r3, #16
 8007b5e:	d109      	bne.n	8007b74 <_strtol_l.constprop.0+0x54>
 8007b60:	2c30      	cmp	r4, #48	@ 0x30
 8007b62:	d12a      	bne.n	8007bba <_strtol_l.constprop.0+0x9a>
 8007b64:	782a      	ldrb	r2, [r5, #0]
 8007b66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b6a:	2a58      	cmp	r2, #88	@ 0x58
 8007b6c:	d125      	bne.n	8007bba <_strtol_l.constprop.0+0x9a>
 8007b6e:	786c      	ldrb	r4, [r5, #1]
 8007b70:	2310      	movs	r3, #16
 8007b72:	3502      	adds	r5, #2
 8007b74:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007b78:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	fbbc f9f3 	udiv	r9, ip, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b88:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007b8c:	2f09      	cmp	r7, #9
 8007b8e:	d81b      	bhi.n	8007bc8 <_strtol_l.constprop.0+0xa8>
 8007b90:	463c      	mov	r4, r7
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	dd27      	ble.n	8007be6 <_strtol_l.constprop.0+0xc6>
 8007b96:	1c57      	adds	r7, r2, #1
 8007b98:	d007      	beq.n	8007baa <_strtol_l.constprop.0+0x8a>
 8007b9a:	4581      	cmp	r9, r0
 8007b9c:	d320      	bcc.n	8007be0 <_strtol_l.constprop.0+0xc0>
 8007b9e:	d101      	bne.n	8007ba4 <_strtol_l.constprop.0+0x84>
 8007ba0:	45a2      	cmp	sl, r4
 8007ba2:	db1d      	blt.n	8007be0 <_strtol_l.constprop.0+0xc0>
 8007ba4:	fb00 4003 	mla	r0, r0, r3, r4
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bae:	e7eb      	b.n	8007b88 <_strtol_l.constprop.0+0x68>
 8007bb0:	2c2b      	cmp	r4, #43	@ 0x2b
 8007bb2:	bf04      	itt	eq
 8007bb4:	782c      	ldrbeq	r4, [r5, #0]
 8007bb6:	1c95      	addeq	r5, r2, #2
 8007bb8:	e7cf      	b.n	8007b5a <_strtol_l.constprop.0+0x3a>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1da      	bne.n	8007b74 <_strtol_l.constprop.0+0x54>
 8007bbe:	2c30      	cmp	r4, #48	@ 0x30
 8007bc0:	bf0c      	ite	eq
 8007bc2:	2308      	moveq	r3, #8
 8007bc4:	230a      	movne	r3, #10
 8007bc6:	e7d5      	b.n	8007b74 <_strtol_l.constprop.0+0x54>
 8007bc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007bcc:	2f19      	cmp	r7, #25
 8007bce:	d801      	bhi.n	8007bd4 <_strtol_l.constprop.0+0xb4>
 8007bd0:	3c37      	subs	r4, #55	@ 0x37
 8007bd2:	e7de      	b.n	8007b92 <_strtol_l.constprop.0+0x72>
 8007bd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007bd8:	2f19      	cmp	r7, #25
 8007bda:	d804      	bhi.n	8007be6 <_strtol_l.constprop.0+0xc6>
 8007bdc:	3c57      	subs	r4, #87	@ 0x57
 8007bde:	e7d8      	b.n	8007b92 <_strtol_l.constprop.0+0x72>
 8007be0:	f04f 32ff 	mov.w	r2, #4294967295
 8007be4:	e7e1      	b.n	8007baa <_strtol_l.constprop.0+0x8a>
 8007be6:	1c53      	adds	r3, r2, #1
 8007be8:	d108      	bne.n	8007bfc <_strtol_l.constprop.0+0xdc>
 8007bea:	2322      	movs	r3, #34	@ 0x22
 8007bec:	f8ce 3000 	str.w	r3, [lr]
 8007bf0:	4660      	mov	r0, ip
 8007bf2:	f1b8 0f00 	cmp.w	r8, #0
 8007bf6:	d0a0      	beq.n	8007b3a <_strtol_l.constprop.0+0x1a>
 8007bf8:	1e69      	subs	r1, r5, #1
 8007bfa:	e006      	b.n	8007c0a <_strtol_l.constprop.0+0xea>
 8007bfc:	b106      	cbz	r6, 8007c00 <_strtol_l.constprop.0+0xe0>
 8007bfe:	4240      	negs	r0, r0
 8007c00:	f1b8 0f00 	cmp.w	r8, #0
 8007c04:	d099      	beq.n	8007b3a <_strtol_l.constprop.0+0x1a>
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	d1f6      	bne.n	8007bf8 <_strtol_l.constprop.0+0xd8>
 8007c0a:	f8c8 1000 	str.w	r1, [r8]
 8007c0e:	e794      	b.n	8007b3a <_strtol_l.constprop.0+0x1a>
 8007c10:	0800aee5 	.word	0x0800aee5

08007c14 <strtol>:
 8007c14:	4613      	mov	r3, r2
 8007c16:	460a      	mov	r2, r1
 8007c18:	4601      	mov	r1, r0
 8007c1a:	4802      	ldr	r0, [pc, #8]	@ (8007c24 <strtol+0x10>)
 8007c1c:	6800      	ldr	r0, [r0, #0]
 8007c1e:	f7ff bf7f 	b.w	8007b20 <_strtol_l.constprop.0>
 8007c22:	bf00      	nop
 8007c24:	2000067c 	.word	0x2000067c

08007c28 <__cvt>:
 8007c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	ec57 6b10 	vmov	r6, r7, d0
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	460c      	mov	r4, r1
 8007c34:	4619      	mov	r1, r3
 8007c36:	463b      	mov	r3, r7
 8007c38:	bfbb      	ittet	lt
 8007c3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c3e:	461f      	movlt	r7, r3
 8007c40:	2300      	movge	r3, #0
 8007c42:	232d      	movlt	r3, #45	@ 0x2d
 8007c44:	700b      	strb	r3, [r1, #0]
 8007c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c4c:	4691      	mov	r9, r2
 8007c4e:	f023 0820 	bic.w	r8, r3, #32
 8007c52:	bfbc      	itt	lt
 8007c54:	4632      	movlt	r2, r6
 8007c56:	4616      	movlt	r6, r2
 8007c58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c5c:	d005      	beq.n	8007c6a <__cvt+0x42>
 8007c5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c62:	d100      	bne.n	8007c66 <__cvt+0x3e>
 8007c64:	3401      	adds	r4, #1
 8007c66:	2102      	movs	r1, #2
 8007c68:	e000      	b.n	8007c6c <__cvt+0x44>
 8007c6a:	2103      	movs	r1, #3
 8007c6c:	ab03      	add	r3, sp, #12
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	ab02      	add	r3, sp, #8
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	ec47 6b10 	vmov	d0, r6, r7
 8007c78:	4653      	mov	r3, sl
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	f000 fefc 	bl	8008a78 <_dtoa_r>
 8007c80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c84:	4605      	mov	r5, r0
 8007c86:	d119      	bne.n	8007cbc <__cvt+0x94>
 8007c88:	f019 0f01 	tst.w	r9, #1
 8007c8c:	d00e      	beq.n	8007cac <__cvt+0x84>
 8007c8e:	eb00 0904 	add.w	r9, r0, r4
 8007c92:	2200      	movs	r2, #0
 8007c94:	2300      	movs	r3, #0
 8007c96:	4630      	mov	r0, r6
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 ff25 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c9e:	b108      	cbz	r0, 8007ca4 <__cvt+0x7c>
 8007ca0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ca4:	2230      	movs	r2, #48	@ 0x30
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	454b      	cmp	r3, r9
 8007caa:	d31e      	bcc.n	8007cea <__cvt+0xc2>
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cb0:	1b5b      	subs	r3, r3, r5
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	b004      	add	sp, #16
 8007cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007cc0:	eb00 0904 	add.w	r9, r0, r4
 8007cc4:	d1e5      	bne.n	8007c92 <__cvt+0x6a>
 8007cc6:	7803      	ldrb	r3, [r0, #0]
 8007cc8:	2b30      	cmp	r3, #48	@ 0x30
 8007cca:	d10a      	bne.n	8007ce2 <__cvt+0xba>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	f7f8 ff08 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cd8:	b918      	cbnz	r0, 8007ce2 <__cvt+0xba>
 8007cda:	f1c4 0401 	rsb	r4, r4, #1
 8007cde:	f8ca 4000 	str.w	r4, [sl]
 8007ce2:	f8da 3000 	ldr.w	r3, [sl]
 8007ce6:	4499      	add	r9, r3
 8007ce8:	e7d3      	b.n	8007c92 <__cvt+0x6a>
 8007cea:	1c59      	adds	r1, r3, #1
 8007cec:	9103      	str	r1, [sp, #12]
 8007cee:	701a      	strb	r2, [r3, #0]
 8007cf0:	e7d9      	b.n	8007ca6 <__cvt+0x7e>

08007cf2 <__exponent>:
 8007cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	bfba      	itte	lt
 8007cf8:	4249      	neglt	r1, r1
 8007cfa:	232d      	movlt	r3, #45	@ 0x2d
 8007cfc:	232b      	movge	r3, #43	@ 0x2b
 8007cfe:	2909      	cmp	r1, #9
 8007d00:	7002      	strb	r2, [r0, #0]
 8007d02:	7043      	strb	r3, [r0, #1]
 8007d04:	dd29      	ble.n	8007d5a <__exponent+0x68>
 8007d06:	f10d 0307 	add.w	r3, sp, #7
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	270a      	movs	r7, #10
 8007d0e:	461a      	mov	r2, r3
 8007d10:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d14:	fb07 1416 	mls	r4, r7, r6, r1
 8007d18:	3430      	adds	r4, #48	@ 0x30
 8007d1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d1e:	460c      	mov	r4, r1
 8007d20:	2c63      	cmp	r4, #99	@ 0x63
 8007d22:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d26:	4631      	mov	r1, r6
 8007d28:	dcf1      	bgt.n	8007d0e <__exponent+0x1c>
 8007d2a:	3130      	adds	r1, #48	@ 0x30
 8007d2c:	1e94      	subs	r4, r2, #2
 8007d2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d32:	1c41      	adds	r1, r0, #1
 8007d34:	4623      	mov	r3, r4
 8007d36:	42ab      	cmp	r3, r5
 8007d38:	d30a      	bcc.n	8007d50 <__exponent+0x5e>
 8007d3a:	f10d 0309 	add.w	r3, sp, #9
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	42ac      	cmp	r4, r5
 8007d42:	bf88      	it	hi
 8007d44:	2300      	movhi	r3, #0
 8007d46:	3302      	adds	r3, #2
 8007d48:	4403      	add	r3, r0
 8007d4a:	1a18      	subs	r0, r3, r0
 8007d4c:	b003      	add	sp, #12
 8007d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d58:	e7ed      	b.n	8007d36 <__exponent+0x44>
 8007d5a:	2330      	movs	r3, #48	@ 0x30
 8007d5c:	3130      	adds	r1, #48	@ 0x30
 8007d5e:	7083      	strb	r3, [r0, #2]
 8007d60:	70c1      	strb	r1, [r0, #3]
 8007d62:	1d03      	adds	r3, r0, #4
 8007d64:	e7f1      	b.n	8007d4a <__exponent+0x58>
	...

08007d68 <_printf_float>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	b08d      	sub	sp, #52	@ 0x34
 8007d6e:	460c      	mov	r4, r1
 8007d70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d74:	4616      	mov	r6, r2
 8007d76:	461f      	mov	r7, r3
 8007d78:	4605      	mov	r5, r0
 8007d7a:	f000 fd5d 	bl	8008838 <_localeconv_r>
 8007d7e:	6803      	ldr	r3, [r0, #0]
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7f8 fa84 	bl	8000290 <strlen>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d90:	9005      	str	r0, [sp, #20]
 8007d92:	3307      	adds	r3, #7
 8007d94:	f023 0307 	bic.w	r3, r3, #7
 8007d98:	f103 0208 	add.w	r2, r3, #8
 8007d9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007da0:	f8d4 b000 	ldr.w	fp, [r4]
 8007da4:	f8c8 2000 	str.w	r2, [r8]
 8007da8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007db0:	9307      	str	r3, [sp, #28]
 8007db2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007db6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dbe:	4b9c      	ldr	r3, [pc, #624]	@ (8008030 <_printf_float+0x2c8>)
 8007dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc4:	f7f8 fec2 	bl	8000b4c <__aeabi_dcmpun>
 8007dc8:	bb70      	cbnz	r0, 8007e28 <_printf_float+0xc0>
 8007dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dce:	4b98      	ldr	r3, [pc, #608]	@ (8008030 <_printf_float+0x2c8>)
 8007dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd4:	f7f8 fe9c 	bl	8000b10 <__aeabi_dcmple>
 8007dd8:	bb30      	cbnz	r0, 8007e28 <_printf_float+0xc0>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 fe8b 	bl	8000afc <__aeabi_dcmplt>
 8007de6:	b110      	cbz	r0, 8007dee <_printf_float+0x86>
 8007de8:	232d      	movs	r3, #45	@ 0x2d
 8007dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dee:	4a91      	ldr	r2, [pc, #580]	@ (8008034 <_printf_float+0x2cc>)
 8007df0:	4b91      	ldr	r3, [pc, #580]	@ (8008038 <_printf_float+0x2d0>)
 8007df2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007df6:	bf94      	ite	ls
 8007df8:	4690      	movls	r8, r2
 8007dfa:	4698      	movhi	r8, r3
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	f02b 0304 	bic.w	r3, fp, #4
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	f04f 0900 	mov.w	r9, #0
 8007e0a:	9700      	str	r7, [sp, #0]
 8007e0c:	4633      	mov	r3, r6
 8007e0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f9d2 	bl	80081bc <_printf_common>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f040 808d 	bne.w	8007f38 <_printf_float+0x1d0>
 8007e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e22:	b00d      	add	sp, #52	@ 0x34
 8007e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fe8c 	bl	8000b4c <__aeabi_dcmpun>
 8007e34:	b140      	cbz	r0, 8007e48 <_printf_float+0xe0>
 8007e36:	464b      	mov	r3, r9
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bfbc      	itt	lt
 8007e3c:	232d      	movlt	r3, #45	@ 0x2d
 8007e3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e42:	4a7e      	ldr	r2, [pc, #504]	@ (800803c <_printf_float+0x2d4>)
 8007e44:	4b7e      	ldr	r3, [pc, #504]	@ (8008040 <_printf_float+0x2d8>)
 8007e46:	e7d4      	b.n	8007df2 <_printf_float+0x8a>
 8007e48:	6863      	ldr	r3, [r4, #4]
 8007e4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e4e:	9206      	str	r2, [sp, #24]
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	d13b      	bne.n	8007ecc <_printf_float+0x164>
 8007e54:	2306      	movs	r3, #6
 8007e56:	6063      	str	r3, [r4, #4]
 8007e58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	6022      	str	r2, [r4, #0]
 8007e60:	9303      	str	r3, [sp, #12]
 8007e62:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e68:	ab09      	add	r3, sp, #36	@ 0x24
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	6861      	ldr	r1, [r4, #4]
 8007e6e:	ec49 8b10 	vmov	d0, r8, r9
 8007e72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e76:	4628      	mov	r0, r5
 8007e78:	f7ff fed6 	bl	8007c28 <__cvt>
 8007e7c:	9b06      	ldr	r3, [sp, #24]
 8007e7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e80:	2b47      	cmp	r3, #71	@ 0x47
 8007e82:	4680      	mov	r8, r0
 8007e84:	d129      	bne.n	8007eda <_printf_float+0x172>
 8007e86:	1cc8      	adds	r0, r1, #3
 8007e88:	db02      	blt.n	8007e90 <_printf_float+0x128>
 8007e8a:	6863      	ldr	r3, [r4, #4]
 8007e8c:	4299      	cmp	r1, r3
 8007e8e:	dd41      	ble.n	8007f14 <_printf_float+0x1ac>
 8007e90:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e94:	fa5f fa8a 	uxtb.w	sl, sl
 8007e98:	3901      	subs	r1, #1
 8007e9a:	4652      	mov	r2, sl
 8007e9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ea0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ea2:	f7ff ff26 	bl	8007cf2 <__exponent>
 8007ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ea8:	1813      	adds	r3, r2, r0
 8007eaa:	2a01      	cmp	r2, #1
 8007eac:	4681      	mov	r9, r0
 8007eae:	6123      	str	r3, [r4, #16]
 8007eb0:	dc02      	bgt.n	8007eb8 <_printf_float+0x150>
 8007eb2:	6822      	ldr	r2, [r4, #0]
 8007eb4:	07d2      	lsls	r2, r2, #31
 8007eb6:	d501      	bpl.n	8007ebc <_printf_float+0x154>
 8007eb8:	3301      	adds	r3, #1
 8007eba:	6123      	str	r3, [r4, #16]
 8007ebc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0a2      	beq.n	8007e0a <_printf_float+0xa2>
 8007ec4:	232d      	movs	r3, #45	@ 0x2d
 8007ec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eca:	e79e      	b.n	8007e0a <_printf_float+0xa2>
 8007ecc:	9a06      	ldr	r2, [sp, #24]
 8007ece:	2a47      	cmp	r2, #71	@ 0x47
 8007ed0:	d1c2      	bne.n	8007e58 <_printf_float+0xf0>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1c0      	bne.n	8007e58 <_printf_float+0xf0>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e7bd      	b.n	8007e56 <_printf_float+0xee>
 8007eda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ede:	d9db      	bls.n	8007e98 <_printf_float+0x130>
 8007ee0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ee4:	d118      	bne.n	8007f18 <_printf_float+0x1b0>
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	6863      	ldr	r3, [r4, #4]
 8007eea:	dd0b      	ble.n	8007f04 <_printf_float+0x19c>
 8007eec:	6121      	str	r1, [r4, #16]
 8007eee:	b913      	cbnz	r3, 8007ef6 <_printf_float+0x18e>
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	07d0      	lsls	r0, r2, #31
 8007ef4:	d502      	bpl.n	8007efc <_printf_float+0x194>
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	440b      	add	r3, r1
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007efe:	f04f 0900 	mov.w	r9, #0
 8007f02:	e7db      	b.n	8007ebc <_printf_float+0x154>
 8007f04:	b913      	cbnz	r3, 8007f0c <_printf_float+0x1a4>
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	07d2      	lsls	r2, r2, #31
 8007f0a:	d501      	bpl.n	8007f10 <_printf_float+0x1a8>
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	e7f4      	b.n	8007efa <_printf_float+0x192>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e7f2      	b.n	8007efa <_printf_float+0x192>
 8007f14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f1a:	4299      	cmp	r1, r3
 8007f1c:	db05      	blt.n	8007f2a <_printf_float+0x1c2>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	6121      	str	r1, [r4, #16]
 8007f22:	07d8      	lsls	r0, r3, #31
 8007f24:	d5ea      	bpl.n	8007efc <_printf_float+0x194>
 8007f26:	1c4b      	adds	r3, r1, #1
 8007f28:	e7e7      	b.n	8007efa <_printf_float+0x192>
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	bfd4      	ite	le
 8007f2e:	f1c1 0202 	rsble	r2, r1, #2
 8007f32:	2201      	movgt	r2, #1
 8007f34:	4413      	add	r3, r2
 8007f36:	e7e0      	b.n	8007efa <_printf_float+0x192>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	055a      	lsls	r2, r3, #21
 8007f3c:	d407      	bmi.n	8007f4e <_printf_float+0x1e6>
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	4642      	mov	r2, r8
 8007f42:	4631      	mov	r1, r6
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b8      	blx	r7
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d12b      	bne.n	8007fa4 <_printf_float+0x23c>
 8007f4c:	e767      	b.n	8007e1e <_printf_float+0xb6>
 8007f4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f52:	f240 80dd 	bls.w	8008110 <_printf_float+0x3a8>
 8007f56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f7f8 fdc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d033      	beq.n	8007fce <_printf_float+0x266>
 8007f66:	4a37      	ldr	r2, [pc, #220]	@ (8008044 <_printf_float+0x2dc>)
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	f43f af54 	beq.w	8007e1e <_printf_float+0xb6>
 8007f76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f7a:	4543      	cmp	r3, r8
 8007f7c:	db02      	blt.n	8007f84 <_printf_float+0x21c>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	07d8      	lsls	r0, r3, #31
 8007f82:	d50f      	bpl.n	8007fa4 <_printf_float+0x23c>
 8007f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af45 	beq.w	8007e1e <_printf_float+0xb6>
 8007f94:	f04f 0900 	mov.w	r9, #0
 8007f98:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f9c:	f104 0a1a 	add.w	sl, r4, #26
 8007fa0:	45c8      	cmp	r8, r9
 8007fa2:	dc09      	bgt.n	8007fb8 <_printf_float+0x250>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	079b      	lsls	r3, r3, #30
 8007fa8:	f100 8103 	bmi.w	80081b2 <_printf_float+0x44a>
 8007fac:	68e0      	ldr	r0, [r4, #12]
 8007fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fb0:	4298      	cmp	r0, r3
 8007fb2:	bfb8      	it	lt
 8007fb4:	4618      	movlt	r0, r3
 8007fb6:	e734      	b.n	8007e22 <_printf_float+0xba>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	4652      	mov	r2, sl
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f43f af2b 	beq.w	8007e1e <_printf_float+0xb6>
 8007fc8:	f109 0901 	add.w	r9, r9, #1
 8007fcc:	e7e8      	b.n	8007fa0 <_printf_float+0x238>
 8007fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dc39      	bgt.n	8008048 <_printf_float+0x2e0>
 8007fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8008044 <_printf_float+0x2dc>)
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f af1d 	beq.w	8007e1e <_printf_float+0xb6>
 8007fe4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fe8:	ea59 0303 	orrs.w	r3, r9, r3
 8007fec:	d102      	bne.n	8007ff4 <_printf_float+0x28c>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	07d9      	lsls	r1, r3, #31
 8007ff2:	d5d7      	bpl.n	8007fa4 <_printf_float+0x23c>
 8007ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	f43f af0d 	beq.w	8007e1e <_printf_float+0xb6>
 8008004:	f04f 0a00 	mov.w	sl, #0
 8008008:	f104 0b1a 	add.w	fp, r4, #26
 800800c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800800e:	425b      	negs	r3, r3
 8008010:	4553      	cmp	r3, sl
 8008012:	dc01      	bgt.n	8008018 <_printf_float+0x2b0>
 8008014:	464b      	mov	r3, r9
 8008016:	e793      	b.n	8007f40 <_printf_float+0x1d8>
 8008018:	2301      	movs	r3, #1
 800801a:	465a      	mov	r2, fp
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	f43f aefb 	beq.w	8007e1e <_printf_float+0xb6>
 8008028:	f10a 0a01 	add.w	sl, sl, #1
 800802c:	e7ee      	b.n	800800c <_printf_float+0x2a4>
 800802e:	bf00      	nop
 8008030:	7fefffff 	.word	0x7fefffff
 8008034:	0800afe5 	.word	0x0800afe5
 8008038:	0800afe9 	.word	0x0800afe9
 800803c:	0800afed 	.word	0x0800afed
 8008040:	0800aff1 	.word	0x0800aff1
 8008044:	0800aff5 	.word	0x0800aff5
 8008048:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800804a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800804e:	4553      	cmp	r3, sl
 8008050:	bfa8      	it	ge
 8008052:	4653      	movge	r3, sl
 8008054:	2b00      	cmp	r3, #0
 8008056:	4699      	mov	r9, r3
 8008058:	dc36      	bgt.n	80080c8 <_printf_float+0x360>
 800805a:	f04f 0b00 	mov.w	fp, #0
 800805e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008062:	f104 021a 	add.w	r2, r4, #26
 8008066:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008068:	9306      	str	r3, [sp, #24]
 800806a:	eba3 0309 	sub.w	r3, r3, r9
 800806e:	455b      	cmp	r3, fp
 8008070:	dc31      	bgt.n	80080d6 <_printf_float+0x36e>
 8008072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008074:	459a      	cmp	sl, r3
 8008076:	dc3a      	bgt.n	80080ee <_printf_float+0x386>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	07da      	lsls	r2, r3, #31
 800807c:	d437      	bmi.n	80080ee <_printf_float+0x386>
 800807e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008080:	ebaa 0903 	sub.w	r9, sl, r3
 8008084:	9b06      	ldr	r3, [sp, #24]
 8008086:	ebaa 0303 	sub.w	r3, sl, r3
 800808a:	4599      	cmp	r9, r3
 800808c:	bfa8      	it	ge
 800808e:	4699      	movge	r9, r3
 8008090:	f1b9 0f00 	cmp.w	r9, #0
 8008094:	dc33      	bgt.n	80080fe <_printf_float+0x396>
 8008096:	f04f 0800 	mov.w	r8, #0
 800809a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800809e:	f104 0b1a 	add.w	fp, r4, #26
 80080a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a4:	ebaa 0303 	sub.w	r3, sl, r3
 80080a8:	eba3 0309 	sub.w	r3, r3, r9
 80080ac:	4543      	cmp	r3, r8
 80080ae:	f77f af79 	ble.w	8007fa4 <_printf_float+0x23c>
 80080b2:	2301      	movs	r3, #1
 80080b4:	465a      	mov	r2, fp
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	f43f aeae 	beq.w	8007e1e <_printf_float+0xb6>
 80080c2:	f108 0801 	add.w	r8, r8, #1
 80080c6:	e7ec      	b.n	80080a2 <_printf_float+0x33a>
 80080c8:	4642      	mov	r2, r8
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	d1c2      	bne.n	800805a <_printf_float+0x2f2>
 80080d4:	e6a3      	b.n	8007e1e <_printf_float+0xb6>
 80080d6:	2301      	movs	r3, #1
 80080d8:	4631      	mov	r1, r6
 80080da:	4628      	mov	r0, r5
 80080dc:	9206      	str	r2, [sp, #24]
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	f43f ae9c 	beq.w	8007e1e <_printf_float+0xb6>
 80080e6:	9a06      	ldr	r2, [sp, #24]
 80080e8:	f10b 0b01 	add.w	fp, fp, #1
 80080ec:	e7bb      	b.n	8008066 <_printf_float+0x2fe>
 80080ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080f2:	4631      	mov	r1, r6
 80080f4:	4628      	mov	r0, r5
 80080f6:	47b8      	blx	r7
 80080f8:	3001      	adds	r0, #1
 80080fa:	d1c0      	bne.n	800807e <_printf_float+0x316>
 80080fc:	e68f      	b.n	8007e1e <_printf_float+0xb6>
 80080fe:	9a06      	ldr	r2, [sp, #24]
 8008100:	464b      	mov	r3, r9
 8008102:	4442      	add	r2, r8
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	d1c3      	bne.n	8008096 <_printf_float+0x32e>
 800810e:	e686      	b.n	8007e1e <_printf_float+0xb6>
 8008110:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008114:	f1ba 0f01 	cmp.w	sl, #1
 8008118:	dc01      	bgt.n	800811e <_printf_float+0x3b6>
 800811a:	07db      	lsls	r3, r3, #31
 800811c:	d536      	bpl.n	800818c <_printf_float+0x424>
 800811e:	2301      	movs	r3, #1
 8008120:	4642      	mov	r2, r8
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	f43f ae78 	beq.w	8007e1e <_printf_float+0xb6>
 800812e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008132:	4631      	mov	r1, r6
 8008134:	4628      	mov	r0, r5
 8008136:	47b8      	blx	r7
 8008138:	3001      	adds	r0, #1
 800813a:	f43f ae70 	beq.w	8007e1e <_printf_float+0xb6>
 800813e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008142:	2200      	movs	r2, #0
 8008144:	2300      	movs	r3, #0
 8008146:	f10a 3aff 	add.w	sl, sl, #4294967295
 800814a:	f7f8 fccd 	bl	8000ae8 <__aeabi_dcmpeq>
 800814e:	b9c0      	cbnz	r0, 8008182 <_printf_float+0x41a>
 8008150:	4653      	mov	r3, sl
 8008152:	f108 0201 	add.w	r2, r8, #1
 8008156:	4631      	mov	r1, r6
 8008158:	4628      	mov	r0, r5
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	d10c      	bne.n	800817a <_printf_float+0x412>
 8008160:	e65d      	b.n	8007e1e <_printf_float+0xb6>
 8008162:	2301      	movs	r3, #1
 8008164:	465a      	mov	r2, fp
 8008166:	4631      	mov	r1, r6
 8008168:	4628      	mov	r0, r5
 800816a:	47b8      	blx	r7
 800816c:	3001      	adds	r0, #1
 800816e:	f43f ae56 	beq.w	8007e1e <_printf_float+0xb6>
 8008172:	f108 0801 	add.w	r8, r8, #1
 8008176:	45d0      	cmp	r8, sl
 8008178:	dbf3      	blt.n	8008162 <_printf_float+0x3fa>
 800817a:	464b      	mov	r3, r9
 800817c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008180:	e6df      	b.n	8007f42 <_printf_float+0x1da>
 8008182:	f04f 0800 	mov.w	r8, #0
 8008186:	f104 0b1a 	add.w	fp, r4, #26
 800818a:	e7f4      	b.n	8008176 <_printf_float+0x40e>
 800818c:	2301      	movs	r3, #1
 800818e:	4642      	mov	r2, r8
 8008190:	e7e1      	b.n	8008156 <_printf_float+0x3ee>
 8008192:	2301      	movs	r3, #1
 8008194:	464a      	mov	r2, r9
 8008196:	4631      	mov	r1, r6
 8008198:	4628      	mov	r0, r5
 800819a:	47b8      	blx	r7
 800819c:	3001      	adds	r0, #1
 800819e:	f43f ae3e 	beq.w	8007e1e <_printf_float+0xb6>
 80081a2:	f108 0801 	add.w	r8, r8, #1
 80081a6:	68e3      	ldr	r3, [r4, #12]
 80081a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081aa:	1a5b      	subs	r3, r3, r1
 80081ac:	4543      	cmp	r3, r8
 80081ae:	dcf0      	bgt.n	8008192 <_printf_float+0x42a>
 80081b0:	e6fc      	b.n	8007fac <_printf_float+0x244>
 80081b2:	f04f 0800 	mov.w	r8, #0
 80081b6:	f104 0919 	add.w	r9, r4, #25
 80081ba:	e7f4      	b.n	80081a6 <_printf_float+0x43e>

080081bc <_printf_common>:
 80081bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c0:	4616      	mov	r6, r2
 80081c2:	4698      	mov	r8, r3
 80081c4:	688a      	ldr	r2, [r1, #8]
 80081c6:	690b      	ldr	r3, [r1, #16]
 80081c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081cc:	4293      	cmp	r3, r2
 80081ce:	bfb8      	it	lt
 80081d0:	4613      	movlt	r3, r2
 80081d2:	6033      	str	r3, [r6, #0]
 80081d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081d8:	4607      	mov	r7, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	b10a      	cbz	r2, 80081e2 <_printf_common+0x26>
 80081de:	3301      	adds	r3, #1
 80081e0:	6033      	str	r3, [r6, #0]
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	0699      	lsls	r1, r3, #26
 80081e6:	bf42      	ittt	mi
 80081e8:	6833      	ldrmi	r3, [r6, #0]
 80081ea:	3302      	addmi	r3, #2
 80081ec:	6033      	strmi	r3, [r6, #0]
 80081ee:	6825      	ldr	r5, [r4, #0]
 80081f0:	f015 0506 	ands.w	r5, r5, #6
 80081f4:	d106      	bne.n	8008204 <_printf_common+0x48>
 80081f6:	f104 0a19 	add.w	sl, r4, #25
 80081fa:	68e3      	ldr	r3, [r4, #12]
 80081fc:	6832      	ldr	r2, [r6, #0]
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	42ab      	cmp	r3, r5
 8008202:	dc26      	bgt.n	8008252 <_printf_common+0x96>
 8008204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008208:	6822      	ldr	r2, [r4, #0]
 800820a:	3b00      	subs	r3, #0
 800820c:	bf18      	it	ne
 800820e:	2301      	movne	r3, #1
 8008210:	0692      	lsls	r2, r2, #26
 8008212:	d42b      	bmi.n	800826c <_printf_common+0xb0>
 8008214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008218:	4641      	mov	r1, r8
 800821a:	4638      	mov	r0, r7
 800821c:	47c8      	blx	r9
 800821e:	3001      	adds	r0, #1
 8008220:	d01e      	beq.n	8008260 <_printf_common+0xa4>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	6922      	ldr	r2, [r4, #16]
 8008226:	f003 0306 	and.w	r3, r3, #6
 800822a:	2b04      	cmp	r3, #4
 800822c:	bf02      	ittt	eq
 800822e:	68e5      	ldreq	r5, [r4, #12]
 8008230:	6833      	ldreq	r3, [r6, #0]
 8008232:	1aed      	subeq	r5, r5, r3
 8008234:	68a3      	ldr	r3, [r4, #8]
 8008236:	bf0c      	ite	eq
 8008238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800823c:	2500      	movne	r5, #0
 800823e:	4293      	cmp	r3, r2
 8008240:	bfc4      	itt	gt
 8008242:	1a9b      	subgt	r3, r3, r2
 8008244:	18ed      	addgt	r5, r5, r3
 8008246:	2600      	movs	r6, #0
 8008248:	341a      	adds	r4, #26
 800824a:	42b5      	cmp	r5, r6
 800824c:	d11a      	bne.n	8008284 <_printf_common+0xc8>
 800824e:	2000      	movs	r0, #0
 8008250:	e008      	b.n	8008264 <_printf_common+0xa8>
 8008252:	2301      	movs	r3, #1
 8008254:	4652      	mov	r2, sl
 8008256:	4641      	mov	r1, r8
 8008258:	4638      	mov	r0, r7
 800825a:	47c8      	blx	r9
 800825c:	3001      	adds	r0, #1
 800825e:	d103      	bne.n	8008268 <_printf_common+0xac>
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008268:	3501      	adds	r5, #1
 800826a:	e7c6      	b.n	80081fa <_printf_common+0x3e>
 800826c:	18e1      	adds	r1, r4, r3
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	2030      	movs	r0, #48	@ 0x30
 8008272:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008276:	4422      	add	r2, r4
 8008278:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800827c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008280:	3302      	adds	r3, #2
 8008282:	e7c7      	b.n	8008214 <_printf_common+0x58>
 8008284:	2301      	movs	r3, #1
 8008286:	4622      	mov	r2, r4
 8008288:	4641      	mov	r1, r8
 800828a:	4638      	mov	r0, r7
 800828c:	47c8      	blx	r9
 800828e:	3001      	adds	r0, #1
 8008290:	d0e6      	beq.n	8008260 <_printf_common+0xa4>
 8008292:	3601      	adds	r6, #1
 8008294:	e7d9      	b.n	800824a <_printf_common+0x8e>
	...

08008298 <_printf_i>:
 8008298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800829c:	7e0f      	ldrb	r7, [r1, #24]
 800829e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082a0:	2f78      	cmp	r7, #120	@ 0x78
 80082a2:	4691      	mov	r9, r2
 80082a4:	4680      	mov	r8, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	469a      	mov	sl, r3
 80082aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082ae:	d807      	bhi.n	80082c0 <_printf_i+0x28>
 80082b0:	2f62      	cmp	r7, #98	@ 0x62
 80082b2:	d80a      	bhi.n	80082ca <_printf_i+0x32>
 80082b4:	2f00      	cmp	r7, #0
 80082b6:	f000 80d2 	beq.w	800845e <_printf_i+0x1c6>
 80082ba:	2f58      	cmp	r7, #88	@ 0x58
 80082bc:	f000 80b9 	beq.w	8008432 <_printf_i+0x19a>
 80082c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082c8:	e03a      	b.n	8008340 <_printf_i+0xa8>
 80082ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082ce:	2b15      	cmp	r3, #21
 80082d0:	d8f6      	bhi.n	80082c0 <_printf_i+0x28>
 80082d2:	a101      	add	r1, pc, #4	@ (adr r1, 80082d8 <_printf_i+0x40>)
 80082d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082d8:	08008331 	.word	0x08008331
 80082dc:	08008345 	.word	0x08008345
 80082e0:	080082c1 	.word	0x080082c1
 80082e4:	080082c1 	.word	0x080082c1
 80082e8:	080082c1 	.word	0x080082c1
 80082ec:	080082c1 	.word	0x080082c1
 80082f0:	08008345 	.word	0x08008345
 80082f4:	080082c1 	.word	0x080082c1
 80082f8:	080082c1 	.word	0x080082c1
 80082fc:	080082c1 	.word	0x080082c1
 8008300:	080082c1 	.word	0x080082c1
 8008304:	08008445 	.word	0x08008445
 8008308:	0800836f 	.word	0x0800836f
 800830c:	080083ff 	.word	0x080083ff
 8008310:	080082c1 	.word	0x080082c1
 8008314:	080082c1 	.word	0x080082c1
 8008318:	08008467 	.word	0x08008467
 800831c:	080082c1 	.word	0x080082c1
 8008320:	0800836f 	.word	0x0800836f
 8008324:	080082c1 	.word	0x080082c1
 8008328:	080082c1 	.word	0x080082c1
 800832c:	08008407 	.word	0x08008407
 8008330:	6833      	ldr	r3, [r6, #0]
 8008332:	1d1a      	adds	r2, r3, #4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6032      	str	r2, [r6, #0]
 8008338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800833c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008340:	2301      	movs	r3, #1
 8008342:	e09d      	b.n	8008480 <_printf_i+0x1e8>
 8008344:	6833      	ldr	r3, [r6, #0]
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	1d19      	adds	r1, r3, #4
 800834a:	6031      	str	r1, [r6, #0]
 800834c:	0606      	lsls	r6, r0, #24
 800834e:	d501      	bpl.n	8008354 <_printf_i+0xbc>
 8008350:	681d      	ldr	r5, [r3, #0]
 8008352:	e003      	b.n	800835c <_printf_i+0xc4>
 8008354:	0645      	lsls	r5, r0, #25
 8008356:	d5fb      	bpl.n	8008350 <_printf_i+0xb8>
 8008358:	f9b3 5000 	ldrsh.w	r5, [r3]
 800835c:	2d00      	cmp	r5, #0
 800835e:	da03      	bge.n	8008368 <_printf_i+0xd0>
 8008360:	232d      	movs	r3, #45	@ 0x2d
 8008362:	426d      	negs	r5, r5
 8008364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008368:	4859      	ldr	r0, [pc, #356]	@ (80084d0 <_printf_i+0x238>)
 800836a:	230a      	movs	r3, #10
 800836c:	e011      	b.n	8008392 <_printf_i+0xfa>
 800836e:	6821      	ldr	r1, [r4, #0]
 8008370:	6833      	ldr	r3, [r6, #0]
 8008372:	0608      	lsls	r0, r1, #24
 8008374:	f853 5b04 	ldr.w	r5, [r3], #4
 8008378:	d402      	bmi.n	8008380 <_printf_i+0xe8>
 800837a:	0649      	lsls	r1, r1, #25
 800837c:	bf48      	it	mi
 800837e:	b2ad      	uxthmi	r5, r5
 8008380:	2f6f      	cmp	r7, #111	@ 0x6f
 8008382:	4853      	ldr	r0, [pc, #332]	@ (80084d0 <_printf_i+0x238>)
 8008384:	6033      	str	r3, [r6, #0]
 8008386:	bf14      	ite	ne
 8008388:	230a      	movne	r3, #10
 800838a:	2308      	moveq	r3, #8
 800838c:	2100      	movs	r1, #0
 800838e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008392:	6866      	ldr	r6, [r4, #4]
 8008394:	60a6      	str	r6, [r4, #8]
 8008396:	2e00      	cmp	r6, #0
 8008398:	bfa2      	ittt	ge
 800839a:	6821      	ldrge	r1, [r4, #0]
 800839c:	f021 0104 	bicge.w	r1, r1, #4
 80083a0:	6021      	strge	r1, [r4, #0]
 80083a2:	b90d      	cbnz	r5, 80083a8 <_printf_i+0x110>
 80083a4:	2e00      	cmp	r6, #0
 80083a6:	d04b      	beq.n	8008440 <_printf_i+0x1a8>
 80083a8:	4616      	mov	r6, r2
 80083aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80083ae:	fb03 5711 	mls	r7, r3, r1, r5
 80083b2:	5dc7      	ldrb	r7, [r0, r7]
 80083b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083b8:	462f      	mov	r7, r5
 80083ba:	42bb      	cmp	r3, r7
 80083bc:	460d      	mov	r5, r1
 80083be:	d9f4      	bls.n	80083aa <_printf_i+0x112>
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d10b      	bne.n	80083dc <_printf_i+0x144>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	07df      	lsls	r7, r3, #31
 80083c8:	d508      	bpl.n	80083dc <_printf_i+0x144>
 80083ca:	6923      	ldr	r3, [r4, #16]
 80083cc:	6861      	ldr	r1, [r4, #4]
 80083ce:	4299      	cmp	r1, r3
 80083d0:	bfde      	ittt	le
 80083d2:	2330      	movle	r3, #48	@ 0x30
 80083d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083dc:	1b92      	subs	r2, r2, r6
 80083de:	6122      	str	r2, [r4, #16]
 80083e0:	f8cd a000 	str.w	sl, [sp]
 80083e4:	464b      	mov	r3, r9
 80083e6:	aa03      	add	r2, sp, #12
 80083e8:	4621      	mov	r1, r4
 80083ea:	4640      	mov	r0, r8
 80083ec:	f7ff fee6 	bl	80081bc <_printf_common>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d14a      	bne.n	800848a <_printf_i+0x1f2>
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	b004      	add	sp, #16
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	f043 0320 	orr.w	r3, r3, #32
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	4833      	ldr	r0, [pc, #204]	@ (80084d4 <_printf_i+0x23c>)
 8008408:	2778      	movs	r7, #120	@ 0x78
 800840a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	6831      	ldr	r1, [r6, #0]
 8008412:	061f      	lsls	r7, r3, #24
 8008414:	f851 5b04 	ldr.w	r5, [r1], #4
 8008418:	d402      	bmi.n	8008420 <_printf_i+0x188>
 800841a:	065f      	lsls	r7, r3, #25
 800841c:	bf48      	it	mi
 800841e:	b2ad      	uxthmi	r5, r5
 8008420:	6031      	str	r1, [r6, #0]
 8008422:	07d9      	lsls	r1, r3, #31
 8008424:	bf44      	itt	mi
 8008426:	f043 0320 	orrmi.w	r3, r3, #32
 800842a:	6023      	strmi	r3, [r4, #0]
 800842c:	b11d      	cbz	r5, 8008436 <_printf_i+0x19e>
 800842e:	2310      	movs	r3, #16
 8008430:	e7ac      	b.n	800838c <_printf_i+0xf4>
 8008432:	4827      	ldr	r0, [pc, #156]	@ (80084d0 <_printf_i+0x238>)
 8008434:	e7e9      	b.n	800840a <_printf_i+0x172>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	f023 0320 	bic.w	r3, r3, #32
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	e7f6      	b.n	800842e <_printf_i+0x196>
 8008440:	4616      	mov	r6, r2
 8008442:	e7bd      	b.n	80083c0 <_printf_i+0x128>
 8008444:	6833      	ldr	r3, [r6, #0]
 8008446:	6825      	ldr	r5, [r4, #0]
 8008448:	6961      	ldr	r1, [r4, #20]
 800844a:	1d18      	adds	r0, r3, #4
 800844c:	6030      	str	r0, [r6, #0]
 800844e:	062e      	lsls	r6, r5, #24
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	d501      	bpl.n	8008458 <_printf_i+0x1c0>
 8008454:	6019      	str	r1, [r3, #0]
 8008456:	e002      	b.n	800845e <_printf_i+0x1c6>
 8008458:	0668      	lsls	r0, r5, #25
 800845a:	d5fb      	bpl.n	8008454 <_printf_i+0x1bc>
 800845c:	8019      	strh	r1, [r3, #0]
 800845e:	2300      	movs	r3, #0
 8008460:	6123      	str	r3, [r4, #16]
 8008462:	4616      	mov	r6, r2
 8008464:	e7bc      	b.n	80083e0 <_printf_i+0x148>
 8008466:	6833      	ldr	r3, [r6, #0]
 8008468:	1d1a      	adds	r2, r3, #4
 800846a:	6032      	str	r2, [r6, #0]
 800846c:	681e      	ldr	r6, [r3, #0]
 800846e:	6862      	ldr	r2, [r4, #4]
 8008470:	2100      	movs	r1, #0
 8008472:	4630      	mov	r0, r6
 8008474:	f7f7 febc 	bl	80001f0 <memchr>
 8008478:	b108      	cbz	r0, 800847e <_printf_i+0x1e6>
 800847a:	1b80      	subs	r0, r0, r6
 800847c:	6060      	str	r0, [r4, #4]
 800847e:	6863      	ldr	r3, [r4, #4]
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	2300      	movs	r3, #0
 8008484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008488:	e7aa      	b.n	80083e0 <_printf_i+0x148>
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	4632      	mov	r2, r6
 800848e:	4649      	mov	r1, r9
 8008490:	4640      	mov	r0, r8
 8008492:	47d0      	blx	sl
 8008494:	3001      	adds	r0, #1
 8008496:	d0ad      	beq.n	80083f4 <_printf_i+0x15c>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	079b      	lsls	r3, r3, #30
 800849c:	d413      	bmi.n	80084c6 <_printf_i+0x22e>
 800849e:	68e0      	ldr	r0, [r4, #12]
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	4298      	cmp	r0, r3
 80084a4:	bfb8      	it	lt
 80084a6:	4618      	movlt	r0, r3
 80084a8:	e7a6      	b.n	80083f8 <_printf_i+0x160>
 80084aa:	2301      	movs	r3, #1
 80084ac:	4632      	mov	r2, r6
 80084ae:	4649      	mov	r1, r9
 80084b0:	4640      	mov	r0, r8
 80084b2:	47d0      	blx	sl
 80084b4:	3001      	adds	r0, #1
 80084b6:	d09d      	beq.n	80083f4 <_printf_i+0x15c>
 80084b8:	3501      	adds	r5, #1
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	9903      	ldr	r1, [sp, #12]
 80084be:	1a5b      	subs	r3, r3, r1
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	dcf2      	bgt.n	80084aa <_printf_i+0x212>
 80084c4:	e7eb      	b.n	800849e <_printf_i+0x206>
 80084c6:	2500      	movs	r5, #0
 80084c8:	f104 0619 	add.w	r6, r4, #25
 80084cc:	e7f5      	b.n	80084ba <_printf_i+0x222>
 80084ce:	bf00      	nop
 80084d0:	0800aff7 	.word	0x0800aff7
 80084d4:	0800b008 	.word	0x0800b008

080084d8 <std>:
 80084d8:	2300      	movs	r3, #0
 80084da:	b510      	push	{r4, lr}
 80084dc:	4604      	mov	r4, r0
 80084de:	e9c0 3300 	strd	r3, r3, [r0]
 80084e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084e6:	6083      	str	r3, [r0, #8]
 80084e8:	8181      	strh	r1, [r0, #12]
 80084ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80084ec:	81c2      	strh	r2, [r0, #14]
 80084ee:	6183      	str	r3, [r0, #24]
 80084f0:	4619      	mov	r1, r3
 80084f2:	2208      	movs	r2, #8
 80084f4:	305c      	adds	r0, #92	@ 0x5c
 80084f6:	f000 f928 	bl	800874a <memset>
 80084fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <std+0x58>)
 80084fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80084fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <std+0x5c>)
 8008500:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008502:	4b0d      	ldr	r3, [pc, #52]	@ (8008538 <std+0x60>)
 8008504:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008506:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <std+0x64>)
 8008508:	6323      	str	r3, [r4, #48]	@ 0x30
 800850a:	4b0d      	ldr	r3, [pc, #52]	@ (8008540 <std+0x68>)
 800850c:	6224      	str	r4, [r4, #32]
 800850e:	429c      	cmp	r4, r3
 8008510:	d006      	beq.n	8008520 <std+0x48>
 8008512:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008516:	4294      	cmp	r4, r2
 8008518:	d002      	beq.n	8008520 <std+0x48>
 800851a:	33d0      	adds	r3, #208	@ 0xd0
 800851c:	429c      	cmp	r4, r3
 800851e:	d105      	bne.n	800852c <std+0x54>
 8008520:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008528:	f000 b9fa 	b.w	8008920 <__retarget_lock_init_recursive>
 800852c:	bd10      	pop	{r4, pc}
 800852e:	bf00      	nop
 8008530:	080086c5 	.word	0x080086c5
 8008534:	080086e7 	.word	0x080086e7
 8008538:	0800871f 	.word	0x0800871f
 800853c:	08008743 	.word	0x08008743
 8008540:	20000af8 	.word	0x20000af8

08008544 <stdio_exit_handler>:
 8008544:	4a02      	ldr	r2, [pc, #8]	@ (8008550 <stdio_exit_handler+0xc>)
 8008546:	4903      	ldr	r1, [pc, #12]	@ (8008554 <stdio_exit_handler+0x10>)
 8008548:	4803      	ldr	r0, [pc, #12]	@ (8008558 <stdio_exit_handler+0x14>)
 800854a:	f000 b869 	b.w	8008620 <_fwalk_sglue>
 800854e:	bf00      	nop
 8008550:	20000670 	.word	0x20000670
 8008554:	0800a2bd 	.word	0x0800a2bd
 8008558:	20000680 	.word	0x20000680

0800855c <cleanup_stdio>:
 800855c:	6841      	ldr	r1, [r0, #4]
 800855e:	4b0c      	ldr	r3, [pc, #48]	@ (8008590 <cleanup_stdio+0x34>)
 8008560:	4299      	cmp	r1, r3
 8008562:	b510      	push	{r4, lr}
 8008564:	4604      	mov	r4, r0
 8008566:	d001      	beq.n	800856c <cleanup_stdio+0x10>
 8008568:	f001 fea8 	bl	800a2bc <_fflush_r>
 800856c:	68a1      	ldr	r1, [r4, #8]
 800856e:	4b09      	ldr	r3, [pc, #36]	@ (8008594 <cleanup_stdio+0x38>)
 8008570:	4299      	cmp	r1, r3
 8008572:	d002      	beq.n	800857a <cleanup_stdio+0x1e>
 8008574:	4620      	mov	r0, r4
 8008576:	f001 fea1 	bl	800a2bc <_fflush_r>
 800857a:	68e1      	ldr	r1, [r4, #12]
 800857c:	4b06      	ldr	r3, [pc, #24]	@ (8008598 <cleanup_stdio+0x3c>)
 800857e:	4299      	cmp	r1, r3
 8008580:	d004      	beq.n	800858c <cleanup_stdio+0x30>
 8008582:	4620      	mov	r0, r4
 8008584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008588:	f001 be98 	b.w	800a2bc <_fflush_r>
 800858c:	bd10      	pop	{r4, pc}
 800858e:	bf00      	nop
 8008590:	20000af8 	.word	0x20000af8
 8008594:	20000b60 	.word	0x20000b60
 8008598:	20000bc8 	.word	0x20000bc8

0800859c <global_stdio_init.part.0>:
 800859c:	b510      	push	{r4, lr}
 800859e:	4b0b      	ldr	r3, [pc, #44]	@ (80085cc <global_stdio_init.part.0+0x30>)
 80085a0:	4c0b      	ldr	r4, [pc, #44]	@ (80085d0 <global_stdio_init.part.0+0x34>)
 80085a2:	4a0c      	ldr	r2, [pc, #48]	@ (80085d4 <global_stdio_init.part.0+0x38>)
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	4620      	mov	r0, r4
 80085a8:	2200      	movs	r2, #0
 80085aa:	2104      	movs	r1, #4
 80085ac:	f7ff ff94 	bl	80084d8 <std>
 80085b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085b4:	2201      	movs	r2, #1
 80085b6:	2109      	movs	r1, #9
 80085b8:	f7ff ff8e 	bl	80084d8 <std>
 80085bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085c0:	2202      	movs	r2, #2
 80085c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c6:	2112      	movs	r1, #18
 80085c8:	f7ff bf86 	b.w	80084d8 <std>
 80085cc:	20000c30 	.word	0x20000c30
 80085d0:	20000af8 	.word	0x20000af8
 80085d4:	08008545 	.word	0x08008545

080085d8 <__sfp_lock_acquire>:
 80085d8:	4801      	ldr	r0, [pc, #4]	@ (80085e0 <__sfp_lock_acquire+0x8>)
 80085da:	f000 b9a2 	b.w	8008922 <__retarget_lock_acquire_recursive>
 80085de:	bf00      	nop
 80085e0:	20000c39 	.word	0x20000c39

080085e4 <__sfp_lock_release>:
 80085e4:	4801      	ldr	r0, [pc, #4]	@ (80085ec <__sfp_lock_release+0x8>)
 80085e6:	f000 b99d 	b.w	8008924 <__retarget_lock_release_recursive>
 80085ea:	bf00      	nop
 80085ec:	20000c39 	.word	0x20000c39

080085f0 <__sinit>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4604      	mov	r4, r0
 80085f4:	f7ff fff0 	bl	80085d8 <__sfp_lock_acquire>
 80085f8:	6a23      	ldr	r3, [r4, #32]
 80085fa:	b11b      	cbz	r3, 8008604 <__sinit+0x14>
 80085fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008600:	f7ff bff0 	b.w	80085e4 <__sfp_lock_release>
 8008604:	4b04      	ldr	r3, [pc, #16]	@ (8008618 <__sinit+0x28>)
 8008606:	6223      	str	r3, [r4, #32]
 8008608:	4b04      	ldr	r3, [pc, #16]	@ (800861c <__sinit+0x2c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1f5      	bne.n	80085fc <__sinit+0xc>
 8008610:	f7ff ffc4 	bl	800859c <global_stdio_init.part.0>
 8008614:	e7f2      	b.n	80085fc <__sinit+0xc>
 8008616:	bf00      	nop
 8008618:	0800855d 	.word	0x0800855d
 800861c:	20000c30 	.word	0x20000c30

08008620 <_fwalk_sglue>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	4607      	mov	r7, r0
 8008626:	4688      	mov	r8, r1
 8008628:	4614      	mov	r4, r2
 800862a:	2600      	movs	r6, #0
 800862c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008630:	f1b9 0901 	subs.w	r9, r9, #1
 8008634:	d505      	bpl.n	8008642 <_fwalk_sglue+0x22>
 8008636:	6824      	ldr	r4, [r4, #0]
 8008638:	2c00      	cmp	r4, #0
 800863a:	d1f7      	bne.n	800862c <_fwalk_sglue+0xc>
 800863c:	4630      	mov	r0, r6
 800863e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008642:	89ab      	ldrh	r3, [r5, #12]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d907      	bls.n	8008658 <_fwalk_sglue+0x38>
 8008648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800864c:	3301      	adds	r3, #1
 800864e:	d003      	beq.n	8008658 <_fwalk_sglue+0x38>
 8008650:	4629      	mov	r1, r5
 8008652:	4638      	mov	r0, r7
 8008654:	47c0      	blx	r8
 8008656:	4306      	orrs	r6, r0
 8008658:	3568      	adds	r5, #104	@ 0x68
 800865a:	e7e9      	b.n	8008630 <_fwalk_sglue+0x10>

0800865c <sniprintf>:
 800865c:	b40c      	push	{r2, r3}
 800865e:	b530      	push	{r4, r5, lr}
 8008660:	4b17      	ldr	r3, [pc, #92]	@ (80086c0 <sniprintf+0x64>)
 8008662:	1e0c      	subs	r4, r1, #0
 8008664:	681d      	ldr	r5, [r3, #0]
 8008666:	b09d      	sub	sp, #116	@ 0x74
 8008668:	da08      	bge.n	800867c <sniprintf+0x20>
 800866a:	238b      	movs	r3, #139	@ 0x8b
 800866c:	602b      	str	r3, [r5, #0]
 800866e:	f04f 30ff 	mov.w	r0, #4294967295
 8008672:	b01d      	add	sp, #116	@ 0x74
 8008674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008678:	b002      	add	sp, #8
 800867a:	4770      	bx	lr
 800867c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008680:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008684:	bf14      	ite	ne
 8008686:	f104 33ff 	addne.w	r3, r4, #4294967295
 800868a:	4623      	moveq	r3, r4
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	9307      	str	r3, [sp, #28]
 8008690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008694:	9002      	str	r0, [sp, #8]
 8008696:	9006      	str	r0, [sp, #24]
 8008698:	f8ad 3016 	strh.w	r3, [sp, #22]
 800869c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800869e:	ab21      	add	r3, sp, #132	@ 0x84
 80086a0:	a902      	add	r1, sp, #8
 80086a2:	4628      	mov	r0, r5
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	f001 fc89 	bl	8009fbc <_svfiprintf_r>
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	bfbc      	itt	lt
 80086ae:	238b      	movlt	r3, #139	@ 0x8b
 80086b0:	602b      	strlt	r3, [r5, #0]
 80086b2:	2c00      	cmp	r4, #0
 80086b4:	d0dd      	beq.n	8008672 <sniprintf+0x16>
 80086b6:	9b02      	ldr	r3, [sp, #8]
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	e7d9      	b.n	8008672 <sniprintf+0x16>
 80086be:	bf00      	nop
 80086c0:	2000067c 	.word	0x2000067c

080086c4 <__sread>:
 80086c4:	b510      	push	{r4, lr}
 80086c6:	460c      	mov	r4, r1
 80086c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086cc:	f000 f8da 	bl	8008884 <_read_r>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	bfab      	itete	ge
 80086d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086d6:	89a3      	ldrhlt	r3, [r4, #12]
 80086d8:	181b      	addge	r3, r3, r0
 80086da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086de:	bfac      	ite	ge
 80086e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086e2:	81a3      	strhlt	r3, [r4, #12]
 80086e4:	bd10      	pop	{r4, pc}

080086e6 <__swrite>:
 80086e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ea:	461f      	mov	r7, r3
 80086ec:	898b      	ldrh	r3, [r1, #12]
 80086ee:	05db      	lsls	r3, r3, #23
 80086f0:	4605      	mov	r5, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	4616      	mov	r6, r2
 80086f6:	d505      	bpl.n	8008704 <__swrite+0x1e>
 80086f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fc:	2302      	movs	r3, #2
 80086fe:	2200      	movs	r2, #0
 8008700:	f000 f8ae 	bl	8008860 <_lseek_r>
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	4632      	mov	r2, r6
 8008712:	463b      	mov	r3, r7
 8008714:	4628      	mov	r0, r5
 8008716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800871a:	f000 b8c5 	b.w	80088a8 <_write_r>

0800871e <__sseek>:
 800871e:	b510      	push	{r4, lr}
 8008720:	460c      	mov	r4, r1
 8008722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008726:	f000 f89b 	bl	8008860 <_lseek_r>
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	bf15      	itete	ne
 8008730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800873a:	81a3      	strheq	r3, [r4, #12]
 800873c:	bf18      	it	ne
 800873e:	81a3      	strhne	r3, [r4, #12]
 8008740:	bd10      	pop	{r4, pc}

08008742 <__sclose>:
 8008742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008746:	f000 b87b 	b.w	8008840 <_close_r>

0800874a <memset>:
 800874a:	4402      	add	r2, r0
 800874c:	4603      	mov	r3, r0
 800874e:	4293      	cmp	r3, r2
 8008750:	d100      	bne.n	8008754 <memset+0xa>
 8008752:	4770      	bx	lr
 8008754:	f803 1b01 	strb.w	r1, [r3], #1
 8008758:	e7f9      	b.n	800874e <memset+0x4>

0800875a <strncpy>:
 800875a:	b510      	push	{r4, lr}
 800875c:	3901      	subs	r1, #1
 800875e:	4603      	mov	r3, r0
 8008760:	b132      	cbz	r2, 8008770 <strncpy+0x16>
 8008762:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008766:	f803 4b01 	strb.w	r4, [r3], #1
 800876a:	3a01      	subs	r2, #1
 800876c:	2c00      	cmp	r4, #0
 800876e:	d1f7      	bne.n	8008760 <strncpy+0x6>
 8008770:	441a      	add	r2, r3
 8008772:	2100      	movs	r1, #0
 8008774:	4293      	cmp	r3, r2
 8008776:	d100      	bne.n	800877a <strncpy+0x20>
 8008778:	bd10      	pop	{r4, pc}
 800877a:	f803 1b01 	strb.w	r1, [r3], #1
 800877e:	e7f9      	b.n	8008774 <strncpy+0x1a>

08008780 <strtok>:
 8008780:	4b16      	ldr	r3, [pc, #88]	@ (80087dc <strtok+0x5c>)
 8008782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008786:	681f      	ldr	r7, [r3, #0]
 8008788:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800878a:	4605      	mov	r5, r0
 800878c:	460e      	mov	r6, r1
 800878e:	b9ec      	cbnz	r4, 80087cc <strtok+0x4c>
 8008790:	2050      	movs	r0, #80	@ 0x50
 8008792:	f000 ff7f 	bl	8009694 <malloc>
 8008796:	4602      	mov	r2, r0
 8008798:	6478      	str	r0, [r7, #68]	@ 0x44
 800879a:	b920      	cbnz	r0, 80087a6 <strtok+0x26>
 800879c:	4b10      	ldr	r3, [pc, #64]	@ (80087e0 <strtok+0x60>)
 800879e:	4811      	ldr	r0, [pc, #68]	@ (80087e4 <strtok+0x64>)
 80087a0:	215b      	movs	r1, #91	@ 0x5b
 80087a2:	f000 f8c1 	bl	8008928 <__assert_func>
 80087a6:	e9c0 4400 	strd	r4, r4, [r0]
 80087aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80087ae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80087b2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80087b6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80087ba:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80087be:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80087c2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80087c6:	6184      	str	r4, [r0, #24]
 80087c8:	7704      	strb	r4, [r0, #28]
 80087ca:	6244      	str	r4, [r0, #36]	@ 0x24
 80087cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087ce:	4631      	mov	r1, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	2301      	movs	r3, #1
 80087d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087d8:	f000 b806 	b.w	80087e8 <__strtok_r>
 80087dc:	2000067c 	.word	0x2000067c
 80087e0:	0800b019 	.word	0x0800b019
 80087e4:	0800b030 	.word	0x0800b030

080087e8 <__strtok_r>:
 80087e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ea:	4604      	mov	r4, r0
 80087ec:	b908      	cbnz	r0, 80087f2 <__strtok_r+0xa>
 80087ee:	6814      	ldr	r4, [r2, #0]
 80087f0:	b144      	cbz	r4, 8008804 <__strtok_r+0x1c>
 80087f2:	4620      	mov	r0, r4
 80087f4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80087f8:	460f      	mov	r7, r1
 80087fa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80087fe:	b91e      	cbnz	r6, 8008808 <__strtok_r+0x20>
 8008800:	b965      	cbnz	r5, 800881c <__strtok_r+0x34>
 8008802:	6015      	str	r5, [r2, #0]
 8008804:	2000      	movs	r0, #0
 8008806:	e005      	b.n	8008814 <__strtok_r+0x2c>
 8008808:	42b5      	cmp	r5, r6
 800880a:	d1f6      	bne.n	80087fa <__strtok_r+0x12>
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1f0      	bne.n	80087f2 <__strtok_r+0xa>
 8008810:	6014      	str	r4, [r2, #0]
 8008812:	7003      	strb	r3, [r0, #0]
 8008814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008816:	461c      	mov	r4, r3
 8008818:	e00c      	b.n	8008834 <__strtok_r+0x4c>
 800881a:	b915      	cbnz	r5, 8008822 <__strtok_r+0x3a>
 800881c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008820:	460e      	mov	r6, r1
 8008822:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008826:	42ab      	cmp	r3, r5
 8008828:	d1f7      	bne.n	800881a <__strtok_r+0x32>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0f3      	beq.n	8008816 <__strtok_r+0x2e>
 800882e:	2300      	movs	r3, #0
 8008830:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008834:	6014      	str	r4, [r2, #0]
 8008836:	e7ed      	b.n	8008814 <__strtok_r+0x2c>

08008838 <_localeconv_r>:
 8008838:	4800      	ldr	r0, [pc, #0]	@ (800883c <_localeconv_r+0x4>)
 800883a:	4770      	bx	lr
 800883c:	200007bc 	.word	0x200007bc

08008840 <_close_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4d06      	ldr	r5, [pc, #24]	@ (800885c <_close_r+0x1c>)
 8008844:	2300      	movs	r3, #0
 8008846:	4604      	mov	r4, r0
 8008848:	4608      	mov	r0, r1
 800884a:	602b      	str	r3, [r5, #0]
 800884c:	f7fa fbba 	bl	8002fc4 <_close>
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	d102      	bne.n	800885a <_close_r+0x1a>
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	b103      	cbz	r3, 800885a <_close_r+0x1a>
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	20000c34 	.word	0x20000c34

08008860 <_lseek_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d07      	ldr	r5, [pc, #28]	@ (8008880 <_lseek_r+0x20>)
 8008864:	4604      	mov	r4, r0
 8008866:	4608      	mov	r0, r1
 8008868:	4611      	mov	r1, r2
 800886a:	2200      	movs	r2, #0
 800886c:	602a      	str	r2, [r5, #0]
 800886e:	461a      	mov	r2, r3
 8008870:	f7fa fbcf 	bl	8003012 <_lseek>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_lseek_r+0x1e>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_lseek_r+0x1e>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	20000c34 	.word	0x20000c34

08008884 <_read_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d07      	ldr	r5, [pc, #28]	@ (80088a4 <_read_r+0x20>)
 8008888:	4604      	mov	r4, r0
 800888a:	4608      	mov	r0, r1
 800888c:	4611      	mov	r1, r2
 800888e:	2200      	movs	r2, #0
 8008890:	602a      	str	r2, [r5, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	f7fa fb5d 	bl	8002f52 <_read>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_read_r+0x1e>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_read_r+0x1e>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	20000c34 	.word	0x20000c34

080088a8 <_write_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4d07      	ldr	r5, [pc, #28]	@ (80088c8 <_write_r+0x20>)
 80088ac:	4604      	mov	r4, r0
 80088ae:	4608      	mov	r0, r1
 80088b0:	4611      	mov	r1, r2
 80088b2:	2200      	movs	r2, #0
 80088b4:	602a      	str	r2, [r5, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	f7fa fb68 	bl	8002f8c <_write>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d102      	bne.n	80088c6 <_write_r+0x1e>
 80088c0:	682b      	ldr	r3, [r5, #0]
 80088c2:	b103      	cbz	r3, 80088c6 <_write_r+0x1e>
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	20000c34 	.word	0x20000c34

080088cc <__errno>:
 80088cc:	4b01      	ldr	r3, [pc, #4]	@ (80088d4 <__errno+0x8>)
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	2000067c 	.word	0x2000067c

080088d8 <__libc_init_array>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	4d0d      	ldr	r5, [pc, #52]	@ (8008910 <__libc_init_array+0x38>)
 80088dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008914 <__libc_init_array+0x3c>)
 80088de:	1b64      	subs	r4, r4, r5
 80088e0:	10a4      	asrs	r4, r4, #2
 80088e2:	2600      	movs	r6, #0
 80088e4:	42a6      	cmp	r6, r4
 80088e6:	d109      	bne.n	80088fc <__libc_init_array+0x24>
 80088e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008918 <__libc_init_array+0x40>)
 80088ea:	4c0c      	ldr	r4, [pc, #48]	@ (800891c <__libc_init_array+0x44>)
 80088ec:	f002 f866 	bl	800a9bc <_init>
 80088f0:	1b64      	subs	r4, r4, r5
 80088f2:	10a4      	asrs	r4, r4, #2
 80088f4:	2600      	movs	r6, #0
 80088f6:	42a6      	cmp	r6, r4
 80088f8:	d105      	bne.n	8008906 <__libc_init_array+0x2e>
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008900:	4798      	blx	r3
 8008902:	3601      	adds	r6, #1
 8008904:	e7ee      	b.n	80088e4 <__libc_init_array+0xc>
 8008906:	f855 3b04 	ldr.w	r3, [r5], #4
 800890a:	4798      	blx	r3
 800890c:	3601      	adds	r6, #1
 800890e:	e7f2      	b.n	80088f6 <__libc_init_array+0x1e>
 8008910:	0800b2bc 	.word	0x0800b2bc
 8008914:	0800b2bc 	.word	0x0800b2bc
 8008918:	0800b2bc 	.word	0x0800b2bc
 800891c:	0800b2c0 	.word	0x0800b2c0

08008920 <__retarget_lock_init_recursive>:
 8008920:	4770      	bx	lr

08008922 <__retarget_lock_acquire_recursive>:
 8008922:	4770      	bx	lr

08008924 <__retarget_lock_release_recursive>:
 8008924:	4770      	bx	lr
	...

08008928 <__assert_func>:
 8008928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800892a:	4614      	mov	r4, r2
 800892c:	461a      	mov	r2, r3
 800892e:	4b09      	ldr	r3, [pc, #36]	@ (8008954 <__assert_func+0x2c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4605      	mov	r5, r0
 8008934:	68d8      	ldr	r0, [r3, #12]
 8008936:	b954      	cbnz	r4, 800894e <__assert_func+0x26>
 8008938:	4b07      	ldr	r3, [pc, #28]	@ (8008958 <__assert_func+0x30>)
 800893a:	461c      	mov	r4, r3
 800893c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008940:	9100      	str	r1, [sp, #0]
 8008942:	462b      	mov	r3, r5
 8008944:	4905      	ldr	r1, [pc, #20]	@ (800895c <__assert_func+0x34>)
 8008946:	f001 fce1 	bl	800a30c <fiprintf>
 800894a:	f001 fd29 	bl	800a3a0 <abort>
 800894e:	4b04      	ldr	r3, [pc, #16]	@ (8008960 <__assert_func+0x38>)
 8008950:	e7f4      	b.n	800893c <__assert_func+0x14>
 8008952:	bf00      	nop
 8008954:	2000067c 	.word	0x2000067c
 8008958:	0800b0c5 	.word	0x0800b0c5
 800895c:	0800b097 	.word	0x0800b097
 8008960:	0800b08a 	.word	0x0800b08a

08008964 <quorem>:
 8008964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	6903      	ldr	r3, [r0, #16]
 800896a:	690c      	ldr	r4, [r1, #16]
 800896c:	42a3      	cmp	r3, r4
 800896e:	4607      	mov	r7, r0
 8008970:	db7e      	blt.n	8008a70 <quorem+0x10c>
 8008972:	3c01      	subs	r4, #1
 8008974:	f101 0814 	add.w	r8, r1, #20
 8008978:	00a3      	lsls	r3, r4, #2
 800897a:	f100 0514 	add.w	r5, r0, #20
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008984:	9301      	str	r3, [sp, #4]
 8008986:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800898a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800898e:	3301      	adds	r3, #1
 8008990:	429a      	cmp	r2, r3
 8008992:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008996:	fbb2 f6f3 	udiv	r6, r2, r3
 800899a:	d32e      	bcc.n	80089fa <quorem+0x96>
 800899c:	f04f 0a00 	mov.w	sl, #0
 80089a0:	46c4      	mov	ip, r8
 80089a2:	46ae      	mov	lr, r5
 80089a4:	46d3      	mov	fp, sl
 80089a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089aa:	b298      	uxth	r0, r3
 80089ac:	fb06 a000 	mla	r0, r6, r0, sl
 80089b0:	0c02      	lsrs	r2, r0, #16
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	fb06 2303 	mla	r3, r6, r3, r2
 80089b8:	f8de 2000 	ldr.w	r2, [lr]
 80089bc:	b280      	uxth	r0, r0
 80089be:	b292      	uxth	r2, r2
 80089c0:	1a12      	subs	r2, r2, r0
 80089c2:	445a      	add	r2, fp
 80089c4:	f8de 0000 	ldr.w	r0, [lr]
 80089c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80089d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80089d6:	b292      	uxth	r2, r2
 80089d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80089dc:	45e1      	cmp	r9, ip
 80089de:	f84e 2b04 	str.w	r2, [lr], #4
 80089e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80089e6:	d2de      	bcs.n	80089a6 <quorem+0x42>
 80089e8:	9b00      	ldr	r3, [sp, #0]
 80089ea:	58eb      	ldr	r3, [r5, r3]
 80089ec:	b92b      	cbnz	r3, 80089fa <quorem+0x96>
 80089ee:	9b01      	ldr	r3, [sp, #4]
 80089f0:	3b04      	subs	r3, #4
 80089f2:	429d      	cmp	r5, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	d32f      	bcc.n	8008a58 <quorem+0xf4>
 80089f8:	613c      	str	r4, [r7, #16]
 80089fa:	4638      	mov	r0, r7
 80089fc:	f001 f97a 	bl	8009cf4 <__mcmp>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	db25      	blt.n	8008a50 <quorem+0xec>
 8008a04:	4629      	mov	r1, r5
 8008a06:	2000      	movs	r0, #0
 8008a08:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a0c:	f8d1 c000 	ldr.w	ip, [r1]
 8008a10:	fa1f fe82 	uxth.w	lr, r2
 8008a14:	fa1f f38c 	uxth.w	r3, ip
 8008a18:	eba3 030e 	sub.w	r3, r3, lr
 8008a1c:	4403      	add	r3, r0
 8008a1e:	0c12      	lsrs	r2, r2, #16
 8008a20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a2e:	45c1      	cmp	r9, r8
 8008a30:	f841 3b04 	str.w	r3, [r1], #4
 8008a34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a38:	d2e6      	bcs.n	8008a08 <quorem+0xa4>
 8008a3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a42:	b922      	cbnz	r2, 8008a4e <quorem+0xea>
 8008a44:	3b04      	subs	r3, #4
 8008a46:	429d      	cmp	r5, r3
 8008a48:	461a      	mov	r2, r3
 8008a4a:	d30b      	bcc.n	8008a64 <quorem+0x100>
 8008a4c:	613c      	str	r4, [r7, #16]
 8008a4e:	3601      	adds	r6, #1
 8008a50:	4630      	mov	r0, r6
 8008a52:	b003      	add	sp, #12
 8008a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	3b04      	subs	r3, #4
 8008a5c:	2a00      	cmp	r2, #0
 8008a5e:	d1cb      	bne.n	80089f8 <quorem+0x94>
 8008a60:	3c01      	subs	r4, #1
 8008a62:	e7c6      	b.n	80089f2 <quorem+0x8e>
 8008a64:	6812      	ldr	r2, [r2, #0]
 8008a66:	3b04      	subs	r3, #4
 8008a68:	2a00      	cmp	r2, #0
 8008a6a:	d1ef      	bne.n	8008a4c <quorem+0xe8>
 8008a6c:	3c01      	subs	r4, #1
 8008a6e:	e7ea      	b.n	8008a46 <quorem+0xe2>
 8008a70:	2000      	movs	r0, #0
 8008a72:	e7ee      	b.n	8008a52 <quorem+0xee>
 8008a74:	0000      	movs	r0, r0
	...

08008a78 <_dtoa_r>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	69c7      	ldr	r7, [r0, #28]
 8008a7e:	b099      	sub	sp, #100	@ 0x64
 8008a80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a84:	ec55 4b10 	vmov	r4, r5, d0
 8008a88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008a8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a8c:	4683      	mov	fp, r0
 8008a8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a92:	b97f      	cbnz	r7, 8008ab4 <_dtoa_r+0x3c>
 8008a94:	2010      	movs	r0, #16
 8008a96:	f000 fdfd 	bl	8009694 <malloc>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008aa0:	b920      	cbnz	r0, 8008aac <_dtoa_r+0x34>
 8008aa2:	4ba7      	ldr	r3, [pc, #668]	@ (8008d40 <_dtoa_r+0x2c8>)
 8008aa4:	21ef      	movs	r1, #239	@ 0xef
 8008aa6:	48a7      	ldr	r0, [pc, #668]	@ (8008d44 <_dtoa_r+0x2cc>)
 8008aa8:	f7ff ff3e 	bl	8008928 <__assert_func>
 8008aac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ab0:	6007      	str	r7, [r0, #0]
 8008ab2:	60c7      	str	r7, [r0, #12]
 8008ab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ab8:	6819      	ldr	r1, [r3, #0]
 8008aba:	b159      	cbz	r1, 8008ad4 <_dtoa_r+0x5c>
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	604a      	str	r2, [r1, #4]
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	4093      	lsls	r3, r2
 8008ac4:	608b      	str	r3, [r1, #8]
 8008ac6:	4658      	mov	r0, fp
 8008ac8:	f000 feda 	bl	8009880 <_Bfree>
 8008acc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	1e2b      	subs	r3, r5, #0
 8008ad6:	bfb9      	ittee	lt
 8008ad8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008adc:	9303      	strlt	r3, [sp, #12]
 8008ade:	2300      	movge	r3, #0
 8008ae0:	6033      	strge	r3, [r6, #0]
 8008ae2:	9f03      	ldr	r7, [sp, #12]
 8008ae4:	4b98      	ldr	r3, [pc, #608]	@ (8008d48 <_dtoa_r+0x2d0>)
 8008ae6:	bfbc      	itt	lt
 8008ae8:	2201      	movlt	r2, #1
 8008aea:	6032      	strlt	r2, [r6, #0]
 8008aec:	43bb      	bics	r3, r7
 8008aee:	d112      	bne.n	8008b16 <_dtoa_r+0x9e>
 8008af0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008af2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008afc:	4323      	orrs	r3, r4
 8008afe:	f000 854d 	beq.w	800959c <_dtoa_r+0xb24>
 8008b02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008d5c <_dtoa_r+0x2e4>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 854f 	beq.w	80095ac <_dtoa_r+0xb34>
 8008b0e:	f10a 0303 	add.w	r3, sl, #3
 8008b12:	f000 bd49 	b.w	80095a8 <_dtoa_r+0xb30>
 8008b16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	ec51 0b17 	vmov	r0, r1, d7
 8008b20:	2300      	movs	r3, #0
 8008b22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008b26:	f7f7 ffdf 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	b158      	cbz	r0, 8008b46 <_dtoa_r+0xce>
 8008b2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b30:	2301      	movs	r3, #1
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b36:	b113      	cbz	r3, 8008b3e <_dtoa_r+0xc6>
 8008b38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b3a:	4b84      	ldr	r3, [pc, #528]	@ (8008d4c <_dtoa_r+0x2d4>)
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008d60 <_dtoa_r+0x2e8>
 8008b42:	f000 bd33 	b.w	80095ac <_dtoa_r+0xb34>
 8008b46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b4a:	aa16      	add	r2, sp, #88	@ 0x58
 8008b4c:	a917      	add	r1, sp, #92	@ 0x5c
 8008b4e:	4658      	mov	r0, fp
 8008b50:	f001 f980 	bl	8009e54 <__d2b>
 8008b54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b58:	4681      	mov	r9, r0
 8008b5a:	2e00      	cmp	r6, #0
 8008b5c:	d077      	beq.n	8008c4e <_dtoa_r+0x1d6>
 8008b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b78:	4619      	mov	r1, r3
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4b74      	ldr	r3, [pc, #464]	@ (8008d50 <_dtoa_r+0x2d8>)
 8008b7e:	f7f7 fb93 	bl	80002a8 <__aeabi_dsub>
 8008b82:	a369      	add	r3, pc, #420	@ (adr r3, 8008d28 <_dtoa_r+0x2b0>)
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f7f7 fd46 	bl	8000618 <__aeabi_dmul>
 8008b8c:	a368      	add	r3, pc, #416	@ (adr r3, 8008d30 <_dtoa_r+0x2b8>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fb8b 	bl	80002ac <__adddf3>
 8008b96:	4604      	mov	r4, r0
 8008b98:	4630      	mov	r0, r6
 8008b9a:	460d      	mov	r5, r1
 8008b9c:	f7f7 fcd2 	bl	8000544 <__aeabi_i2d>
 8008ba0:	a365      	add	r3, pc, #404	@ (adr r3, 8008d38 <_dtoa_r+0x2c0>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fd37 	bl	8000618 <__aeabi_dmul>
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4620      	mov	r0, r4
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	f7f7 fb7b 	bl	80002ac <__adddf3>
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	460d      	mov	r5, r1
 8008bba:	f7f7 ffdd 	bl	8000b78 <__aeabi_d2iz>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f7f7 ff98 	bl	8000afc <__aeabi_dcmplt>
 8008bcc:	b140      	cbz	r0, 8008be0 <_dtoa_r+0x168>
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f7f7 fcb8 	bl	8000544 <__aeabi_i2d>
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	f7f7 ff86 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bdc:	b900      	cbnz	r0, 8008be0 <_dtoa_r+0x168>
 8008bde:	3f01      	subs	r7, #1
 8008be0:	2f16      	cmp	r7, #22
 8008be2:	d851      	bhi.n	8008c88 <_dtoa_r+0x210>
 8008be4:	4b5b      	ldr	r3, [pc, #364]	@ (8008d54 <_dtoa_r+0x2dc>)
 8008be6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bf2:	f7f7 ff83 	bl	8000afc <__aeabi_dcmplt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d048      	beq.n	8008c8c <_dtoa_r+0x214>
 8008bfa:	3f01      	subs	r7, #1
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8008c00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c02:	1b9b      	subs	r3, r3, r6
 8008c04:	1e5a      	subs	r2, r3, #1
 8008c06:	bf44      	itt	mi
 8008c08:	f1c3 0801 	rsbmi	r8, r3, #1
 8008c0c:	2300      	movmi	r3, #0
 8008c0e:	9208      	str	r2, [sp, #32]
 8008c10:	bf54      	ite	pl
 8008c12:	f04f 0800 	movpl.w	r8, #0
 8008c16:	9308      	strmi	r3, [sp, #32]
 8008c18:	2f00      	cmp	r7, #0
 8008c1a:	db39      	blt.n	8008c90 <_dtoa_r+0x218>
 8008c1c:	9b08      	ldr	r3, [sp, #32]
 8008c1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008c20:	443b      	add	r3, r7
 8008c22:	9308      	str	r3, [sp, #32]
 8008c24:	2300      	movs	r3, #0
 8008c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c2a:	2b09      	cmp	r3, #9
 8008c2c:	d864      	bhi.n	8008cf8 <_dtoa_r+0x280>
 8008c2e:	2b05      	cmp	r3, #5
 8008c30:	bfc4      	itt	gt
 8008c32:	3b04      	subgt	r3, #4
 8008c34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c38:	f1a3 0302 	sub.w	r3, r3, #2
 8008c3c:	bfcc      	ite	gt
 8008c3e:	2400      	movgt	r4, #0
 8008c40:	2401      	movle	r4, #1
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d863      	bhi.n	8008d0e <_dtoa_r+0x296>
 8008c46:	e8df f003 	tbb	[pc, r3]
 8008c4a:	372a      	.short	0x372a
 8008c4c:	5535      	.short	0x5535
 8008c4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008c52:	441e      	add	r6, r3
 8008c54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	bfc1      	itttt	gt
 8008c5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c60:	409f      	lslgt	r7, r3
 8008c62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c6a:	bfd6      	itet	le
 8008c6c:	f1c3 0320 	rsble	r3, r3, #32
 8008c70:	ea47 0003 	orrgt.w	r0, r7, r3
 8008c74:	fa04 f003 	lslle.w	r0, r4, r3
 8008c78:	f7f7 fc54 	bl	8000524 <__aeabi_ui2d>
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008c82:	3e01      	subs	r6, #1
 8008c84:	9214      	str	r2, [sp, #80]	@ 0x50
 8008c86:	e777      	b.n	8008b78 <_dtoa_r+0x100>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e7b8      	b.n	8008bfe <_dtoa_r+0x186>
 8008c8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008c8e:	e7b7      	b.n	8008c00 <_dtoa_r+0x188>
 8008c90:	427b      	negs	r3, r7
 8008c92:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c94:	2300      	movs	r3, #0
 8008c96:	eba8 0807 	sub.w	r8, r8, r7
 8008c9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c9c:	e7c4      	b.n	8008c28 <_dtoa_r+0x1b0>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dc35      	bgt.n	8008d14 <_dtoa_r+0x29c>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	9307      	str	r3, [sp, #28]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cb2:	e00b      	b.n	8008ccc <_dtoa_r+0x254>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e7f3      	b.n	8008ca0 <_dtoa_r+0x228>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cbe:	18fb      	adds	r3, r7, r3
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	9307      	str	r3, [sp, #28]
 8008cc8:	bfb8      	it	lt
 8008cca:	2301      	movlt	r3, #1
 8008ccc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	2204      	movs	r2, #4
 8008cd4:	f102 0514 	add.w	r5, r2, #20
 8008cd8:	429d      	cmp	r5, r3
 8008cda:	d91f      	bls.n	8008d1c <_dtoa_r+0x2a4>
 8008cdc:	6041      	str	r1, [r0, #4]
 8008cde:	4658      	mov	r0, fp
 8008ce0:	f000 fd8e 	bl	8009800 <_Balloc>
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d13c      	bne.n	8008d64 <_dtoa_r+0x2ec>
 8008cea:	4b1b      	ldr	r3, [pc, #108]	@ (8008d58 <_dtoa_r+0x2e0>)
 8008cec:	4602      	mov	r2, r0
 8008cee:	f240 11af 	movw	r1, #431	@ 0x1af
 8008cf2:	e6d8      	b.n	8008aa6 <_dtoa_r+0x2e>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e7e0      	b.n	8008cba <_dtoa_r+0x242>
 8008cf8:	2401      	movs	r4, #1
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d00:	f04f 33ff 	mov.w	r3, #4294967295
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	9307      	str	r3, [sp, #28]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	2312      	movs	r3, #18
 8008d0c:	e7d0      	b.n	8008cb0 <_dtoa_r+0x238>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d12:	e7f5      	b.n	8008d00 <_dtoa_r+0x288>
 8008d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	9307      	str	r3, [sp, #28]
 8008d1a:	e7d7      	b.n	8008ccc <_dtoa_r+0x254>
 8008d1c:	3101      	adds	r1, #1
 8008d1e:	0052      	lsls	r2, r2, #1
 8008d20:	e7d8      	b.n	8008cd4 <_dtoa_r+0x25c>
 8008d22:	bf00      	nop
 8008d24:	f3af 8000 	nop.w
 8008d28:	636f4361 	.word	0x636f4361
 8008d2c:	3fd287a7 	.word	0x3fd287a7
 8008d30:	8b60c8b3 	.word	0x8b60c8b3
 8008d34:	3fc68a28 	.word	0x3fc68a28
 8008d38:	509f79fb 	.word	0x509f79fb
 8008d3c:	3fd34413 	.word	0x3fd34413
 8008d40:	0800b019 	.word	0x0800b019
 8008d44:	0800b0d3 	.word	0x0800b0d3
 8008d48:	7ff00000 	.word	0x7ff00000
 8008d4c:	0800aff6 	.word	0x0800aff6
 8008d50:	3ff80000 	.word	0x3ff80000
 8008d54:	0800b1d0 	.word	0x0800b1d0
 8008d58:	0800b12b 	.word	0x0800b12b
 8008d5c:	0800b0cf 	.word	0x0800b0cf
 8008d60:	0800aff5 	.word	0x0800aff5
 8008d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d68:	6018      	str	r0, [r3, #0]
 8008d6a:	9b07      	ldr	r3, [sp, #28]
 8008d6c:	2b0e      	cmp	r3, #14
 8008d6e:	f200 80a4 	bhi.w	8008eba <_dtoa_r+0x442>
 8008d72:	2c00      	cmp	r4, #0
 8008d74:	f000 80a1 	beq.w	8008eba <_dtoa_r+0x442>
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	dd33      	ble.n	8008de4 <_dtoa_r+0x36c>
 8008d7c:	4bad      	ldr	r3, [pc, #692]	@ (8009034 <_dtoa_r+0x5bc>)
 8008d7e:	f007 020f 	and.w	r2, r7, #15
 8008d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d86:	ed93 7b00 	vldr	d7, [r3]
 8008d8a:	05f8      	lsls	r0, r7, #23
 8008d8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008d90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008d94:	d516      	bpl.n	8008dc4 <_dtoa_r+0x34c>
 8008d96:	4ba8      	ldr	r3, [pc, #672]	@ (8009038 <_dtoa_r+0x5c0>)
 8008d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008da0:	f7f7 fd64 	bl	800086c <__aeabi_ddiv>
 8008da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da8:	f004 040f 	and.w	r4, r4, #15
 8008dac:	2603      	movs	r6, #3
 8008dae:	4da2      	ldr	r5, [pc, #648]	@ (8009038 <_dtoa_r+0x5c0>)
 8008db0:	b954      	cbnz	r4, 8008dc8 <_dtoa_r+0x350>
 8008db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dba:	f7f7 fd57 	bl	800086c <__aeabi_ddiv>
 8008dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc2:	e028      	b.n	8008e16 <_dtoa_r+0x39e>
 8008dc4:	2602      	movs	r6, #2
 8008dc6:	e7f2      	b.n	8008dae <_dtoa_r+0x336>
 8008dc8:	07e1      	lsls	r1, r4, #31
 8008dca:	d508      	bpl.n	8008dde <_dtoa_r+0x366>
 8008dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dd4:	f7f7 fc20 	bl	8000618 <__aeabi_dmul>
 8008dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ddc:	3601      	adds	r6, #1
 8008dde:	1064      	asrs	r4, r4, #1
 8008de0:	3508      	adds	r5, #8
 8008de2:	e7e5      	b.n	8008db0 <_dtoa_r+0x338>
 8008de4:	f000 80d2 	beq.w	8008f8c <_dtoa_r+0x514>
 8008de8:	427c      	negs	r4, r7
 8008dea:	4b92      	ldr	r3, [pc, #584]	@ (8009034 <_dtoa_r+0x5bc>)
 8008dec:	4d92      	ldr	r5, [pc, #584]	@ (8009038 <_dtoa_r+0x5c0>)
 8008dee:	f004 020f 	and.w	r2, r4, #15
 8008df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dfe:	f7f7 fc0b 	bl	8000618 <__aeabi_dmul>
 8008e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e06:	1124      	asrs	r4, r4, #4
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2602      	movs	r6, #2
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	f040 80b2 	bne.w	8008f76 <_dtoa_r+0x4fe>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1d3      	bne.n	8008dbe <_dtoa_r+0x346>
 8008e16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 80b7 	beq.w	8008f90 <_dtoa_r+0x518>
 8008e22:	4b86      	ldr	r3, [pc, #536]	@ (800903c <_dtoa_r+0x5c4>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fe67 	bl	8000afc <__aeabi_dcmplt>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f000 80ae 	beq.w	8008f90 <_dtoa_r+0x518>
 8008e34:	9b07      	ldr	r3, [sp, #28]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 80aa 	beq.w	8008f90 <_dtoa_r+0x518>
 8008e3c:	9b00      	ldr	r3, [sp, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd37      	ble.n	8008eb2 <_dtoa_r+0x43a>
 8008e42:	1e7b      	subs	r3, r7, #1
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	4620      	mov	r0, r4
 8008e48:	4b7d      	ldr	r3, [pc, #500]	@ (8009040 <_dtoa_r+0x5c8>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7f7 fbe3 	bl	8000618 <__aeabi_dmul>
 8008e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e56:	9c00      	ldr	r4, [sp, #0]
 8008e58:	3601      	adds	r6, #1
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7f7 fb72 	bl	8000544 <__aeabi_i2d>
 8008e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e64:	f7f7 fbd8 	bl	8000618 <__aeabi_dmul>
 8008e68:	4b76      	ldr	r3, [pc, #472]	@ (8009044 <_dtoa_r+0x5cc>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f7f7 fa1e 	bl	80002ac <__adddf3>
 8008e70:	4605      	mov	r5, r0
 8008e72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e76:	2c00      	cmp	r4, #0
 8008e78:	f040 808d 	bne.w	8008f96 <_dtoa_r+0x51e>
 8008e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e80:	4b71      	ldr	r3, [pc, #452]	@ (8009048 <_dtoa_r+0x5d0>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	f7f7 fa10 	bl	80002a8 <__aeabi_dsub>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e90:	462a      	mov	r2, r5
 8008e92:	4633      	mov	r3, r6
 8008e94:	f7f7 fe50 	bl	8000b38 <__aeabi_dcmpgt>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f040 828b 	bne.w	80093b4 <_dtoa_r+0x93c>
 8008e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ea8:	f7f7 fe28 	bl	8000afc <__aeabi_dcmplt>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	f040 8128 	bne.w	8009102 <_dtoa_r+0x68a>
 8008eb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008eb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008eba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f2c0 815a 	blt.w	8009176 <_dtoa_r+0x6fe>
 8008ec2:	2f0e      	cmp	r7, #14
 8008ec4:	f300 8157 	bgt.w	8009176 <_dtoa_r+0x6fe>
 8008ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8009034 <_dtoa_r+0x5bc>)
 8008eca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ece:	ed93 7b00 	vldr	d7, [r3]
 8008ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	ed8d 7b00 	vstr	d7, [sp]
 8008eda:	da03      	bge.n	8008ee4 <_dtoa_r+0x46c>
 8008edc:	9b07      	ldr	r3, [sp, #28]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f340 8101 	ble.w	80090e6 <_dtoa_r+0x66e>
 8008ee4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ee8:	4656      	mov	r6, sl
 8008eea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 fcbb 	bl	800086c <__aeabi_ddiv>
 8008ef6:	f7f7 fe3f 	bl	8000b78 <__aeabi_d2iz>
 8008efa:	4680      	mov	r8, r0
 8008efc:	f7f7 fb22 	bl	8000544 <__aeabi_i2d>
 8008f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f04:	f7f7 fb88 	bl	8000618 <__aeabi_dmul>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008f14:	f7f7 f9c8 	bl	80002a8 <__aeabi_dsub>
 8008f18:	f806 4b01 	strb.w	r4, [r6], #1
 8008f1c:	9d07      	ldr	r5, [sp, #28]
 8008f1e:	eba6 040a 	sub.w	r4, r6, sl
 8008f22:	42a5      	cmp	r5, r4
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	f040 8117 	bne.w	800915a <_dtoa_r+0x6e2>
 8008f2c:	f7f7 f9be 	bl	80002ac <__adddf3>
 8008f30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f34:	4604      	mov	r4, r0
 8008f36:	460d      	mov	r5, r1
 8008f38:	f7f7 fdfe 	bl	8000b38 <__aeabi_dcmpgt>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	f040 80f9 	bne.w	8009134 <_dtoa_r+0x6bc>
 8008f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f46:	4620      	mov	r0, r4
 8008f48:	4629      	mov	r1, r5
 8008f4a:	f7f7 fdcd 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f4e:	b118      	cbz	r0, 8008f58 <_dtoa_r+0x4e0>
 8008f50:	f018 0f01 	tst.w	r8, #1
 8008f54:	f040 80ee 	bne.w	8009134 <_dtoa_r+0x6bc>
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4658      	mov	r0, fp
 8008f5c:	f000 fc90 	bl	8009880 <_Bfree>
 8008f60:	2300      	movs	r3, #0
 8008f62:	7033      	strb	r3, [r6, #0]
 8008f64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f66:	3701      	adds	r7, #1
 8008f68:	601f      	str	r7, [r3, #0]
 8008f6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 831d 	beq.w	80095ac <_dtoa_r+0xb34>
 8008f72:	601e      	str	r6, [r3, #0]
 8008f74:	e31a      	b.n	80095ac <_dtoa_r+0xb34>
 8008f76:	07e2      	lsls	r2, r4, #31
 8008f78:	d505      	bpl.n	8008f86 <_dtoa_r+0x50e>
 8008f7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f7e:	f7f7 fb4b 	bl	8000618 <__aeabi_dmul>
 8008f82:	3601      	adds	r6, #1
 8008f84:	2301      	movs	r3, #1
 8008f86:	1064      	asrs	r4, r4, #1
 8008f88:	3508      	adds	r5, #8
 8008f8a:	e73f      	b.n	8008e0c <_dtoa_r+0x394>
 8008f8c:	2602      	movs	r6, #2
 8008f8e:	e742      	b.n	8008e16 <_dtoa_r+0x39e>
 8008f90:	9c07      	ldr	r4, [sp, #28]
 8008f92:	9704      	str	r7, [sp, #16]
 8008f94:	e761      	b.n	8008e5a <_dtoa_r+0x3e2>
 8008f96:	4b27      	ldr	r3, [pc, #156]	@ (8009034 <_dtoa_r+0x5bc>)
 8008f98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fa2:	4454      	add	r4, sl
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	d053      	beq.n	8009050 <_dtoa_r+0x5d8>
 8008fa8:	4928      	ldr	r1, [pc, #160]	@ (800904c <_dtoa_r+0x5d4>)
 8008faa:	2000      	movs	r0, #0
 8008fac:	f7f7 fc5e 	bl	800086c <__aeabi_ddiv>
 8008fb0:	4633      	mov	r3, r6
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	f7f7 f978 	bl	80002a8 <__aeabi_dsub>
 8008fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fbc:	4656      	mov	r6, sl
 8008fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fc2:	f7f7 fdd9 	bl	8000b78 <__aeabi_d2iz>
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	f7f7 fabc 	bl	8000544 <__aeabi_i2d>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fd4:	f7f7 f968 	bl	80002a8 <__aeabi_dsub>
 8008fd8:	3530      	adds	r5, #48	@ 0x30
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fe2:	f806 5b01 	strb.w	r5, [r6], #1
 8008fe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fea:	f7f7 fd87 	bl	8000afc <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d171      	bne.n	80090d6 <_dtoa_r+0x65e>
 8008ff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ff6:	4911      	ldr	r1, [pc, #68]	@ (800903c <_dtoa_r+0x5c4>)
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	f7f7 f955 	bl	80002a8 <__aeabi_dsub>
 8008ffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009002:	f7f7 fd7b 	bl	8000afc <__aeabi_dcmplt>
 8009006:	2800      	cmp	r0, #0
 8009008:	f040 8095 	bne.w	8009136 <_dtoa_r+0x6be>
 800900c:	42a6      	cmp	r6, r4
 800900e:	f43f af50 	beq.w	8008eb2 <_dtoa_r+0x43a>
 8009012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009016:	4b0a      	ldr	r3, [pc, #40]	@ (8009040 <_dtoa_r+0x5c8>)
 8009018:	2200      	movs	r2, #0
 800901a:	f7f7 fafd 	bl	8000618 <__aeabi_dmul>
 800901e:	4b08      	ldr	r3, [pc, #32]	@ (8009040 <_dtoa_r+0x5c8>)
 8009020:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009024:	2200      	movs	r2, #0
 8009026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800902a:	f7f7 faf5 	bl	8000618 <__aeabi_dmul>
 800902e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009032:	e7c4      	b.n	8008fbe <_dtoa_r+0x546>
 8009034:	0800b1d0 	.word	0x0800b1d0
 8009038:	0800b1a8 	.word	0x0800b1a8
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	40240000 	.word	0x40240000
 8009044:	401c0000 	.word	0x401c0000
 8009048:	40140000 	.word	0x40140000
 800904c:	3fe00000 	.word	0x3fe00000
 8009050:	4631      	mov	r1, r6
 8009052:	4628      	mov	r0, r5
 8009054:	f7f7 fae0 	bl	8000618 <__aeabi_dmul>
 8009058:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800905c:	9415      	str	r4, [sp, #84]	@ 0x54
 800905e:	4656      	mov	r6, sl
 8009060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009064:	f7f7 fd88 	bl	8000b78 <__aeabi_d2iz>
 8009068:	4605      	mov	r5, r0
 800906a:	f7f7 fa6b 	bl	8000544 <__aeabi_i2d>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009076:	f7f7 f917 	bl	80002a8 <__aeabi_dsub>
 800907a:	3530      	adds	r5, #48	@ 0x30
 800907c:	f806 5b01 	strb.w	r5, [r6], #1
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	42a6      	cmp	r6, r4
 8009086:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	d124      	bne.n	80090da <_dtoa_r+0x662>
 8009090:	4bac      	ldr	r3, [pc, #688]	@ (8009344 <_dtoa_r+0x8cc>)
 8009092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009096:	f7f7 f909 	bl	80002ac <__adddf3>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090a2:	f7f7 fd49 	bl	8000b38 <__aeabi_dcmpgt>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d145      	bne.n	8009136 <_dtoa_r+0x6be>
 80090aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090ae:	49a5      	ldr	r1, [pc, #660]	@ (8009344 <_dtoa_r+0x8cc>)
 80090b0:	2000      	movs	r0, #0
 80090b2:	f7f7 f8f9 	bl	80002a8 <__aeabi_dsub>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090be:	f7f7 fd1d 	bl	8000afc <__aeabi_dcmplt>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	f43f aef5 	beq.w	8008eb2 <_dtoa_r+0x43a>
 80090c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80090ca:	1e73      	subs	r3, r6, #1
 80090cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80090ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090d2:	2b30      	cmp	r3, #48	@ 0x30
 80090d4:	d0f8      	beq.n	80090c8 <_dtoa_r+0x650>
 80090d6:	9f04      	ldr	r7, [sp, #16]
 80090d8:	e73e      	b.n	8008f58 <_dtoa_r+0x4e0>
 80090da:	4b9b      	ldr	r3, [pc, #620]	@ (8009348 <_dtoa_r+0x8d0>)
 80090dc:	f7f7 fa9c 	bl	8000618 <__aeabi_dmul>
 80090e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090e4:	e7bc      	b.n	8009060 <_dtoa_r+0x5e8>
 80090e6:	d10c      	bne.n	8009102 <_dtoa_r+0x68a>
 80090e8:	4b98      	ldr	r3, [pc, #608]	@ (800934c <_dtoa_r+0x8d4>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090f0:	f7f7 fa92 	bl	8000618 <__aeabi_dmul>
 80090f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090f8:	f7f7 fd14 	bl	8000b24 <__aeabi_dcmpge>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f000 8157 	beq.w	80093b0 <_dtoa_r+0x938>
 8009102:	2400      	movs	r4, #0
 8009104:	4625      	mov	r5, r4
 8009106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009108:	43db      	mvns	r3, r3
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	4656      	mov	r6, sl
 800910e:	2700      	movs	r7, #0
 8009110:	4621      	mov	r1, r4
 8009112:	4658      	mov	r0, fp
 8009114:	f000 fbb4 	bl	8009880 <_Bfree>
 8009118:	2d00      	cmp	r5, #0
 800911a:	d0dc      	beq.n	80090d6 <_dtoa_r+0x65e>
 800911c:	b12f      	cbz	r7, 800912a <_dtoa_r+0x6b2>
 800911e:	42af      	cmp	r7, r5
 8009120:	d003      	beq.n	800912a <_dtoa_r+0x6b2>
 8009122:	4639      	mov	r1, r7
 8009124:	4658      	mov	r0, fp
 8009126:	f000 fbab 	bl	8009880 <_Bfree>
 800912a:	4629      	mov	r1, r5
 800912c:	4658      	mov	r0, fp
 800912e:	f000 fba7 	bl	8009880 <_Bfree>
 8009132:	e7d0      	b.n	80090d6 <_dtoa_r+0x65e>
 8009134:	9704      	str	r7, [sp, #16]
 8009136:	4633      	mov	r3, r6
 8009138:	461e      	mov	r6, r3
 800913a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800913e:	2a39      	cmp	r2, #57	@ 0x39
 8009140:	d107      	bne.n	8009152 <_dtoa_r+0x6da>
 8009142:	459a      	cmp	sl, r3
 8009144:	d1f8      	bne.n	8009138 <_dtoa_r+0x6c0>
 8009146:	9a04      	ldr	r2, [sp, #16]
 8009148:	3201      	adds	r2, #1
 800914a:	9204      	str	r2, [sp, #16]
 800914c:	2230      	movs	r2, #48	@ 0x30
 800914e:	f88a 2000 	strb.w	r2, [sl]
 8009152:	781a      	ldrb	r2, [r3, #0]
 8009154:	3201      	adds	r2, #1
 8009156:	701a      	strb	r2, [r3, #0]
 8009158:	e7bd      	b.n	80090d6 <_dtoa_r+0x65e>
 800915a:	4b7b      	ldr	r3, [pc, #492]	@ (8009348 <_dtoa_r+0x8d0>)
 800915c:	2200      	movs	r2, #0
 800915e:	f7f7 fa5b 	bl	8000618 <__aeabi_dmul>
 8009162:	2200      	movs	r2, #0
 8009164:	2300      	movs	r3, #0
 8009166:	4604      	mov	r4, r0
 8009168:	460d      	mov	r5, r1
 800916a:	f7f7 fcbd 	bl	8000ae8 <__aeabi_dcmpeq>
 800916e:	2800      	cmp	r0, #0
 8009170:	f43f aebb 	beq.w	8008eea <_dtoa_r+0x472>
 8009174:	e6f0      	b.n	8008f58 <_dtoa_r+0x4e0>
 8009176:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009178:	2a00      	cmp	r2, #0
 800917a:	f000 80db 	beq.w	8009334 <_dtoa_r+0x8bc>
 800917e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009180:	2a01      	cmp	r2, #1
 8009182:	f300 80bf 	bgt.w	8009304 <_dtoa_r+0x88c>
 8009186:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009188:	2a00      	cmp	r2, #0
 800918a:	f000 80b7 	beq.w	80092fc <_dtoa_r+0x884>
 800918e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009192:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009194:	4646      	mov	r6, r8
 8009196:	9a08      	ldr	r2, [sp, #32]
 8009198:	2101      	movs	r1, #1
 800919a:	441a      	add	r2, r3
 800919c:	4658      	mov	r0, fp
 800919e:	4498      	add	r8, r3
 80091a0:	9208      	str	r2, [sp, #32]
 80091a2:	f000 fc21 	bl	80099e8 <__i2b>
 80091a6:	4605      	mov	r5, r0
 80091a8:	b15e      	cbz	r6, 80091c2 <_dtoa_r+0x74a>
 80091aa:	9b08      	ldr	r3, [sp, #32]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	dd08      	ble.n	80091c2 <_dtoa_r+0x74a>
 80091b0:	42b3      	cmp	r3, r6
 80091b2:	9a08      	ldr	r2, [sp, #32]
 80091b4:	bfa8      	it	ge
 80091b6:	4633      	movge	r3, r6
 80091b8:	eba8 0803 	sub.w	r8, r8, r3
 80091bc:	1af6      	subs	r6, r6, r3
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	9308      	str	r3, [sp, #32]
 80091c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091c4:	b1f3      	cbz	r3, 8009204 <_dtoa_r+0x78c>
 80091c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 80b7 	beq.w	800933c <_dtoa_r+0x8c4>
 80091ce:	b18c      	cbz	r4, 80091f4 <_dtoa_r+0x77c>
 80091d0:	4629      	mov	r1, r5
 80091d2:	4622      	mov	r2, r4
 80091d4:	4658      	mov	r0, fp
 80091d6:	f000 fcc7 	bl	8009b68 <__pow5mult>
 80091da:	464a      	mov	r2, r9
 80091dc:	4601      	mov	r1, r0
 80091de:	4605      	mov	r5, r0
 80091e0:	4658      	mov	r0, fp
 80091e2:	f000 fc17 	bl	8009a14 <__multiply>
 80091e6:	4649      	mov	r1, r9
 80091e8:	9004      	str	r0, [sp, #16]
 80091ea:	4658      	mov	r0, fp
 80091ec:	f000 fb48 	bl	8009880 <_Bfree>
 80091f0:	9b04      	ldr	r3, [sp, #16]
 80091f2:	4699      	mov	r9, r3
 80091f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091f6:	1b1a      	subs	r2, r3, r4
 80091f8:	d004      	beq.n	8009204 <_dtoa_r+0x78c>
 80091fa:	4649      	mov	r1, r9
 80091fc:	4658      	mov	r0, fp
 80091fe:	f000 fcb3 	bl	8009b68 <__pow5mult>
 8009202:	4681      	mov	r9, r0
 8009204:	2101      	movs	r1, #1
 8009206:	4658      	mov	r0, fp
 8009208:	f000 fbee 	bl	80099e8 <__i2b>
 800920c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800920e:	4604      	mov	r4, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 81cf 	beq.w	80095b4 <_dtoa_r+0xb3c>
 8009216:	461a      	mov	r2, r3
 8009218:	4601      	mov	r1, r0
 800921a:	4658      	mov	r0, fp
 800921c:	f000 fca4 	bl	8009b68 <__pow5mult>
 8009220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009222:	2b01      	cmp	r3, #1
 8009224:	4604      	mov	r4, r0
 8009226:	f300 8095 	bgt.w	8009354 <_dtoa_r+0x8dc>
 800922a:	9b02      	ldr	r3, [sp, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f040 8087 	bne.w	8009340 <_dtoa_r+0x8c8>
 8009232:	9b03      	ldr	r3, [sp, #12]
 8009234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009238:	2b00      	cmp	r3, #0
 800923a:	f040 8089 	bne.w	8009350 <_dtoa_r+0x8d8>
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009244:	0d1b      	lsrs	r3, r3, #20
 8009246:	051b      	lsls	r3, r3, #20
 8009248:	b12b      	cbz	r3, 8009256 <_dtoa_r+0x7de>
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	3301      	adds	r3, #1
 800924e:	9308      	str	r3, [sp, #32]
 8009250:	f108 0801 	add.w	r8, r8, #1
 8009254:	2301      	movs	r3, #1
 8009256:	930a      	str	r3, [sp, #40]	@ 0x28
 8009258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 81b0 	beq.w	80095c0 <_dtoa_r+0xb48>
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009266:	6918      	ldr	r0, [r3, #16]
 8009268:	f000 fb72 	bl	8009950 <__hi0bits>
 800926c:	f1c0 0020 	rsb	r0, r0, #32
 8009270:	9b08      	ldr	r3, [sp, #32]
 8009272:	4418      	add	r0, r3
 8009274:	f010 001f 	ands.w	r0, r0, #31
 8009278:	d077      	beq.n	800936a <_dtoa_r+0x8f2>
 800927a:	f1c0 0320 	rsb	r3, r0, #32
 800927e:	2b04      	cmp	r3, #4
 8009280:	dd6b      	ble.n	800935a <_dtoa_r+0x8e2>
 8009282:	9b08      	ldr	r3, [sp, #32]
 8009284:	f1c0 001c 	rsb	r0, r0, #28
 8009288:	4403      	add	r3, r0
 800928a:	4480      	add	r8, r0
 800928c:	4406      	add	r6, r0
 800928e:	9308      	str	r3, [sp, #32]
 8009290:	f1b8 0f00 	cmp.w	r8, #0
 8009294:	dd05      	ble.n	80092a2 <_dtoa_r+0x82a>
 8009296:	4649      	mov	r1, r9
 8009298:	4642      	mov	r2, r8
 800929a:	4658      	mov	r0, fp
 800929c:	f000 fcbe 	bl	8009c1c <__lshift>
 80092a0:	4681      	mov	r9, r0
 80092a2:	9b08      	ldr	r3, [sp, #32]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dd05      	ble.n	80092b4 <_dtoa_r+0x83c>
 80092a8:	4621      	mov	r1, r4
 80092aa:	461a      	mov	r2, r3
 80092ac:	4658      	mov	r0, fp
 80092ae:	f000 fcb5 	bl	8009c1c <__lshift>
 80092b2:	4604      	mov	r4, r0
 80092b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d059      	beq.n	800936e <_dtoa_r+0x8f6>
 80092ba:	4621      	mov	r1, r4
 80092bc:	4648      	mov	r0, r9
 80092be:	f000 fd19 	bl	8009cf4 <__mcmp>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	da53      	bge.n	800936e <_dtoa_r+0x8f6>
 80092c6:	1e7b      	subs	r3, r7, #1
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	4649      	mov	r1, r9
 80092cc:	2300      	movs	r3, #0
 80092ce:	220a      	movs	r2, #10
 80092d0:	4658      	mov	r0, fp
 80092d2:	f000 faf7 	bl	80098c4 <__multadd>
 80092d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092d8:	4681      	mov	r9, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f000 8172 	beq.w	80095c4 <_dtoa_r+0xb4c>
 80092e0:	2300      	movs	r3, #0
 80092e2:	4629      	mov	r1, r5
 80092e4:	220a      	movs	r2, #10
 80092e6:	4658      	mov	r0, fp
 80092e8:	f000 faec 	bl	80098c4 <__multadd>
 80092ec:	9b00      	ldr	r3, [sp, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	4605      	mov	r5, r0
 80092f2:	dc67      	bgt.n	80093c4 <_dtoa_r+0x94c>
 80092f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	dc41      	bgt.n	800937e <_dtoa_r+0x906>
 80092fa:	e063      	b.n	80093c4 <_dtoa_r+0x94c>
 80092fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009302:	e746      	b.n	8009192 <_dtoa_r+0x71a>
 8009304:	9b07      	ldr	r3, [sp, #28]
 8009306:	1e5c      	subs	r4, r3, #1
 8009308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800930a:	42a3      	cmp	r3, r4
 800930c:	bfbf      	itttt	lt
 800930e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009310:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009312:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009314:	1ae3      	sublt	r3, r4, r3
 8009316:	bfb4      	ite	lt
 8009318:	18d2      	addlt	r2, r2, r3
 800931a:	1b1c      	subge	r4, r3, r4
 800931c:	9b07      	ldr	r3, [sp, #28]
 800931e:	bfbc      	itt	lt
 8009320:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009322:	2400      	movlt	r4, #0
 8009324:	2b00      	cmp	r3, #0
 8009326:	bfb5      	itete	lt
 8009328:	eba8 0603 	sublt.w	r6, r8, r3
 800932c:	9b07      	ldrge	r3, [sp, #28]
 800932e:	2300      	movlt	r3, #0
 8009330:	4646      	movge	r6, r8
 8009332:	e730      	b.n	8009196 <_dtoa_r+0x71e>
 8009334:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009336:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009338:	4646      	mov	r6, r8
 800933a:	e735      	b.n	80091a8 <_dtoa_r+0x730>
 800933c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800933e:	e75c      	b.n	80091fa <_dtoa_r+0x782>
 8009340:	2300      	movs	r3, #0
 8009342:	e788      	b.n	8009256 <_dtoa_r+0x7de>
 8009344:	3fe00000 	.word	0x3fe00000
 8009348:	40240000 	.word	0x40240000
 800934c:	40140000 	.word	0x40140000
 8009350:	9b02      	ldr	r3, [sp, #8]
 8009352:	e780      	b.n	8009256 <_dtoa_r+0x7de>
 8009354:	2300      	movs	r3, #0
 8009356:	930a      	str	r3, [sp, #40]	@ 0x28
 8009358:	e782      	b.n	8009260 <_dtoa_r+0x7e8>
 800935a:	d099      	beq.n	8009290 <_dtoa_r+0x818>
 800935c:	9a08      	ldr	r2, [sp, #32]
 800935e:	331c      	adds	r3, #28
 8009360:	441a      	add	r2, r3
 8009362:	4498      	add	r8, r3
 8009364:	441e      	add	r6, r3
 8009366:	9208      	str	r2, [sp, #32]
 8009368:	e792      	b.n	8009290 <_dtoa_r+0x818>
 800936a:	4603      	mov	r3, r0
 800936c:	e7f6      	b.n	800935c <_dtoa_r+0x8e4>
 800936e:	9b07      	ldr	r3, [sp, #28]
 8009370:	9704      	str	r7, [sp, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	dc20      	bgt.n	80093b8 <_dtoa_r+0x940>
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800937a:	2b02      	cmp	r3, #2
 800937c:	dd1e      	ble.n	80093bc <_dtoa_r+0x944>
 800937e:	9b00      	ldr	r3, [sp, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f47f aec0 	bne.w	8009106 <_dtoa_r+0x68e>
 8009386:	4621      	mov	r1, r4
 8009388:	2205      	movs	r2, #5
 800938a:	4658      	mov	r0, fp
 800938c:	f000 fa9a 	bl	80098c4 <__multadd>
 8009390:	4601      	mov	r1, r0
 8009392:	4604      	mov	r4, r0
 8009394:	4648      	mov	r0, r9
 8009396:	f000 fcad 	bl	8009cf4 <__mcmp>
 800939a:	2800      	cmp	r0, #0
 800939c:	f77f aeb3 	ble.w	8009106 <_dtoa_r+0x68e>
 80093a0:	4656      	mov	r6, sl
 80093a2:	2331      	movs	r3, #49	@ 0x31
 80093a4:	f806 3b01 	strb.w	r3, [r6], #1
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	3301      	adds	r3, #1
 80093ac:	9304      	str	r3, [sp, #16]
 80093ae:	e6ae      	b.n	800910e <_dtoa_r+0x696>
 80093b0:	9c07      	ldr	r4, [sp, #28]
 80093b2:	9704      	str	r7, [sp, #16]
 80093b4:	4625      	mov	r5, r4
 80093b6:	e7f3      	b.n	80093a0 <_dtoa_r+0x928>
 80093b8:	9b07      	ldr	r3, [sp, #28]
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 8104 	beq.w	80095cc <_dtoa_r+0xb54>
 80093c4:	2e00      	cmp	r6, #0
 80093c6:	dd05      	ble.n	80093d4 <_dtoa_r+0x95c>
 80093c8:	4629      	mov	r1, r5
 80093ca:	4632      	mov	r2, r6
 80093cc:	4658      	mov	r0, fp
 80093ce:	f000 fc25 	bl	8009c1c <__lshift>
 80093d2:	4605      	mov	r5, r0
 80093d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d05a      	beq.n	8009490 <_dtoa_r+0xa18>
 80093da:	6869      	ldr	r1, [r5, #4]
 80093dc:	4658      	mov	r0, fp
 80093de:	f000 fa0f 	bl	8009800 <_Balloc>
 80093e2:	4606      	mov	r6, r0
 80093e4:	b928      	cbnz	r0, 80093f2 <_dtoa_r+0x97a>
 80093e6:	4b84      	ldr	r3, [pc, #528]	@ (80095f8 <_dtoa_r+0xb80>)
 80093e8:	4602      	mov	r2, r0
 80093ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80093ee:	f7ff bb5a 	b.w	8008aa6 <_dtoa_r+0x2e>
 80093f2:	692a      	ldr	r2, [r5, #16]
 80093f4:	3202      	adds	r2, #2
 80093f6:	0092      	lsls	r2, r2, #2
 80093f8:	f105 010c 	add.w	r1, r5, #12
 80093fc:	300c      	adds	r0, #12
 80093fe:	f000 ffc1 	bl	800a384 <memcpy>
 8009402:	2201      	movs	r2, #1
 8009404:	4631      	mov	r1, r6
 8009406:	4658      	mov	r0, fp
 8009408:	f000 fc08 	bl	8009c1c <__lshift>
 800940c:	f10a 0301 	add.w	r3, sl, #1
 8009410:	9307      	str	r3, [sp, #28]
 8009412:	9b00      	ldr	r3, [sp, #0]
 8009414:	4453      	add	r3, sl
 8009416:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	462f      	mov	r7, r5
 8009420:	930a      	str	r3, [sp, #40]	@ 0x28
 8009422:	4605      	mov	r5, r0
 8009424:	9b07      	ldr	r3, [sp, #28]
 8009426:	4621      	mov	r1, r4
 8009428:	3b01      	subs	r3, #1
 800942a:	4648      	mov	r0, r9
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	f7ff fa99 	bl	8008964 <quorem>
 8009432:	4639      	mov	r1, r7
 8009434:	9002      	str	r0, [sp, #8]
 8009436:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800943a:	4648      	mov	r0, r9
 800943c:	f000 fc5a 	bl	8009cf4 <__mcmp>
 8009440:	462a      	mov	r2, r5
 8009442:	9008      	str	r0, [sp, #32]
 8009444:	4621      	mov	r1, r4
 8009446:	4658      	mov	r0, fp
 8009448:	f000 fc70 	bl	8009d2c <__mdiff>
 800944c:	68c2      	ldr	r2, [r0, #12]
 800944e:	4606      	mov	r6, r0
 8009450:	bb02      	cbnz	r2, 8009494 <_dtoa_r+0xa1c>
 8009452:	4601      	mov	r1, r0
 8009454:	4648      	mov	r0, r9
 8009456:	f000 fc4d 	bl	8009cf4 <__mcmp>
 800945a:	4602      	mov	r2, r0
 800945c:	4631      	mov	r1, r6
 800945e:	4658      	mov	r0, fp
 8009460:	920e      	str	r2, [sp, #56]	@ 0x38
 8009462:	f000 fa0d 	bl	8009880 <_Bfree>
 8009466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009468:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800946a:	9e07      	ldr	r6, [sp, #28]
 800946c:	ea43 0102 	orr.w	r1, r3, r2
 8009470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009472:	4319      	orrs	r1, r3
 8009474:	d110      	bne.n	8009498 <_dtoa_r+0xa20>
 8009476:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800947a:	d029      	beq.n	80094d0 <_dtoa_r+0xa58>
 800947c:	9b08      	ldr	r3, [sp, #32]
 800947e:	2b00      	cmp	r3, #0
 8009480:	dd02      	ble.n	8009488 <_dtoa_r+0xa10>
 8009482:	9b02      	ldr	r3, [sp, #8]
 8009484:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009488:	9b00      	ldr	r3, [sp, #0]
 800948a:	f883 8000 	strb.w	r8, [r3]
 800948e:	e63f      	b.n	8009110 <_dtoa_r+0x698>
 8009490:	4628      	mov	r0, r5
 8009492:	e7bb      	b.n	800940c <_dtoa_r+0x994>
 8009494:	2201      	movs	r2, #1
 8009496:	e7e1      	b.n	800945c <_dtoa_r+0x9e4>
 8009498:	9b08      	ldr	r3, [sp, #32]
 800949a:	2b00      	cmp	r3, #0
 800949c:	db04      	blt.n	80094a8 <_dtoa_r+0xa30>
 800949e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094a0:	430b      	orrs	r3, r1
 80094a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80094a4:	430b      	orrs	r3, r1
 80094a6:	d120      	bne.n	80094ea <_dtoa_r+0xa72>
 80094a8:	2a00      	cmp	r2, #0
 80094aa:	dded      	ble.n	8009488 <_dtoa_r+0xa10>
 80094ac:	4649      	mov	r1, r9
 80094ae:	2201      	movs	r2, #1
 80094b0:	4658      	mov	r0, fp
 80094b2:	f000 fbb3 	bl	8009c1c <__lshift>
 80094b6:	4621      	mov	r1, r4
 80094b8:	4681      	mov	r9, r0
 80094ba:	f000 fc1b 	bl	8009cf4 <__mcmp>
 80094be:	2800      	cmp	r0, #0
 80094c0:	dc03      	bgt.n	80094ca <_dtoa_r+0xa52>
 80094c2:	d1e1      	bne.n	8009488 <_dtoa_r+0xa10>
 80094c4:	f018 0f01 	tst.w	r8, #1
 80094c8:	d0de      	beq.n	8009488 <_dtoa_r+0xa10>
 80094ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094ce:	d1d8      	bne.n	8009482 <_dtoa_r+0xa0a>
 80094d0:	9a00      	ldr	r2, [sp, #0]
 80094d2:	2339      	movs	r3, #57	@ 0x39
 80094d4:	7013      	strb	r3, [r2, #0]
 80094d6:	4633      	mov	r3, r6
 80094d8:	461e      	mov	r6, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80094e0:	2a39      	cmp	r2, #57	@ 0x39
 80094e2:	d052      	beq.n	800958a <_dtoa_r+0xb12>
 80094e4:	3201      	adds	r2, #1
 80094e6:	701a      	strb	r2, [r3, #0]
 80094e8:	e612      	b.n	8009110 <_dtoa_r+0x698>
 80094ea:	2a00      	cmp	r2, #0
 80094ec:	dd07      	ble.n	80094fe <_dtoa_r+0xa86>
 80094ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094f2:	d0ed      	beq.n	80094d0 <_dtoa_r+0xa58>
 80094f4:	9a00      	ldr	r2, [sp, #0]
 80094f6:	f108 0301 	add.w	r3, r8, #1
 80094fa:	7013      	strb	r3, [r2, #0]
 80094fc:	e608      	b.n	8009110 <_dtoa_r+0x698>
 80094fe:	9b07      	ldr	r3, [sp, #28]
 8009500:	9a07      	ldr	r2, [sp, #28]
 8009502:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009508:	4293      	cmp	r3, r2
 800950a:	d028      	beq.n	800955e <_dtoa_r+0xae6>
 800950c:	4649      	mov	r1, r9
 800950e:	2300      	movs	r3, #0
 8009510:	220a      	movs	r2, #10
 8009512:	4658      	mov	r0, fp
 8009514:	f000 f9d6 	bl	80098c4 <__multadd>
 8009518:	42af      	cmp	r7, r5
 800951a:	4681      	mov	r9, r0
 800951c:	f04f 0300 	mov.w	r3, #0
 8009520:	f04f 020a 	mov.w	r2, #10
 8009524:	4639      	mov	r1, r7
 8009526:	4658      	mov	r0, fp
 8009528:	d107      	bne.n	800953a <_dtoa_r+0xac2>
 800952a:	f000 f9cb 	bl	80098c4 <__multadd>
 800952e:	4607      	mov	r7, r0
 8009530:	4605      	mov	r5, r0
 8009532:	9b07      	ldr	r3, [sp, #28]
 8009534:	3301      	adds	r3, #1
 8009536:	9307      	str	r3, [sp, #28]
 8009538:	e774      	b.n	8009424 <_dtoa_r+0x9ac>
 800953a:	f000 f9c3 	bl	80098c4 <__multadd>
 800953e:	4629      	mov	r1, r5
 8009540:	4607      	mov	r7, r0
 8009542:	2300      	movs	r3, #0
 8009544:	220a      	movs	r2, #10
 8009546:	4658      	mov	r0, fp
 8009548:	f000 f9bc 	bl	80098c4 <__multadd>
 800954c:	4605      	mov	r5, r0
 800954e:	e7f0      	b.n	8009532 <_dtoa_r+0xaba>
 8009550:	9b00      	ldr	r3, [sp, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	bfcc      	ite	gt
 8009556:	461e      	movgt	r6, r3
 8009558:	2601      	movle	r6, #1
 800955a:	4456      	add	r6, sl
 800955c:	2700      	movs	r7, #0
 800955e:	4649      	mov	r1, r9
 8009560:	2201      	movs	r2, #1
 8009562:	4658      	mov	r0, fp
 8009564:	f000 fb5a 	bl	8009c1c <__lshift>
 8009568:	4621      	mov	r1, r4
 800956a:	4681      	mov	r9, r0
 800956c:	f000 fbc2 	bl	8009cf4 <__mcmp>
 8009570:	2800      	cmp	r0, #0
 8009572:	dcb0      	bgt.n	80094d6 <_dtoa_r+0xa5e>
 8009574:	d102      	bne.n	800957c <_dtoa_r+0xb04>
 8009576:	f018 0f01 	tst.w	r8, #1
 800957a:	d1ac      	bne.n	80094d6 <_dtoa_r+0xa5e>
 800957c:	4633      	mov	r3, r6
 800957e:	461e      	mov	r6, r3
 8009580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009584:	2a30      	cmp	r2, #48	@ 0x30
 8009586:	d0fa      	beq.n	800957e <_dtoa_r+0xb06>
 8009588:	e5c2      	b.n	8009110 <_dtoa_r+0x698>
 800958a:	459a      	cmp	sl, r3
 800958c:	d1a4      	bne.n	80094d8 <_dtoa_r+0xa60>
 800958e:	9b04      	ldr	r3, [sp, #16]
 8009590:	3301      	adds	r3, #1
 8009592:	9304      	str	r3, [sp, #16]
 8009594:	2331      	movs	r3, #49	@ 0x31
 8009596:	f88a 3000 	strb.w	r3, [sl]
 800959a:	e5b9      	b.n	8009110 <_dtoa_r+0x698>
 800959c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800959e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80095fc <_dtoa_r+0xb84>
 80095a2:	b11b      	cbz	r3, 80095ac <_dtoa_r+0xb34>
 80095a4:	f10a 0308 	add.w	r3, sl, #8
 80095a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	4650      	mov	r0, sl
 80095ae:	b019      	add	sp, #100	@ 0x64
 80095b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	f77f ae37 	ble.w	800922a <_dtoa_r+0x7b2>
 80095bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095be:	930a      	str	r3, [sp, #40]	@ 0x28
 80095c0:	2001      	movs	r0, #1
 80095c2:	e655      	b.n	8009270 <_dtoa_r+0x7f8>
 80095c4:	9b00      	ldr	r3, [sp, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f77f aed6 	ble.w	8009378 <_dtoa_r+0x900>
 80095cc:	4656      	mov	r6, sl
 80095ce:	4621      	mov	r1, r4
 80095d0:	4648      	mov	r0, r9
 80095d2:	f7ff f9c7 	bl	8008964 <quorem>
 80095d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80095da:	f806 8b01 	strb.w	r8, [r6], #1
 80095de:	9b00      	ldr	r3, [sp, #0]
 80095e0:	eba6 020a 	sub.w	r2, r6, sl
 80095e4:	4293      	cmp	r3, r2
 80095e6:	ddb3      	ble.n	8009550 <_dtoa_r+0xad8>
 80095e8:	4649      	mov	r1, r9
 80095ea:	2300      	movs	r3, #0
 80095ec:	220a      	movs	r2, #10
 80095ee:	4658      	mov	r0, fp
 80095f0:	f000 f968 	bl	80098c4 <__multadd>
 80095f4:	4681      	mov	r9, r0
 80095f6:	e7ea      	b.n	80095ce <_dtoa_r+0xb56>
 80095f8:	0800b12b 	.word	0x0800b12b
 80095fc:	0800b0c6 	.word	0x0800b0c6

08009600 <_free_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4605      	mov	r5, r0
 8009604:	2900      	cmp	r1, #0
 8009606:	d041      	beq.n	800968c <_free_r+0x8c>
 8009608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800960c:	1f0c      	subs	r4, r1, #4
 800960e:	2b00      	cmp	r3, #0
 8009610:	bfb8      	it	lt
 8009612:	18e4      	addlt	r4, r4, r3
 8009614:	f000 f8e8 	bl	80097e8 <__malloc_lock>
 8009618:	4a1d      	ldr	r2, [pc, #116]	@ (8009690 <_free_r+0x90>)
 800961a:	6813      	ldr	r3, [r2, #0]
 800961c:	b933      	cbnz	r3, 800962c <_free_r+0x2c>
 800961e:	6063      	str	r3, [r4, #4]
 8009620:	6014      	str	r4, [r2, #0]
 8009622:	4628      	mov	r0, r5
 8009624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009628:	f000 b8e4 	b.w	80097f4 <__malloc_unlock>
 800962c:	42a3      	cmp	r3, r4
 800962e:	d908      	bls.n	8009642 <_free_r+0x42>
 8009630:	6820      	ldr	r0, [r4, #0]
 8009632:	1821      	adds	r1, r4, r0
 8009634:	428b      	cmp	r3, r1
 8009636:	bf01      	itttt	eq
 8009638:	6819      	ldreq	r1, [r3, #0]
 800963a:	685b      	ldreq	r3, [r3, #4]
 800963c:	1809      	addeq	r1, r1, r0
 800963e:	6021      	streq	r1, [r4, #0]
 8009640:	e7ed      	b.n	800961e <_free_r+0x1e>
 8009642:	461a      	mov	r2, r3
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	b10b      	cbz	r3, 800964c <_free_r+0x4c>
 8009648:	42a3      	cmp	r3, r4
 800964a:	d9fa      	bls.n	8009642 <_free_r+0x42>
 800964c:	6811      	ldr	r1, [r2, #0]
 800964e:	1850      	adds	r0, r2, r1
 8009650:	42a0      	cmp	r0, r4
 8009652:	d10b      	bne.n	800966c <_free_r+0x6c>
 8009654:	6820      	ldr	r0, [r4, #0]
 8009656:	4401      	add	r1, r0
 8009658:	1850      	adds	r0, r2, r1
 800965a:	4283      	cmp	r3, r0
 800965c:	6011      	str	r1, [r2, #0]
 800965e:	d1e0      	bne.n	8009622 <_free_r+0x22>
 8009660:	6818      	ldr	r0, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	6053      	str	r3, [r2, #4]
 8009666:	4408      	add	r0, r1
 8009668:	6010      	str	r0, [r2, #0]
 800966a:	e7da      	b.n	8009622 <_free_r+0x22>
 800966c:	d902      	bls.n	8009674 <_free_r+0x74>
 800966e:	230c      	movs	r3, #12
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	e7d6      	b.n	8009622 <_free_r+0x22>
 8009674:	6820      	ldr	r0, [r4, #0]
 8009676:	1821      	adds	r1, r4, r0
 8009678:	428b      	cmp	r3, r1
 800967a:	bf04      	itt	eq
 800967c:	6819      	ldreq	r1, [r3, #0]
 800967e:	685b      	ldreq	r3, [r3, #4]
 8009680:	6063      	str	r3, [r4, #4]
 8009682:	bf04      	itt	eq
 8009684:	1809      	addeq	r1, r1, r0
 8009686:	6021      	streq	r1, [r4, #0]
 8009688:	6054      	str	r4, [r2, #4]
 800968a:	e7ca      	b.n	8009622 <_free_r+0x22>
 800968c:	bd38      	pop	{r3, r4, r5, pc}
 800968e:	bf00      	nop
 8009690:	20000c40 	.word	0x20000c40

08009694 <malloc>:
 8009694:	4b02      	ldr	r3, [pc, #8]	@ (80096a0 <malloc+0xc>)
 8009696:	4601      	mov	r1, r0
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	f000 b825 	b.w	80096e8 <_malloc_r>
 800969e:	bf00      	nop
 80096a0:	2000067c 	.word	0x2000067c

080096a4 <sbrk_aligned>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	4e0f      	ldr	r6, [pc, #60]	@ (80096e4 <sbrk_aligned+0x40>)
 80096a8:	460c      	mov	r4, r1
 80096aa:	6831      	ldr	r1, [r6, #0]
 80096ac:	4605      	mov	r5, r0
 80096ae:	b911      	cbnz	r1, 80096b6 <sbrk_aligned+0x12>
 80096b0:	f000 fe58 	bl	800a364 <_sbrk_r>
 80096b4:	6030      	str	r0, [r6, #0]
 80096b6:	4621      	mov	r1, r4
 80096b8:	4628      	mov	r0, r5
 80096ba:	f000 fe53 	bl	800a364 <_sbrk_r>
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	d103      	bne.n	80096ca <sbrk_aligned+0x26>
 80096c2:	f04f 34ff 	mov.w	r4, #4294967295
 80096c6:	4620      	mov	r0, r4
 80096c8:	bd70      	pop	{r4, r5, r6, pc}
 80096ca:	1cc4      	adds	r4, r0, #3
 80096cc:	f024 0403 	bic.w	r4, r4, #3
 80096d0:	42a0      	cmp	r0, r4
 80096d2:	d0f8      	beq.n	80096c6 <sbrk_aligned+0x22>
 80096d4:	1a21      	subs	r1, r4, r0
 80096d6:	4628      	mov	r0, r5
 80096d8:	f000 fe44 	bl	800a364 <_sbrk_r>
 80096dc:	3001      	adds	r0, #1
 80096de:	d1f2      	bne.n	80096c6 <sbrk_aligned+0x22>
 80096e0:	e7ef      	b.n	80096c2 <sbrk_aligned+0x1e>
 80096e2:	bf00      	nop
 80096e4:	20000c3c 	.word	0x20000c3c

080096e8 <_malloc_r>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	1ccd      	adds	r5, r1, #3
 80096ee:	f025 0503 	bic.w	r5, r5, #3
 80096f2:	3508      	adds	r5, #8
 80096f4:	2d0c      	cmp	r5, #12
 80096f6:	bf38      	it	cc
 80096f8:	250c      	movcc	r5, #12
 80096fa:	2d00      	cmp	r5, #0
 80096fc:	4606      	mov	r6, r0
 80096fe:	db01      	blt.n	8009704 <_malloc_r+0x1c>
 8009700:	42a9      	cmp	r1, r5
 8009702:	d904      	bls.n	800970e <_malloc_r+0x26>
 8009704:	230c      	movs	r3, #12
 8009706:	6033      	str	r3, [r6, #0]
 8009708:	2000      	movs	r0, #0
 800970a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800970e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80097e4 <_malloc_r+0xfc>
 8009712:	f000 f869 	bl	80097e8 <__malloc_lock>
 8009716:	f8d8 3000 	ldr.w	r3, [r8]
 800971a:	461c      	mov	r4, r3
 800971c:	bb44      	cbnz	r4, 8009770 <_malloc_r+0x88>
 800971e:	4629      	mov	r1, r5
 8009720:	4630      	mov	r0, r6
 8009722:	f7ff ffbf 	bl	80096a4 <sbrk_aligned>
 8009726:	1c43      	adds	r3, r0, #1
 8009728:	4604      	mov	r4, r0
 800972a:	d158      	bne.n	80097de <_malloc_r+0xf6>
 800972c:	f8d8 4000 	ldr.w	r4, [r8]
 8009730:	4627      	mov	r7, r4
 8009732:	2f00      	cmp	r7, #0
 8009734:	d143      	bne.n	80097be <_malloc_r+0xd6>
 8009736:	2c00      	cmp	r4, #0
 8009738:	d04b      	beq.n	80097d2 <_malloc_r+0xea>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	4639      	mov	r1, r7
 800973e:	4630      	mov	r0, r6
 8009740:	eb04 0903 	add.w	r9, r4, r3
 8009744:	f000 fe0e 	bl	800a364 <_sbrk_r>
 8009748:	4581      	cmp	r9, r0
 800974a:	d142      	bne.n	80097d2 <_malloc_r+0xea>
 800974c:	6821      	ldr	r1, [r4, #0]
 800974e:	1a6d      	subs	r5, r5, r1
 8009750:	4629      	mov	r1, r5
 8009752:	4630      	mov	r0, r6
 8009754:	f7ff ffa6 	bl	80096a4 <sbrk_aligned>
 8009758:	3001      	adds	r0, #1
 800975a:	d03a      	beq.n	80097d2 <_malloc_r+0xea>
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	442b      	add	r3, r5
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	f8d8 3000 	ldr.w	r3, [r8]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	bb62      	cbnz	r2, 80097c4 <_malloc_r+0xdc>
 800976a:	f8c8 7000 	str.w	r7, [r8]
 800976e:	e00f      	b.n	8009790 <_malloc_r+0xa8>
 8009770:	6822      	ldr	r2, [r4, #0]
 8009772:	1b52      	subs	r2, r2, r5
 8009774:	d420      	bmi.n	80097b8 <_malloc_r+0xd0>
 8009776:	2a0b      	cmp	r2, #11
 8009778:	d917      	bls.n	80097aa <_malloc_r+0xc2>
 800977a:	1961      	adds	r1, r4, r5
 800977c:	42a3      	cmp	r3, r4
 800977e:	6025      	str	r5, [r4, #0]
 8009780:	bf18      	it	ne
 8009782:	6059      	strne	r1, [r3, #4]
 8009784:	6863      	ldr	r3, [r4, #4]
 8009786:	bf08      	it	eq
 8009788:	f8c8 1000 	streq.w	r1, [r8]
 800978c:	5162      	str	r2, [r4, r5]
 800978e:	604b      	str	r3, [r1, #4]
 8009790:	4630      	mov	r0, r6
 8009792:	f000 f82f 	bl	80097f4 <__malloc_unlock>
 8009796:	f104 000b 	add.w	r0, r4, #11
 800979a:	1d23      	adds	r3, r4, #4
 800979c:	f020 0007 	bic.w	r0, r0, #7
 80097a0:	1ac2      	subs	r2, r0, r3
 80097a2:	bf1c      	itt	ne
 80097a4:	1a1b      	subne	r3, r3, r0
 80097a6:	50a3      	strne	r3, [r4, r2]
 80097a8:	e7af      	b.n	800970a <_malloc_r+0x22>
 80097aa:	6862      	ldr	r2, [r4, #4]
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	bf0c      	ite	eq
 80097b0:	f8c8 2000 	streq.w	r2, [r8]
 80097b4:	605a      	strne	r2, [r3, #4]
 80097b6:	e7eb      	b.n	8009790 <_malloc_r+0xa8>
 80097b8:	4623      	mov	r3, r4
 80097ba:	6864      	ldr	r4, [r4, #4]
 80097bc:	e7ae      	b.n	800971c <_malloc_r+0x34>
 80097be:	463c      	mov	r4, r7
 80097c0:	687f      	ldr	r7, [r7, #4]
 80097c2:	e7b6      	b.n	8009732 <_malloc_r+0x4a>
 80097c4:	461a      	mov	r2, r3
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d1fb      	bne.n	80097c4 <_malloc_r+0xdc>
 80097cc:	2300      	movs	r3, #0
 80097ce:	6053      	str	r3, [r2, #4]
 80097d0:	e7de      	b.n	8009790 <_malloc_r+0xa8>
 80097d2:	230c      	movs	r3, #12
 80097d4:	6033      	str	r3, [r6, #0]
 80097d6:	4630      	mov	r0, r6
 80097d8:	f000 f80c 	bl	80097f4 <__malloc_unlock>
 80097dc:	e794      	b.n	8009708 <_malloc_r+0x20>
 80097de:	6005      	str	r5, [r0, #0]
 80097e0:	e7d6      	b.n	8009790 <_malloc_r+0xa8>
 80097e2:	bf00      	nop
 80097e4:	20000c40 	.word	0x20000c40

080097e8 <__malloc_lock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	@ (80097f0 <__malloc_lock+0x8>)
 80097ea:	f7ff b89a 	b.w	8008922 <__retarget_lock_acquire_recursive>
 80097ee:	bf00      	nop
 80097f0:	20000c38 	.word	0x20000c38

080097f4 <__malloc_unlock>:
 80097f4:	4801      	ldr	r0, [pc, #4]	@ (80097fc <__malloc_unlock+0x8>)
 80097f6:	f7ff b895 	b.w	8008924 <__retarget_lock_release_recursive>
 80097fa:	bf00      	nop
 80097fc:	20000c38 	.word	0x20000c38

08009800 <_Balloc>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	69c6      	ldr	r6, [r0, #28]
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	b976      	cbnz	r6, 8009828 <_Balloc+0x28>
 800980a:	2010      	movs	r0, #16
 800980c:	f7ff ff42 	bl	8009694 <malloc>
 8009810:	4602      	mov	r2, r0
 8009812:	61e0      	str	r0, [r4, #28]
 8009814:	b920      	cbnz	r0, 8009820 <_Balloc+0x20>
 8009816:	4b18      	ldr	r3, [pc, #96]	@ (8009878 <_Balloc+0x78>)
 8009818:	4818      	ldr	r0, [pc, #96]	@ (800987c <_Balloc+0x7c>)
 800981a:	216b      	movs	r1, #107	@ 0x6b
 800981c:	f7ff f884 	bl	8008928 <__assert_func>
 8009820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009824:	6006      	str	r6, [r0, #0]
 8009826:	60c6      	str	r6, [r0, #12]
 8009828:	69e6      	ldr	r6, [r4, #28]
 800982a:	68f3      	ldr	r3, [r6, #12]
 800982c:	b183      	cbz	r3, 8009850 <_Balloc+0x50>
 800982e:	69e3      	ldr	r3, [r4, #28]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009836:	b9b8      	cbnz	r0, 8009868 <_Balloc+0x68>
 8009838:	2101      	movs	r1, #1
 800983a:	fa01 f605 	lsl.w	r6, r1, r5
 800983e:	1d72      	adds	r2, r6, #5
 8009840:	0092      	lsls	r2, r2, #2
 8009842:	4620      	mov	r0, r4
 8009844:	f000 fdb3 	bl	800a3ae <_calloc_r>
 8009848:	b160      	cbz	r0, 8009864 <_Balloc+0x64>
 800984a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800984e:	e00e      	b.n	800986e <_Balloc+0x6e>
 8009850:	2221      	movs	r2, #33	@ 0x21
 8009852:	2104      	movs	r1, #4
 8009854:	4620      	mov	r0, r4
 8009856:	f000 fdaa 	bl	800a3ae <_calloc_r>
 800985a:	69e3      	ldr	r3, [r4, #28]
 800985c:	60f0      	str	r0, [r6, #12]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e4      	bne.n	800982e <_Balloc+0x2e>
 8009864:	2000      	movs	r0, #0
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	6802      	ldr	r2, [r0, #0]
 800986a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800986e:	2300      	movs	r3, #0
 8009870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009874:	e7f7      	b.n	8009866 <_Balloc+0x66>
 8009876:	bf00      	nop
 8009878:	0800b019 	.word	0x0800b019
 800987c:	0800b13c 	.word	0x0800b13c

08009880 <_Bfree>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	69c6      	ldr	r6, [r0, #28]
 8009884:	4605      	mov	r5, r0
 8009886:	460c      	mov	r4, r1
 8009888:	b976      	cbnz	r6, 80098a8 <_Bfree+0x28>
 800988a:	2010      	movs	r0, #16
 800988c:	f7ff ff02 	bl	8009694 <malloc>
 8009890:	4602      	mov	r2, r0
 8009892:	61e8      	str	r0, [r5, #28]
 8009894:	b920      	cbnz	r0, 80098a0 <_Bfree+0x20>
 8009896:	4b09      	ldr	r3, [pc, #36]	@ (80098bc <_Bfree+0x3c>)
 8009898:	4809      	ldr	r0, [pc, #36]	@ (80098c0 <_Bfree+0x40>)
 800989a:	218f      	movs	r1, #143	@ 0x8f
 800989c:	f7ff f844 	bl	8008928 <__assert_func>
 80098a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098a4:	6006      	str	r6, [r0, #0]
 80098a6:	60c6      	str	r6, [r0, #12]
 80098a8:	b13c      	cbz	r4, 80098ba <_Bfree+0x3a>
 80098aa:	69eb      	ldr	r3, [r5, #28]
 80098ac:	6862      	ldr	r2, [r4, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098b4:	6021      	str	r1, [r4, #0]
 80098b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	0800b019 	.word	0x0800b019
 80098c0:	0800b13c 	.word	0x0800b13c

080098c4 <__multadd>:
 80098c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c8:	690d      	ldr	r5, [r1, #16]
 80098ca:	4607      	mov	r7, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	461e      	mov	r6, r3
 80098d0:	f101 0c14 	add.w	ip, r1, #20
 80098d4:	2000      	movs	r0, #0
 80098d6:	f8dc 3000 	ldr.w	r3, [ip]
 80098da:	b299      	uxth	r1, r3
 80098dc:	fb02 6101 	mla	r1, r2, r1, r6
 80098e0:	0c1e      	lsrs	r6, r3, #16
 80098e2:	0c0b      	lsrs	r3, r1, #16
 80098e4:	fb02 3306 	mla	r3, r2, r6, r3
 80098e8:	b289      	uxth	r1, r1
 80098ea:	3001      	adds	r0, #1
 80098ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098f0:	4285      	cmp	r5, r0
 80098f2:	f84c 1b04 	str.w	r1, [ip], #4
 80098f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098fa:	dcec      	bgt.n	80098d6 <__multadd+0x12>
 80098fc:	b30e      	cbz	r6, 8009942 <__multadd+0x7e>
 80098fe:	68a3      	ldr	r3, [r4, #8]
 8009900:	42ab      	cmp	r3, r5
 8009902:	dc19      	bgt.n	8009938 <__multadd+0x74>
 8009904:	6861      	ldr	r1, [r4, #4]
 8009906:	4638      	mov	r0, r7
 8009908:	3101      	adds	r1, #1
 800990a:	f7ff ff79 	bl	8009800 <_Balloc>
 800990e:	4680      	mov	r8, r0
 8009910:	b928      	cbnz	r0, 800991e <__multadd+0x5a>
 8009912:	4602      	mov	r2, r0
 8009914:	4b0c      	ldr	r3, [pc, #48]	@ (8009948 <__multadd+0x84>)
 8009916:	480d      	ldr	r0, [pc, #52]	@ (800994c <__multadd+0x88>)
 8009918:	21ba      	movs	r1, #186	@ 0xba
 800991a:	f7ff f805 	bl	8008928 <__assert_func>
 800991e:	6922      	ldr	r2, [r4, #16]
 8009920:	3202      	adds	r2, #2
 8009922:	f104 010c 	add.w	r1, r4, #12
 8009926:	0092      	lsls	r2, r2, #2
 8009928:	300c      	adds	r0, #12
 800992a:	f000 fd2b 	bl	800a384 <memcpy>
 800992e:	4621      	mov	r1, r4
 8009930:	4638      	mov	r0, r7
 8009932:	f7ff ffa5 	bl	8009880 <_Bfree>
 8009936:	4644      	mov	r4, r8
 8009938:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800993c:	3501      	adds	r5, #1
 800993e:	615e      	str	r6, [r3, #20]
 8009940:	6125      	str	r5, [r4, #16]
 8009942:	4620      	mov	r0, r4
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	0800b12b 	.word	0x0800b12b
 800994c:	0800b13c 	.word	0x0800b13c

08009950 <__hi0bits>:
 8009950:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009954:	4603      	mov	r3, r0
 8009956:	bf36      	itet	cc
 8009958:	0403      	lslcc	r3, r0, #16
 800995a:	2000      	movcs	r0, #0
 800995c:	2010      	movcc	r0, #16
 800995e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009962:	bf3c      	itt	cc
 8009964:	021b      	lslcc	r3, r3, #8
 8009966:	3008      	addcc	r0, #8
 8009968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800996c:	bf3c      	itt	cc
 800996e:	011b      	lslcc	r3, r3, #4
 8009970:	3004      	addcc	r0, #4
 8009972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009976:	bf3c      	itt	cc
 8009978:	009b      	lslcc	r3, r3, #2
 800997a:	3002      	addcc	r0, #2
 800997c:	2b00      	cmp	r3, #0
 800997e:	db05      	blt.n	800998c <__hi0bits+0x3c>
 8009980:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009984:	f100 0001 	add.w	r0, r0, #1
 8009988:	bf08      	it	eq
 800998a:	2020      	moveq	r0, #32
 800998c:	4770      	bx	lr

0800998e <__lo0bits>:
 800998e:	6803      	ldr	r3, [r0, #0]
 8009990:	4602      	mov	r2, r0
 8009992:	f013 0007 	ands.w	r0, r3, #7
 8009996:	d00b      	beq.n	80099b0 <__lo0bits+0x22>
 8009998:	07d9      	lsls	r1, r3, #31
 800999a:	d421      	bmi.n	80099e0 <__lo0bits+0x52>
 800999c:	0798      	lsls	r0, r3, #30
 800999e:	bf49      	itett	mi
 80099a0:	085b      	lsrmi	r3, r3, #1
 80099a2:	089b      	lsrpl	r3, r3, #2
 80099a4:	2001      	movmi	r0, #1
 80099a6:	6013      	strmi	r3, [r2, #0]
 80099a8:	bf5c      	itt	pl
 80099aa:	6013      	strpl	r3, [r2, #0]
 80099ac:	2002      	movpl	r0, #2
 80099ae:	4770      	bx	lr
 80099b0:	b299      	uxth	r1, r3
 80099b2:	b909      	cbnz	r1, 80099b8 <__lo0bits+0x2a>
 80099b4:	0c1b      	lsrs	r3, r3, #16
 80099b6:	2010      	movs	r0, #16
 80099b8:	b2d9      	uxtb	r1, r3
 80099ba:	b909      	cbnz	r1, 80099c0 <__lo0bits+0x32>
 80099bc:	3008      	adds	r0, #8
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	0719      	lsls	r1, r3, #28
 80099c2:	bf04      	itt	eq
 80099c4:	091b      	lsreq	r3, r3, #4
 80099c6:	3004      	addeq	r0, #4
 80099c8:	0799      	lsls	r1, r3, #30
 80099ca:	bf04      	itt	eq
 80099cc:	089b      	lsreq	r3, r3, #2
 80099ce:	3002      	addeq	r0, #2
 80099d0:	07d9      	lsls	r1, r3, #31
 80099d2:	d403      	bmi.n	80099dc <__lo0bits+0x4e>
 80099d4:	085b      	lsrs	r3, r3, #1
 80099d6:	f100 0001 	add.w	r0, r0, #1
 80099da:	d003      	beq.n	80099e4 <__lo0bits+0x56>
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	4770      	bx	lr
 80099e0:	2000      	movs	r0, #0
 80099e2:	4770      	bx	lr
 80099e4:	2020      	movs	r0, #32
 80099e6:	4770      	bx	lr

080099e8 <__i2b>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	460c      	mov	r4, r1
 80099ec:	2101      	movs	r1, #1
 80099ee:	f7ff ff07 	bl	8009800 <_Balloc>
 80099f2:	4602      	mov	r2, r0
 80099f4:	b928      	cbnz	r0, 8009a02 <__i2b+0x1a>
 80099f6:	4b05      	ldr	r3, [pc, #20]	@ (8009a0c <__i2b+0x24>)
 80099f8:	4805      	ldr	r0, [pc, #20]	@ (8009a10 <__i2b+0x28>)
 80099fa:	f240 1145 	movw	r1, #325	@ 0x145
 80099fe:	f7fe ff93 	bl	8008928 <__assert_func>
 8009a02:	2301      	movs	r3, #1
 8009a04:	6144      	str	r4, [r0, #20]
 8009a06:	6103      	str	r3, [r0, #16]
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0800b12b 	.word	0x0800b12b
 8009a10:	0800b13c 	.word	0x0800b13c

08009a14 <__multiply>:
 8009a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	4614      	mov	r4, r2
 8009a1a:	690a      	ldr	r2, [r1, #16]
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	bfa8      	it	ge
 8009a22:	4623      	movge	r3, r4
 8009a24:	460f      	mov	r7, r1
 8009a26:	bfa4      	itt	ge
 8009a28:	460c      	movge	r4, r1
 8009a2a:	461f      	movge	r7, r3
 8009a2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009a30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009a34:	68a3      	ldr	r3, [r4, #8]
 8009a36:	6861      	ldr	r1, [r4, #4]
 8009a38:	eb0a 0609 	add.w	r6, sl, r9
 8009a3c:	42b3      	cmp	r3, r6
 8009a3e:	b085      	sub	sp, #20
 8009a40:	bfb8      	it	lt
 8009a42:	3101      	addlt	r1, #1
 8009a44:	f7ff fedc 	bl	8009800 <_Balloc>
 8009a48:	b930      	cbnz	r0, 8009a58 <__multiply+0x44>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	4b44      	ldr	r3, [pc, #272]	@ (8009b60 <__multiply+0x14c>)
 8009a4e:	4845      	ldr	r0, [pc, #276]	@ (8009b64 <__multiply+0x150>)
 8009a50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a54:	f7fe ff68 	bl	8008928 <__assert_func>
 8009a58:	f100 0514 	add.w	r5, r0, #20
 8009a5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a60:	462b      	mov	r3, r5
 8009a62:	2200      	movs	r2, #0
 8009a64:	4543      	cmp	r3, r8
 8009a66:	d321      	bcc.n	8009aac <__multiply+0x98>
 8009a68:	f107 0114 	add.w	r1, r7, #20
 8009a6c:	f104 0214 	add.w	r2, r4, #20
 8009a70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009a74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009a78:	9302      	str	r3, [sp, #8]
 8009a7a:	1b13      	subs	r3, r2, r4
 8009a7c:	3b15      	subs	r3, #21
 8009a7e:	f023 0303 	bic.w	r3, r3, #3
 8009a82:	3304      	adds	r3, #4
 8009a84:	f104 0715 	add.w	r7, r4, #21
 8009a88:	42ba      	cmp	r2, r7
 8009a8a:	bf38      	it	cc
 8009a8c:	2304      	movcc	r3, #4
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	9b02      	ldr	r3, [sp, #8]
 8009a92:	9103      	str	r1, [sp, #12]
 8009a94:	428b      	cmp	r3, r1
 8009a96:	d80c      	bhi.n	8009ab2 <__multiply+0x9e>
 8009a98:	2e00      	cmp	r6, #0
 8009a9a:	dd03      	ble.n	8009aa4 <__multiply+0x90>
 8009a9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d05b      	beq.n	8009b5c <__multiply+0x148>
 8009aa4:	6106      	str	r6, [r0, #16]
 8009aa6:	b005      	add	sp, #20
 8009aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aac:	f843 2b04 	str.w	r2, [r3], #4
 8009ab0:	e7d8      	b.n	8009a64 <__multiply+0x50>
 8009ab2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ab6:	f1ba 0f00 	cmp.w	sl, #0
 8009aba:	d024      	beq.n	8009b06 <__multiply+0xf2>
 8009abc:	f104 0e14 	add.w	lr, r4, #20
 8009ac0:	46a9      	mov	r9, r5
 8009ac2:	f04f 0c00 	mov.w	ip, #0
 8009ac6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009aca:	f8d9 3000 	ldr.w	r3, [r9]
 8009ace:	fa1f fb87 	uxth.w	fp, r7
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ad8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009adc:	f8d9 7000 	ldr.w	r7, [r9]
 8009ae0:	4463      	add	r3, ip
 8009ae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ae6:	fb0a c70b 	mla	r7, sl, fp, ip
 8009aea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009af4:	4572      	cmp	r2, lr
 8009af6:	f849 3b04 	str.w	r3, [r9], #4
 8009afa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009afe:	d8e2      	bhi.n	8009ac6 <__multiply+0xb2>
 8009b00:	9b01      	ldr	r3, [sp, #4]
 8009b02:	f845 c003 	str.w	ip, [r5, r3]
 8009b06:	9b03      	ldr	r3, [sp, #12]
 8009b08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b0c:	3104      	adds	r1, #4
 8009b0e:	f1b9 0f00 	cmp.w	r9, #0
 8009b12:	d021      	beq.n	8009b58 <__multiply+0x144>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	f104 0c14 	add.w	ip, r4, #20
 8009b1a:	46ae      	mov	lr, r5
 8009b1c:	f04f 0a00 	mov.w	sl, #0
 8009b20:	f8bc b000 	ldrh.w	fp, [ip]
 8009b24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009b28:	fb09 770b 	mla	r7, r9, fp, r7
 8009b2c:	4457      	add	r7, sl
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b34:	f84e 3b04 	str.w	r3, [lr], #4
 8009b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b40:	f8be 3000 	ldrh.w	r3, [lr]
 8009b44:	fb09 330a 	mla	r3, r9, sl, r3
 8009b48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b4c:	4562      	cmp	r2, ip
 8009b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b52:	d8e5      	bhi.n	8009b20 <__multiply+0x10c>
 8009b54:	9f01      	ldr	r7, [sp, #4]
 8009b56:	51eb      	str	r3, [r5, r7]
 8009b58:	3504      	adds	r5, #4
 8009b5a:	e799      	b.n	8009a90 <__multiply+0x7c>
 8009b5c:	3e01      	subs	r6, #1
 8009b5e:	e79b      	b.n	8009a98 <__multiply+0x84>
 8009b60:	0800b12b 	.word	0x0800b12b
 8009b64:	0800b13c 	.word	0x0800b13c

08009b68 <__pow5mult>:
 8009b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b6c:	4615      	mov	r5, r2
 8009b6e:	f012 0203 	ands.w	r2, r2, #3
 8009b72:	4607      	mov	r7, r0
 8009b74:	460e      	mov	r6, r1
 8009b76:	d007      	beq.n	8009b88 <__pow5mult+0x20>
 8009b78:	4c25      	ldr	r4, [pc, #148]	@ (8009c10 <__pow5mult+0xa8>)
 8009b7a:	3a01      	subs	r2, #1
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b82:	f7ff fe9f 	bl	80098c4 <__multadd>
 8009b86:	4606      	mov	r6, r0
 8009b88:	10ad      	asrs	r5, r5, #2
 8009b8a:	d03d      	beq.n	8009c08 <__pow5mult+0xa0>
 8009b8c:	69fc      	ldr	r4, [r7, #28]
 8009b8e:	b97c      	cbnz	r4, 8009bb0 <__pow5mult+0x48>
 8009b90:	2010      	movs	r0, #16
 8009b92:	f7ff fd7f 	bl	8009694 <malloc>
 8009b96:	4602      	mov	r2, r0
 8009b98:	61f8      	str	r0, [r7, #28]
 8009b9a:	b928      	cbnz	r0, 8009ba8 <__pow5mult+0x40>
 8009b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c14 <__pow5mult+0xac>)
 8009b9e:	481e      	ldr	r0, [pc, #120]	@ (8009c18 <__pow5mult+0xb0>)
 8009ba0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009ba4:	f7fe fec0 	bl	8008928 <__assert_func>
 8009ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bac:	6004      	str	r4, [r0, #0]
 8009bae:	60c4      	str	r4, [r0, #12]
 8009bb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bb8:	b94c      	cbnz	r4, 8009bce <__pow5mult+0x66>
 8009bba:	f240 2171 	movw	r1, #625	@ 0x271
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f7ff ff12 	bl	80099e8 <__i2b>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bca:	4604      	mov	r4, r0
 8009bcc:	6003      	str	r3, [r0, #0]
 8009bce:	f04f 0900 	mov.w	r9, #0
 8009bd2:	07eb      	lsls	r3, r5, #31
 8009bd4:	d50a      	bpl.n	8009bec <__pow5mult+0x84>
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	4622      	mov	r2, r4
 8009bda:	4638      	mov	r0, r7
 8009bdc:	f7ff ff1a 	bl	8009a14 <__multiply>
 8009be0:	4631      	mov	r1, r6
 8009be2:	4680      	mov	r8, r0
 8009be4:	4638      	mov	r0, r7
 8009be6:	f7ff fe4b 	bl	8009880 <_Bfree>
 8009bea:	4646      	mov	r6, r8
 8009bec:	106d      	asrs	r5, r5, #1
 8009bee:	d00b      	beq.n	8009c08 <__pow5mult+0xa0>
 8009bf0:	6820      	ldr	r0, [r4, #0]
 8009bf2:	b938      	cbnz	r0, 8009c04 <__pow5mult+0x9c>
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	f7ff ff0b 	bl	8009a14 <__multiply>
 8009bfe:	6020      	str	r0, [r4, #0]
 8009c00:	f8c0 9000 	str.w	r9, [r0]
 8009c04:	4604      	mov	r4, r0
 8009c06:	e7e4      	b.n	8009bd2 <__pow5mult+0x6a>
 8009c08:	4630      	mov	r0, r6
 8009c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c0e:	bf00      	nop
 8009c10:	0800b198 	.word	0x0800b198
 8009c14:	0800b019 	.word	0x0800b019
 8009c18:	0800b13c 	.word	0x0800b13c

08009c1c <__lshift>:
 8009c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c20:	460c      	mov	r4, r1
 8009c22:	6849      	ldr	r1, [r1, #4]
 8009c24:	6923      	ldr	r3, [r4, #16]
 8009c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c2a:	68a3      	ldr	r3, [r4, #8]
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	4691      	mov	r9, r2
 8009c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c34:	f108 0601 	add.w	r6, r8, #1
 8009c38:	42b3      	cmp	r3, r6
 8009c3a:	db0b      	blt.n	8009c54 <__lshift+0x38>
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	f7ff fddf 	bl	8009800 <_Balloc>
 8009c42:	4605      	mov	r5, r0
 8009c44:	b948      	cbnz	r0, 8009c5a <__lshift+0x3e>
 8009c46:	4602      	mov	r2, r0
 8009c48:	4b28      	ldr	r3, [pc, #160]	@ (8009cec <__lshift+0xd0>)
 8009c4a:	4829      	ldr	r0, [pc, #164]	@ (8009cf0 <__lshift+0xd4>)
 8009c4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c50:	f7fe fe6a 	bl	8008928 <__assert_func>
 8009c54:	3101      	adds	r1, #1
 8009c56:	005b      	lsls	r3, r3, #1
 8009c58:	e7ee      	b.n	8009c38 <__lshift+0x1c>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f100 0114 	add.w	r1, r0, #20
 8009c60:	f100 0210 	add.w	r2, r0, #16
 8009c64:	4618      	mov	r0, r3
 8009c66:	4553      	cmp	r3, sl
 8009c68:	db33      	blt.n	8009cd2 <__lshift+0xb6>
 8009c6a:	6920      	ldr	r0, [r4, #16]
 8009c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c70:	f104 0314 	add.w	r3, r4, #20
 8009c74:	f019 091f 	ands.w	r9, r9, #31
 8009c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c80:	d02b      	beq.n	8009cda <__lshift+0xbe>
 8009c82:	f1c9 0e20 	rsb	lr, r9, #32
 8009c86:	468a      	mov	sl, r1
 8009c88:	2200      	movs	r2, #0
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8009c90:	4310      	orrs	r0, r2
 8009c92:	f84a 0b04 	str.w	r0, [sl], #4
 8009c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c9a:	459c      	cmp	ip, r3
 8009c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ca0:	d8f3      	bhi.n	8009c8a <__lshift+0x6e>
 8009ca2:	ebac 0304 	sub.w	r3, ip, r4
 8009ca6:	3b15      	subs	r3, #21
 8009ca8:	f023 0303 	bic.w	r3, r3, #3
 8009cac:	3304      	adds	r3, #4
 8009cae:	f104 0015 	add.w	r0, r4, #21
 8009cb2:	4584      	cmp	ip, r0
 8009cb4:	bf38      	it	cc
 8009cb6:	2304      	movcc	r3, #4
 8009cb8:	50ca      	str	r2, [r1, r3]
 8009cba:	b10a      	cbz	r2, 8009cc0 <__lshift+0xa4>
 8009cbc:	f108 0602 	add.w	r6, r8, #2
 8009cc0:	3e01      	subs	r6, #1
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	612e      	str	r6, [r5, #16]
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	f7ff fdda 	bl	8009880 <_Bfree>
 8009ccc:	4628      	mov	r0, r5
 8009cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	e7c5      	b.n	8009c66 <__lshift+0x4a>
 8009cda:	3904      	subs	r1, #4
 8009cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ce4:	459c      	cmp	ip, r3
 8009ce6:	d8f9      	bhi.n	8009cdc <__lshift+0xc0>
 8009ce8:	e7ea      	b.n	8009cc0 <__lshift+0xa4>
 8009cea:	bf00      	nop
 8009cec:	0800b12b 	.word	0x0800b12b
 8009cf0:	0800b13c 	.word	0x0800b13c

08009cf4 <__mcmp>:
 8009cf4:	690a      	ldr	r2, [r1, #16]
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	6900      	ldr	r0, [r0, #16]
 8009cfa:	1a80      	subs	r0, r0, r2
 8009cfc:	b530      	push	{r4, r5, lr}
 8009cfe:	d10e      	bne.n	8009d1e <__mcmp+0x2a>
 8009d00:	3314      	adds	r3, #20
 8009d02:	3114      	adds	r1, #20
 8009d04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d14:	4295      	cmp	r5, r2
 8009d16:	d003      	beq.n	8009d20 <__mcmp+0x2c>
 8009d18:	d205      	bcs.n	8009d26 <__mcmp+0x32>
 8009d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1e:	bd30      	pop	{r4, r5, pc}
 8009d20:	42a3      	cmp	r3, r4
 8009d22:	d3f3      	bcc.n	8009d0c <__mcmp+0x18>
 8009d24:	e7fb      	b.n	8009d1e <__mcmp+0x2a>
 8009d26:	2001      	movs	r0, #1
 8009d28:	e7f9      	b.n	8009d1e <__mcmp+0x2a>
	...

08009d2c <__mdiff>:
 8009d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	4689      	mov	r9, r1
 8009d32:	4606      	mov	r6, r0
 8009d34:	4611      	mov	r1, r2
 8009d36:	4648      	mov	r0, r9
 8009d38:	4614      	mov	r4, r2
 8009d3a:	f7ff ffdb 	bl	8009cf4 <__mcmp>
 8009d3e:	1e05      	subs	r5, r0, #0
 8009d40:	d112      	bne.n	8009d68 <__mdiff+0x3c>
 8009d42:	4629      	mov	r1, r5
 8009d44:	4630      	mov	r0, r6
 8009d46:	f7ff fd5b 	bl	8009800 <_Balloc>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	b928      	cbnz	r0, 8009d5a <__mdiff+0x2e>
 8009d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8009e4c <__mdiff+0x120>)
 8009d50:	f240 2137 	movw	r1, #567	@ 0x237
 8009d54:	483e      	ldr	r0, [pc, #248]	@ (8009e50 <__mdiff+0x124>)
 8009d56:	f7fe fde7 	bl	8008928 <__assert_func>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d60:	4610      	mov	r0, r2
 8009d62:	b003      	add	sp, #12
 8009d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d68:	bfbc      	itt	lt
 8009d6a:	464b      	movlt	r3, r9
 8009d6c:	46a1      	movlt	r9, r4
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d74:	bfba      	itte	lt
 8009d76:	461c      	movlt	r4, r3
 8009d78:	2501      	movlt	r5, #1
 8009d7a:	2500      	movge	r5, #0
 8009d7c:	f7ff fd40 	bl	8009800 <_Balloc>
 8009d80:	4602      	mov	r2, r0
 8009d82:	b918      	cbnz	r0, 8009d8c <__mdiff+0x60>
 8009d84:	4b31      	ldr	r3, [pc, #196]	@ (8009e4c <__mdiff+0x120>)
 8009d86:	f240 2145 	movw	r1, #581	@ 0x245
 8009d8a:	e7e3      	b.n	8009d54 <__mdiff+0x28>
 8009d8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d90:	6926      	ldr	r6, [r4, #16]
 8009d92:	60c5      	str	r5, [r0, #12]
 8009d94:	f109 0310 	add.w	r3, r9, #16
 8009d98:	f109 0514 	add.w	r5, r9, #20
 8009d9c:	f104 0e14 	add.w	lr, r4, #20
 8009da0:	f100 0b14 	add.w	fp, r0, #20
 8009da4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009da8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	46d9      	mov	r9, fp
 8009db0:	f04f 0c00 	mov.w	ip, #0
 8009db4:	9b01      	ldr	r3, [sp, #4]
 8009db6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009dba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	fa1f f38a 	uxth.w	r3, sl
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	b283      	uxth	r3, r0
 8009dc8:	1acb      	subs	r3, r1, r3
 8009dca:	0c00      	lsrs	r0, r0, #16
 8009dcc:	4463      	add	r3, ip
 8009dce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009dd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ddc:	4576      	cmp	r6, lr
 8009dde:	f849 3b04 	str.w	r3, [r9], #4
 8009de2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009de6:	d8e5      	bhi.n	8009db4 <__mdiff+0x88>
 8009de8:	1b33      	subs	r3, r6, r4
 8009dea:	3b15      	subs	r3, #21
 8009dec:	f023 0303 	bic.w	r3, r3, #3
 8009df0:	3415      	adds	r4, #21
 8009df2:	3304      	adds	r3, #4
 8009df4:	42a6      	cmp	r6, r4
 8009df6:	bf38      	it	cc
 8009df8:	2304      	movcc	r3, #4
 8009dfa:	441d      	add	r5, r3
 8009dfc:	445b      	add	r3, fp
 8009dfe:	461e      	mov	r6, r3
 8009e00:	462c      	mov	r4, r5
 8009e02:	4544      	cmp	r4, r8
 8009e04:	d30e      	bcc.n	8009e24 <__mdiff+0xf8>
 8009e06:	f108 0103 	add.w	r1, r8, #3
 8009e0a:	1b49      	subs	r1, r1, r5
 8009e0c:	f021 0103 	bic.w	r1, r1, #3
 8009e10:	3d03      	subs	r5, #3
 8009e12:	45a8      	cmp	r8, r5
 8009e14:	bf38      	it	cc
 8009e16:	2100      	movcc	r1, #0
 8009e18:	440b      	add	r3, r1
 8009e1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e1e:	b191      	cbz	r1, 8009e46 <__mdiff+0x11a>
 8009e20:	6117      	str	r7, [r2, #16]
 8009e22:	e79d      	b.n	8009d60 <__mdiff+0x34>
 8009e24:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e28:	46e6      	mov	lr, ip
 8009e2a:	0c08      	lsrs	r0, r1, #16
 8009e2c:	fa1c fc81 	uxtah	ip, ip, r1
 8009e30:	4471      	add	r1, lr
 8009e32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e36:	b289      	uxth	r1, r1
 8009e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e3c:	f846 1b04 	str.w	r1, [r6], #4
 8009e40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e44:	e7dd      	b.n	8009e02 <__mdiff+0xd6>
 8009e46:	3f01      	subs	r7, #1
 8009e48:	e7e7      	b.n	8009e1a <__mdiff+0xee>
 8009e4a:	bf00      	nop
 8009e4c:	0800b12b 	.word	0x0800b12b
 8009e50:	0800b13c 	.word	0x0800b13c

08009e54 <__d2b>:
 8009e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e58:	460f      	mov	r7, r1
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	ec59 8b10 	vmov	r8, r9, d0
 8009e60:	4616      	mov	r6, r2
 8009e62:	f7ff fccd 	bl	8009800 <_Balloc>
 8009e66:	4604      	mov	r4, r0
 8009e68:	b930      	cbnz	r0, 8009e78 <__d2b+0x24>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	4b23      	ldr	r3, [pc, #140]	@ (8009efc <__d2b+0xa8>)
 8009e6e:	4824      	ldr	r0, [pc, #144]	@ (8009f00 <__d2b+0xac>)
 8009e70:	f240 310f 	movw	r1, #783	@ 0x30f
 8009e74:	f7fe fd58 	bl	8008928 <__assert_func>
 8009e78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e80:	b10d      	cbz	r5, 8009e86 <__d2b+0x32>
 8009e82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e86:	9301      	str	r3, [sp, #4]
 8009e88:	f1b8 0300 	subs.w	r3, r8, #0
 8009e8c:	d023      	beq.n	8009ed6 <__d2b+0x82>
 8009e8e:	4668      	mov	r0, sp
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	f7ff fd7c 	bl	800998e <__lo0bits>
 8009e96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e9a:	b1d0      	cbz	r0, 8009ed2 <__d2b+0x7e>
 8009e9c:	f1c0 0320 	rsb	r3, r0, #32
 8009ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea4:	430b      	orrs	r3, r1
 8009ea6:	40c2      	lsrs	r2, r0
 8009ea8:	6163      	str	r3, [r4, #20]
 8009eaa:	9201      	str	r2, [sp, #4]
 8009eac:	9b01      	ldr	r3, [sp, #4]
 8009eae:	61a3      	str	r3, [r4, #24]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	bf0c      	ite	eq
 8009eb4:	2201      	moveq	r2, #1
 8009eb6:	2202      	movne	r2, #2
 8009eb8:	6122      	str	r2, [r4, #16]
 8009eba:	b1a5      	cbz	r5, 8009ee6 <__d2b+0x92>
 8009ebc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009ec0:	4405      	add	r5, r0
 8009ec2:	603d      	str	r5, [r7, #0]
 8009ec4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009ec8:	6030      	str	r0, [r6, #0]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	b003      	add	sp, #12
 8009ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ed2:	6161      	str	r1, [r4, #20]
 8009ed4:	e7ea      	b.n	8009eac <__d2b+0x58>
 8009ed6:	a801      	add	r0, sp, #4
 8009ed8:	f7ff fd59 	bl	800998e <__lo0bits>
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	6163      	str	r3, [r4, #20]
 8009ee0:	3020      	adds	r0, #32
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	e7e8      	b.n	8009eb8 <__d2b+0x64>
 8009ee6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009eea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009eee:	6038      	str	r0, [r7, #0]
 8009ef0:	6918      	ldr	r0, [r3, #16]
 8009ef2:	f7ff fd2d 	bl	8009950 <__hi0bits>
 8009ef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009efa:	e7e5      	b.n	8009ec8 <__d2b+0x74>
 8009efc:	0800b12b 	.word	0x0800b12b
 8009f00:	0800b13c 	.word	0x0800b13c

08009f04 <__ssputs_r>:
 8009f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f08:	688e      	ldr	r6, [r1, #8]
 8009f0a:	461f      	mov	r7, r3
 8009f0c:	42be      	cmp	r6, r7
 8009f0e:	680b      	ldr	r3, [r1, #0]
 8009f10:	4682      	mov	sl, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	4690      	mov	r8, r2
 8009f16:	d82d      	bhi.n	8009f74 <__ssputs_r+0x70>
 8009f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f20:	d026      	beq.n	8009f70 <__ssputs_r+0x6c>
 8009f22:	6965      	ldr	r5, [r4, #20]
 8009f24:	6909      	ldr	r1, [r1, #16]
 8009f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f2a:	eba3 0901 	sub.w	r9, r3, r1
 8009f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f32:	1c7b      	adds	r3, r7, #1
 8009f34:	444b      	add	r3, r9
 8009f36:	106d      	asrs	r5, r5, #1
 8009f38:	429d      	cmp	r5, r3
 8009f3a:	bf38      	it	cc
 8009f3c:	461d      	movcc	r5, r3
 8009f3e:	0553      	lsls	r3, r2, #21
 8009f40:	d527      	bpl.n	8009f92 <__ssputs_r+0x8e>
 8009f42:	4629      	mov	r1, r5
 8009f44:	f7ff fbd0 	bl	80096e8 <_malloc_r>
 8009f48:	4606      	mov	r6, r0
 8009f4a:	b360      	cbz	r0, 8009fa6 <__ssputs_r+0xa2>
 8009f4c:	6921      	ldr	r1, [r4, #16]
 8009f4e:	464a      	mov	r2, r9
 8009f50:	f000 fa18 	bl	800a384 <memcpy>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f5e:	81a3      	strh	r3, [r4, #12]
 8009f60:	6126      	str	r6, [r4, #16]
 8009f62:	6165      	str	r5, [r4, #20]
 8009f64:	444e      	add	r6, r9
 8009f66:	eba5 0509 	sub.w	r5, r5, r9
 8009f6a:	6026      	str	r6, [r4, #0]
 8009f6c:	60a5      	str	r5, [r4, #8]
 8009f6e:	463e      	mov	r6, r7
 8009f70:	42be      	cmp	r6, r7
 8009f72:	d900      	bls.n	8009f76 <__ssputs_r+0x72>
 8009f74:	463e      	mov	r6, r7
 8009f76:	6820      	ldr	r0, [r4, #0]
 8009f78:	4632      	mov	r2, r6
 8009f7a:	4641      	mov	r1, r8
 8009f7c:	f000 f9d8 	bl	800a330 <memmove>
 8009f80:	68a3      	ldr	r3, [r4, #8]
 8009f82:	1b9b      	subs	r3, r3, r6
 8009f84:	60a3      	str	r3, [r4, #8]
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	4433      	add	r3, r6
 8009f8a:	6023      	str	r3, [r4, #0]
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f92:	462a      	mov	r2, r5
 8009f94:	f000 fa31 	bl	800a3fa <_realloc_r>
 8009f98:	4606      	mov	r6, r0
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d1e0      	bne.n	8009f60 <__ssputs_r+0x5c>
 8009f9e:	6921      	ldr	r1, [r4, #16]
 8009fa0:	4650      	mov	r0, sl
 8009fa2:	f7ff fb2d 	bl	8009600 <_free_r>
 8009fa6:	230c      	movs	r3, #12
 8009fa8:	f8ca 3000 	str.w	r3, [sl]
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fb2:	81a3      	strh	r3, [r4, #12]
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	e7e9      	b.n	8009f8e <__ssputs_r+0x8a>
	...

08009fbc <_svfiprintf_r>:
 8009fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc0:	4698      	mov	r8, r3
 8009fc2:	898b      	ldrh	r3, [r1, #12]
 8009fc4:	061b      	lsls	r3, r3, #24
 8009fc6:	b09d      	sub	sp, #116	@ 0x74
 8009fc8:	4607      	mov	r7, r0
 8009fca:	460d      	mov	r5, r1
 8009fcc:	4614      	mov	r4, r2
 8009fce:	d510      	bpl.n	8009ff2 <_svfiprintf_r+0x36>
 8009fd0:	690b      	ldr	r3, [r1, #16]
 8009fd2:	b973      	cbnz	r3, 8009ff2 <_svfiprintf_r+0x36>
 8009fd4:	2140      	movs	r1, #64	@ 0x40
 8009fd6:	f7ff fb87 	bl	80096e8 <_malloc_r>
 8009fda:	6028      	str	r0, [r5, #0]
 8009fdc:	6128      	str	r0, [r5, #16]
 8009fde:	b930      	cbnz	r0, 8009fee <_svfiprintf_r+0x32>
 8009fe0:	230c      	movs	r3, #12
 8009fe2:	603b      	str	r3, [r7, #0]
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	b01d      	add	sp, #116	@ 0x74
 8009fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fee:	2340      	movs	r3, #64	@ 0x40
 8009ff0:	616b      	str	r3, [r5, #20]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ff6:	2320      	movs	r3, #32
 8009ff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a000:	2330      	movs	r3, #48	@ 0x30
 800a002:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a1a0 <_svfiprintf_r+0x1e4>
 800a006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a00a:	f04f 0901 	mov.w	r9, #1
 800a00e:	4623      	mov	r3, r4
 800a010:	469a      	mov	sl, r3
 800a012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a016:	b10a      	cbz	r2, 800a01c <_svfiprintf_r+0x60>
 800a018:	2a25      	cmp	r2, #37	@ 0x25
 800a01a:	d1f9      	bne.n	800a010 <_svfiprintf_r+0x54>
 800a01c:	ebba 0b04 	subs.w	fp, sl, r4
 800a020:	d00b      	beq.n	800a03a <_svfiprintf_r+0x7e>
 800a022:	465b      	mov	r3, fp
 800a024:	4622      	mov	r2, r4
 800a026:	4629      	mov	r1, r5
 800a028:	4638      	mov	r0, r7
 800a02a:	f7ff ff6b 	bl	8009f04 <__ssputs_r>
 800a02e:	3001      	adds	r0, #1
 800a030:	f000 80a7 	beq.w	800a182 <_svfiprintf_r+0x1c6>
 800a034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a036:	445a      	add	r2, fp
 800a038:	9209      	str	r2, [sp, #36]	@ 0x24
 800a03a:	f89a 3000 	ldrb.w	r3, [sl]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 809f 	beq.w	800a182 <_svfiprintf_r+0x1c6>
 800a044:	2300      	movs	r3, #0
 800a046:	f04f 32ff 	mov.w	r2, #4294967295
 800a04a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a04e:	f10a 0a01 	add.w	sl, sl, #1
 800a052:	9304      	str	r3, [sp, #16]
 800a054:	9307      	str	r3, [sp, #28]
 800a056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a05a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a05c:	4654      	mov	r4, sl
 800a05e:	2205      	movs	r2, #5
 800a060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a064:	484e      	ldr	r0, [pc, #312]	@ (800a1a0 <_svfiprintf_r+0x1e4>)
 800a066:	f7f6 f8c3 	bl	80001f0 <memchr>
 800a06a:	9a04      	ldr	r2, [sp, #16]
 800a06c:	b9d8      	cbnz	r0, 800a0a6 <_svfiprintf_r+0xea>
 800a06e:	06d0      	lsls	r0, r2, #27
 800a070:	bf44      	itt	mi
 800a072:	2320      	movmi	r3, #32
 800a074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a078:	0711      	lsls	r1, r2, #28
 800a07a:	bf44      	itt	mi
 800a07c:	232b      	movmi	r3, #43	@ 0x2b
 800a07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a082:	f89a 3000 	ldrb.w	r3, [sl]
 800a086:	2b2a      	cmp	r3, #42	@ 0x2a
 800a088:	d015      	beq.n	800a0b6 <_svfiprintf_r+0xfa>
 800a08a:	9a07      	ldr	r2, [sp, #28]
 800a08c:	4654      	mov	r4, sl
 800a08e:	2000      	movs	r0, #0
 800a090:	f04f 0c0a 	mov.w	ip, #10
 800a094:	4621      	mov	r1, r4
 800a096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a09a:	3b30      	subs	r3, #48	@ 0x30
 800a09c:	2b09      	cmp	r3, #9
 800a09e:	d94b      	bls.n	800a138 <_svfiprintf_r+0x17c>
 800a0a0:	b1b0      	cbz	r0, 800a0d0 <_svfiprintf_r+0x114>
 800a0a2:	9207      	str	r2, [sp, #28]
 800a0a4:	e014      	b.n	800a0d0 <_svfiprintf_r+0x114>
 800a0a6:	eba0 0308 	sub.w	r3, r0, r8
 800a0aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	46a2      	mov	sl, r4
 800a0b4:	e7d2      	b.n	800a05c <_svfiprintf_r+0xa0>
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	1d19      	adds	r1, r3, #4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	9103      	str	r1, [sp, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	bfbb      	ittet	lt
 800a0c2:	425b      	neglt	r3, r3
 800a0c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0c8:	9307      	strge	r3, [sp, #28]
 800a0ca:	9307      	strlt	r3, [sp, #28]
 800a0cc:	bfb8      	it	lt
 800a0ce:	9204      	strlt	r2, [sp, #16]
 800a0d0:	7823      	ldrb	r3, [r4, #0]
 800a0d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0d4:	d10a      	bne.n	800a0ec <_svfiprintf_r+0x130>
 800a0d6:	7863      	ldrb	r3, [r4, #1]
 800a0d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0da:	d132      	bne.n	800a142 <_svfiprintf_r+0x186>
 800a0dc:	9b03      	ldr	r3, [sp, #12]
 800a0de:	1d1a      	adds	r2, r3, #4
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	9203      	str	r2, [sp, #12]
 800a0e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0e8:	3402      	adds	r4, #2
 800a0ea:	9305      	str	r3, [sp, #20]
 800a0ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a1b0 <_svfiprintf_r+0x1f4>
 800a0f0:	7821      	ldrb	r1, [r4, #0]
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	4650      	mov	r0, sl
 800a0f6:	f7f6 f87b 	bl	80001f0 <memchr>
 800a0fa:	b138      	cbz	r0, 800a10c <_svfiprintf_r+0x150>
 800a0fc:	9b04      	ldr	r3, [sp, #16]
 800a0fe:	eba0 000a 	sub.w	r0, r0, sl
 800a102:	2240      	movs	r2, #64	@ 0x40
 800a104:	4082      	lsls	r2, r0
 800a106:	4313      	orrs	r3, r2
 800a108:	3401      	adds	r4, #1
 800a10a:	9304      	str	r3, [sp, #16]
 800a10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a110:	4824      	ldr	r0, [pc, #144]	@ (800a1a4 <_svfiprintf_r+0x1e8>)
 800a112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a116:	2206      	movs	r2, #6
 800a118:	f7f6 f86a 	bl	80001f0 <memchr>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d036      	beq.n	800a18e <_svfiprintf_r+0x1d2>
 800a120:	4b21      	ldr	r3, [pc, #132]	@ (800a1a8 <_svfiprintf_r+0x1ec>)
 800a122:	bb1b      	cbnz	r3, 800a16c <_svfiprintf_r+0x1b0>
 800a124:	9b03      	ldr	r3, [sp, #12]
 800a126:	3307      	adds	r3, #7
 800a128:	f023 0307 	bic.w	r3, r3, #7
 800a12c:	3308      	adds	r3, #8
 800a12e:	9303      	str	r3, [sp, #12]
 800a130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a132:	4433      	add	r3, r6
 800a134:	9309      	str	r3, [sp, #36]	@ 0x24
 800a136:	e76a      	b.n	800a00e <_svfiprintf_r+0x52>
 800a138:	fb0c 3202 	mla	r2, ip, r2, r3
 800a13c:	460c      	mov	r4, r1
 800a13e:	2001      	movs	r0, #1
 800a140:	e7a8      	b.n	800a094 <_svfiprintf_r+0xd8>
 800a142:	2300      	movs	r3, #0
 800a144:	3401      	adds	r4, #1
 800a146:	9305      	str	r3, [sp, #20]
 800a148:	4619      	mov	r1, r3
 800a14a:	f04f 0c0a 	mov.w	ip, #10
 800a14e:	4620      	mov	r0, r4
 800a150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a154:	3a30      	subs	r2, #48	@ 0x30
 800a156:	2a09      	cmp	r2, #9
 800a158:	d903      	bls.n	800a162 <_svfiprintf_r+0x1a6>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0c6      	beq.n	800a0ec <_svfiprintf_r+0x130>
 800a15e:	9105      	str	r1, [sp, #20]
 800a160:	e7c4      	b.n	800a0ec <_svfiprintf_r+0x130>
 800a162:	fb0c 2101 	mla	r1, ip, r1, r2
 800a166:	4604      	mov	r4, r0
 800a168:	2301      	movs	r3, #1
 800a16a:	e7f0      	b.n	800a14e <_svfiprintf_r+0x192>
 800a16c:	ab03      	add	r3, sp, #12
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	462a      	mov	r2, r5
 800a172:	4b0e      	ldr	r3, [pc, #56]	@ (800a1ac <_svfiprintf_r+0x1f0>)
 800a174:	a904      	add	r1, sp, #16
 800a176:	4638      	mov	r0, r7
 800a178:	f7fd fdf6 	bl	8007d68 <_printf_float>
 800a17c:	1c42      	adds	r2, r0, #1
 800a17e:	4606      	mov	r6, r0
 800a180:	d1d6      	bne.n	800a130 <_svfiprintf_r+0x174>
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	065b      	lsls	r3, r3, #25
 800a186:	f53f af2d 	bmi.w	8009fe4 <_svfiprintf_r+0x28>
 800a18a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a18c:	e72c      	b.n	8009fe8 <_svfiprintf_r+0x2c>
 800a18e:	ab03      	add	r3, sp, #12
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	462a      	mov	r2, r5
 800a194:	4b05      	ldr	r3, [pc, #20]	@ (800a1ac <_svfiprintf_r+0x1f0>)
 800a196:	a904      	add	r1, sp, #16
 800a198:	4638      	mov	r0, r7
 800a19a:	f7fe f87d 	bl	8008298 <_printf_i>
 800a19e:	e7ed      	b.n	800a17c <_svfiprintf_r+0x1c0>
 800a1a0:	0800b298 	.word	0x0800b298
 800a1a4:	0800b2a2 	.word	0x0800b2a2
 800a1a8:	08007d69 	.word	0x08007d69
 800a1ac:	08009f05 	.word	0x08009f05
 800a1b0:	0800b29e 	.word	0x0800b29e

0800a1b4 <__sflush_r>:
 800a1b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1bc:	0716      	lsls	r6, r2, #28
 800a1be:	4605      	mov	r5, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	d454      	bmi.n	800a26e <__sflush_r+0xba>
 800a1c4:	684b      	ldr	r3, [r1, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	dc02      	bgt.n	800a1d0 <__sflush_r+0x1c>
 800a1ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dd48      	ble.n	800a262 <__sflush_r+0xae>
 800a1d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1d2:	2e00      	cmp	r6, #0
 800a1d4:	d045      	beq.n	800a262 <__sflush_r+0xae>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1dc:	682f      	ldr	r7, [r5, #0]
 800a1de:	6a21      	ldr	r1, [r4, #32]
 800a1e0:	602b      	str	r3, [r5, #0]
 800a1e2:	d030      	beq.n	800a246 <__sflush_r+0x92>
 800a1e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	0759      	lsls	r1, r3, #29
 800a1ea:	d505      	bpl.n	800a1f8 <__sflush_r+0x44>
 800a1ec:	6863      	ldr	r3, [r4, #4]
 800a1ee:	1ad2      	subs	r2, r2, r3
 800a1f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1f2:	b10b      	cbz	r3, 800a1f8 <__sflush_r+0x44>
 800a1f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1f6:	1ad2      	subs	r2, r2, r3
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1fc:	6a21      	ldr	r1, [r4, #32]
 800a1fe:	4628      	mov	r0, r5
 800a200:	47b0      	blx	r6
 800a202:	1c43      	adds	r3, r0, #1
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	d106      	bne.n	800a216 <__sflush_r+0x62>
 800a208:	6829      	ldr	r1, [r5, #0]
 800a20a:	291d      	cmp	r1, #29
 800a20c:	d82b      	bhi.n	800a266 <__sflush_r+0xb2>
 800a20e:	4a2a      	ldr	r2, [pc, #168]	@ (800a2b8 <__sflush_r+0x104>)
 800a210:	410a      	asrs	r2, r1
 800a212:	07d6      	lsls	r6, r2, #31
 800a214:	d427      	bmi.n	800a266 <__sflush_r+0xb2>
 800a216:	2200      	movs	r2, #0
 800a218:	6062      	str	r2, [r4, #4]
 800a21a:	04d9      	lsls	r1, r3, #19
 800a21c:	6922      	ldr	r2, [r4, #16]
 800a21e:	6022      	str	r2, [r4, #0]
 800a220:	d504      	bpl.n	800a22c <__sflush_r+0x78>
 800a222:	1c42      	adds	r2, r0, #1
 800a224:	d101      	bne.n	800a22a <__sflush_r+0x76>
 800a226:	682b      	ldr	r3, [r5, #0]
 800a228:	b903      	cbnz	r3, 800a22c <__sflush_r+0x78>
 800a22a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a22c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a22e:	602f      	str	r7, [r5, #0]
 800a230:	b1b9      	cbz	r1, 800a262 <__sflush_r+0xae>
 800a232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a236:	4299      	cmp	r1, r3
 800a238:	d002      	beq.n	800a240 <__sflush_r+0x8c>
 800a23a:	4628      	mov	r0, r5
 800a23c:	f7ff f9e0 	bl	8009600 <_free_r>
 800a240:	2300      	movs	r3, #0
 800a242:	6363      	str	r3, [r4, #52]	@ 0x34
 800a244:	e00d      	b.n	800a262 <__sflush_r+0xae>
 800a246:	2301      	movs	r3, #1
 800a248:	4628      	mov	r0, r5
 800a24a:	47b0      	blx	r6
 800a24c:	4602      	mov	r2, r0
 800a24e:	1c50      	adds	r0, r2, #1
 800a250:	d1c9      	bne.n	800a1e6 <__sflush_r+0x32>
 800a252:	682b      	ldr	r3, [r5, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d0c6      	beq.n	800a1e6 <__sflush_r+0x32>
 800a258:	2b1d      	cmp	r3, #29
 800a25a:	d001      	beq.n	800a260 <__sflush_r+0xac>
 800a25c:	2b16      	cmp	r3, #22
 800a25e:	d11e      	bne.n	800a29e <__sflush_r+0xea>
 800a260:	602f      	str	r7, [r5, #0]
 800a262:	2000      	movs	r0, #0
 800a264:	e022      	b.n	800a2ac <__sflush_r+0xf8>
 800a266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a26a:	b21b      	sxth	r3, r3
 800a26c:	e01b      	b.n	800a2a6 <__sflush_r+0xf2>
 800a26e:	690f      	ldr	r7, [r1, #16]
 800a270:	2f00      	cmp	r7, #0
 800a272:	d0f6      	beq.n	800a262 <__sflush_r+0xae>
 800a274:	0793      	lsls	r3, r2, #30
 800a276:	680e      	ldr	r6, [r1, #0]
 800a278:	bf08      	it	eq
 800a27a:	694b      	ldreq	r3, [r1, #20]
 800a27c:	600f      	str	r7, [r1, #0]
 800a27e:	bf18      	it	ne
 800a280:	2300      	movne	r3, #0
 800a282:	eba6 0807 	sub.w	r8, r6, r7
 800a286:	608b      	str	r3, [r1, #8]
 800a288:	f1b8 0f00 	cmp.w	r8, #0
 800a28c:	dde9      	ble.n	800a262 <__sflush_r+0xae>
 800a28e:	6a21      	ldr	r1, [r4, #32]
 800a290:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a292:	4643      	mov	r3, r8
 800a294:	463a      	mov	r2, r7
 800a296:	4628      	mov	r0, r5
 800a298:	47b0      	blx	r6
 800a29a:	2800      	cmp	r0, #0
 800a29c:	dc08      	bgt.n	800a2b0 <__sflush_r+0xfc>
 800a29e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2a6:	81a3      	strh	r3, [r4, #12]
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b0:	4407      	add	r7, r0
 800a2b2:	eba8 0800 	sub.w	r8, r8, r0
 800a2b6:	e7e7      	b.n	800a288 <__sflush_r+0xd4>
 800a2b8:	dfbffffe 	.word	0xdfbffffe

0800a2bc <_fflush_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	690b      	ldr	r3, [r1, #16]
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	b913      	cbnz	r3, 800a2cc <_fflush_r+0x10>
 800a2c6:	2500      	movs	r5, #0
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	b118      	cbz	r0, 800a2d6 <_fflush_r+0x1a>
 800a2ce:	6a03      	ldr	r3, [r0, #32]
 800a2d0:	b90b      	cbnz	r3, 800a2d6 <_fflush_r+0x1a>
 800a2d2:	f7fe f98d 	bl	80085f0 <__sinit>
 800a2d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0f3      	beq.n	800a2c6 <_fflush_r+0xa>
 800a2de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2e0:	07d0      	lsls	r0, r2, #31
 800a2e2:	d404      	bmi.n	800a2ee <_fflush_r+0x32>
 800a2e4:	0599      	lsls	r1, r3, #22
 800a2e6:	d402      	bmi.n	800a2ee <_fflush_r+0x32>
 800a2e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2ea:	f7fe fb1a 	bl	8008922 <__retarget_lock_acquire_recursive>
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	f7ff ff5f 	bl	800a1b4 <__sflush_r>
 800a2f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2f8:	07da      	lsls	r2, r3, #31
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	d4e4      	bmi.n	800a2c8 <_fflush_r+0xc>
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	059b      	lsls	r3, r3, #22
 800a302:	d4e1      	bmi.n	800a2c8 <_fflush_r+0xc>
 800a304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a306:	f7fe fb0d 	bl	8008924 <__retarget_lock_release_recursive>
 800a30a:	e7dd      	b.n	800a2c8 <_fflush_r+0xc>

0800a30c <fiprintf>:
 800a30c:	b40e      	push	{r1, r2, r3}
 800a30e:	b503      	push	{r0, r1, lr}
 800a310:	4601      	mov	r1, r0
 800a312:	ab03      	add	r3, sp, #12
 800a314:	4805      	ldr	r0, [pc, #20]	@ (800a32c <fiprintf+0x20>)
 800a316:	f853 2b04 	ldr.w	r2, [r3], #4
 800a31a:	6800      	ldr	r0, [r0, #0]
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	f000 f8d1 	bl	800a4c4 <_vfiprintf_r>
 800a322:	b002      	add	sp, #8
 800a324:	f85d eb04 	ldr.w	lr, [sp], #4
 800a328:	b003      	add	sp, #12
 800a32a:	4770      	bx	lr
 800a32c:	2000067c 	.word	0x2000067c

0800a330 <memmove>:
 800a330:	4288      	cmp	r0, r1
 800a332:	b510      	push	{r4, lr}
 800a334:	eb01 0402 	add.w	r4, r1, r2
 800a338:	d902      	bls.n	800a340 <memmove+0x10>
 800a33a:	4284      	cmp	r4, r0
 800a33c:	4623      	mov	r3, r4
 800a33e:	d807      	bhi.n	800a350 <memmove+0x20>
 800a340:	1e43      	subs	r3, r0, #1
 800a342:	42a1      	cmp	r1, r4
 800a344:	d008      	beq.n	800a358 <memmove+0x28>
 800a346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a34a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a34e:	e7f8      	b.n	800a342 <memmove+0x12>
 800a350:	4402      	add	r2, r0
 800a352:	4601      	mov	r1, r0
 800a354:	428a      	cmp	r2, r1
 800a356:	d100      	bne.n	800a35a <memmove+0x2a>
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a35e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a362:	e7f7      	b.n	800a354 <memmove+0x24>

0800a364 <_sbrk_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4d06      	ldr	r5, [pc, #24]	@ (800a380 <_sbrk_r+0x1c>)
 800a368:	2300      	movs	r3, #0
 800a36a:	4604      	mov	r4, r0
 800a36c:	4608      	mov	r0, r1
 800a36e:	602b      	str	r3, [r5, #0]
 800a370:	f7f8 fe5c 	bl	800302c <_sbrk>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_sbrk_r+0x1a>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_sbrk_r+0x1a>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	20000c34 	.word	0x20000c34

0800a384 <memcpy>:
 800a384:	440a      	add	r2, r1
 800a386:	4291      	cmp	r1, r2
 800a388:	f100 33ff 	add.w	r3, r0, #4294967295
 800a38c:	d100      	bne.n	800a390 <memcpy+0xc>
 800a38e:	4770      	bx	lr
 800a390:	b510      	push	{r4, lr}
 800a392:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a39a:	4291      	cmp	r1, r2
 800a39c:	d1f9      	bne.n	800a392 <memcpy+0xe>
 800a39e:	bd10      	pop	{r4, pc}

0800a3a0 <abort>:
 800a3a0:	b508      	push	{r3, lr}
 800a3a2:	2006      	movs	r0, #6
 800a3a4:	f000 fa62 	bl	800a86c <raise>
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	f7f8 fdc7 	bl	8002f3c <_exit>

0800a3ae <_calloc_r>:
 800a3ae:	b570      	push	{r4, r5, r6, lr}
 800a3b0:	fba1 5402 	umull	r5, r4, r1, r2
 800a3b4:	b93c      	cbnz	r4, 800a3c6 <_calloc_r+0x18>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7ff f996 	bl	80096e8 <_malloc_r>
 800a3bc:	4606      	mov	r6, r0
 800a3be:	b928      	cbnz	r0, 800a3cc <_calloc_r+0x1e>
 800a3c0:	2600      	movs	r6, #0
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	bd70      	pop	{r4, r5, r6, pc}
 800a3c6:	220c      	movs	r2, #12
 800a3c8:	6002      	str	r2, [r0, #0]
 800a3ca:	e7f9      	b.n	800a3c0 <_calloc_r+0x12>
 800a3cc:	462a      	mov	r2, r5
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	f7fe f9bb 	bl	800874a <memset>
 800a3d4:	e7f5      	b.n	800a3c2 <_calloc_r+0x14>

0800a3d6 <__ascii_mbtowc>:
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	b901      	cbnz	r1, 800a3dc <__ascii_mbtowc+0x6>
 800a3da:	a901      	add	r1, sp, #4
 800a3dc:	b142      	cbz	r2, 800a3f0 <__ascii_mbtowc+0x1a>
 800a3de:	b14b      	cbz	r3, 800a3f4 <__ascii_mbtowc+0x1e>
 800a3e0:	7813      	ldrb	r3, [r2, #0]
 800a3e2:	600b      	str	r3, [r1, #0]
 800a3e4:	7812      	ldrb	r2, [r2, #0]
 800a3e6:	1e10      	subs	r0, r2, #0
 800a3e8:	bf18      	it	ne
 800a3ea:	2001      	movne	r0, #1
 800a3ec:	b002      	add	sp, #8
 800a3ee:	4770      	bx	lr
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	e7fb      	b.n	800a3ec <__ascii_mbtowc+0x16>
 800a3f4:	f06f 0001 	mvn.w	r0, #1
 800a3f8:	e7f8      	b.n	800a3ec <__ascii_mbtowc+0x16>

0800a3fa <_realloc_r>:
 800a3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fe:	4680      	mov	r8, r0
 800a400:	4615      	mov	r5, r2
 800a402:	460c      	mov	r4, r1
 800a404:	b921      	cbnz	r1, 800a410 <_realloc_r+0x16>
 800a406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a40a:	4611      	mov	r1, r2
 800a40c:	f7ff b96c 	b.w	80096e8 <_malloc_r>
 800a410:	b92a      	cbnz	r2, 800a41e <_realloc_r+0x24>
 800a412:	f7ff f8f5 	bl	8009600 <_free_r>
 800a416:	2400      	movs	r4, #0
 800a418:	4620      	mov	r0, r4
 800a41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a41e:	f000 fa41 	bl	800a8a4 <_malloc_usable_size_r>
 800a422:	4285      	cmp	r5, r0
 800a424:	4606      	mov	r6, r0
 800a426:	d802      	bhi.n	800a42e <_realloc_r+0x34>
 800a428:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a42c:	d8f4      	bhi.n	800a418 <_realloc_r+0x1e>
 800a42e:	4629      	mov	r1, r5
 800a430:	4640      	mov	r0, r8
 800a432:	f7ff f959 	bl	80096e8 <_malloc_r>
 800a436:	4607      	mov	r7, r0
 800a438:	2800      	cmp	r0, #0
 800a43a:	d0ec      	beq.n	800a416 <_realloc_r+0x1c>
 800a43c:	42b5      	cmp	r5, r6
 800a43e:	462a      	mov	r2, r5
 800a440:	4621      	mov	r1, r4
 800a442:	bf28      	it	cs
 800a444:	4632      	movcs	r2, r6
 800a446:	f7ff ff9d 	bl	800a384 <memcpy>
 800a44a:	4621      	mov	r1, r4
 800a44c:	4640      	mov	r0, r8
 800a44e:	f7ff f8d7 	bl	8009600 <_free_r>
 800a452:	463c      	mov	r4, r7
 800a454:	e7e0      	b.n	800a418 <_realloc_r+0x1e>

0800a456 <__ascii_wctomb>:
 800a456:	4603      	mov	r3, r0
 800a458:	4608      	mov	r0, r1
 800a45a:	b141      	cbz	r1, 800a46e <__ascii_wctomb+0x18>
 800a45c:	2aff      	cmp	r2, #255	@ 0xff
 800a45e:	d904      	bls.n	800a46a <__ascii_wctomb+0x14>
 800a460:	228a      	movs	r2, #138	@ 0x8a
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	f04f 30ff 	mov.w	r0, #4294967295
 800a468:	4770      	bx	lr
 800a46a:	700a      	strb	r2, [r1, #0]
 800a46c:	2001      	movs	r0, #1
 800a46e:	4770      	bx	lr

0800a470 <__sfputc_r>:
 800a470:	6893      	ldr	r3, [r2, #8]
 800a472:	3b01      	subs	r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	b410      	push	{r4}
 800a478:	6093      	str	r3, [r2, #8]
 800a47a:	da08      	bge.n	800a48e <__sfputc_r+0x1e>
 800a47c:	6994      	ldr	r4, [r2, #24]
 800a47e:	42a3      	cmp	r3, r4
 800a480:	db01      	blt.n	800a486 <__sfputc_r+0x16>
 800a482:	290a      	cmp	r1, #10
 800a484:	d103      	bne.n	800a48e <__sfputc_r+0x1e>
 800a486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a48a:	f000 b933 	b.w	800a6f4 <__swbuf_r>
 800a48e:	6813      	ldr	r3, [r2, #0]
 800a490:	1c58      	adds	r0, r3, #1
 800a492:	6010      	str	r0, [r2, #0]
 800a494:	7019      	strb	r1, [r3, #0]
 800a496:	4608      	mov	r0, r1
 800a498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <__sfputs_r>:
 800a49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	460f      	mov	r7, r1
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	18d5      	adds	r5, r2, r3
 800a4a8:	42ac      	cmp	r4, r5
 800a4aa:	d101      	bne.n	800a4b0 <__sfputs_r+0x12>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e007      	b.n	800a4c0 <__sfputs_r+0x22>
 800a4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b4:	463a      	mov	r2, r7
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f7ff ffda 	bl	800a470 <__sfputc_r>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d1f3      	bne.n	800a4a8 <__sfputs_r+0xa>
 800a4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4c4 <_vfiprintf_r>:
 800a4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	b09d      	sub	sp, #116	@ 0x74
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	4698      	mov	r8, r3
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	b118      	cbz	r0, 800a4dc <_vfiprintf_r+0x18>
 800a4d4:	6a03      	ldr	r3, [r0, #32]
 800a4d6:	b90b      	cbnz	r3, 800a4dc <_vfiprintf_r+0x18>
 800a4d8:	f7fe f88a 	bl	80085f0 <__sinit>
 800a4dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4de:	07d9      	lsls	r1, r3, #31
 800a4e0:	d405      	bmi.n	800a4ee <_vfiprintf_r+0x2a>
 800a4e2:	89ab      	ldrh	r3, [r5, #12]
 800a4e4:	059a      	lsls	r2, r3, #22
 800a4e6:	d402      	bmi.n	800a4ee <_vfiprintf_r+0x2a>
 800a4e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4ea:	f7fe fa1a 	bl	8008922 <__retarget_lock_acquire_recursive>
 800a4ee:	89ab      	ldrh	r3, [r5, #12]
 800a4f0:	071b      	lsls	r3, r3, #28
 800a4f2:	d501      	bpl.n	800a4f8 <_vfiprintf_r+0x34>
 800a4f4:	692b      	ldr	r3, [r5, #16]
 800a4f6:	b99b      	cbnz	r3, 800a520 <_vfiprintf_r+0x5c>
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f000 f938 	bl	800a770 <__swsetup_r>
 800a500:	b170      	cbz	r0, 800a520 <_vfiprintf_r+0x5c>
 800a502:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a504:	07dc      	lsls	r4, r3, #31
 800a506:	d504      	bpl.n	800a512 <_vfiprintf_r+0x4e>
 800a508:	f04f 30ff 	mov.w	r0, #4294967295
 800a50c:	b01d      	add	sp, #116	@ 0x74
 800a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a512:	89ab      	ldrh	r3, [r5, #12]
 800a514:	0598      	lsls	r0, r3, #22
 800a516:	d4f7      	bmi.n	800a508 <_vfiprintf_r+0x44>
 800a518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a51a:	f7fe fa03 	bl	8008924 <__retarget_lock_release_recursive>
 800a51e:	e7f3      	b.n	800a508 <_vfiprintf_r+0x44>
 800a520:	2300      	movs	r3, #0
 800a522:	9309      	str	r3, [sp, #36]	@ 0x24
 800a524:	2320      	movs	r3, #32
 800a526:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a52a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a52e:	2330      	movs	r3, #48	@ 0x30
 800a530:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a6e0 <_vfiprintf_r+0x21c>
 800a534:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a538:	f04f 0901 	mov.w	r9, #1
 800a53c:	4623      	mov	r3, r4
 800a53e:	469a      	mov	sl, r3
 800a540:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a544:	b10a      	cbz	r2, 800a54a <_vfiprintf_r+0x86>
 800a546:	2a25      	cmp	r2, #37	@ 0x25
 800a548:	d1f9      	bne.n	800a53e <_vfiprintf_r+0x7a>
 800a54a:	ebba 0b04 	subs.w	fp, sl, r4
 800a54e:	d00b      	beq.n	800a568 <_vfiprintf_r+0xa4>
 800a550:	465b      	mov	r3, fp
 800a552:	4622      	mov	r2, r4
 800a554:	4629      	mov	r1, r5
 800a556:	4630      	mov	r0, r6
 800a558:	f7ff ffa1 	bl	800a49e <__sfputs_r>
 800a55c:	3001      	adds	r0, #1
 800a55e:	f000 80a7 	beq.w	800a6b0 <_vfiprintf_r+0x1ec>
 800a562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a564:	445a      	add	r2, fp
 800a566:	9209      	str	r2, [sp, #36]	@ 0x24
 800a568:	f89a 3000 	ldrb.w	r3, [sl]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 809f 	beq.w	800a6b0 <_vfiprintf_r+0x1ec>
 800a572:	2300      	movs	r3, #0
 800a574:	f04f 32ff 	mov.w	r2, #4294967295
 800a578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a57c:	f10a 0a01 	add.w	sl, sl, #1
 800a580:	9304      	str	r3, [sp, #16]
 800a582:	9307      	str	r3, [sp, #28]
 800a584:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a588:	931a      	str	r3, [sp, #104]	@ 0x68
 800a58a:	4654      	mov	r4, sl
 800a58c:	2205      	movs	r2, #5
 800a58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a592:	4853      	ldr	r0, [pc, #332]	@ (800a6e0 <_vfiprintf_r+0x21c>)
 800a594:	f7f5 fe2c 	bl	80001f0 <memchr>
 800a598:	9a04      	ldr	r2, [sp, #16]
 800a59a:	b9d8      	cbnz	r0, 800a5d4 <_vfiprintf_r+0x110>
 800a59c:	06d1      	lsls	r1, r2, #27
 800a59e:	bf44      	itt	mi
 800a5a0:	2320      	movmi	r3, #32
 800a5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5a6:	0713      	lsls	r3, r2, #28
 800a5a8:	bf44      	itt	mi
 800a5aa:	232b      	movmi	r3, #43	@ 0x2b
 800a5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5b6:	d015      	beq.n	800a5e4 <_vfiprintf_r+0x120>
 800a5b8:	9a07      	ldr	r2, [sp, #28]
 800a5ba:	4654      	mov	r4, sl
 800a5bc:	2000      	movs	r0, #0
 800a5be:	f04f 0c0a 	mov.w	ip, #10
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5c8:	3b30      	subs	r3, #48	@ 0x30
 800a5ca:	2b09      	cmp	r3, #9
 800a5cc:	d94b      	bls.n	800a666 <_vfiprintf_r+0x1a2>
 800a5ce:	b1b0      	cbz	r0, 800a5fe <_vfiprintf_r+0x13a>
 800a5d0:	9207      	str	r2, [sp, #28]
 800a5d2:	e014      	b.n	800a5fe <_vfiprintf_r+0x13a>
 800a5d4:	eba0 0308 	sub.w	r3, r0, r8
 800a5d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	9304      	str	r3, [sp, #16]
 800a5e0:	46a2      	mov	sl, r4
 800a5e2:	e7d2      	b.n	800a58a <_vfiprintf_r+0xc6>
 800a5e4:	9b03      	ldr	r3, [sp, #12]
 800a5e6:	1d19      	adds	r1, r3, #4
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	9103      	str	r1, [sp, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bfbb      	ittet	lt
 800a5f0:	425b      	neglt	r3, r3
 800a5f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a5f6:	9307      	strge	r3, [sp, #28]
 800a5f8:	9307      	strlt	r3, [sp, #28]
 800a5fa:	bfb8      	it	lt
 800a5fc:	9204      	strlt	r2, [sp, #16]
 800a5fe:	7823      	ldrb	r3, [r4, #0]
 800a600:	2b2e      	cmp	r3, #46	@ 0x2e
 800a602:	d10a      	bne.n	800a61a <_vfiprintf_r+0x156>
 800a604:	7863      	ldrb	r3, [r4, #1]
 800a606:	2b2a      	cmp	r3, #42	@ 0x2a
 800a608:	d132      	bne.n	800a670 <_vfiprintf_r+0x1ac>
 800a60a:	9b03      	ldr	r3, [sp, #12]
 800a60c:	1d1a      	adds	r2, r3, #4
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	9203      	str	r2, [sp, #12]
 800a612:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a616:	3402      	adds	r4, #2
 800a618:	9305      	str	r3, [sp, #20]
 800a61a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6f0 <_vfiprintf_r+0x22c>
 800a61e:	7821      	ldrb	r1, [r4, #0]
 800a620:	2203      	movs	r2, #3
 800a622:	4650      	mov	r0, sl
 800a624:	f7f5 fde4 	bl	80001f0 <memchr>
 800a628:	b138      	cbz	r0, 800a63a <_vfiprintf_r+0x176>
 800a62a:	9b04      	ldr	r3, [sp, #16]
 800a62c:	eba0 000a 	sub.w	r0, r0, sl
 800a630:	2240      	movs	r2, #64	@ 0x40
 800a632:	4082      	lsls	r2, r0
 800a634:	4313      	orrs	r3, r2
 800a636:	3401      	adds	r4, #1
 800a638:	9304      	str	r3, [sp, #16]
 800a63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63e:	4829      	ldr	r0, [pc, #164]	@ (800a6e4 <_vfiprintf_r+0x220>)
 800a640:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a644:	2206      	movs	r2, #6
 800a646:	f7f5 fdd3 	bl	80001f0 <memchr>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d03f      	beq.n	800a6ce <_vfiprintf_r+0x20a>
 800a64e:	4b26      	ldr	r3, [pc, #152]	@ (800a6e8 <_vfiprintf_r+0x224>)
 800a650:	bb1b      	cbnz	r3, 800a69a <_vfiprintf_r+0x1d6>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	3307      	adds	r3, #7
 800a656:	f023 0307 	bic.w	r3, r3, #7
 800a65a:	3308      	adds	r3, #8
 800a65c:	9303      	str	r3, [sp, #12]
 800a65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a660:	443b      	add	r3, r7
 800a662:	9309      	str	r3, [sp, #36]	@ 0x24
 800a664:	e76a      	b.n	800a53c <_vfiprintf_r+0x78>
 800a666:	fb0c 3202 	mla	r2, ip, r2, r3
 800a66a:	460c      	mov	r4, r1
 800a66c:	2001      	movs	r0, #1
 800a66e:	e7a8      	b.n	800a5c2 <_vfiprintf_r+0xfe>
 800a670:	2300      	movs	r3, #0
 800a672:	3401      	adds	r4, #1
 800a674:	9305      	str	r3, [sp, #20]
 800a676:	4619      	mov	r1, r3
 800a678:	f04f 0c0a 	mov.w	ip, #10
 800a67c:	4620      	mov	r0, r4
 800a67e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a682:	3a30      	subs	r2, #48	@ 0x30
 800a684:	2a09      	cmp	r2, #9
 800a686:	d903      	bls.n	800a690 <_vfiprintf_r+0x1cc>
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d0c6      	beq.n	800a61a <_vfiprintf_r+0x156>
 800a68c:	9105      	str	r1, [sp, #20]
 800a68e:	e7c4      	b.n	800a61a <_vfiprintf_r+0x156>
 800a690:	fb0c 2101 	mla	r1, ip, r1, r2
 800a694:	4604      	mov	r4, r0
 800a696:	2301      	movs	r3, #1
 800a698:	e7f0      	b.n	800a67c <_vfiprintf_r+0x1b8>
 800a69a:	ab03      	add	r3, sp, #12
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	462a      	mov	r2, r5
 800a6a0:	4b12      	ldr	r3, [pc, #72]	@ (800a6ec <_vfiprintf_r+0x228>)
 800a6a2:	a904      	add	r1, sp, #16
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7fd fb5f 	bl	8007d68 <_printf_float>
 800a6aa:	4607      	mov	r7, r0
 800a6ac:	1c78      	adds	r0, r7, #1
 800a6ae:	d1d6      	bne.n	800a65e <_vfiprintf_r+0x19a>
 800a6b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6b2:	07d9      	lsls	r1, r3, #31
 800a6b4:	d405      	bmi.n	800a6c2 <_vfiprintf_r+0x1fe>
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	059a      	lsls	r2, r3, #22
 800a6ba:	d402      	bmi.n	800a6c2 <_vfiprintf_r+0x1fe>
 800a6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6be:	f7fe f931 	bl	8008924 <__retarget_lock_release_recursive>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	065b      	lsls	r3, r3, #25
 800a6c6:	f53f af1f 	bmi.w	800a508 <_vfiprintf_r+0x44>
 800a6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6cc:	e71e      	b.n	800a50c <_vfiprintf_r+0x48>
 800a6ce:	ab03      	add	r3, sp, #12
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	462a      	mov	r2, r5
 800a6d4:	4b05      	ldr	r3, [pc, #20]	@ (800a6ec <_vfiprintf_r+0x228>)
 800a6d6:	a904      	add	r1, sp, #16
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f7fd fddd 	bl	8008298 <_printf_i>
 800a6de:	e7e4      	b.n	800a6aa <_vfiprintf_r+0x1e6>
 800a6e0:	0800b298 	.word	0x0800b298
 800a6e4:	0800b2a2 	.word	0x0800b2a2
 800a6e8:	08007d69 	.word	0x08007d69
 800a6ec:	0800a49f 	.word	0x0800a49f
 800a6f0:	0800b29e 	.word	0x0800b29e

0800a6f4 <__swbuf_r>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	460e      	mov	r6, r1
 800a6f8:	4614      	mov	r4, r2
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	b118      	cbz	r0, 800a706 <__swbuf_r+0x12>
 800a6fe:	6a03      	ldr	r3, [r0, #32]
 800a700:	b90b      	cbnz	r3, 800a706 <__swbuf_r+0x12>
 800a702:	f7fd ff75 	bl	80085f0 <__sinit>
 800a706:	69a3      	ldr	r3, [r4, #24]
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	071a      	lsls	r2, r3, #28
 800a70e:	d501      	bpl.n	800a714 <__swbuf_r+0x20>
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	b943      	cbnz	r3, 800a726 <__swbuf_r+0x32>
 800a714:	4621      	mov	r1, r4
 800a716:	4628      	mov	r0, r5
 800a718:	f000 f82a 	bl	800a770 <__swsetup_r>
 800a71c:	b118      	cbz	r0, 800a726 <__swbuf_r+0x32>
 800a71e:	f04f 37ff 	mov.w	r7, #4294967295
 800a722:	4638      	mov	r0, r7
 800a724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	6922      	ldr	r2, [r4, #16]
 800a72a:	1a98      	subs	r0, r3, r2
 800a72c:	6963      	ldr	r3, [r4, #20]
 800a72e:	b2f6      	uxtb	r6, r6
 800a730:	4283      	cmp	r3, r0
 800a732:	4637      	mov	r7, r6
 800a734:	dc05      	bgt.n	800a742 <__swbuf_r+0x4e>
 800a736:	4621      	mov	r1, r4
 800a738:	4628      	mov	r0, r5
 800a73a:	f7ff fdbf 	bl	800a2bc <_fflush_r>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d1ed      	bne.n	800a71e <__swbuf_r+0x2a>
 800a742:	68a3      	ldr	r3, [r4, #8]
 800a744:	3b01      	subs	r3, #1
 800a746:	60a3      	str	r3, [r4, #8]
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	6022      	str	r2, [r4, #0]
 800a74e:	701e      	strb	r6, [r3, #0]
 800a750:	6962      	ldr	r2, [r4, #20]
 800a752:	1c43      	adds	r3, r0, #1
 800a754:	429a      	cmp	r2, r3
 800a756:	d004      	beq.n	800a762 <__swbuf_r+0x6e>
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	07db      	lsls	r3, r3, #31
 800a75c:	d5e1      	bpl.n	800a722 <__swbuf_r+0x2e>
 800a75e:	2e0a      	cmp	r6, #10
 800a760:	d1df      	bne.n	800a722 <__swbuf_r+0x2e>
 800a762:	4621      	mov	r1, r4
 800a764:	4628      	mov	r0, r5
 800a766:	f7ff fda9 	bl	800a2bc <_fflush_r>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d0d9      	beq.n	800a722 <__swbuf_r+0x2e>
 800a76e:	e7d6      	b.n	800a71e <__swbuf_r+0x2a>

0800a770 <__swsetup_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4b29      	ldr	r3, [pc, #164]	@ (800a818 <__swsetup_r+0xa8>)
 800a774:	4605      	mov	r5, r0
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	460c      	mov	r4, r1
 800a77a:	b118      	cbz	r0, 800a784 <__swsetup_r+0x14>
 800a77c:	6a03      	ldr	r3, [r0, #32]
 800a77e:	b90b      	cbnz	r3, 800a784 <__swsetup_r+0x14>
 800a780:	f7fd ff36 	bl	80085f0 <__sinit>
 800a784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a788:	0719      	lsls	r1, r3, #28
 800a78a:	d422      	bmi.n	800a7d2 <__swsetup_r+0x62>
 800a78c:	06da      	lsls	r2, r3, #27
 800a78e:	d407      	bmi.n	800a7a0 <__swsetup_r+0x30>
 800a790:	2209      	movs	r2, #9
 800a792:	602a      	str	r2, [r5, #0]
 800a794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a798:	81a3      	strh	r3, [r4, #12]
 800a79a:	f04f 30ff 	mov.w	r0, #4294967295
 800a79e:	e033      	b.n	800a808 <__swsetup_r+0x98>
 800a7a0:	0758      	lsls	r0, r3, #29
 800a7a2:	d512      	bpl.n	800a7ca <__swsetup_r+0x5a>
 800a7a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7a6:	b141      	cbz	r1, 800a7ba <__swsetup_r+0x4a>
 800a7a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7ac:	4299      	cmp	r1, r3
 800a7ae:	d002      	beq.n	800a7b6 <__swsetup_r+0x46>
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	f7fe ff25 	bl	8009600 <_free_r>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6063      	str	r3, [r4, #4]
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	f043 0308 	orr.w	r3, r3, #8
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	b94b      	cbnz	r3, 800a7ea <__swsetup_r+0x7a>
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7e0:	d003      	beq.n	800a7ea <__swsetup_r+0x7a>
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	f000 f88b 	bl	800a900 <__smakebuf_r>
 800a7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ee:	f013 0201 	ands.w	r2, r3, #1
 800a7f2:	d00a      	beq.n	800a80a <__swsetup_r+0x9a>
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	60a2      	str	r2, [r4, #8]
 800a7f8:	6962      	ldr	r2, [r4, #20]
 800a7fa:	4252      	negs	r2, r2
 800a7fc:	61a2      	str	r2, [r4, #24]
 800a7fe:	6922      	ldr	r2, [r4, #16]
 800a800:	b942      	cbnz	r2, 800a814 <__swsetup_r+0xa4>
 800a802:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a806:	d1c5      	bne.n	800a794 <__swsetup_r+0x24>
 800a808:	bd38      	pop	{r3, r4, r5, pc}
 800a80a:	0799      	lsls	r1, r3, #30
 800a80c:	bf58      	it	pl
 800a80e:	6962      	ldrpl	r2, [r4, #20]
 800a810:	60a2      	str	r2, [r4, #8]
 800a812:	e7f4      	b.n	800a7fe <__swsetup_r+0x8e>
 800a814:	2000      	movs	r0, #0
 800a816:	e7f7      	b.n	800a808 <__swsetup_r+0x98>
 800a818:	2000067c 	.word	0x2000067c

0800a81c <_raise_r>:
 800a81c:	291f      	cmp	r1, #31
 800a81e:	b538      	push	{r3, r4, r5, lr}
 800a820:	4605      	mov	r5, r0
 800a822:	460c      	mov	r4, r1
 800a824:	d904      	bls.n	800a830 <_raise_r+0x14>
 800a826:	2316      	movs	r3, #22
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	f04f 30ff 	mov.w	r0, #4294967295
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a832:	b112      	cbz	r2, 800a83a <_raise_r+0x1e>
 800a834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a838:	b94b      	cbnz	r3, 800a84e <_raise_r+0x32>
 800a83a:	4628      	mov	r0, r5
 800a83c:	f000 f830 	bl	800a8a0 <_getpid_r>
 800a840:	4622      	mov	r2, r4
 800a842:	4601      	mov	r1, r0
 800a844:	4628      	mov	r0, r5
 800a846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a84a:	f000 b817 	b.w	800a87c <_kill_r>
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d00a      	beq.n	800a868 <_raise_r+0x4c>
 800a852:	1c59      	adds	r1, r3, #1
 800a854:	d103      	bne.n	800a85e <_raise_r+0x42>
 800a856:	2316      	movs	r3, #22
 800a858:	6003      	str	r3, [r0, #0]
 800a85a:	2001      	movs	r0, #1
 800a85c:	e7e7      	b.n	800a82e <_raise_r+0x12>
 800a85e:	2100      	movs	r1, #0
 800a860:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a864:	4620      	mov	r0, r4
 800a866:	4798      	blx	r3
 800a868:	2000      	movs	r0, #0
 800a86a:	e7e0      	b.n	800a82e <_raise_r+0x12>

0800a86c <raise>:
 800a86c:	4b02      	ldr	r3, [pc, #8]	@ (800a878 <raise+0xc>)
 800a86e:	4601      	mov	r1, r0
 800a870:	6818      	ldr	r0, [r3, #0]
 800a872:	f7ff bfd3 	b.w	800a81c <_raise_r>
 800a876:	bf00      	nop
 800a878:	2000067c 	.word	0x2000067c

0800a87c <_kill_r>:
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4d07      	ldr	r5, [pc, #28]	@ (800a89c <_kill_r+0x20>)
 800a880:	2300      	movs	r3, #0
 800a882:	4604      	mov	r4, r0
 800a884:	4608      	mov	r0, r1
 800a886:	4611      	mov	r1, r2
 800a888:	602b      	str	r3, [r5, #0]
 800a88a:	f7f8 fb47 	bl	8002f1c <_kill>
 800a88e:	1c43      	adds	r3, r0, #1
 800a890:	d102      	bne.n	800a898 <_kill_r+0x1c>
 800a892:	682b      	ldr	r3, [r5, #0]
 800a894:	b103      	cbz	r3, 800a898 <_kill_r+0x1c>
 800a896:	6023      	str	r3, [r4, #0]
 800a898:	bd38      	pop	{r3, r4, r5, pc}
 800a89a:	bf00      	nop
 800a89c:	20000c34 	.word	0x20000c34

0800a8a0 <_getpid_r>:
 800a8a0:	f7f8 bb34 	b.w	8002f0c <_getpid>

0800a8a4 <_malloc_usable_size_r>:
 800a8a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8a8:	1f18      	subs	r0, r3, #4
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	bfbc      	itt	lt
 800a8ae:	580b      	ldrlt	r3, [r1, r0]
 800a8b0:	18c0      	addlt	r0, r0, r3
 800a8b2:	4770      	bx	lr

0800a8b4 <__swhatbuf_r>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8bc:	2900      	cmp	r1, #0
 800a8be:	b096      	sub	sp, #88	@ 0x58
 800a8c0:	4615      	mov	r5, r2
 800a8c2:	461e      	mov	r6, r3
 800a8c4:	da0d      	bge.n	800a8e2 <__swhatbuf_r+0x2e>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8cc:	f04f 0100 	mov.w	r1, #0
 800a8d0:	bf14      	ite	ne
 800a8d2:	2340      	movne	r3, #64	@ 0x40
 800a8d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a8d8:	2000      	movs	r0, #0
 800a8da:	6031      	str	r1, [r6, #0]
 800a8dc:	602b      	str	r3, [r5, #0]
 800a8de:	b016      	add	sp, #88	@ 0x58
 800a8e0:	bd70      	pop	{r4, r5, r6, pc}
 800a8e2:	466a      	mov	r2, sp
 800a8e4:	f000 f848 	bl	800a978 <_fstat_r>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	dbec      	blt.n	800a8c6 <__swhatbuf_r+0x12>
 800a8ec:	9901      	ldr	r1, [sp, #4]
 800a8ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a8f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a8f6:	4259      	negs	r1, r3
 800a8f8:	4159      	adcs	r1, r3
 800a8fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8fe:	e7eb      	b.n	800a8d8 <__swhatbuf_r+0x24>

0800a900 <__smakebuf_r>:
 800a900:	898b      	ldrh	r3, [r1, #12]
 800a902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a904:	079d      	lsls	r5, r3, #30
 800a906:	4606      	mov	r6, r0
 800a908:	460c      	mov	r4, r1
 800a90a:	d507      	bpl.n	800a91c <__smakebuf_r+0x1c>
 800a90c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a910:	6023      	str	r3, [r4, #0]
 800a912:	6123      	str	r3, [r4, #16]
 800a914:	2301      	movs	r3, #1
 800a916:	6163      	str	r3, [r4, #20]
 800a918:	b003      	add	sp, #12
 800a91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a91c:	ab01      	add	r3, sp, #4
 800a91e:	466a      	mov	r2, sp
 800a920:	f7ff ffc8 	bl	800a8b4 <__swhatbuf_r>
 800a924:	9f00      	ldr	r7, [sp, #0]
 800a926:	4605      	mov	r5, r0
 800a928:	4639      	mov	r1, r7
 800a92a:	4630      	mov	r0, r6
 800a92c:	f7fe fedc 	bl	80096e8 <_malloc_r>
 800a930:	b948      	cbnz	r0, 800a946 <__smakebuf_r+0x46>
 800a932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a936:	059a      	lsls	r2, r3, #22
 800a938:	d4ee      	bmi.n	800a918 <__smakebuf_r+0x18>
 800a93a:	f023 0303 	bic.w	r3, r3, #3
 800a93e:	f043 0302 	orr.w	r3, r3, #2
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	e7e2      	b.n	800a90c <__smakebuf_r+0xc>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	6020      	str	r0, [r4, #0]
 800a94a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a94e:	81a3      	strh	r3, [r4, #12]
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a956:	b15b      	cbz	r3, 800a970 <__smakebuf_r+0x70>
 800a958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a95c:	4630      	mov	r0, r6
 800a95e:	f000 f81d 	bl	800a99c <_isatty_r>
 800a962:	b128      	cbz	r0, 800a970 <__smakebuf_r+0x70>
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	f023 0303 	bic.w	r3, r3, #3
 800a96a:	f043 0301 	orr.w	r3, r3, #1
 800a96e:	81a3      	strh	r3, [r4, #12]
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	431d      	orrs	r5, r3
 800a974:	81a5      	strh	r5, [r4, #12]
 800a976:	e7cf      	b.n	800a918 <__smakebuf_r+0x18>

0800a978 <_fstat_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d07      	ldr	r5, [pc, #28]	@ (800a998 <_fstat_r+0x20>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	4611      	mov	r1, r2
 800a984:	602b      	str	r3, [r5, #0]
 800a986:	f7f8 fb29 	bl	8002fdc <_fstat>
 800a98a:	1c43      	adds	r3, r0, #1
 800a98c:	d102      	bne.n	800a994 <_fstat_r+0x1c>
 800a98e:	682b      	ldr	r3, [r5, #0]
 800a990:	b103      	cbz	r3, 800a994 <_fstat_r+0x1c>
 800a992:	6023      	str	r3, [r4, #0]
 800a994:	bd38      	pop	{r3, r4, r5, pc}
 800a996:	bf00      	nop
 800a998:	20000c34 	.word	0x20000c34

0800a99c <_isatty_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d06      	ldr	r5, [pc, #24]	@ (800a9b8 <_isatty_r+0x1c>)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	602b      	str	r3, [r5, #0]
 800a9a8:	f7f8 fb28 	bl	8002ffc <_isatty>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_isatty_r+0x1a>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_isatty_r+0x1a>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	20000c34 	.word	0x20000c34

0800a9bc <_init>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	bf00      	nop
 800a9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c2:	bc08      	pop	{r3}
 800a9c4:	469e      	mov	lr, r3
 800a9c6:	4770      	bx	lr

0800a9c8 <_fini>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	bf00      	nop
 800a9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ce:	bc08      	pop	{r3}
 800a9d0:	469e      	mov	lr, r3
 800a9d2:	4770      	bx	lr
