
main_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008d48  08008d48  00009d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800916c  0800916c  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800916c  0800916c  0000a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009174  08009174  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009174  08009174  0000a174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009178  08009178  0000a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800917c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001d8  08009354  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08009354  0000b554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001231d  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002934  00000000  00000000  0001d525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf3  00000000  00000000  00020f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028593  00000000  00000000  00021c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b87  00000000  00000000  0004a196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4e3e  00000000  00000000  0005ed1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153b5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  00153ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001591d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d2c 	.word	0x08008d2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008d2c 	.word	0x08008d2c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_UART_RxCpltCallback>:
extern int argc;
extern char* argv[10];



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Check which UART triggered the callback
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f7c <HAL_UART_RxCpltCallback+0xc4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d153      	bne.n	8000f72 <HAL_UART_RxCpltCallback+0xba>
        // Process received data
    	
        
        if (state==LISTENING_STATE){
 8000eca:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <HAL_UART_RxCpltCallback+0xc8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d145      	bne.n	8000f5e <HAL_UART_RxCpltCallback+0xa6>
            char* token;
            argc = 0;
 8000ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f84 <HAL_UART_RxCpltCallback+0xcc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
            const char delim[] = " ";
 8000ed8:	2320      	movs	r3, #32
 8000eda:	813b      	strh	r3, [r7, #8]

            // Storing the command name
            token = strtok(command, delim);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4829      	ldr	r0, [pc, #164]	@ (8000f88 <HAL_UART_RxCpltCallback+0xd0>)
 8000ee4:	f005 ffae 	bl	8006e44 <strtok>
 8000ee8:	60f8      	str	r0, [r7, #12]
            argv[argc] = token;
 8000eea:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_UART_RxCpltCallback+0xcc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4927      	ldr	r1, [pc, #156]	@ (8000f8c <HAL_UART_RxCpltCallback+0xd4>)
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            argc++;
 8000ef6:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <HAL_UART_RxCpltCallback+0xcc>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <HAL_UART_RxCpltCallback+0xcc>)
 8000efe:	6013      	str	r3, [r2, #0]
            
            // Storing the command parameters
            while(token!=NULL){
 8000f00:	e011      	b.n	8000f26 <HAL_UART_RxCpltCallback+0x6e>
                token = strtok(NULL, delim);
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4619      	mov	r1, r3
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f005 ff9b 	bl	8006e44 <strtok>
 8000f0e:	60f8      	str	r0, [r7, #12]
                argv[argc] = token;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <HAL_UART_RxCpltCallback+0xcc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	491d      	ldr	r1, [pc, #116]	@ (8000f8c <HAL_UART_RxCpltCallback+0xd4>)
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                argc++;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_UART_RxCpltCallback+0xcc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a18      	ldr	r2, [pc, #96]	@ (8000f84 <HAL_UART_RxCpltCallback+0xcc>)
 8000f24:	6013      	str	r3, [r2, #0]
            while(token!=NULL){
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ea      	bne.n	8000f02 <HAL_UART_RxCpltCallback+0x4a>
            }


            if (strcmp(argv[0],"move")==0){
 8000f2c:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_UART_RxCpltCallback+0xd4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4917      	ldr	r1, [pc, #92]	@ (8000f90 <HAL_UART_RxCpltCallback+0xd8>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f94c 	bl	80001d0 <strcmp>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <HAL_UART_RxCpltCallback+0x8e>
                state = MOVING_STATE;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <HAL_UART_RxCpltCallback+0xc8>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e00b      	b.n	8000f5e <HAL_UART_RxCpltCallback+0xa6>
            }

            else if (strcmp(argv[0],"turn")==0){
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_UART_RxCpltCallback+0xd4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4912      	ldr	r1, [pc, #72]	@ (8000f94 <HAL_UART_RxCpltCallback+0xdc>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f93f 	bl	80001d0 <strcmp>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <HAL_UART_RxCpltCallback+0xa6>
                state = TURNING_STATE;
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_UART_RxCpltCallback+0xc8>)
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	601a      	str	r2, [r3, #0]
            }
        }


        HAL_UART_Receive_IT(&huart2, command, BUFF_SIZE);
 8000f5e:	2221      	movs	r2, #33	@ 0x21
 8000f60:	4909      	ldr	r1, [pc, #36]	@ (8000f88 <HAL_UART_RxCpltCallback+0xd0>)
 8000f62:	480d      	ldr	r0, [pc, #52]	@ (8000f98 <HAL_UART_RxCpltCallback+0xe0>)
 8000f64:	f003 fe6e 	bl	8004c44 <HAL_UART_Receive_IT>





        HAL_UART_Receive_IT(&huart2, &command, BUFF_SIZE);  // Restart reception
 8000f68:	2221      	movs	r2, #33	@ 0x21
 8000f6a:	4907      	ldr	r1, [pc, #28]	@ (8000f88 <HAL_UART_RxCpltCallback+0xd0>)
 8000f6c:	480a      	ldr	r0, [pc, #40]	@ (8000f98 <HAL_UART_RxCpltCallback+0xe0>)
 8000f6e:	f003 fe69 	bl	8004c44 <HAL_UART_Receive_IT>
    }
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40004400 	.word	0x40004400
 8000f80:	200003fc 	.word	0x200003fc
 8000f84:	200003d0 	.word	0x200003d0
 8000f88:	200003ac 	.word	0x200003ac
 8000f8c:	200003d4 	.word	0x200003d4
 8000f90:	08008d48 	.word	0x08008d48
 8000f94:	08008d50 	.word	0x08008d50
 8000f98:	20000324 	.word	0x20000324

08000f9c <send1Pulse>:
int step_time_us = 500000; // minimum 1us

int t_pulse_length = 1; //length moved with 1 pulse (in mm)
int r_pulse_angle = 1; //angle turned with 1 pulse (in °)

void send1Pulse(int n_driver){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

	uint16_t GPIO_PIN;
	GPIO_PIN = (n_driver==T_MOTOR)?GPIO_PIN_5:GPIO_PIN_7;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d101      	bne.n	8000fae <send1Pulse+0x12>
 8000faa:	2320      	movs	r3, #32
 8000fac:	e000      	b.n	8000fb0 <send1Pulse+0x14>
 8000fae:	2380      	movs	r3, #128	@ 0x80
 8000fb0:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN, 1);
 8000fb2:	89fb      	ldrh	r3, [r7, #14]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbc:	f001 f974 	bl	80022a8 <HAL_GPIO_WritePin>
	delayMicroseconds(step_time_us);
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <send1Pulse+0x50>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fd73 	bl	8001ab0 <delayMicroseconds>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN, 0);
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd4:	f001 f968 	bl	80022a8 <HAL_GPIO_WritePin>
	delayMicroseconds(step_time_us);
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <send1Pulse+0x50>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fd67 	bl	8001ab0 <delayMicroseconds>

}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000

08000ff0 <sendNPulse>:

void sendNPulse(int N, int n_driver){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i<N; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	e005      	b.n	800100c <sendNPulse+0x1c>
		send1Pulse(n_driver);
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f7ff ffcb 	bl	8000f9c <send1Pulse>
	for (int i = 0; i<N; i++){
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbf5      	blt.n	8001000 <sendNPulse+0x10>
	}
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <translate>:


void translate(int dx){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	sendNPulse(1, T_MOTOR);
 8001028:	2102      	movs	r1, #2
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff ffe0 	bl	8000ff0 <sendNPulse>
	delayMicroseconds(1000000);
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <translate+0x28>)
 8001032:	f000 fd3d 	bl	8001ab0 <delayMicroseconds>
	sendNPulse(dx, T_MOTOR);
 8001036:	2102      	movs	r1, #2
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffd9 	bl	8000ff0 <sendNPulse>
	

	// int nb_pulses = (int)((float)dx/(float)t_pulse_length);
	// sendNPulse(nb_pulses, T_MOTOR);
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	000f4240 	.word	0x000f4240

0800104c <rotate>:

void rotate(int dtheta){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	sendNPulse(2, T_MOTOR);
 8001054:	2102      	movs	r1, #2
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff ffca 	bl	8000ff0 <sendNPulse>
	delayMicroseconds(1000000);
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <rotate+0x28>)
 800105e:	f000 fd27 	bl	8001ab0 <delayMicroseconds>
	sendNPulse(dtheta, T_MOTOR);
 8001062:	2102      	movs	r1, #2
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ffc3 	bl	8000ff0 <sendNPulse>
	// int nb_pulses = (int)((float)dtheta/(float)r_pulse_angle);
	// sendNPulse(nb_pulses, R_MOTOR);
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	000f4240 	.word	0x000f4240

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f000 fd5d 	bl	8001b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f861 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f000 fa43 	bl	8001510 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800108a:	f000 fa11 	bl	80014b0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800108e:	f000 f997 	bl	80013c0 <MX_TIM16_Init>
  MX_TIM5_Init();
 8001092:	f000 f947 	bl	8001324 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001096:	f000 f8a9 	bl	80011ec <MX_TIM2_Init>
  MX_TIM3_Init();
 800109a:	f000 f8f5 	bl	8001288 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Initializing the time reference counter
  __HAL_TIM_SET_COUNTER(&htim5, 0);  // Reset the counter to 0
 800109e:	4b23      	ldr	r3, [pc, #140]	@ (800112c <main+0xb4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim5);
 80010a6:	4821      	ldr	r0, [pc, #132]	@ (800112c <main+0xb4>)
 80010a8:	f002 fc8e 	bl	80039c8 <HAL_TIM_Base_Start>

  // Initializing the IR emmition timer
  HAL_TIM_Base_Start(&htim16);
 80010ac:	4820      	ldr	r0, [pc, #128]	@ (8001130 <main+0xb8>)
 80010ae:	f002 fc8b 	bl	80039c8 <HAL_TIM_Base_Start>
  TIM16->CCR1 = 1000; // setting the compare register to half the period (to generate a square signal)
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <main+0xbc>)
 80010b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b8:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80010ba:	2100      	movs	r1, #0
 80010bc:	481c      	ldr	r0, [pc, #112]	@ (8001130 <main+0xb8>)
 80010be:	f002 fd4d 	bl	8003b5c <HAL_TIM_PWM_Start>


  // Initializing the command buffer and receiving command over UART
  HAL_UART_Receive_IT(&huart2, command, BUFF_SIZE);
 80010c2:	2221      	movs	r2, #33	@ 0x21
 80010c4:	491c      	ldr	r1, [pc, #112]	@ (8001138 <main+0xc0>)
 80010c6:	481d      	ldr	r0, [pc, #116]	@ (800113c <main+0xc4>)
 80010c8:	f003 fdbc 	bl	8004c44 <HAL_UART_Receive_IT>




  // Initializing all Capture Variables
  int t_step = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  int r_step = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  int t_speed = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  int r_speed = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  int exposure_time = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  int saving_time = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  int margin_time = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    
    if (state == MOVING_STATE){
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <main+0xc8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d10b      	bne.n	8001108 <main+0x90>
      int distance = atoi(argv[1]);
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <main+0xcc>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 f8b7 	bl	8006268 <atoi>
 80010fa:	60b8      	str	r0, [r7, #8]
      translate(distance);
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f7ff ff8f 	bl	8001020 <translate>

      state = LISTENING_STATE;
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <main+0xc8>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
    }

    if (state == TURNING_STATE){
 8001108:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <main+0xc8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b03      	cmp	r3, #3
 800110e:	d1eb      	bne.n	80010e8 <main+0x70>
      int angle = atoi(argv[1]);
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <main+0xcc>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f005 f8a7 	bl	8006268 <atoi>
 800111a:	6078      	str	r0, [r7, #4]
      rotate(angle);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff95 	bl	800104c <rotate>
      
      state = LISTENING_STATE;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <main+0xc8>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
    if (state == MOVING_STATE){
 8001128:	e7de      	b.n	80010e8 <main+0x70>
 800112a:	bf00      	nop
 800112c:	2000028c 	.word	0x2000028c
 8001130:	200002d8 	.word	0x200002d8
 8001134:	40014400 	.word	0x40014400
 8001138:	200003ac 	.word	0x200003ac
 800113c:	20000324 	.word	0x20000324
 8001140:	200003fc 	.word	0x200003fc
 8001144:	200003d4 	.word	0x200003d4

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b096      	sub	sp, #88	@ 0x58
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2244      	movs	r2, #68	@ 0x44
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f005 fe6b 	bl	8006e32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800116a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800116e:	f001 f8c1 	bl	80022f4 <HAL_PWREx_ControlVoltageScaling>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001178:	f000 fa6a 	bl	8001650 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800117c:	2302      	movs	r3, #2
 800117e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001184:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001186:	2310      	movs	r3, #16
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800118e:	2302      	movs	r3, #2
 8001190:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001196:	230a      	movs	r3, #10
 8001198:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800119a:	2307      	movs	r3, #7
 800119c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 f8f8 	bl	80023a0 <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011b6:	f000 fa4b 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011be:	2303      	movs	r3, #3
 80011c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	2104      	movs	r1, #4
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 fcc0 	bl	8002b58 <HAL_RCC_ClockConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011de:	f000 fa37 	bl	8001650 <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3758      	adds	r7, #88	@ 0x58
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120a:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <MX_TIM2_Init+0x98>)
 800120c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001210:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_TIM2_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_TIM2_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_TIM2_Init+0x98>)
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_TIM2_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_TIM2_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001232:	4814      	ldr	r0, [pc, #80]	@ (8001284 <MX_TIM2_Init+0x98>)
 8001234:	f002 fb70 	bl	8003918 <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800123e:	f000 fa07 	bl	8001650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001246:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	480d      	ldr	r0, [pc, #52]	@ (8001284 <MX_TIM2_Init+0x98>)
 8001250:	f002 fe9e 	bl	8003f90 <HAL_TIM_ConfigClockSource>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800125a:	f000 f9f9 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	@ (8001284 <MX_TIM2_Init+0x98>)
 800126c:	f003 fb96 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001276:	f000 f9eb 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200001f4 	.word	0x200001f4

08001288 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <MX_TIM3_Init+0x94>)
 80012a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001320 <MX_TIM3_Init+0x98>)
 80012aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_TIM3_Init+0x94>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_TIM3_Init+0x94>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_TIM3_Init+0x94>)
 80012ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_TIM3_Init+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_TIM3_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012cc:	4813      	ldr	r0, [pc, #76]	@ (800131c <MX_TIM3_Init+0x94>)
 80012ce:	f002 fb23 	bl	8003918 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012d8:	f000 f9ba 	bl	8001650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <MX_TIM3_Init+0x94>)
 80012ea:	f002 fe51 	bl	8003f90 <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012f4:	f000 f9ac 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_TIM3_Init+0x94>)
 8001306:	f003 fb49 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 f99e 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000240 	.word	0x20000240
 8001320:	40000400 	.word	0x40000400

08001324 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001344:	4a1d      	ldr	r2, [pc, #116]	@ (80013bc <MX_TIM5_Init+0x98>)
 8001346:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <MX_TIM5_Init+0x94>)
 800134a:	224f      	movs	r2, #79	@ 0x4f
 800134c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001356:	f04f 32ff 	mov.w	r2, #4294967295
 800135a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_TIM5_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001368:	4813      	ldr	r0, [pc, #76]	@ (80013b8 <MX_TIM5_Init+0x94>)
 800136a:	f002 fad5 	bl	8003918 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001374:	f000 f96c 	bl	8001650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001386:	f002 fe03 	bl	8003f90 <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001390:	f000 f95e 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_TIM5_Init+0x94>)
 80013a2:	f003 fafb 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 f950 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000028c 	.word	0x2000028c
 80013bc:	40000c00 	.word	0x40000c00

080013c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b092      	sub	sp, #72	@ 0x48
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	222c      	movs	r2, #44	@ 0x2c
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 fd26 	bl	8006e32 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013e6:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 80013e8:	4a30      	ldr	r2, [pc, #192]	@ (80014ac <MX_TIM16_Init+0xec>)
 80013ea:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 80013ec:	4b2e      	ldr	r3, [pc, #184]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000-1;
 80013f8:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 80013fa:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80013fe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b29      	ldr	r3, [pc, #164]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001406:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001412:	4825      	ldr	r0, [pc, #148]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 8001414:	f002 fa80 	bl	8003918 <HAL_TIM_Base_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800141e:	f000 f917 	bl	8001650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001422:	4821      	ldr	r0, [pc, #132]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 8001424:	f002 fb38 	bl	8003a98 <HAL_TIM_PWM_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800142e:	f000 f90f 	bl	8001650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001432:	2360      	movs	r3, #96	@ 0x60
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800143e:	2300      	movs	r3, #0
 8001440:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	4814      	ldr	r0, [pc, #80]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 8001458:	f002 fc86 	bl	8003d68 <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001462:	f000 f8f5 	bl	8001650 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800147a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 800148a:	f003 fb0f 	bl	8004aac <HAL_TIMEx_ConfigBreakDeadTime>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001494:	f000 f8dc 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <MX_TIM16_Init+0xe8>)
 800149a:	f000 f95d 	bl	8001758 <HAL_TIM_MspPostInit>

}
 800149e:	bf00      	nop
 80014a0:	3748      	adds	r7, #72	@ 0x48
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200002d8 	.word	0x200002d8
 80014ac:	40014400 	.word	0x40014400

080014b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014b6:	4a15      	ldr	r2, [pc, #84]	@ (800150c <MX_USART2_UART_Init+0x5c>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_USART2_UART_Init+0x58>)
 80014f4:	f003 fb58 	bl	8004ba8 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014fe:	f000 f8a7 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000324 	.word	0x20000324
 800150c:	40004400 	.word	0x40004400

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	4a46      	ldr	r2, [pc, #280]	@ (8001644 <MX_GPIO_Init+0x134>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001532:	4b44      	ldr	r3, [pc, #272]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	4a40      	ldr	r2, [pc, #256]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154a:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <MX_GPIO_Init+0x134>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	4a3a      	ldr	r2, [pc, #232]	@ (8001644 <MX_GPIO_Init+0x134>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001562:	4b38      	ldr	r3, [pc, #224]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	4a34      	ldr	r2, [pc, #208]	@ (8001644 <MX_GPIO_Init+0x134>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157a:	4b32      	ldr	r3, [pc, #200]	@ (8001644 <MX_GPIO_Init+0x134>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7
 8001586:	2200      	movs	r2, #0
 8001588:	f240 71a3 	movw	r1, #1955	@ 0x7a3
 800158c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001590:	f000 fe8a 	bl	80022a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 800159a:	482b      	ldr	r0, [pc, #172]	@ (8001648 <MX_GPIO_Init+0x138>)
 800159c:	f000 fe84 	bl	80022a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2180      	movs	r1, #128	@ 0x80
 80015a4:	4829      	ldr	r0, [pc, #164]	@ (800164c <MX_GPIO_Init+0x13c>)
 80015a6:	f000 fe7f 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4822      	ldr	r0, [pc, #136]	@ (800164c <MX_GPIO_Init+0x13c>)
 80015c2:	f000 fcc7 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA7
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7
 80015c6:	f240 73a3 	movw	r3, #1955	@ 0x7a3
 80015ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e2:	f000 fcb7 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015e6:	2310      	movs	r3, #16
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fc:	f000 fcaa 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001600:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 8001604:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	480b      	ldr	r0, [pc, #44]	@ (8001648 <MX_GPIO_Init+0x138>)
 800161a:	f000 fc9b 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_GPIO_Init+0x13c>)
 8001636:	f000 fc8d 	bl	8001f54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	48000400 	.word	0x48000400
 800164c:	48000800 	.word	0x48000800

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <Error_Handler+0x8>

0800165c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_MspInit+0x44>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001666:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <HAL_MspInit+0x44>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6613      	str	r3, [r2, #96]	@ 0x60
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_MspInit+0x44>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	4a08      	ldr	r2, [pc, #32]	@ (80016a0 <HAL_MspInit+0x44>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001684:	6593      	str	r3, [r2, #88]	@ 0x58
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b4:	d10c      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b6:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	4a23      	ldr	r2, [pc, #140]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80016ce:	e034      	b.n	800173a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <HAL_TIM_Base_MspInit+0xa8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10c      	bne.n	80016f4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016da:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016de:	4a1a      	ldr	r2, [pc, #104]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
}
 80016f2:	e022      	b.n	800173a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <HAL_TIM_Base_MspInit+0xac>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10c      	bne.n	8001718 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016fe:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	4a11      	ldr	r2, [pc, #68]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6593      	str	r3, [r2, #88]	@ 0x58
 800170a:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	e010      	b.n	800173a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <HAL_TIM_Base_MspInit+0xb0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10b      	bne.n	800173a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001726:	4a08      	ldr	r2, [pc, #32]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 8001728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172c:	6613      	str	r3, [r2, #96]	@ 0x60
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
}
 800173a:	bf00      	nop
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40000400 	.word	0x40000400
 8001750:	40000c00 	.word	0x40000c00
 8001754:	40014400 	.word	0x40014400

08001758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a11      	ldr	r2, [pc, #68]	@ (80017bc <HAL_TIM_MspPostInit+0x64>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d11c      	bne.n	80017b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <HAL_TIM_MspPostInit+0x68>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	4a10      	ldr	r2, [pc, #64]	@ (80017c0 <HAL_TIM_MspPostInit+0x68>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <HAL_TIM_MspPostInit+0x68>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001792:	2340      	movs	r3, #64	@ 0x40
 8001794:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80017a2:	230e      	movs	r3, #14
 80017a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b0:	f000 fbd0 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40014400 	.word	0x40014400
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0ac      	sub	sp, #176	@ 0xb0
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2288      	movs	r2, #136	@ 0x88
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fb24 	bl	8006e32 <memset>
  if(huart->Instance==USART2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a25      	ldr	r2, [pc, #148]	@ (8001884 <HAL_UART_MspInit+0xc0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d143      	bne.n	800187c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fbcd 	bl	8002fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800180c:	f7ff ff20 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001810:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <HAL_UART_MspInit+0xc4>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <HAL_UART_MspInit+0xc4>)
 8001816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181a:	6593      	str	r3, [r2, #88]	@ 0x58
 800181c:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_UART_MspInit+0xc4>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_UART_MspInit+0xc4>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	4a16      	ldr	r2, [pc, #88]	@ (8001888 <HAL_UART_MspInit+0xc4>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <HAL_UART_MspInit+0xc4>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001840:	230c      	movs	r3, #12
 8001842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001858:	2307      	movs	r3, #7
 800185a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001868:	f000 fb74 	bl	8001f54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2026      	movs	r0, #38	@ 0x26
 8001872:	f000 faba 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001876:	2026      	movs	r0, #38	@ 0x26
 8001878:	f000 fad3 	bl	8001e22 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800187c:	bf00      	nop
 800187e:	37b0      	adds	r7, #176	@ 0xb0
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40004400 	.word	0x40004400
 8001888:	40021000 	.word	0x40021000

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <NMI_Handler+0x4>

08001894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <MemManage_Handler+0x4>

080018a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e2:	f000 f987 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <USART2_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <USART2_IRQHandler+0x10>)
 80018f2:	f003 f9f3 	bl	8004cdc <HAL_UART_IRQHandler>
  // delayMicroseconds(1000000);

  

  /* USER CODE END USART2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000324 	.word	0x20000324

08001900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return 1;
 8001904:	2301      	movs	r3, #1
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_kill>:

int _kill(int pid, int sig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191a:	f005 fb39 	bl	8006f90 <__errno>
 800191e:	4603      	mov	r3, r0
 8001920:	2216      	movs	r2, #22
 8001922:	601a      	str	r2, [r3, #0]
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_exit>:

void _exit (int status)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffe7 	bl	8001910 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001942:	bf00      	nop
 8001944:	e7fd      	b.n	8001942 <_exit+0x12>

08001946 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e00a      	b.n	800196e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001958:	f3af 8000 	nop.w
 800195c:	4601      	mov	r1, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	60ba      	str	r2, [r7, #8]
 8001964:	b2ca      	uxtb	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	dbf0      	blt.n	8001958 <_read+0x12>
  }

  return len;
 8001976:	687b      	ldr	r3, [r7, #4]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e009      	b.n	80019a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	60ba      	str	r2, [r7, #8]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dbf1      	blt.n	8001992 <_write+0x12>
  }
  return len;
 80019ae:	687b      	ldr	r3, [r7, #4]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_close>:

int _close(int file)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e0:	605a      	str	r2, [r3, #4]
  return 0;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_isatty>:

int _isatty(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	@ (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f005 fa9e 	bl	8006f90 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20018000 	.word	0x20018000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	20000400 	.word	0x20000400
 8001a88:	20000558 	.word	0x20000558

08001a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <delayMicroseconds>:
#include "stm32l4xx.h"

void delayMicroseconds(int delay){
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	int startingValue = TIM5->CNT;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <delayMicroseconds+0x34>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	60bb      	str	r3, [r7, #8]
	int readValue = startingValue;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	60fb      	str	r3, [r7, #12]
	while(readValue-startingValue<delay){
 8001ac2:	e002      	b.n	8001aca <delayMicroseconds+0x1a>
		readValue =TIM5->CNT;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <delayMicroseconds+0x34>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	60fb      	str	r3, [r7, #12]
	while(readValue-startingValue<delay){
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dcf6      	bgt.n	8001ac4 <delayMicroseconds+0x14>
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40000c00 	.word	0x40000c00

08001ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aec:	f7ff ffce 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af0:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001af2:	490d      	ldr	r1, [pc, #52]	@ (8001b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b2c <LoopForever+0xe>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b08:	4c0a      	ldr	r4, [pc, #40]	@ (8001b34 <LoopForever+0x16>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b16:	f005 fa41 	bl	8006f9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b1a:	f7ff faad 	bl	8001078 <main>

08001b1e <LoopForever>:

LoopForever:
    b LoopForever
 8001b1e:	e7fe      	b.n	8001b1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b28:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b2c:	0800917c 	.word	0x0800917c
  ldr r2, =_sbss
 8001b30:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b34:	20000554 	.word	0x20000554

08001b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC1_2_IRQHandler>
	...

08001b3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_Init+0x3c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b78 <HAL_Init+0x3c>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b52:	2003      	movs	r0, #3
 8001b54:	f000 f93e 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 f80f 	bl	8001b7c <HAL_InitTick>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	71fb      	strb	r3, [r7, #7]
 8001b68:	e001      	b.n	8001b6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b6a:	f7ff fd77 	bl	800165c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b88:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <HAL_InitTick+0x6c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b90:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <HAL_InitTick+0x70>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_InitTick+0x6c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f949 	bl	8001e3e <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10f      	bne.n	8001bd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d809      	bhi.n	8001bcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 f913 	bl	8001dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_InitTick+0x74>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e007      	b.n	8001bdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e004      	b.n	8001bdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	e001      	b.n	8001bdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000000c 	.word	0x2000000c
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	2000000c 	.word	0x2000000c
 8001c18:	20000404 	.word	0x20000404

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000404 	.word	0x20000404

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	@ (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	@ (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	@ (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff3e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff31 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d008      	beq.n	8001e80 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2204      	movs	r2, #4
 8001e72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e022      	b.n	8001ec6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 020e 	bic.w	r2, r2, #14
 8001e8e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea4:	f003 021c 	and.w	r2, r3, #28
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d005      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e029      	b.n	8001f4a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 020e 	bic.w	r2, r2, #14
 8001f04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f003 021c 	and.w	r2, r3, #28
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
    }
  }
  return status;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f62:	e17f      	b.n	8002264 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8171 	beq.w	800225e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d005      	beq.n	8001f94 <HAL_GPIO_Init+0x40>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d130      	bne.n	8001ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fca:	2201      	movs	r2, #1
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	f003 0201 	and.w	r2, r3, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d118      	bne.n	8002034 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002008:	2201      	movs	r2, #1
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	f003 0201 	and.w	r2, r3, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b03      	cmp	r3, #3
 800203e:	d017      	beq.n	8002070 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d123      	bne.n	80020c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	08da      	lsrs	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220f      	movs	r2, #15
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	08da      	lsrs	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3208      	adds	r2, #8
 80020be:	6939      	ldr	r1, [r7, #16]
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80ac 	beq.w	800225e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	4b5f      	ldr	r3, [pc, #380]	@ (8002284 <HAL_GPIO_Init+0x330>)
 8002108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210a:	4a5e      	ldr	r2, [pc, #376]	@ (8002284 <HAL_GPIO_Init+0x330>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6613      	str	r3, [r2, #96]	@ 0x60
 8002112:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <HAL_GPIO_Init+0x330>)
 8002114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800211e:	4a5a      	ldr	r2, [pc, #360]	@ (8002288 <HAL_GPIO_Init+0x334>)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002148:	d025      	beq.n	8002196 <HAL_GPIO_Init+0x242>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4f      	ldr	r2, [pc, #316]	@ (800228c <HAL_GPIO_Init+0x338>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01f      	beq.n	8002192 <HAL_GPIO_Init+0x23e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4e      	ldr	r2, [pc, #312]	@ (8002290 <HAL_GPIO_Init+0x33c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x23a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4d      	ldr	r2, [pc, #308]	@ (8002294 <HAL_GPIO_Init+0x340>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x236>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4c      	ldr	r2, [pc, #304]	@ (8002298 <HAL_GPIO_Init+0x344>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x232>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4b      	ldr	r2, [pc, #300]	@ (800229c <HAL_GPIO_Init+0x348>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x22e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4a      	ldr	r2, [pc, #296]	@ (80022a0 <HAL_GPIO_Init+0x34c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x22a>
 800217a:	2306      	movs	r3, #6
 800217c:	e00c      	b.n	8002198 <HAL_GPIO_Init+0x244>
 800217e:	2307      	movs	r3, #7
 8002180:	e00a      	b.n	8002198 <HAL_GPIO_Init+0x244>
 8002182:	2305      	movs	r3, #5
 8002184:	e008      	b.n	8002198 <HAL_GPIO_Init+0x244>
 8002186:	2304      	movs	r3, #4
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x244>
 800218a:	2303      	movs	r3, #3
 800218c:	e004      	b.n	8002198 <HAL_GPIO_Init+0x244>
 800218e:	2302      	movs	r3, #2
 8002190:	e002      	b.n	8002198 <HAL_GPIO_Init+0x244>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x244>
 8002196:	2300      	movs	r3, #0
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4093      	lsls	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021a8:	4937      	ldr	r1, [pc, #220]	@ (8002288 <HAL_GPIO_Init+0x334>)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021b6:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <HAL_GPIO_Init+0x350>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021da:	4a32      	ldr	r2, [pc, #200]	@ (80022a4 <HAL_GPIO_Init+0x350>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021e0:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <HAL_GPIO_Init+0x350>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002204:	4a27      	ldr	r2, [pc, #156]	@ (80022a4 <HAL_GPIO_Init+0x350>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800220a:	4b26      	ldr	r3, [pc, #152]	@ (80022a4 <HAL_GPIO_Init+0x350>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800222e:	4a1d      	ldr	r2, [pc, #116]	@ (80022a4 <HAL_GPIO_Init+0x350>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_GPIO_Init+0x350>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002258:	4a12      	ldr	r2, [pc, #72]	@ (80022a4 <HAL_GPIO_Init+0x350>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	f47f ae78 	bne.w	8001f64 <HAL_GPIO_Init+0x10>
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	40010000 	.word	0x40010000
 800228c:	48000400 	.word	0x48000400
 8002290:	48000800 	.word	0x48000800
 8002294:	48000c00 	.word	0x48000c00
 8002298:	48001000 	.word	0x48001000
 800229c:	48001400 	.word	0x48001400
 80022a0:	48001800 	.word	0x48001800
 80022a4:	40010400 	.word	0x40010400

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022c6:	887a      	ldrh	r2, [r7, #2]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022dc:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40007000 	.word	0x40007000

080022f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002302:	d130      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002304:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800230c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002310:	d038      	beq.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002312:	4b20      	ldr	r3, [pc, #128]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800231a:	4a1e      	ldr	r2, [pc, #120]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002322:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2232      	movs	r2, #50	@ 0x32
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	4a1b      	ldr	r2, [pc, #108]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0c9b      	lsrs	r3, r3, #18
 8002334:	3301      	adds	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002338:	e002      	b.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3b01      	subs	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002340:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234c:	d102      	bne.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f2      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002354:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002360:	d110      	bne.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e00f      	b.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002366:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800236e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002372:	d007      	beq.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002374:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800237c:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40007000 	.word	0x40007000
 8002398:	20000004 	.word	0x20000004
 800239c:	431bde83 	.word	0x431bde83

080023a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e3ca      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b2:	4b97      	ldr	r3, [pc, #604]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023bc:	4b94      	ldr	r3, [pc, #592]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80e4 	beq.w	800259c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_RCC_OscConfig+0x4a>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	f040 808b 	bne.w	80024f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 8087 	bne.w	80024f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ea:	4b89      	ldr	r3, [pc, #548]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x62>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e3a2      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	4b82      	ldr	r3, [pc, #520]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_RCC_OscConfig+0x7c>
 8002412:	4b7f      	ldr	r3, [pc, #508]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800241a:	e005      	b.n	8002428 <HAL_RCC_OscConfig+0x88>
 800241c:	4b7c      	ldr	r3, [pc, #496]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002428:	4293      	cmp	r3, r2
 800242a:	d223      	bcs.n	8002474 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fd55 	bl	8002ee0 <RCC_SetFlashLatencyFromMSIRange>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e383      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002440:	4b73      	ldr	r3, [pc, #460]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a72      	ldr	r2, [pc, #456]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b70      	ldr	r3, [pc, #448]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	496d      	ldr	r1, [pc, #436]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245e:	4b6c      	ldr	r3, [pc, #432]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4968      	ldr	r1, [pc, #416]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
 8002472:	e025      	b.n	80024c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002474:	4b66      	ldr	r3, [pc, #408]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a65      	ldr	r2, [pc, #404]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b63      	ldr	r3, [pc, #396]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4960      	ldr	r1, [pc, #384]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002492:	4b5f      	ldr	r3, [pc, #380]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	495b      	ldr	r1, [pc, #364]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fd15 	bl	8002ee0 <RCC_SetFlashLatencyFromMSIRange>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e343      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c0:	f000 fc4a 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b52      	ldr	r3, [pc, #328]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	4950      	ldr	r1, [pc, #320]	@ (8002614 <HAL_RCC_OscConfig+0x274>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002618 <HAL_RCC_OscConfig+0x278>)
 80024de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024e0:	4b4e      	ldr	r3, [pc, #312]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fb49 	bl	8001b7c <HAL_InitTick>
 80024ea:	4603      	mov	r3, r0
 80024ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d052      	beq.n	800259a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	e327      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d032      	beq.n	8002566 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002500:	4b43      	ldr	r3, [pc, #268]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a42      	ldr	r2, [pc, #264]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800250c:	f7ff fb86 	bl	8001c1c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002514:	f7ff fb82 	bl	8001c1c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e310      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002526:	4b3a      	ldr	r3, [pc, #232]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002532:	4b37      	ldr	r3, [pc, #220]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a36      	ldr	r2, [pc, #216]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b34      	ldr	r3, [pc, #208]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4931      	ldr	r1, [pc, #196]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002550:	4b2f      	ldr	r3, [pc, #188]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	492c      	ldr	r1, [pc, #176]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	e01a      	b.n	800259c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002566:	4b2a      	ldr	r3, [pc, #168]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a29      	ldr	r2, [pc, #164]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002572:	f7ff fb53 	bl	8001c1c <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800257a:	f7ff fb4f 	bl	8001c1c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e2dd      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800258c:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x1da>
 8002598:	e000      	b.n	800259c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800259a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d074      	beq.n	8002692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x21a>
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b0c      	cmp	r3, #12
 80025b2:	d10e      	bne.n	80025d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d10b      	bne.n	80025d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d064      	beq.n	8002690 <HAL_RCC_OscConfig+0x2f0>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d160      	bne.n	8002690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e2ba      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x24a>
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	e026      	b.n	8002638 <HAL_RCC_OscConfig+0x298>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f2:	d115      	bne.n	8002620 <HAL_RCC_OscConfig+0x280>
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a02      	ldr	r2, [pc, #8]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x298>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	08008d58 	.word	0x08008d58
 8002618:	20000004 	.word	0x20000004
 800261c:	20000008 	.word	0x20000008
 8002620:	4ba0      	ldr	r3, [pc, #640]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a9f      	ldr	r2, [pc, #636]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b9d      	ldr	r3, [pc, #628]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a9c      	ldr	r2, [pc, #624]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7ff faec 	bl	8001c1c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff fae8 	bl	8001c1c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	@ 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e276      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265a:	4b92      	ldr	r3, [pc, #584]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x2a8>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff fad8 	bl	8001c1c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff fad4 	bl	8001c1c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e262      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002682:	4b88      	ldr	r3, [pc, #544]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x2d0>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d060      	beq.n	8002760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x310>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d119      	bne.n	80026de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d116      	bne.n	80026de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b0:	4b7c      	ldr	r3, [pc, #496]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x328>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e23f      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b76      	ldr	r3, [pc, #472]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	4973      	ldr	r1, [pc, #460]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026dc:	e040      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d023      	beq.n	800272e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e6:	4b6f      	ldr	r3, [pc, #444]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6e      	ldr	r2, [pc, #440]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7ff fa93 	bl	8001c1c <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7ff fa8f 	bl	8001c1c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e21d      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800270c:	4b65      	ldr	r3, [pc, #404]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b62      	ldr	r3, [pc, #392]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	495f      	ldr	r1, [pc, #380]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e018      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b5d      	ldr	r3, [pc, #372]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5c      	ldr	r2, [pc, #368]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff fa6f 	bl	8001c1c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7ff fa6b 	bl	8001c1c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1f9      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002754:	4b53      	ldr	r3, [pc, #332]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01c      	beq.n	80027ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002774:	4b4b      	ldr	r3, [pc, #300]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800277a:	4a4a      	ldr	r2, [pc, #296]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7ff fa4a 	bl	8001c1c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278c:	f7ff fa46 	bl	8001c1c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e1d4      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800279e:	4b41      	ldr	r3, [pc, #260]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ef      	beq.n	800278c <HAL_RCC_OscConfig+0x3ec>
 80027ac:	e01b      	b.n	80027e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ae:	4b3d      	ldr	r3, [pc, #244]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027b4:	4a3b      	ldr	r2, [pc, #236]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7ff fa2d 	bl	8001c1c <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7ff fa29 	bl	8001c1c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1b7      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d8:	4b32      	ldr	r3, [pc, #200]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ef      	bne.n	80027c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80a6 	beq.w	8002940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027f8:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	4a26      	ldr	r2, [pc, #152]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002810:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281c:	2301      	movs	r3, #1
 800281e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002820:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d118      	bne.n	800285e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282c:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <HAL_RCC_OscConfig+0x508>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002838:	f7ff f9f0 	bl	8001c1c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7ff f9ec 	bl	8001c1c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e17a      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d108      	bne.n	8002878 <HAL_RCC_OscConfig+0x4d8>
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286c:	4a0d      	ldr	r2, [pc, #52]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002876:	e029      	b.n	80028cc <HAL_RCC_OscConfig+0x52c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d115      	bne.n	80028ac <HAL_RCC_OscConfig+0x50c>
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002890:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002896:	4a03      	ldr	r2, [pc, #12]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028a0:	e014      	b.n	80028cc <HAL_RCC_OscConfig+0x52c>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
 80028ac:	4b9c      	ldr	r3, [pc, #624]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	4a9b      	ldr	r2, [pc, #620]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028bc:	4b98      	ldr	r3, [pc, #608]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c2:	4a97      	ldr	r2, [pc, #604]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d016      	beq.n	8002902 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7ff f9a2 	bl	8001c1c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028dc:	f7ff f99e 	bl	8001c1c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e12a      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ed      	beq.n	80028dc <HAL_RCC_OscConfig+0x53c>
 8002900:	e015      	b.n	800292e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7ff f98b 	bl	8001c1c <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7ff f987 	bl	8001c1c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e113      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002920:	4b7f      	ldr	r3, [pc, #508]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ed      	bne.n	800290a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b7a      	ldr	r3, [pc, #488]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	4a79      	ldr	r2, [pc, #484]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 800293a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80fe 	beq.w	8002b46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294e:	2b02      	cmp	r3, #2
 8002950:	f040 80d0 	bne.w	8002af4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002954:	4b72      	ldr	r3, [pc, #456]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	429a      	cmp	r2, r3
 8002966:	d130      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	3b01      	subs	r3, #1
 8002974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d127      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002984:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d11f      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002994:	2a07      	cmp	r2, #7
 8002996:	bf14      	ite	ne
 8002998:	2201      	movne	r2, #1
 800299a:	2200      	moveq	r2, #0
 800299c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299e:	4293      	cmp	r3, r2
 80029a0:	d113      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	3b01      	subs	r3, #1
 80029b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d06e      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	d069      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029dc:	4b50      	ldr	r3, [pc, #320]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0ad      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029f8:	f7ff f910 	bl	8001c1c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7ff f90c 	bl	8001c1c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e09a      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a12:	4b43      	ldr	r3, [pc, #268]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1e:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	4b40      	ldr	r3, [pc, #256]	@ (8002b24 <HAL_RCC_OscConfig+0x784>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a38:	0212      	lsls	r2, r2, #8
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a40:	0852      	lsrs	r2, r2, #1
 8002a42:	3a01      	subs	r2, #1
 8002a44:	0552      	lsls	r2, r2, #21
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a4c:	0852      	lsrs	r2, r2, #1
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	0652      	lsls	r2, r2, #25
 8002a52:	4311      	orrs	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a58:	0912      	lsrs	r2, r2, #4
 8002a5a:	0452      	lsls	r2, r2, #17
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	4930      	ldr	r1, [pc, #192]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a64:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2d      	ldr	r2, [pc, #180]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a2a      	ldr	r2, [pc, #168]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a7c:	f7ff f8ce 	bl	8001c1c <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7ff f8ca 	bl	8001c1c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e058      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a96:	4b22      	ldr	r3, [pc, #136]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa2:	e050      	b.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e04f      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d148      	bne.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a19      	ldr	r2, [pc, #100]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac0:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a16      	ldr	r2, [pc, #88]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002acc:	f7ff f8a6 	bl	8001c1c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7ff f8a2 	bl	8001c1c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e030      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x734>
 8002af2:	e028      	b.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d023      	beq.n	8002b42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a08      	ldr	r2, [pc, #32]	@ (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002b00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7ff f889 	bl	8001c1c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	e00c      	b.n	8002b28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7ff f885 	bl	8001c1c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d905      	bls.n	8002b28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e013      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ec      	bne.n	8002b0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4905      	ldr	r1, [pc, #20]	@ (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_RCC_OscConfig+0x7b4>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60cb      	str	r3, [r1, #12]
 8002b40:	e001      	b.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	feeefffc 	.word	0xfeeefffc

08002b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0e7      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b75      	ldr	r3, [pc, #468]	@ (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d910      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b72      	ldr	r3, [pc, #456]	@ (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4970      	ldr	r1, [pc, #448]	@ (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0cf      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b66      	ldr	r3, [pc, #408]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d908      	bls.n	8002bca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b63      	ldr	r3, [pc, #396]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4960      	ldr	r1, [pc, #384]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04c      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	4b5a      	ldr	r3, [pc, #360]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d121      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0a6      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	4b54      	ldr	r3, [pc, #336]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e09a      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e08e      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e086      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b46      	ldr	r3, [pc, #280]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4943      	ldr	r1, [pc, #268]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fe ffec 	bl	8001c1c <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe ffe8 	bl	8001c1c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e06e      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b31      	ldr	r3, [pc, #196]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d208      	bcs.n	8002c9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	492b      	ldr	r1, [pc, #172]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9e:	4b29      	ldr	r3, [pc, #164]	@ (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d210      	bcs.n	8002cce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cac:	4b25      	ldr	r3, [pc, #148]	@ (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 0207 	bic.w	r2, r3, #7
 8002cb4:	4923      	ldr	r1, [pc, #140]	@ (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbc:	4b21      	ldr	r3, [pc, #132]	@ (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e036      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cda:	4b1b      	ldr	r3, [pc, #108]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4918      	ldr	r1, [pc, #96]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf8:	4b13      	ldr	r3, [pc, #76]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4910      	ldr	r1, [pc, #64]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0c:	f000 f824 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	490b      	ldr	r1, [pc, #44]	@ (8002d4c <HAL_RCC_ClockConfig+0x1f4>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	4a09      	ldr	r2, [pc, #36]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d2c:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_RCC_ClockConfig+0x1fc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe ff23 	bl	8001b7c <HAL_InitTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08008d58 	.word	0x08008d58
 8002d50:	20000004 	.word	0x20000004
 8002d54:	20000008 	.word	0x20000008

08002d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	@ 0x24
 8002d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d66:	4b3e      	ldr	r3, [pc, #248]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d70:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x34>
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d121      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d11e      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d8c:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d98:	4b31      	ldr	r3, [pc, #196]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e005      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002da8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002db4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d102      	bne.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dd0:	4b25      	ldr	r3, [pc, #148]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	e004      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ddc:	4b23      	ldr	r3, [pc, #140]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d134      	bne.n	8002e50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002de6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0xac>
 8002dfc:	e005      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e00:	617b      	str	r3, [r7, #20]
      break;
 8002e02:	e005      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e04:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e06:	617b      	str	r3, [r7, #20]
      break;
 8002e08:	e002      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	617b      	str	r3, [r7, #20]
      break;
 8002e0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e10:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	fb03 f202 	mul.w	r2, r3, r2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	0e5b      	lsrs	r3, r3, #25
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	3301      	adds	r3, #1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e50:	69bb      	ldr	r3, [r7, #24]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	@ 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08008d70 	.word	0x08008d70
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e74:	4b03      	ldr	r3, [pc, #12]	@ (8002e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000004 	.word	0x20000004

08002e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e8c:	f7ff fff0 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4904      	ldr	r1, [pc, #16]	@ (8002eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	08008d68 	.word	0x08008d68

08002eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eb8:	f7ff ffda 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	0adb      	lsrs	r3, r3, #11
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4904      	ldr	r1, [pc, #16]	@ (8002edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08008d68 	.word	0x08008d68

08002ee0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eec:	4b2a      	ldr	r3, [pc, #168]	@ (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ef8:	f7ff f9ee 	bl	80022d8 <HAL_PWREx_GetVoltageRange>
 8002efc:	6178      	str	r0, [r7, #20]
 8002efe:	e014      	b.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b25      	ldr	r3, [pc, #148]	@ (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	4a24      	ldr	r2, [pc, #144]	@ (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f0c:	4b22      	ldr	r3, [pc, #136]	@ (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f18:	f7ff f9de 	bl	80022d8 <HAL_PWREx_GetVoltageRange>
 8002f1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f22:	4a1d      	ldr	r2, [pc, #116]	@ (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f30:	d10b      	bne.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b80      	cmp	r3, #128	@ 0x80
 8002f36:	d919      	bls.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f3c:	d902      	bls.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f3e:	2302      	movs	r3, #2
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	e013      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f44:	2301      	movs	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	e010      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b80      	cmp	r3, #128	@ 0x80
 8002f4e:	d902      	bls.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f50:	2303      	movs	r3, #3
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	e00a      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b80      	cmp	r3, #128	@ 0x80
 8002f5a:	d102      	bne.n	8002f62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	e004      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b70      	cmp	r3, #112	@ 0x70
 8002f66:	d101      	bne.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f68:	2301      	movs	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 0207 	bic.w	r2, r3, #7
 8002f74:	4909      	ldr	r1, [pc, #36]	@ (8002f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f7c:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d001      	beq.n	8002f8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fa8:	2300      	movs	r3, #0
 8002faa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fac:	2300      	movs	r3, #0
 8002fae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d041      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fc4:	d02a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fca:	d824      	bhi.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fd6:	d81e      	bhi.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fe0:	d010      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fe2:	e018      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fe4:	4b86      	ldr	r3, [pc, #536]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a85      	ldr	r2, [pc, #532]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff0:	e015      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fabb 	bl	8003574 <RCCEx_PLLSAI1_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003002:	e00c      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3320      	adds	r3, #32
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fba6 	bl	800375c <RCCEx_PLLSAI2_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003014:	e003      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	74fb      	strb	r3, [r7, #19]
      break;
 800301a:	e000      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800301c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003024:	4b76      	ldr	r3, [pc, #472]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003032:	4973      	ldr	r1, [pc, #460]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800303a:	e001      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d041      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003050:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003054:	d02a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003056:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800305a:	d824      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800305c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003066:	d81e      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003070:	d010      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003072:	e018      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003074:	4b62      	ldr	r3, [pc, #392]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a61      	ldr	r2, [pc, #388]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003080:	e015      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fa73 	bl	8003574 <RCCEx_PLLSAI1_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003092:	e00c      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3320      	adds	r3, #32
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fb5e 	bl	800375c <RCCEx_PLLSAI2_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	74fb      	strb	r3, [r7, #19]
      break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030b4:	4b52      	ldr	r3, [pc, #328]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030c2:	494f      	ldr	r1, [pc, #316]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030ca:	e001      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a0 	beq.w	800321e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030e2:	4b47      	ldr	r3, [pc, #284]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b41      	ldr	r3, [pc, #260]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fc:	4a40      	ldr	r2, [pc, #256]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003102:	6593      	str	r3, [r2, #88]	@ 0x58
 8003104:	4b3e      	ldr	r3, [pc, #248]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003110:	2301      	movs	r3, #1
 8003112:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003114:	4b3b      	ldr	r3, [pc, #236]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a3a      	ldr	r2, [pc, #232]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800311a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003120:	f7fe fd7c 	bl	8001c1c <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003126:	e009      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003128:	f7fe fd78 	bl	8001c1c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d902      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	74fb      	strb	r3, [r7, #19]
        break;
 800313a:	e005      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800313c:	4b31      	ldr	r3, [pc, #196]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ef      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d15c      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800314e:	4b2c      	ldr	r3, [pc, #176]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003158:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01f      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	429a      	cmp	r2, r3
 800316a:	d019      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800316c:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003178:	4b21      	ldr	r3, [pc, #132]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317e:	4a20      	ldr	r2, [pc, #128]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	4a1c      	ldr	r2, [pc, #112]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003198:	4a19      	ldr	r2, [pc, #100]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d016      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fe fd37 	bl	8001c1c <HAL_GetTick>
 80031ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b0:	e00b      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe fd33 	bl	8001c1c <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d902      	bls.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	74fb      	strb	r3, [r7, #19]
            break;
 80031c8:	e006      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ec      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ee:	4904      	ldr	r1, [pc, #16]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031f6:	e009      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	74bb      	strb	r3, [r7, #18]
 80031fc:	e006      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320c:	7c7b      	ldrb	r3, [r7, #17]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d105      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003212:	4b9e      	ldr	r3, [pc, #632]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	4a9d      	ldr	r2, [pc, #628]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800321c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800322a:	4b98      	ldr	r3, [pc, #608]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f023 0203 	bic.w	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	4994      	ldr	r1, [pc, #592]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800324c:	4b8f      	ldr	r3, [pc, #572]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f023 020c 	bic.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325a:	498c      	ldr	r1, [pc, #560]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800326e:	4b87      	ldr	r3, [pc, #540]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003274:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	4983      	ldr	r1, [pc, #524]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003290:	4b7e      	ldr	r3, [pc, #504]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003296:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	497b      	ldr	r1, [pc, #492]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032b2:	4b76      	ldr	r3, [pc, #472]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c0:	4972      	ldr	r1, [pc, #456]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032d4:	4b6d      	ldr	r3, [pc, #436]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e2:	496a      	ldr	r1, [pc, #424]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032f6:	4b65      	ldr	r3, [pc, #404]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003304:	4961      	ldr	r1, [pc, #388]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003318:	4b5c      	ldr	r3, [pc, #368]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003326:	4959      	ldr	r1, [pc, #356]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800333a:	4b54      	ldr	r3, [pc, #336]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003340:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003348:	4950      	ldr	r1, [pc, #320]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800335c:	4b4b      	ldr	r3, [pc, #300]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003362:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336a:	4948      	ldr	r1, [pc, #288]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800337e:	4b43      	ldr	r3, [pc, #268]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003384:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	493f      	ldr	r1, [pc, #252]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d028      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a0:	4b3a      	ldr	r3, [pc, #232]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ae:	4937      	ldr	r1, [pc, #220]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033be:	d106      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c0:	4b32      	ldr	r3, [pc, #200]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a31      	ldr	r2, [pc, #196]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ca:	60d3      	str	r3, [r2, #12]
 80033cc:	e011      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2101      	movs	r1, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f8c8 	bl	8003574 <RCCEx_PLLSAI1_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d028      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033fe:	4b23      	ldr	r3, [pc, #140]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340c:	491f      	ldr	r1, [pc, #124]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800341c:	d106      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800341e:	4b1b      	ldr	r3, [pc, #108]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4a1a      	ldr	r2, [pc, #104]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003428:	60d3      	str	r3, [r2, #12]
 800342a:	e011      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003430:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003434:	d10c      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	2101      	movs	r1, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f899 	bl	8003574 <RCCEx_PLLSAI1_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02b      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003462:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800346a:	4908      	ldr	r1, [pc, #32]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800347a:	d109      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800347c:	4b03      	ldr	r3, [pc, #12]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a02      	ldr	r2, [pc, #8]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003486:	60d3      	str	r3, [r2, #12]
 8003488:	e014      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003498:	d10c      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	2101      	movs	r1, #1
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f867 	bl	8003574 <RCCEx_PLLSAI1_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d02f      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ce:	4928      	ldr	r1, [pc, #160]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034de:	d10d      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	2102      	movs	r1, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f844 	bl	8003574 <RCCEx_PLLSAI1_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d014      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	74bb      	strb	r3, [r7, #18]
 80034fa:	e011      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003504:	d10c      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3320      	adds	r3, #32
 800350a:	2102      	movs	r1, #2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f925 	bl	800375c <RCCEx_PLLSAI2_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800352c:	4b10      	ldr	r3, [pc, #64]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800353a:	490d      	ldr	r1, [pc, #52]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800354e:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800355e:	4904      	ldr	r1, [pc, #16]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003566:	7cbb      	ldrb	r3, [r7, #18]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000

08003574 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003582:	4b75      	ldr	r3, [pc, #468]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800358e:	4b72      	ldr	r3, [pc, #456]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0203 	and.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d10d      	bne.n	80035ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
       ||
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
       ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d047      	beq.n	800364a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e044      	b.n	800364a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d018      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0x86>
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d825      	bhi.n	8003618 <RCCEx_PLLSAI1_Config+0xa4>
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d002      	beq.n	80035d6 <RCCEx_PLLSAI1_Config+0x62>
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d009      	beq.n	80035e8 <RCCEx_PLLSAI1_Config+0x74>
 80035d4:	e020      	b.n	8003618 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035d6:	4b60      	ldr	r3, [pc, #384]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d11d      	bne.n	800361e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e6:	e01a      	b.n	800361e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d116      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f8:	e013      	b.n	8003622 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035fa:	4b57      	ldr	r3, [pc, #348]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10f      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003606:	4b54      	ldr	r3, [pc, #336]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003616:	e006      	b.n	8003626 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e004      	b.n	8003628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800361e:	bf00      	nop
 8003620:	e002      	b.n	8003628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003626:	bf00      	nop
    }

    if(status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800362e:	4b4a      	ldr	r3, [pc, #296]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	430b      	orrs	r3, r1
 8003644:	4944      	ldr	r1, [pc, #272]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d17d      	bne.n	800374c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003650:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a40      	ldr	r2, [pc, #256]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800365a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365c:	f7fe fade 	bl	8001c1c <HAL_GetTick>
 8003660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003662:	e009      	b.n	8003678 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003664:	f7fe fada 	bl	8001c1c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d902      	bls.n	8003678 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	73fb      	strb	r3, [r7, #15]
        break;
 8003676:	e005      	b.n	8003684 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003678:	4b37      	ldr	r3, [pc, #220]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ef      	bne.n	8003664 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d160      	bne.n	800374c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d111      	bne.n	80036b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003690:	4b31      	ldr	r3, [pc, #196]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6892      	ldr	r2, [r2, #8]
 80036a0:	0211      	lsls	r1, r2, #8
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68d2      	ldr	r2, [r2, #12]
 80036a6:	0912      	lsrs	r2, r2, #4
 80036a8:	0452      	lsls	r2, r2, #17
 80036aa:	430a      	orrs	r2, r1
 80036ac:	492a      	ldr	r1, [pc, #168]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	610b      	str	r3, [r1, #16]
 80036b2:	e027      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d112      	bne.n	80036e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ba:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80036c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6892      	ldr	r2, [r2, #8]
 80036ca:	0211      	lsls	r1, r2, #8
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6912      	ldr	r2, [r2, #16]
 80036d0:	0852      	lsrs	r2, r2, #1
 80036d2:	3a01      	subs	r2, #1
 80036d4:	0552      	lsls	r2, r2, #21
 80036d6:	430a      	orrs	r2, r1
 80036d8:	491f      	ldr	r1, [pc, #124]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	610b      	str	r3, [r1, #16]
 80036de:	e011      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6892      	ldr	r2, [r2, #8]
 80036f0:	0211      	lsls	r1, r2, #8
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6952      	ldr	r2, [r2, #20]
 80036f6:	0852      	lsrs	r2, r2, #1
 80036f8:	3a01      	subs	r2, #1
 80036fa:	0652      	lsls	r2, r2, #25
 80036fc:	430a      	orrs	r2, r1
 80036fe:	4916      	ldr	r1, [pc, #88]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003704:	4b14      	ldr	r3, [pc, #80]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a13      	ldr	r2, [pc, #76]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800370e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fe fa84 	bl	8001c1c <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003716:	e009      	b.n	800372c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003718:	f7fe fa80 	bl	8001c1c <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d902      	bls.n	800372c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	73fb      	strb	r3, [r7, #15]
          break;
 800372a:	e005      	b.n	8003738 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800372c:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ef      	beq.n	8003718 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800373e:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	4904      	ldr	r1, [pc, #16]	@ (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000

0800375c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800376a:	4b6a      	ldr	r3, [pc, #424]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003776:	4b67      	ldr	r3, [pc, #412]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0203 	and.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d10d      	bne.n	80037a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
       ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800378e:	4b61      	ldr	r3, [pc, #388]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
       ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d047      	beq.n	8003832 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	e044      	b.n	8003832 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d018      	beq.n	80037e2 <RCCEx_PLLSAI2_Config+0x86>
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d825      	bhi.n	8003800 <RCCEx_PLLSAI2_Config+0xa4>
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d002      	beq.n	80037be <RCCEx_PLLSAI2_Config+0x62>
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d009      	beq.n	80037d0 <RCCEx_PLLSAI2_Config+0x74>
 80037bc:	e020      	b.n	8003800 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037be:	4b55      	ldr	r3, [pc, #340]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11d      	bne.n	8003806 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ce:	e01a      	b.n	8003806 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037d0:	4b50      	ldr	r3, [pc, #320]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e0:	e013      	b.n	800380a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ee:	4b49      	ldr	r3, [pc, #292]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037fe:	e006      	b.n	800380e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e004      	b.n	8003810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800380e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10d      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003816:	4b3f      	ldr	r3, [pc, #252]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	430b      	orrs	r3, r1
 800382c:	4939      	ldr	r1, [pc, #228]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	4313      	orrs	r3, r2
 8003830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d167      	bne.n	8003908 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003838:	4b36      	ldr	r3, [pc, #216]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a35      	ldr	r2, [pc, #212]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fe f9ea 	bl	8001c1c <HAL_GetTick>
 8003848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800384a:	e009      	b.n	8003860 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800384c:	f7fe f9e6 	bl	8001c1c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d902      	bls.n	8003860 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	73fb      	strb	r3, [r7, #15]
        break;
 800385e:	e005      	b.n	800386c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003860:	4b2c      	ldr	r3, [pc, #176]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ef      	bne.n	800384c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d14a      	bne.n	8003908 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003878:	4b26      	ldr	r3, [pc, #152]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	0211      	lsls	r1, r2, #8
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68d2      	ldr	r2, [r2, #12]
 800388e:	0912      	lsrs	r2, r2, #4
 8003890:	0452      	lsls	r2, r2, #17
 8003892:	430a      	orrs	r2, r1
 8003894:	491f      	ldr	r1, [pc, #124]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	4313      	orrs	r3, r2
 8003898:	614b      	str	r3, [r1, #20]
 800389a:	e011      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800389c:	4b1d      	ldr	r3, [pc, #116]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	0211      	lsls	r1, r2, #8
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6912      	ldr	r2, [r2, #16]
 80038b2:	0852      	lsrs	r2, r2, #1
 80038b4:	3a01      	subs	r2, #1
 80038b6:	0652      	lsls	r2, r2, #25
 80038b8:	430a      	orrs	r2, r1
 80038ba:	4916      	ldr	r1, [pc, #88]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038c0:	4b14      	ldr	r3, [pc, #80]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a13      	ldr	r2, [pc, #76]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fe f9a6 	bl	8001c1c <HAL_GetTick>
 80038d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038d2:	e009      	b.n	80038e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038d4:	f7fe f9a2 	bl	8001c1c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d902      	bls.n	80038e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	73fb      	strb	r3, [r7, #15]
          break;
 80038e6:	e005      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ef      	beq.n	80038d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038fa:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	4904      	ldr	r1, [pc, #16]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003904:	4313      	orrs	r3, r2
 8003906:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000

08003918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e049      	b.n	80039be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd feb0 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f000 fbe4 	bl	8004124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d001      	beq.n	80039e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e047      	b.n	8003a70 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a23      	ldr	r2, [pc, #140]	@ (8003a7c <HAL_TIM_Base_Start+0xb4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01d      	beq.n	8003a2e <HAL_TIM_Base_Start+0x66>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fa:	d018      	beq.n	8003a2e <HAL_TIM_Base_Start+0x66>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1f      	ldr	r2, [pc, #124]	@ (8003a80 <HAL_TIM_Base_Start+0xb8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_TIM_Base_Start+0x66>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a84 <HAL_TIM_Base_Start+0xbc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_TIM_Base_Start+0x66>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1c      	ldr	r2, [pc, #112]	@ (8003a88 <HAL_TIM_Base_Start+0xc0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_TIM_Base_Start+0x66>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003a8c <HAL_TIM_Base_Start+0xc4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_TIM_Base_Start+0x66>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a19      	ldr	r2, [pc, #100]	@ (8003a90 <HAL_TIM_Base_Start+0xc8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d115      	bne.n	8003a5a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <HAL_TIM_Base_Start+0xcc>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b06      	cmp	r3, #6
 8003a3e:	d015      	beq.n	8003a6c <HAL_TIM_Base_Start+0xa4>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a46:	d011      	beq.n	8003a6c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a58:	e008      	b.n	8003a6c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e000      	b.n	8003a6e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40013400 	.word	0x40013400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	00010007 	.word	0x00010007

08003a98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e049      	b.n	8003b3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f841 	bl	8003b46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	f000 fb24 	bl	8004124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <HAL_TIM_PWM_Start+0x24>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	bf14      	ite	ne
 8003b78:	2301      	movne	r3, #1
 8003b7a:	2300      	moveq	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e03c      	b.n	8003bfa <HAL_TIM_PWM_Start+0x9e>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d109      	bne.n	8003b9a <HAL_TIM_PWM_Start+0x3e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	bf14      	ite	ne
 8003b92:	2301      	movne	r3, #1
 8003b94:	2300      	moveq	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	e02f      	b.n	8003bfa <HAL_TIM_PWM_Start+0x9e>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d109      	bne.n	8003bb4 <HAL_TIM_PWM_Start+0x58>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e022      	b.n	8003bfa <HAL_TIM_PWM_Start+0x9e>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d109      	bne.n	8003bce <HAL_TIM_PWM_Start+0x72>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	bf14      	ite	ne
 8003bc6:	2301      	movne	r3, #1
 8003bc8:	2300      	moveq	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	e015      	b.n	8003bfa <HAL_TIM_PWM_Start+0x9e>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d109      	bne.n	8003be8 <HAL_TIM_PWM_Start+0x8c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	bf14      	ite	ne
 8003be0:	2301      	movne	r3, #1
 8003be2:	2300      	moveq	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	e008      	b.n	8003bfa <HAL_TIM_PWM_Start+0x9e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e09c      	b.n	8003d3c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <HAL_TIM_PWM_Start+0xb6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c10:	e023      	b.n	8003c5a <HAL_TIM_PWM_Start+0xfe>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d104      	bne.n	8003c22 <HAL_TIM_PWM_Start+0xc6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c20:	e01b      	b.n	8003c5a <HAL_TIM_PWM_Start+0xfe>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_PWM_Start+0xd6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c30:	e013      	b.n	8003c5a <HAL_TIM_PWM_Start+0xfe>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_PWM_Start+0xe6>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c40:	e00b      	b.n	8003c5a <HAL_TIM_PWM_Start+0xfe>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_PWM_Start+0xf6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c50:	e003      	b.n	8003c5a <HAL_TIM_PWM_Start+0xfe>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fe74 	bl	8004950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a35      	ldr	r2, [pc, #212]	@ (8003d44 <HAL_TIM_PWM_Start+0x1e8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x13e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a34      	ldr	r2, [pc, #208]	@ (8003d48 <HAL_TIM_PWM_Start+0x1ec>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x13e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a32      	ldr	r2, [pc, #200]	@ (8003d4c <HAL_TIM_PWM_Start+0x1f0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x13e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a31      	ldr	r2, [pc, #196]	@ (8003d50 <HAL_TIM_PWM_Start+0x1f4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x13e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a2f      	ldr	r2, [pc, #188]	@ (8003d54 <HAL_TIM_PWM_Start+0x1f8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_TIM_PWM_Start+0x142>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_TIM_PWM_Start+0x144>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a22      	ldr	r2, [pc, #136]	@ (8003d44 <HAL_TIM_PWM_Start+0x1e8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x19e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc6:	d018      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x19e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a22      	ldr	r2, [pc, #136]	@ (8003d58 <HAL_TIM_PWM_Start+0x1fc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x19e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a21      	ldr	r2, [pc, #132]	@ (8003d5c <HAL_TIM_PWM_Start+0x200>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x19e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d60 <HAL_TIM_PWM_Start+0x204>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x19e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a17      	ldr	r2, [pc, #92]	@ (8003d48 <HAL_TIM_PWM_Start+0x1ec>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x19e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	@ (8003d4c <HAL_TIM_PWM_Start+0x1f0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d115      	bne.n	8003d26 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	4b18      	ldr	r3, [pc, #96]	@ (8003d64 <HAL_TIM_PWM_Start+0x208>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b06      	cmp	r3, #6
 8003d0a:	d015      	beq.n	8003d38 <HAL_TIM_PWM_Start+0x1dc>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d12:	d011      	beq.n	8003d38 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d24:	e008      	b.n	8003d38 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0201 	orr.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e000      	b.n	8003d3a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800
 8003d60:	40000c00 	.word	0x40000c00
 8003d64:	00010007 	.word	0x00010007

08003d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e0ff      	b.n	8003f86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b14      	cmp	r3, #20
 8003d92:	f200 80f0 	bhi.w	8003f76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d96:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003f77 	.word	0x08003f77
 8003da4:	08003f77 	.word	0x08003f77
 8003da8:	08003f77 	.word	0x08003f77
 8003dac:	08003e31 	.word	0x08003e31
 8003db0:	08003f77 	.word	0x08003f77
 8003db4:	08003f77 	.word	0x08003f77
 8003db8:	08003f77 	.word	0x08003f77
 8003dbc:	08003e73 	.word	0x08003e73
 8003dc0:	08003f77 	.word	0x08003f77
 8003dc4:	08003f77 	.word	0x08003f77
 8003dc8:	08003f77 	.word	0x08003f77
 8003dcc:	08003eb3 	.word	0x08003eb3
 8003dd0:	08003f77 	.word	0x08003f77
 8003dd4:	08003f77 	.word	0x08003f77
 8003dd8:	08003f77 	.word	0x08003f77
 8003ddc:	08003ef5 	.word	0x08003ef5
 8003de0:	08003f77 	.word	0x08003f77
 8003de4:	08003f77 	.word	0x08003f77
 8003de8:	08003f77 	.word	0x08003f77
 8003dec:	08003f35 	.word	0x08003f35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fa3a 	bl	8004270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0208 	orr.w	r2, r2, #8
 8003e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6999      	ldr	r1, [r3, #24]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	619a      	str	r2, [r3, #24]
      break;
 8003e2e:	e0a5      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 faaa 	bl	8004390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	619a      	str	r2, [r3, #24]
      break;
 8003e70:	e084      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fb13 	bl	80044a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0208 	orr.w	r2, r2, #8
 8003e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0204 	bic.w	r2, r2, #4
 8003e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69d9      	ldr	r1, [r3, #28]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	61da      	str	r2, [r3, #28]
      break;
 8003eb0:	e064      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fb7b 	bl	80045b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69d9      	ldr	r1, [r3, #28]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	021a      	lsls	r2, r3, #8
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	61da      	str	r2, [r3, #28]
      break;
 8003ef2:	e043      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fbc4 	bl	8004688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0208 	orr.w	r2, r2, #8
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0204 	bic.w	r2, r2, #4
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f32:	e023      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fc08 	bl	8004750 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	021a      	lsls	r2, r3, #8
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f74:	e002      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop

08003f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIM_ConfigClockSource+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e0b6      	b.n	800411a <HAL_TIM_ConfigClockSource+0x18a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe8:	d03e      	beq.n	8004068 <HAL_TIM_ConfigClockSource+0xd8>
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fee:	f200 8087 	bhi.w	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8003ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff6:	f000 8086 	beq.w	8004106 <HAL_TIM_ConfigClockSource+0x176>
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffe:	d87f      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004000:	2b70      	cmp	r3, #112	@ 0x70
 8004002:	d01a      	beq.n	800403a <HAL_TIM_ConfigClockSource+0xaa>
 8004004:	2b70      	cmp	r3, #112	@ 0x70
 8004006:	d87b      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004008:	2b60      	cmp	r3, #96	@ 0x60
 800400a:	d050      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x11e>
 800400c:	2b60      	cmp	r3, #96	@ 0x60
 800400e:	d877      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004010:	2b50      	cmp	r3, #80	@ 0x50
 8004012:	d03c      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xfe>
 8004014:	2b50      	cmp	r3, #80	@ 0x50
 8004016:	d873      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d058      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x13e>
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	d86f      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004020:	2b30      	cmp	r3, #48	@ 0x30
 8004022:	d064      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15e>
 8004024:	2b30      	cmp	r3, #48	@ 0x30
 8004026:	d86b      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004028:	2b20      	cmp	r3, #32
 800402a:	d060      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15e>
 800402c:	2b20      	cmp	r3, #32
 800402e:	d867      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d05c      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15e>
 8004034:	2b10      	cmp	r3, #16
 8004036:	d05a      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15e>
 8004038:	e062      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800404a:	f000 fc61 	bl	8004910 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800405c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	609a      	str	r2, [r3, #8]
      break;
 8004066:	e04f      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004078:	f000 fc4a 	bl	8004910 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800408a:	609a      	str	r2, [r3, #8]
      break;
 800408c:	e03c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	461a      	mov	r2, r3
 800409c:	f000 fbbe 	bl	800481c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2150      	movs	r1, #80	@ 0x50
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fc17 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 80040ac:	e02c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ba:	461a      	mov	r2, r3
 80040bc:	f000 fbdd 	bl	800487a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2160      	movs	r1, #96	@ 0x60
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fc07 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 80040cc:	e01c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040da:	461a      	mov	r2, r3
 80040dc:	f000 fb9e 	bl	800481c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2140      	movs	r1, #64	@ 0x40
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fbf7 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 80040ec:	e00c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4619      	mov	r1, r3
 80040f8:	4610      	mov	r0, r2
 80040fa:	f000 fbee 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 80040fe:	e003      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      break;
 8004104:	e000      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a46      	ldr	r2, [pc, #280]	@ (8004250 <TIM_Base_SetConfig+0x12c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004142:	d00f      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a43      	ldr	r2, [pc, #268]	@ (8004254 <TIM_Base_SetConfig+0x130>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00b      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a42      	ldr	r2, [pc, #264]	@ (8004258 <TIM_Base_SetConfig+0x134>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d007      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a41      	ldr	r2, [pc, #260]	@ (800425c <TIM_Base_SetConfig+0x138>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a40      	ldr	r2, [pc, #256]	@ (8004260 <TIM_Base_SetConfig+0x13c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d108      	bne.n	8004176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a35      	ldr	r2, [pc, #212]	@ (8004250 <TIM_Base_SetConfig+0x12c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01f      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004184:	d01b      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a32      	ldr	r2, [pc, #200]	@ (8004254 <TIM_Base_SetConfig+0x130>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d017      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a31      	ldr	r2, [pc, #196]	@ (8004258 <TIM_Base_SetConfig+0x134>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a30      	ldr	r2, [pc, #192]	@ (800425c <TIM_Base_SetConfig+0x138>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00f      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004260 <TIM_Base_SetConfig+0x13c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004264 <TIM_Base_SetConfig+0x140>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004268 <TIM_Base_SetConfig+0x144>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2c      	ldr	r2, [pc, #176]	@ (800426c <TIM_Base_SetConfig+0x148>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a16      	ldr	r2, [pc, #88]	@ (8004250 <TIM_Base_SetConfig+0x12c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00f      	beq.n	800421c <TIM_Base_SetConfig+0xf8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a18      	ldr	r2, [pc, #96]	@ (8004260 <TIM_Base_SetConfig+0x13c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00b      	beq.n	800421c <TIM_Base_SetConfig+0xf8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a17      	ldr	r2, [pc, #92]	@ (8004264 <TIM_Base_SetConfig+0x140>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0xf8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a16      	ldr	r2, [pc, #88]	@ (8004268 <TIM_Base_SetConfig+0x144>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0xf8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a15      	ldr	r2, [pc, #84]	@ (800426c <TIM_Base_SetConfig+0x148>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d103      	bne.n	8004224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d105      	bne.n	8004242 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f023 0201 	bic.w	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	611a      	str	r2, [r3, #16]
  }
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40000c00 	.word	0x40000c00
 8004260:	40013400 	.word	0x40013400
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800

08004270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f023 0201 	bic.w	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0303 	bic.w	r3, r3, #3
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 0302 	bic.w	r3, r3, #2
 80042bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a2c      	ldr	r2, [pc, #176]	@ (800437c <TIM_OC1_SetConfig+0x10c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00f      	beq.n	80042f0 <TIM_OC1_SetConfig+0x80>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004380 <TIM_OC1_SetConfig+0x110>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_OC1_SetConfig+0x80>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a2a      	ldr	r2, [pc, #168]	@ (8004384 <TIM_OC1_SetConfig+0x114>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_OC1_SetConfig+0x80>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a29      	ldr	r2, [pc, #164]	@ (8004388 <TIM_OC1_SetConfig+0x118>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_OC1_SetConfig+0x80>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a28      	ldr	r2, [pc, #160]	@ (800438c <TIM_OC1_SetConfig+0x11c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10c      	bne.n	800430a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0308 	bic.w	r3, r3, #8
 80042f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1b      	ldr	r2, [pc, #108]	@ (800437c <TIM_OC1_SetConfig+0x10c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00f      	beq.n	8004332 <TIM_OC1_SetConfig+0xc2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1a      	ldr	r2, [pc, #104]	@ (8004380 <TIM_OC1_SetConfig+0x110>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00b      	beq.n	8004332 <TIM_OC1_SetConfig+0xc2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <TIM_OC1_SetConfig+0x114>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d007      	beq.n	8004332 <TIM_OC1_SetConfig+0xc2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a18      	ldr	r2, [pc, #96]	@ (8004388 <TIM_OC1_SetConfig+0x118>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_OC1_SetConfig+0xc2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a17      	ldr	r2, [pc, #92]	@ (800438c <TIM_OC1_SetConfig+0x11c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d111      	bne.n	8004356 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40013400 	.word	0x40013400
 8004384:	40014000 	.word	0x40014000
 8004388:	40014400 	.word	0x40014400
 800438c:	40014800 	.word	0x40014800

08004390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f023 0210 	bic.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0320 	bic.w	r3, r3, #32
 80043de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a28      	ldr	r2, [pc, #160]	@ (8004490 <TIM_OC2_SetConfig+0x100>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_OC2_SetConfig+0x6c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a27      	ldr	r2, [pc, #156]	@ (8004494 <TIM_OC2_SetConfig+0x104>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d10d      	bne.n	8004418 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004416:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <TIM_OC2_SetConfig+0x100>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00f      	beq.n	8004440 <TIM_OC2_SetConfig+0xb0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a1c      	ldr	r2, [pc, #112]	@ (8004494 <TIM_OC2_SetConfig+0x104>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00b      	beq.n	8004440 <TIM_OC2_SetConfig+0xb0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1b      	ldr	r2, [pc, #108]	@ (8004498 <TIM_OC2_SetConfig+0x108>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d007      	beq.n	8004440 <TIM_OC2_SetConfig+0xb0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <TIM_OC2_SetConfig+0x10c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d003      	beq.n	8004440 <TIM_OC2_SetConfig+0xb0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a19      	ldr	r2, [pc, #100]	@ (80044a0 <TIM_OC2_SetConfig+0x110>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d113      	bne.n	8004468 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800444e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40012c00 	.word	0x40012c00
 8004494:	40013400 	.word	0x40013400
 8004498:	40014000 	.word	0x40014000
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800

080044a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a27      	ldr	r2, [pc, #156]	@ (80045a0 <TIM_OC3_SetConfig+0xfc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d003      	beq.n	800450e <TIM_OC3_SetConfig+0x6a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a26      	ldr	r2, [pc, #152]	@ (80045a4 <TIM_OC3_SetConfig+0x100>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10d      	bne.n	800452a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a1c      	ldr	r2, [pc, #112]	@ (80045a0 <TIM_OC3_SetConfig+0xfc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00f      	beq.n	8004552 <TIM_OC3_SetConfig+0xae>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1b      	ldr	r2, [pc, #108]	@ (80045a4 <TIM_OC3_SetConfig+0x100>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_OC3_SetConfig+0xae>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1a      	ldr	r2, [pc, #104]	@ (80045a8 <TIM_OC3_SetConfig+0x104>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_OC3_SetConfig+0xae>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a19      	ldr	r2, [pc, #100]	@ (80045ac <TIM_OC3_SetConfig+0x108>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_OC3_SetConfig+0xae>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <TIM_OC3_SetConfig+0x10c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d113      	bne.n	800457a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40013400 	.word	0x40013400
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40014400 	.word	0x40014400
 80045b0:	40014800 	.word	0x40014800

080045b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a18      	ldr	r2, [pc, #96]	@ (8004674 <TIM_OC4_SetConfig+0xc0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00f      	beq.n	8004638 <TIM_OC4_SetConfig+0x84>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a17      	ldr	r2, [pc, #92]	@ (8004678 <TIM_OC4_SetConfig+0xc4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_OC4_SetConfig+0x84>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a16      	ldr	r2, [pc, #88]	@ (800467c <TIM_OC4_SetConfig+0xc8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_OC4_SetConfig+0x84>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a15      	ldr	r2, [pc, #84]	@ (8004680 <TIM_OC4_SetConfig+0xcc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC4_SetConfig+0x84>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a14      	ldr	r2, [pc, #80]	@ (8004684 <TIM_OC4_SetConfig+0xd0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d109      	bne.n	800464c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800463e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	019b      	lsls	r3, r3, #6
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80046cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a17      	ldr	r2, [pc, #92]	@ (800473c <TIM_OC5_SetConfig+0xb4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00f      	beq.n	8004702 <TIM_OC5_SetConfig+0x7a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a16      	ldr	r2, [pc, #88]	@ (8004740 <TIM_OC5_SetConfig+0xb8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00b      	beq.n	8004702 <TIM_OC5_SetConfig+0x7a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a15      	ldr	r2, [pc, #84]	@ (8004744 <TIM_OC5_SetConfig+0xbc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <TIM_OC5_SetConfig+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a14      	ldr	r2, [pc, #80]	@ (8004748 <TIM_OC5_SetConfig+0xc0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_OC5_SetConfig+0x7a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a13      	ldr	r2, [pc, #76]	@ (800474c <TIM_OC5_SetConfig+0xc4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d109      	bne.n	8004716 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004708:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	621a      	str	r2, [r3, #32]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40013400 	.word	0x40013400
 8004744:	40014000 	.word	0x40014000
 8004748:	40014400 	.word	0x40014400
 800474c:	40014800 	.word	0x40014800

08004750 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	051b      	lsls	r3, r3, #20
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <TIM_OC6_SetConfig+0xb8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00f      	beq.n	80047cc <TIM_OC6_SetConfig+0x7c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a17      	ldr	r2, [pc, #92]	@ (800480c <TIM_OC6_SetConfig+0xbc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_OC6_SetConfig+0x7c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a16      	ldr	r2, [pc, #88]	@ (8004810 <TIM_OC6_SetConfig+0xc0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_OC6_SetConfig+0x7c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a15      	ldr	r2, [pc, #84]	@ (8004814 <TIM_OC6_SetConfig+0xc4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC6_SetConfig+0x7c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a14      	ldr	r2, [pc, #80]	@ (8004818 <TIM_OC6_SetConfig+0xc8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d109      	bne.n	80047e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	029b      	lsls	r3, r3, #10
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40013400 	.word	0x40013400
 8004810:	40014000 	.word	0x40014000
 8004814:	40014400 	.word	0x40014400
 8004818:	40014800 	.word	0x40014800

0800481c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 030a 	bic.w	r3, r3, #10
 8004858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487a:	b480      	push	{r7}
 800487c:	b087      	sub	sp, #28
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f023 0210 	bic.w	r2, r3, #16
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	031b      	lsls	r3, r3, #12
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f043 0307 	orr.w	r3, r3, #7
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	609a      	str	r2, [r3, #8]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800492a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	021a      	lsls	r2, r3, #8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	431a      	orrs	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4313      	orrs	r3, r2
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	609a      	str	r2, [r3, #8]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2201      	movs	r2, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1a      	ldr	r2, [r3, #32]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	43db      	mvns	r3, r3
 8004972:	401a      	ands	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e068      	b.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d108      	bne.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80049ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1e      	ldr	r2, [pc, #120]	@ (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01d      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a26:	d018      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a18      	ldr	r2, [pc, #96]	@ (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a13      	ldr	r2, [pc, #76]	@ (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a14      	ldr	r2, [pc, #80]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d10c      	bne.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40013400 	.word	0x40013400
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40000800 	.word	0x40000800
 8004aa4:	40000c00 	.word	0x40000c00
 8004aa8:	40014000 	.word	0x40014000

08004aac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e065      	b.n	8004b94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a16      	ldr	r2, [pc, #88]	@ (8004ba0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a14      	ldr	r2, [pc, #80]	@ (8004ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d115      	bne.n	8004b82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	051b      	lsls	r3, r3, #20
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40013400 	.word	0x40013400

08004ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e040      	b.n	8004c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc fdfa 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	@ 0x24
 8004bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fe52 	bl	8005898 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fb97 	bl	8005328 <UART_SetConfig>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e01b      	b.n	8004c3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fed1 	bl	80059dc <UART_CheckIdleState>
 8004c3a:	4603      	mov	r3, r0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	@ 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d137      	bne.n	8004ccc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_UART_Receive_IT+0x24>
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e030      	b.n	8004cce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a18      	ldr	r2, [pc, #96]	@ (8004cd8 <HAL_UART_Receive_IT+0x94>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d01f      	beq.n	8004cbc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d018      	beq.n	8004cbc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	613b      	str	r3, [r7, #16]
   return(result);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69f9      	ldr	r1, [r7, #28]
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e6      	bne.n	8004c8a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cbc:	88fb      	ldrh	r3, [r7, #6]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 ffa0 	bl	8005c08 <UART_Start_Receive_IT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	e000      	b.n	8004cce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ccc:	2302      	movs	r3, #2
  }
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3728      	adds	r7, #40	@ 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40008000 	.word	0x40008000

08004cdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b0ba      	sub	sp, #232	@ 0xe8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004d06:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d115      	bne.n	8004d44 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00f      	beq.n	8004d44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 82ca 	beq.w	80052ce <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
      }
      return;
 8004d42:	e2c4      	b.n	80052ce <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8117 	beq.w	8004f7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004d5e:	4b85      	ldr	r3, [pc, #532]	@ (8004f74 <HAL_UART_IRQHandler+0x298>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 810a 	beq.w	8004f7c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <HAL_UART_IRQHandler+0xbc>
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2201      	movs	r2, #1
 8004d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d8e:	f043 0201 	orr.w	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d011      	beq.n	8004dc8 <HAL_UART_IRQHandler+0xec>
 8004da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00b      	beq.n	8004dc8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2202      	movs	r2, #2
 8004db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dbe:	f043 0204 	orr.w	r2, r3, #4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d011      	beq.n	8004df8 <HAL_UART_IRQHandler+0x11c>
 8004dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2204      	movs	r2, #4
 8004de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dee:	f043 0202 	orr.w	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2208      	movs	r2, #8
 8004e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e2a:	f043 0208 	orr.w	r2, r3, #8
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <HAL_UART_IRQHandler+0x18a>
 8004e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8230 	beq.w	80052d2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00d      	beq.n	8004e9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eae:	2b40      	cmp	r3, #64	@ 0x40
 8004eb0:	d005      	beq.n	8004ebe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d04f      	beq.n	8004f5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 ff68 	bl	8005d94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ece:	2b40      	cmp	r3, #64	@ 0x40
 8004ed0:	d141      	bne.n	8004f56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3308      	adds	r3, #8
 8004efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004efe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1d9      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d013      	beq.n	8004f4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f2a:	4a13      	ldr	r2, [pc, #76]	@ (8004f78 <HAL_UART_IRQHandler+0x29c>)
 8004f2c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fc ffcd 	bl	8001ed2 <HAL_DMA_Abort_IT>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d017      	beq.n	8004f6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	e00f      	b.n	8004f6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f9d4 	bl	80052fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	e00b      	b.n	8004f6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f9d0 	bl	80052fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5c:	e007      	b.n	8004f6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f9cc 	bl	80052fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004f6c:	e1b1      	b.n	80052d2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6e:	bf00      	nop
    return;
 8004f70:	e1af      	b.n	80052d2 <HAL_UART_IRQHandler+0x5f6>
 8004f72:	bf00      	nop
 8004f74:	04000120 	.word	0x04000120
 8004f78:	08005e5d 	.word	0x08005e5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	f040 816a 	bne.w	800525a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8163 	beq.w	800525a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 815c 	beq.w	800525a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb4:	2b40      	cmp	r3, #64	@ 0x40
 8004fb6:	f040 80d4 	bne.w	8005162 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80ad 	beq.w	800512a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	f080 80a5 	bcs.w	800512a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fe6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f040 8086 	bne.w	8005108 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005026:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800502a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005032:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800503e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1da      	bne.n	8004ffc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3308      	adds	r3, #8
 800504c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005056:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3308      	adds	r3, #8
 8005066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800506a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800506e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005072:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800507c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e1      	bne.n	8005046 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e3      	bne.n	8005082 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d8:	f023 0310 	bic.w	r3, r3, #16
 80050dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e4      	bne.n	80050c8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005102:	4618      	mov	r0, r3
 8005104:	f7fc fea7 	bl	8001e56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800511a:	b29b      	uxth	r3, r3
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	b29b      	uxth	r3, r3
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8f4 	bl	8005310 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005128:	e0d5      	b.n	80052d6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005130:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005134:	429a      	cmp	r2, r3
 8005136:	f040 80ce 	bne.w	80052d6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b20      	cmp	r3, #32
 8005148:	f040 80c5 	bne.w	80052d6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8d8 	bl	8005310 <HAL_UARTEx_RxEventCallback>
      return;
 8005160:	e0b9      	b.n	80052d6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800516e:	b29b      	uxth	r3, r3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80ab 	beq.w	80052da <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80a6 	beq.w	80052da <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800519c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e4      	bne.n	800518e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	623b      	str	r3, [r7, #32]
   return(result);
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e3      	bne.n	80051c4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	60fb      	str	r3, [r7, #12]
   return(result);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f023 0310 	bic.w	r3, r3, #16
 8005224:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	69b9      	ldr	r1, [r7, #24]
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	617b      	str	r3, [r7, #20]
   return(result);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e4      	bne.n	8005210 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800524c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f85c 	bl	8005310 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005258:	e03f      	b.n	80052da <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00e      	beq.n	8005284 <HAL_UART_IRQHandler+0x5a8>
 8005266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800526a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800527a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 ffe9 	bl	8006254 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005282:	e02d      	b.n	80052e0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00e      	beq.n	80052ae <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01c      	beq.n	80052de <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
    }
    return;
 80052ac:	e017      	b.n	80052de <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d012      	beq.n	80052e0 <HAL_UART_IRQHandler+0x604>
 80052ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00c      	beq.n	80052e0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fdde 	bl	8005e88 <UART_EndTransmit_IT>
    return;
 80052cc:	e008      	b.n	80052e0 <HAL_UART_IRQHandler+0x604>
      return;
 80052ce:	bf00      	nop
 80052d0:	e006      	b.n	80052e0 <HAL_UART_IRQHandler+0x604>
    return;
 80052d2:	bf00      	nop
 80052d4:	e004      	b.n	80052e0 <HAL_UART_IRQHandler+0x604>
      return;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <HAL_UART_IRQHandler+0x604>
      return;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <HAL_UART_IRQHandler+0x604>
    return;
 80052de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80052e0:	37e8      	adds	r7, #232	@ 0xe8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop

080052e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b08a      	sub	sp, #40	@ 0x28
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	431a      	orrs	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	431a      	orrs	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	4313      	orrs	r3, r2
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4ba4      	ldr	r3, [pc, #656]	@ (80055e8 <UART_SetConfig+0x2c0>)
 8005358:	4013      	ands	r3, r2
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005360:	430b      	orrs	r3, r1
 8005362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a99      	ldr	r2, [pc, #612]	@ (80055ec <UART_SetConfig+0x2c4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005390:	4313      	orrs	r3, r2
 8005392:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a4:	430a      	orrs	r2, r1
 80053a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a90      	ldr	r2, [pc, #576]	@ (80055f0 <UART_SetConfig+0x2c8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d126      	bne.n	8005400 <UART_SetConfig+0xd8>
 80053b2:	4b90      	ldr	r3, [pc, #576]	@ (80055f4 <UART_SetConfig+0x2cc>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d81b      	bhi.n	80053f8 <UART_SetConfig+0xd0>
 80053c0:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <UART_SetConfig+0xa0>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053d9 	.word	0x080053d9
 80053cc:	080053e9 	.word	0x080053e9
 80053d0:	080053e1 	.word	0x080053e1
 80053d4:	080053f1 	.word	0x080053f1
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053de:	e116      	b.n	800560e <UART_SetConfig+0x2e6>
 80053e0:	2302      	movs	r3, #2
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e6:	e112      	b.n	800560e <UART_SetConfig+0x2e6>
 80053e8:	2304      	movs	r3, #4
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ee:	e10e      	b.n	800560e <UART_SetConfig+0x2e6>
 80053f0:	2308      	movs	r3, #8
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f6:	e10a      	b.n	800560e <UART_SetConfig+0x2e6>
 80053f8:	2310      	movs	r3, #16
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053fe:	e106      	b.n	800560e <UART_SetConfig+0x2e6>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a7c      	ldr	r2, [pc, #496]	@ (80055f8 <UART_SetConfig+0x2d0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d138      	bne.n	800547c <UART_SetConfig+0x154>
 800540a:	4b7a      	ldr	r3, [pc, #488]	@ (80055f4 <UART_SetConfig+0x2cc>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005410:	f003 030c 	and.w	r3, r3, #12
 8005414:	2b0c      	cmp	r3, #12
 8005416:	d82d      	bhi.n	8005474 <UART_SetConfig+0x14c>
 8005418:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <UART_SetConfig+0xf8>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005455 	.word	0x08005455
 8005424:	08005475 	.word	0x08005475
 8005428:	08005475 	.word	0x08005475
 800542c:	08005475 	.word	0x08005475
 8005430:	08005465 	.word	0x08005465
 8005434:	08005475 	.word	0x08005475
 8005438:	08005475 	.word	0x08005475
 800543c:	08005475 	.word	0x08005475
 8005440:	0800545d 	.word	0x0800545d
 8005444:	08005475 	.word	0x08005475
 8005448:	08005475 	.word	0x08005475
 800544c:	08005475 	.word	0x08005475
 8005450:	0800546d 	.word	0x0800546d
 8005454:	2300      	movs	r3, #0
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800545a:	e0d8      	b.n	800560e <UART_SetConfig+0x2e6>
 800545c:	2302      	movs	r3, #2
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005462:	e0d4      	b.n	800560e <UART_SetConfig+0x2e6>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800546a:	e0d0      	b.n	800560e <UART_SetConfig+0x2e6>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005472:	e0cc      	b.n	800560e <UART_SetConfig+0x2e6>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547a:	e0c8      	b.n	800560e <UART_SetConfig+0x2e6>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a5e      	ldr	r2, [pc, #376]	@ (80055fc <UART_SetConfig+0x2d4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d125      	bne.n	80054d2 <UART_SetConfig+0x1aa>
 8005486:	4b5b      	ldr	r3, [pc, #364]	@ (80055f4 <UART_SetConfig+0x2cc>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005490:	2b30      	cmp	r3, #48	@ 0x30
 8005492:	d016      	beq.n	80054c2 <UART_SetConfig+0x19a>
 8005494:	2b30      	cmp	r3, #48	@ 0x30
 8005496:	d818      	bhi.n	80054ca <UART_SetConfig+0x1a2>
 8005498:	2b20      	cmp	r3, #32
 800549a:	d00a      	beq.n	80054b2 <UART_SetConfig+0x18a>
 800549c:	2b20      	cmp	r3, #32
 800549e:	d814      	bhi.n	80054ca <UART_SetConfig+0x1a2>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <UART_SetConfig+0x182>
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d008      	beq.n	80054ba <UART_SetConfig+0x192>
 80054a8:	e00f      	b.n	80054ca <UART_SetConfig+0x1a2>
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b0:	e0ad      	b.n	800560e <UART_SetConfig+0x2e6>
 80054b2:	2302      	movs	r3, #2
 80054b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b8:	e0a9      	b.n	800560e <UART_SetConfig+0x2e6>
 80054ba:	2304      	movs	r3, #4
 80054bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c0:	e0a5      	b.n	800560e <UART_SetConfig+0x2e6>
 80054c2:	2308      	movs	r3, #8
 80054c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c8:	e0a1      	b.n	800560e <UART_SetConfig+0x2e6>
 80054ca:	2310      	movs	r3, #16
 80054cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054d0:	e09d      	b.n	800560e <UART_SetConfig+0x2e6>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005600 <UART_SetConfig+0x2d8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d125      	bne.n	8005528 <UART_SetConfig+0x200>
 80054dc:	4b45      	ldr	r3, [pc, #276]	@ (80055f4 <UART_SetConfig+0x2cc>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054e8:	d016      	beq.n	8005518 <UART_SetConfig+0x1f0>
 80054ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80054ec:	d818      	bhi.n	8005520 <UART_SetConfig+0x1f8>
 80054ee:	2b80      	cmp	r3, #128	@ 0x80
 80054f0:	d00a      	beq.n	8005508 <UART_SetConfig+0x1e0>
 80054f2:	2b80      	cmp	r3, #128	@ 0x80
 80054f4:	d814      	bhi.n	8005520 <UART_SetConfig+0x1f8>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <UART_SetConfig+0x1d8>
 80054fa:	2b40      	cmp	r3, #64	@ 0x40
 80054fc:	d008      	beq.n	8005510 <UART_SetConfig+0x1e8>
 80054fe:	e00f      	b.n	8005520 <UART_SetConfig+0x1f8>
 8005500:	2300      	movs	r3, #0
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005506:	e082      	b.n	800560e <UART_SetConfig+0x2e6>
 8005508:	2302      	movs	r3, #2
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800550e:	e07e      	b.n	800560e <UART_SetConfig+0x2e6>
 8005510:	2304      	movs	r3, #4
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005516:	e07a      	b.n	800560e <UART_SetConfig+0x2e6>
 8005518:	2308      	movs	r3, #8
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551e:	e076      	b.n	800560e <UART_SetConfig+0x2e6>
 8005520:	2310      	movs	r3, #16
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005526:	e072      	b.n	800560e <UART_SetConfig+0x2e6>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a35      	ldr	r2, [pc, #212]	@ (8005604 <UART_SetConfig+0x2dc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d12a      	bne.n	8005588 <UART_SetConfig+0x260>
 8005532:	4b30      	ldr	r3, [pc, #192]	@ (80055f4 <UART_SetConfig+0x2cc>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005538:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005540:	d01a      	beq.n	8005578 <UART_SetConfig+0x250>
 8005542:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005546:	d81b      	bhi.n	8005580 <UART_SetConfig+0x258>
 8005548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800554c:	d00c      	beq.n	8005568 <UART_SetConfig+0x240>
 800554e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005552:	d815      	bhi.n	8005580 <UART_SetConfig+0x258>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <UART_SetConfig+0x238>
 8005558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800555c:	d008      	beq.n	8005570 <UART_SetConfig+0x248>
 800555e:	e00f      	b.n	8005580 <UART_SetConfig+0x258>
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005566:	e052      	b.n	800560e <UART_SetConfig+0x2e6>
 8005568:	2302      	movs	r3, #2
 800556a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800556e:	e04e      	b.n	800560e <UART_SetConfig+0x2e6>
 8005570:	2304      	movs	r3, #4
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005576:	e04a      	b.n	800560e <UART_SetConfig+0x2e6>
 8005578:	2308      	movs	r3, #8
 800557a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800557e:	e046      	b.n	800560e <UART_SetConfig+0x2e6>
 8005580:	2310      	movs	r3, #16
 8005582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005586:	e042      	b.n	800560e <UART_SetConfig+0x2e6>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a17      	ldr	r2, [pc, #92]	@ (80055ec <UART_SetConfig+0x2c4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d13a      	bne.n	8005608 <UART_SetConfig+0x2e0>
 8005592:	4b18      	ldr	r3, [pc, #96]	@ (80055f4 <UART_SetConfig+0x2cc>)
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005598:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800559c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055a0:	d01a      	beq.n	80055d8 <UART_SetConfig+0x2b0>
 80055a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055a6:	d81b      	bhi.n	80055e0 <UART_SetConfig+0x2b8>
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ac:	d00c      	beq.n	80055c8 <UART_SetConfig+0x2a0>
 80055ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b2:	d815      	bhi.n	80055e0 <UART_SetConfig+0x2b8>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <UART_SetConfig+0x298>
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055bc:	d008      	beq.n	80055d0 <UART_SetConfig+0x2a8>
 80055be:	e00f      	b.n	80055e0 <UART_SetConfig+0x2b8>
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c6:	e022      	b.n	800560e <UART_SetConfig+0x2e6>
 80055c8:	2302      	movs	r3, #2
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ce:	e01e      	b.n	800560e <UART_SetConfig+0x2e6>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055d6:	e01a      	b.n	800560e <UART_SetConfig+0x2e6>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055de:	e016      	b.n	800560e <UART_SetConfig+0x2e6>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055e6:	e012      	b.n	800560e <UART_SetConfig+0x2e6>
 80055e8:	efff69f3 	.word	0xefff69f3
 80055ec:	40008000 	.word	0x40008000
 80055f0:	40013800 	.word	0x40013800
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40004400 	.word	0x40004400
 80055fc:	40004800 	.word	0x40004800
 8005600:	40004c00 	.word	0x40004c00
 8005604:	40005000 	.word	0x40005000
 8005608:	2310      	movs	r3, #16
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a9f      	ldr	r2, [pc, #636]	@ (8005890 <UART_SetConfig+0x568>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d17a      	bne.n	800570e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005618:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800561c:	2b08      	cmp	r3, #8
 800561e:	d824      	bhi.n	800566a <UART_SetConfig+0x342>
 8005620:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <UART_SetConfig+0x300>)
 8005622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005626:	bf00      	nop
 8005628:	0800564d 	.word	0x0800564d
 800562c:	0800566b 	.word	0x0800566b
 8005630:	08005655 	.word	0x08005655
 8005634:	0800566b 	.word	0x0800566b
 8005638:	0800565b 	.word	0x0800565b
 800563c:	0800566b 	.word	0x0800566b
 8005640:	0800566b 	.word	0x0800566b
 8005644:	0800566b 	.word	0x0800566b
 8005648:	08005663 	.word	0x08005663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800564c:	f7fd fc1c 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8005650:	61f8      	str	r0, [r7, #28]
        break;
 8005652:	e010      	b.n	8005676 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005654:	4b8f      	ldr	r3, [pc, #572]	@ (8005894 <UART_SetConfig+0x56c>)
 8005656:	61fb      	str	r3, [r7, #28]
        break;
 8005658:	e00d      	b.n	8005676 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565a:	f7fd fb7d 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 800565e:	61f8      	str	r0, [r7, #28]
        break;
 8005660:	e009      	b.n	8005676 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005666:	61fb      	str	r3, [r7, #28]
        break;
 8005668:	e005      	b.n	8005676 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005674:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 80fb 	beq.w	8005874 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4413      	add	r3, r2
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	429a      	cmp	r2, r3
 800568c:	d305      	bcc.n	800569a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	429a      	cmp	r2, r3
 8005698:	d903      	bls.n	80056a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056a0:	e0e8      	b.n	8005874 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	2200      	movs	r2, #0
 80056a6:	461c      	mov	r4, r3
 80056a8:	4615      	mov	r5, r2
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	022b      	lsls	r3, r5, #8
 80056b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056b8:	0222      	lsls	r2, r4, #8
 80056ba:	68f9      	ldr	r1, [r7, #12]
 80056bc:	6849      	ldr	r1, [r1, #4]
 80056be:	0849      	lsrs	r1, r1, #1
 80056c0:	2000      	movs	r0, #0
 80056c2:	4688      	mov	r8, r1
 80056c4:	4681      	mov	r9, r0
 80056c6:	eb12 0a08 	adds.w	sl, r2, r8
 80056ca:	eb43 0b09 	adc.w	fp, r3, r9
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056dc:	4650      	mov	r0, sl
 80056de:	4659      	mov	r1, fp
 80056e0:	f7fb fa72 	bl	8000bc8 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4613      	mov	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056f2:	d308      	bcc.n	8005706 <UART_SetConfig+0x3de>
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056fa:	d204      	bcs.n	8005706 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	e0b6      	b.n	8005874 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800570c:	e0b2      	b.n	8005874 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005716:	d15e      	bne.n	80057d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005718:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800571c:	2b08      	cmp	r3, #8
 800571e:	d828      	bhi.n	8005772 <UART_SetConfig+0x44a>
 8005720:	a201      	add	r2, pc, #4	@ (adr r2, 8005728 <UART_SetConfig+0x400>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005755 	.word	0x08005755
 8005730:	0800575d 	.word	0x0800575d
 8005734:	08005773 	.word	0x08005773
 8005738:	08005763 	.word	0x08005763
 800573c:	08005773 	.word	0x08005773
 8005740:	08005773 	.word	0x08005773
 8005744:	08005773 	.word	0x08005773
 8005748:	0800576b 	.word	0x0800576b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800574c:	f7fd fb9c 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8005750:	61f8      	str	r0, [r7, #28]
        break;
 8005752:	e014      	b.n	800577e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005754:	f7fd fbae 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8005758:	61f8      	str	r0, [r7, #28]
        break;
 800575a:	e010      	b.n	800577e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800575c:	4b4d      	ldr	r3, [pc, #308]	@ (8005894 <UART_SetConfig+0x56c>)
 800575e:	61fb      	str	r3, [r7, #28]
        break;
 8005760:	e00d      	b.n	800577e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fd faf9 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8005766:	61f8      	str	r0, [r7, #28]
        break;
 8005768:	e009      	b.n	800577e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576e:	61fb      	str	r3, [r7, #28]
        break;
 8005770:	e005      	b.n	800577e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800577c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d077      	beq.n	8005874 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	005a      	lsls	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	085b      	lsrs	r3, r3, #1
 800578e:	441a      	add	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b0f      	cmp	r3, #15
 800579e:	d916      	bls.n	80057ce <UART_SetConfig+0x4a6>
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a6:	d212      	bcs.n	80057ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f023 030f 	bic.w	r3, r3, #15
 80057b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	b29a      	uxth	r2, r3
 80057be:	8afb      	ldrh	r3, [r7, #22]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	8afa      	ldrh	r2, [r7, #22]
 80057ca:	60da      	str	r2, [r3, #12]
 80057cc:	e052      	b.n	8005874 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057d4:	e04e      	b.n	8005874 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d827      	bhi.n	800582e <UART_SetConfig+0x506>
 80057de:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <UART_SetConfig+0x4bc>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005811 	.word	0x08005811
 80057ec:	08005819 	.word	0x08005819
 80057f0:	0800582f 	.word	0x0800582f
 80057f4:	0800581f 	.word	0x0800581f
 80057f8:	0800582f 	.word	0x0800582f
 80057fc:	0800582f 	.word	0x0800582f
 8005800:	0800582f 	.word	0x0800582f
 8005804:	08005827 	.word	0x08005827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fd fb3e 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 800580c:	61f8      	str	r0, [r7, #28]
        break;
 800580e:	e014      	b.n	800583a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005810:	f7fd fb50 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8005814:	61f8      	str	r0, [r7, #28]
        break;
 8005816:	e010      	b.n	800583a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005818:	4b1e      	ldr	r3, [pc, #120]	@ (8005894 <UART_SetConfig+0x56c>)
 800581a:	61fb      	str	r3, [r7, #28]
        break;
 800581c:	e00d      	b.n	800583a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581e:	f7fd fa9b 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8005822:	61f8      	str	r0, [r7, #28]
        break;
 8005824:	e009      	b.n	800583a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800582a:	61fb      	str	r3, [r7, #28]
        break;
 800582c:	e005      	b.n	800583a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005838:	bf00      	nop
    }

    if (pclk != 0U)
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d019      	beq.n	8005874 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	085a      	lsrs	r2, r3, #1
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	441a      	add	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005852:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b0f      	cmp	r3, #15
 8005858:	d909      	bls.n	800586e <UART_SetConfig+0x546>
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005860:	d205      	bcs.n	800586e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60da      	str	r2, [r3, #12]
 800586c:	e002      	b.n	8005874 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005880:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005884:	4618      	mov	r0, r3
 8005886:	3728      	adds	r7, #40	@ 0x28
 8005888:	46bd      	mov	sp, r7
 800588a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588e:	bf00      	nop
 8005890:	40008000 	.word	0x40008000
 8005894:	00f42400 	.word	0x00f42400

08005898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005996:	d10a      	bne.n	80059ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b098      	sub	sp, #96	@ 0x60
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059ec:	f7fc f916 	bl	8001c1c <HAL_GetTick>
 80059f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d12e      	bne.n	8005a5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f88c 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d021      	beq.n	8005a5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e6      	bne.n	8005a1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e062      	b.n	8005b24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d149      	bne.n	8005b00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a74:	2200      	movs	r2, #0
 8005a76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f856 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d03c      	beq.n	8005b00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	623b      	str	r3, [r7, #32]
   return(result);
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e6      	bne.n	8005a86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3308      	adds	r3, #8
 8005abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0301 	bic.w	r3, r3, #1
 8005ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ad8:	61fa      	str	r2, [r7, #28]
 8005ada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	69b9      	ldr	r1, [r7, #24]
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e5      	bne.n	8005ab8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e011      	b.n	8005b24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3758      	adds	r7, #88	@ 0x58
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3c:	e04f      	b.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d04b      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b46:	f7fc f869 	bl	8001c1c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d302      	bcc.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e04e      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d037      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b80      	cmp	r3, #128	@ 0x80
 8005b72:	d034      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b40      	cmp	r3, #64	@ 0x40
 8005b78:	d031      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d110      	bne.n	8005baa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f8ff 	bl	8005d94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e029      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bb8:	d111      	bne.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f8e5 	bl	8005d94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e00f      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4013      	ands	r3, r2
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d0a0      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b097      	sub	sp, #92	@ 0x5c
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3a:	d10e      	bne.n	8005c5a <UART_Start_Receive_IT+0x52>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <UART_Start_Receive_IT+0x48>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005c4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c4e:	e02d      	b.n	8005cac <UART_Start_Receive_IT+0xa4>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	22ff      	movs	r2, #255	@ 0xff
 8005c54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c58:	e028      	b.n	8005cac <UART_Start_Receive_IT+0xa4>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10d      	bne.n	8005c7e <UART_Start_Receive_IT+0x76>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <UART_Start_Receive_IT+0x6c>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	22ff      	movs	r2, #255	@ 0xff
 8005c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c72:	e01b      	b.n	8005cac <UART_Start_Receive_IT+0xa4>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	227f      	movs	r2, #127	@ 0x7f
 8005c78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c7c:	e016      	b.n	8005cac <UART_Start_Receive_IT+0xa4>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c86:	d10d      	bne.n	8005ca4 <UART_Start_Receive_IT+0x9c>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <UART_Start_Receive_IT+0x92>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	227f      	movs	r2, #127	@ 0x7f
 8005c94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c98:	e008      	b.n	8005cac <UART_Start_Receive_IT+0xa4>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	223f      	movs	r2, #63	@ 0x3f
 8005c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ca2:	e003      	b.n	8005cac <UART_Start_Receive_IT+0xa4>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2222      	movs	r2, #34	@ 0x22
 8005cb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3308      	adds	r3, #8
 8005cda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cdc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005cde:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e5      	bne.n	8005cbc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf8:	d107      	bne.n	8005d0a <UART_Start_Receive_IT+0x102>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a21      	ldr	r2, [pc, #132]	@ (8005d8c <UART_Start_Receive_IT+0x184>)
 8005d06:	669a      	str	r2, [r3, #104]	@ 0x68
 8005d08:	e002      	b.n	8005d10 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4a20      	ldr	r2, [pc, #128]	@ (8005d90 <UART_Start_Receive_IT+0x188>)
 8005d0e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d019      	beq.n	8005d4c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d38:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e6      	bne.n	8005d18 <UART_Start_Receive_IT+0x110>
 8005d4a:	e018      	b.n	8005d7e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f043 0320 	orr.w	r3, r3, #32
 8005d60:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d6a:	623b      	str	r3, [r7, #32]
 8005d6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	69f9      	ldr	r1, [r7, #28]
 8005d70:	6a3a      	ldr	r2, [r7, #32]
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e6      	bne.n	8005d4c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	375c      	adds	r7, #92	@ 0x5c
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	08006099 	.word	0x08006099
 8005d90:	08005edd 	.word	0x08005edd

08005d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b095      	sub	sp, #84	@ 0x54
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dba:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e6      	bne.n	8005d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3308      	adds	r3, #8
 8005dec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005df0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e5      	bne.n	8005dce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d118      	bne.n	8005e3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e28:	61bb      	str	r3, [r7, #24]
 8005e2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	613b      	str	r3, [r7, #16]
   return(result);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e6      	bne.n	8005e0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e50:	bf00      	nop
 8005e52:	3754      	adds	r7, #84	@ 0x54
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff fa3e 	bl	80052fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	61bb      	str	r3, [r7, #24]
 8005eb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6979      	ldr	r1, [r7, #20]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	613b      	str	r3, [r7, #16]
   return(result);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e6      	bne.n	8005e90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fa0a 	bl	80052e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed4:	bf00      	nop
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b09c      	sub	sp, #112	@ 0x70
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005eea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ef4:	2b22      	cmp	r3, #34	@ 0x22
 8005ef6:	f040 80be 	bne.w	8006076 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005f00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005f08:	b2d9      	uxtb	r1, r3
 8005f0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f14:	400a      	ands	r2, r1
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f040 80a3 	bne.w	800608a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e6      	bne.n	8005f44 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f96:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e5      	bne.n	8005f76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a34      	ldr	r2, [pc, #208]	@ (8006094 <UART_RxISR_8BIT+0x1b8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d01f      	beq.n	8006008 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d018      	beq.n	8006008 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fea:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e6      	bne.n	8005fd6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800600c:	2b01      	cmp	r3, #1
 800600e:	d12e      	bne.n	800606e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60fb      	str	r3, [r7, #12]
   return(result);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	69b9      	ldr	r1, [r7, #24]
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	617b      	str	r3, [r7, #20]
   return(result);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e6      	bne.n	8006016 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b10      	cmp	r3, #16
 8006054:	d103      	bne.n	800605e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2210      	movs	r2, #16
 800605c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff f952 	bl	8005310 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800606c:	e00d      	b.n	800608a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fa ff22 	bl	8000eb8 <HAL_UART_RxCpltCallback>
}
 8006074:	e009      	b.n	800608a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	8b1b      	ldrh	r3, [r3, #24]
 800607c:	b29a      	uxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0208 	orr.w	r2, r2, #8
 8006086:	b292      	uxth	r2, r2
 8006088:	831a      	strh	r2, [r3, #24]
}
 800608a:	bf00      	nop
 800608c:	3770      	adds	r7, #112	@ 0x70
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40008000 	.word	0x40008000

08006098 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b09c      	sub	sp, #112	@ 0x70
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80060a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b0:	2b22      	cmp	r3, #34	@ 0x22
 80060b2:	f040 80be 	bne.w	8006232 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80060bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80060c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80060ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80060ce:	4013      	ands	r3, r2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f040 80a3 	bne.w	8006246 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800610e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006114:	667b      	str	r3, [r7, #100]	@ 0x64
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800611e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006120:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006124:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800612c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e6      	bne.n	8006100 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	663b      	str	r3, [r7, #96]	@ 0x60
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3308      	adds	r3, #8
 8006150:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006152:	643a      	str	r2, [r7, #64]	@ 0x40
 8006154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006158:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e5      	bne.n	8006132 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a34      	ldr	r2, [pc, #208]	@ (8006250 <UART_RxISR_16BIT+0x1b8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d01f      	beq.n	80061c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d018      	beq.n	80061c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061b2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e6      	bne.n	8006192 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d12e      	bne.n	800622a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f023 0310 	bic.w	r3, r3, #16
 80061e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6979      	ldr	r1, [r7, #20]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	613b      	str	r3, [r7, #16]
   return(result);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	2b10      	cmp	r3, #16
 8006210:	d103      	bne.n	800621a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2210      	movs	r2, #16
 8006218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff f874 	bl	8005310 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006228:	e00d      	b.n	8006246 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fa fe44 	bl	8000eb8 <HAL_UART_RxCpltCallback>
}
 8006230:	e009      	b.n	8006246 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	8b1b      	ldrh	r3, [r3, #24]
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0208 	orr.w	r2, r2, #8
 8006242:	b292      	uxth	r2, r2
 8006244:	831a      	strh	r2, [r3, #24]
}
 8006246:	bf00      	nop
 8006248:	3770      	adds	r7, #112	@ 0x70
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40008000 	.word	0x40008000

08006254 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <atoi>:
 8006268:	220a      	movs	r2, #10
 800626a:	2100      	movs	r1, #0
 800626c:	f000 b87a 	b.w	8006364 <strtol>

08006270 <_strtol_l.constprop.0>:
 8006270:	2b24      	cmp	r3, #36	@ 0x24
 8006272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006276:	4686      	mov	lr, r0
 8006278:	4690      	mov	r8, r2
 800627a:	d801      	bhi.n	8006280 <_strtol_l.constprop.0+0x10>
 800627c:	2b01      	cmp	r3, #1
 800627e:	d106      	bne.n	800628e <_strtol_l.constprop.0+0x1e>
 8006280:	f000 fe86 	bl	8006f90 <__errno>
 8006284:	2316      	movs	r3, #22
 8006286:	6003      	str	r3, [r0, #0]
 8006288:	2000      	movs	r0, #0
 800628a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628e:	4834      	ldr	r0, [pc, #208]	@ (8006360 <_strtol_l.constprop.0+0xf0>)
 8006290:	460d      	mov	r5, r1
 8006292:	462a      	mov	r2, r5
 8006294:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006298:	5d06      	ldrb	r6, [r0, r4]
 800629a:	f016 0608 	ands.w	r6, r6, #8
 800629e:	d1f8      	bne.n	8006292 <_strtol_l.constprop.0+0x22>
 80062a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80062a2:	d12d      	bne.n	8006300 <_strtol_l.constprop.0+0x90>
 80062a4:	782c      	ldrb	r4, [r5, #0]
 80062a6:	2601      	movs	r6, #1
 80062a8:	1c95      	adds	r5, r2, #2
 80062aa:	f033 0210 	bics.w	r2, r3, #16
 80062ae:	d109      	bne.n	80062c4 <_strtol_l.constprop.0+0x54>
 80062b0:	2c30      	cmp	r4, #48	@ 0x30
 80062b2:	d12a      	bne.n	800630a <_strtol_l.constprop.0+0x9a>
 80062b4:	782a      	ldrb	r2, [r5, #0]
 80062b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80062ba:	2a58      	cmp	r2, #88	@ 0x58
 80062bc:	d125      	bne.n	800630a <_strtol_l.constprop.0+0x9a>
 80062be:	786c      	ldrb	r4, [r5, #1]
 80062c0:	2310      	movs	r3, #16
 80062c2:	3502      	adds	r5, #2
 80062c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80062c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80062cc:	2200      	movs	r2, #0
 80062ce:	fbbc f9f3 	udiv	r9, ip, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80062d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80062dc:	2f09      	cmp	r7, #9
 80062de:	d81b      	bhi.n	8006318 <_strtol_l.constprop.0+0xa8>
 80062e0:	463c      	mov	r4, r7
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	dd27      	ble.n	8006336 <_strtol_l.constprop.0+0xc6>
 80062e6:	1c57      	adds	r7, r2, #1
 80062e8:	d007      	beq.n	80062fa <_strtol_l.constprop.0+0x8a>
 80062ea:	4581      	cmp	r9, r0
 80062ec:	d320      	bcc.n	8006330 <_strtol_l.constprop.0+0xc0>
 80062ee:	d101      	bne.n	80062f4 <_strtol_l.constprop.0+0x84>
 80062f0:	45a2      	cmp	sl, r4
 80062f2:	db1d      	blt.n	8006330 <_strtol_l.constprop.0+0xc0>
 80062f4:	fb00 4003 	mla	r0, r0, r3, r4
 80062f8:	2201      	movs	r2, #1
 80062fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062fe:	e7eb      	b.n	80062d8 <_strtol_l.constprop.0+0x68>
 8006300:	2c2b      	cmp	r4, #43	@ 0x2b
 8006302:	bf04      	itt	eq
 8006304:	782c      	ldrbeq	r4, [r5, #0]
 8006306:	1c95      	addeq	r5, r2, #2
 8006308:	e7cf      	b.n	80062aa <_strtol_l.constprop.0+0x3a>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1da      	bne.n	80062c4 <_strtol_l.constprop.0+0x54>
 800630e:	2c30      	cmp	r4, #48	@ 0x30
 8006310:	bf0c      	ite	eq
 8006312:	2308      	moveq	r3, #8
 8006314:	230a      	movne	r3, #10
 8006316:	e7d5      	b.n	80062c4 <_strtol_l.constprop.0+0x54>
 8006318:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800631c:	2f19      	cmp	r7, #25
 800631e:	d801      	bhi.n	8006324 <_strtol_l.constprop.0+0xb4>
 8006320:	3c37      	subs	r4, #55	@ 0x37
 8006322:	e7de      	b.n	80062e2 <_strtol_l.constprop.0+0x72>
 8006324:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006328:	2f19      	cmp	r7, #25
 800632a:	d804      	bhi.n	8006336 <_strtol_l.constprop.0+0xc6>
 800632c:	3c57      	subs	r4, #87	@ 0x57
 800632e:	e7d8      	b.n	80062e2 <_strtol_l.constprop.0+0x72>
 8006330:	f04f 32ff 	mov.w	r2, #4294967295
 8006334:	e7e1      	b.n	80062fa <_strtol_l.constprop.0+0x8a>
 8006336:	1c53      	adds	r3, r2, #1
 8006338:	d108      	bne.n	800634c <_strtol_l.constprop.0+0xdc>
 800633a:	2322      	movs	r3, #34	@ 0x22
 800633c:	f8ce 3000 	str.w	r3, [lr]
 8006340:	4660      	mov	r0, ip
 8006342:	f1b8 0f00 	cmp.w	r8, #0
 8006346:	d0a0      	beq.n	800628a <_strtol_l.constprop.0+0x1a>
 8006348:	1e69      	subs	r1, r5, #1
 800634a:	e006      	b.n	800635a <_strtol_l.constprop.0+0xea>
 800634c:	b106      	cbz	r6, 8006350 <_strtol_l.constprop.0+0xe0>
 800634e:	4240      	negs	r0, r0
 8006350:	f1b8 0f00 	cmp.w	r8, #0
 8006354:	d099      	beq.n	800628a <_strtol_l.constprop.0+0x1a>
 8006356:	2a00      	cmp	r2, #0
 8006358:	d1f6      	bne.n	8006348 <_strtol_l.constprop.0+0xd8>
 800635a:	f8c8 1000 	str.w	r1, [r8]
 800635e:	e794      	b.n	800628a <_strtol_l.constprop.0+0x1a>
 8006360:	08008da1 	.word	0x08008da1

08006364 <strtol>:
 8006364:	4613      	mov	r3, r2
 8006366:	460a      	mov	r2, r1
 8006368:	4601      	mov	r1, r0
 800636a:	4802      	ldr	r0, [pc, #8]	@ (8006374 <strtol+0x10>)
 800636c:	6800      	ldr	r0, [r0, #0]
 800636e:	f7ff bf7f 	b.w	8006270 <_strtol_l.constprop.0>
 8006372:	bf00      	nop
 8006374:	2000001c 	.word	0x2000001c

08006378 <__cvt>:
 8006378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800637c:	ec57 6b10 	vmov	r6, r7, d0
 8006380:	2f00      	cmp	r7, #0
 8006382:	460c      	mov	r4, r1
 8006384:	4619      	mov	r1, r3
 8006386:	463b      	mov	r3, r7
 8006388:	bfbb      	ittet	lt
 800638a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800638e:	461f      	movlt	r7, r3
 8006390:	2300      	movge	r3, #0
 8006392:	232d      	movlt	r3, #45	@ 0x2d
 8006394:	700b      	strb	r3, [r1, #0]
 8006396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006398:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800639c:	4691      	mov	r9, r2
 800639e:	f023 0820 	bic.w	r8, r3, #32
 80063a2:	bfbc      	itt	lt
 80063a4:	4632      	movlt	r2, r6
 80063a6:	4616      	movlt	r6, r2
 80063a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063ac:	d005      	beq.n	80063ba <__cvt+0x42>
 80063ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063b2:	d100      	bne.n	80063b6 <__cvt+0x3e>
 80063b4:	3401      	adds	r4, #1
 80063b6:	2102      	movs	r1, #2
 80063b8:	e000      	b.n	80063bc <__cvt+0x44>
 80063ba:	2103      	movs	r1, #3
 80063bc:	ab03      	add	r3, sp, #12
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	ab02      	add	r3, sp, #8
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	ec47 6b10 	vmov	d0, r6, r7
 80063c8:	4653      	mov	r3, sl
 80063ca:	4622      	mov	r2, r4
 80063cc:	f000 feb4 	bl	8007138 <_dtoa_r>
 80063d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063d4:	4605      	mov	r5, r0
 80063d6:	d119      	bne.n	800640c <__cvt+0x94>
 80063d8:	f019 0f01 	tst.w	r9, #1
 80063dc:	d00e      	beq.n	80063fc <__cvt+0x84>
 80063de:	eb00 0904 	add.w	r9, r0, r4
 80063e2:	2200      	movs	r2, #0
 80063e4:	2300      	movs	r3, #0
 80063e6:	4630      	mov	r0, r6
 80063e8:	4639      	mov	r1, r7
 80063ea:	f7fa fb7d 	bl	8000ae8 <__aeabi_dcmpeq>
 80063ee:	b108      	cbz	r0, 80063f4 <__cvt+0x7c>
 80063f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80063f4:	2230      	movs	r2, #48	@ 0x30
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	454b      	cmp	r3, r9
 80063fa:	d31e      	bcc.n	800643a <__cvt+0xc2>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006400:	1b5b      	subs	r3, r3, r5
 8006402:	4628      	mov	r0, r5
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	b004      	add	sp, #16
 8006408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006410:	eb00 0904 	add.w	r9, r0, r4
 8006414:	d1e5      	bne.n	80063e2 <__cvt+0x6a>
 8006416:	7803      	ldrb	r3, [r0, #0]
 8006418:	2b30      	cmp	r3, #48	@ 0x30
 800641a:	d10a      	bne.n	8006432 <__cvt+0xba>
 800641c:	2200      	movs	r2, #0
 800641e:	2300      	movs	r3, #0
 8006420:	4630      	mov	r0, r6
 8006422:	4639      	mov	r1, r7
 8006424:	f7fa fb60 	bl	8000ae8 <__aeabi_dcmpeq>
 8006428:	b918      	cbnz	r0, 8006432 <__cvt+0xba>
 800642a:	f1c4 0401 	rsb	r4, r4, #1
 800642e:	f8ca 4000 	str.w	r4, [sl]
 8006432:	f8da 3000 	ldr.w	r3, [sl]
 8006436:	4499      	add	r9, r3
 8006438:	e7d3      	b.n	80063e2 <__cvt+0x6a>
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	9103      	str	r1, [sp, #12]
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	e7d9      	b.n	80063f6 <__cvt+0x7e>

08006442 <__exponent>:
 8006442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006444:	2900      	cmp	r1, #0
 8006446:	bfba      	itte	lt
 8006448:	4249      	neglt	r1, r1
 800644a:	232d      	movlt	r3, #45	@ 0x2d
 800644c:	232b      	movge	r3, #43	@ 0x2b
 800644e:	2909      	cmp	r1, #9
 8006450:	7002      	strb	r2, [r0, #0]
 8006452:	7043      	strb	r3, [r0, #1]
 8006454:	dd29      	ble.n	80064aa <__exponent+0x68>
 8006456:	f10d 0307 	add.w	r3, sp, #7
 800645a:	461d      	mov	r5, r3
 800645c:	270a      	movs	r7, #10
 800645e:	461a      	mov	r2, r3
 8006460:	fbb1 f6f7 	udiv	r6, r1, r7
 8006464:	fb07 1416 	mls	r4, r7, r6, r1
 8006468:	3430      	adds	r4, #48	@ 0x30
 800646a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800646e:	460c      	mov	r4, r1
 8006470:	2c63      	cmp	r4, #99	@ 0x63
 8006472:	f103 33ff 	add.w	r3, r3, #4294967295
 8006476:	4631      	mov	r1, r6
 8006478:	dcf1      	bgt.n	800645e <__exponent+0x1c>
 800647a:	3130      	adds	r1, #48	@ 0x30
 800647c:	1e94      	subs	r4, r2, #2
 800647e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006482:	1c41      	adds	r1, r0, #1
 8006484:	4623      	mov	r3, r4
 8006486:	42ab      	cmp	r3, r5
 8006488:	d30a      	bcc.n	80064a0 <__exponent+0x5e>
 800648a:	f10d 0309 	add.w	r3, sp, #9
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	42ac      	cmp	r4, r5
 8006492:	bf88      	it	hi
 8006494:	2300      	movhi	r3, #0
 8006496:	3302      	adds	r3, #2
 8006498:	4403      	add	r3, r0
 800649a:	1a18      	subs	r0, r3, r0
 800649c:	b003      	add	sp, #12
 800649e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064a8:	e7ed      	b.n	8006486 <__exponent+0x44>
 80064aa:	2330      	movs	r3, #48	@ 0x30
 80064ac:	3130      	adds	r1, #48	@ 0x30
 80064ae:	7083      	strb	r3, [r0, #2]
 80064b0:	70c1      	strb	r1, [r0, #3]
 80064b2:	1d03      	adds	r3, r0, #4
 80064b4:	e7f1      	b.n	800649a <__exponent+0x58>
	...

080064b8 <_printf_float>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	b08d      	sub	sp, #52	@ 0x34
 80064be:	460c      	mov	r4, r1
 80064c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064c4:	4616      	mov	r6, r2
 80064c6:	461f      	mov	r7, r3
 80064c8:	4605      	mov	r5, r0
 80064ca:	f000 fd17 	bl	8006efc <_localeconv_r>
 80064ce:	6803      	ldr	r3, [r0, #0]
 80064d0:	9304      	str	r3, [sp, #16]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7f9 fedc 	bl	8000290 <strlen>
 80064d8:	2300      	movs	r3, #0
 80064da:	930a      	str	r3, [sp, #40]	@ 0x28
 80064dc:	f8d8 3000 	ldr.w	r3, [r8]
 80064e0:	9005      	str	r0, [sp, #20]
 80064e2:	3307      	adds	r3, #7
 80064e4:	f023 0307 	bic.w	r3, r3, #7
 80064e8:	f103 0208 	add.w	r2, r3, #8
 80064ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064f0:	f8d4 b000 	ldr.w	fp, [r4]
 80064f4:	f8c8 2000 	str.w	r2, [r8]
 80064f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006500:	9307      	str	r3, [sp, #28]
 8006502:	f8cd 8018 	str.w	r8, [sp, #24]
 8006506:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800650a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800650e:	4b9c      	ldr	r3, [pc, #624]	@ (8006780 <_printf_float+0x2c8>)
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	f7fa fb1a 	bl	8000b4c <__aeabi_dcmpun>
 8006518:	bb70      	cbnz	r0, 8006578 <_printf_float+0xc0>
 800651a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800651e:	4b98      	ldr	r3, [pc, #608]	@ (8006780 <_printf_float+0x2c8>)
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	f7fa faf4 	bl	8000b10 <__aeabi_dcmple>
 8006528:	bb30      	cbnz	r0, 8006578 <_printf_float+0xc0>
 800652a:	2200      	movs	r2, #0
 800652c:	2300      	movs	r3, #0
 800652e:	4640      	mov	r0, r8
 8006530:	4649      	mov	r1, r9
 8006532:	f7fa fae3 	bl	8000afc <__aeabi_dcmplt>
 8006536:	b110      	cbz	r0, 800653e <_printf_float+0x86>
 8006538:	232d      	movs	r3, #45	@ 0x2d
 800653a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800653e:	4a91      	ldr	r2, [pc, #580]	@ (8006784 <_printf_float+0x2cc>)
 8006540:	4b91      	ldr	r3, [pc, #580]	@ (8006788 <_printf_float+0x2d0>)
 8006542:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006546:	bf94      	ite	ls
 8006548:	4690      	movls	r8, r2
 800654a:	4698      	movhi	r8, r3
 800654c:	2303      	movs	r3, #3
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	f02b 0304 	bic.w	r3, fp, #4
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	f04f 0900 	mov.w	r9, #0
 800655a:	9700      	str	r7, [sp, #0]
 800655c:	4633      	mov	r3, r6
 800655e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006560:	4621      	mov	r1, r4
 8006562:	4628      	mov	r0, r5
 8006564:	f000 f9d2 	bl	800690c <_printf_common>
 8006568:	3001      	adds	r0, #1
 800656a:	f040 808d 	bne.w	8006688 <_printf_float+0x1d0>
 800656e:	f04f 30ff 	mov.w	r0, #4294967295
 8006572:	b00d      	add	sp, #52	@ 0x34
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	4640      	mov	r0, r8
 800657e:	4649      	mov	r1, r9
 8006580:	f7fa fae4 	bl	8000b4c <__aeabi_dcmpun>
 8006584:	b140      	cbz	r0, 8006598 <_printf_float+0xe0>
 8006586:	464b      	mov	r3, r9
 8006588:	2b00      	cmp	r3, #0
 800658a:	bfbc      	itt	lt
 800658c:	232d      	movlt	r3, #45	@ 0x2d
 800658e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006592:	4a7e      	ldr	r2, [pc, #504]	@ (800678c <_printf_float+0x2d4>)
 8006594:	4b7e      	ldr	r3, [pc, #504]	@ (8006790 <_printf_float+0x2d8>)
 8006596:	e7d4      	b.n	8006542 <_printf_float+0x8a>
 8006598:	6863      	ldr	r3, [r4, #4]
 800659a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800659e:	9206      	str	r2, [sp, #24]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	d13b      	bne.n	800661c <_printf_float+0x164>
 80065a4:	2306      	movs	r3, #6
 80065a6:	6063      	str	r3, [r4, #4]
 80065a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80065ac:	2300      	movs	r3, #0
 80065ae:	6022      	str	r2, [r4, #0]
 80065b0:	9303      	str	r3, [sp, #12]
 80065b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80065b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80065b8:	ab09      	add	r3, sp, #36	@ 0x24
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	6861      	ldr	r1, [r4, #4]
 80065be:	ec49 8b10 	vmov	d0, r8, r9
 80065c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065c6:	4628      	mov	r0, r5
 80065c8:	f7ff fed6 	bl	8006378 <__cvt>
 80065cc:	9b06      	ldr	r3, [sp, #24]
 80065ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065d0:	2b47      	cmp	r3, #71	@ 0x47
 80065d2:	4680      	mov	r8, r0
 80065d4:	d129      	bne.n	800662a <_printf_float+0x172>
 80065d6:	1cc8      	adds	r0, r1, #3
 80065d8:	db02      	blt.n	80065e0 <_printf_float+0x128>
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	4299      	cmp	r1, r3
 80065de:	dd41      	ble.n	8006664 <_printf_float+0x1ac>
 80065e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80065e4:	fa5f fa8a 	uxtb.w	sl, sl
 80065e8:	3901      	subs	r1, #1
 80065ea:	4652      	mov	r2, sl
 80065ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80065f2:	f7ff ff26 	bl	8006442 <__exponent>
 80065f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065f8:	1813      	adds	r3, r2, r0
 80065fa:	2a01      	cmp	r2, #1
 80065fc:	4681      	mov	r9, r0
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	dc02      	bgt.n	8006608 <_printf_float+0x150>
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	07d2      	lsls	r2, r2, #31
 8006606:	d501      	bpl.n	800660c <_printf_float+0x154>
 8006608:	3301      	adds	r3, #1
 800660a:	6123      	str	r3, [r4, #16]
 800660c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0a2      	beq.n	800655a <_printf_float+0xa2>
 8006614:	232d      	movs	r3, #45	@ 0x2d
 8006616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800661a:	e79e      	b.n	800655a <_printf_float+0xa2>
 800661c:	9a06      	ldr	r2, [sp, #24]
 800661e:	2a47      	cmp	r2, #71	@ 0x47
 8006620:	d1c2      	bne.n	80065a8 <_printf_float+0xf0>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1c0      	bne.n	80065a8 <_printf_float+0xf0>
 8006626:	2301      	movs	r3, #1
 8006628:	e7bd      	b.n	80065a6 <_printf_float+0xee>
 800662a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800662e:	d9db      	bls.n	80065e8 <_printf_float+0x130>
 8006630:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006634:	d118      	bne.n	8006668 <_printf_float+0x1b0>
 8006636:	2900      	cmp	r1, #0
 8006638:	6863      	ldr	r3, [r4, #4]
 800663a:	dd0b      	ble.n	8006654 <_printf_float+0x19c>
 800663c:	6121      	str	r1, [r4, #16]
 800663e:	b913      	cbnz	r3, 8006646 <_printf_float+0x18e>
 8006640:	6822      	ldr	r2, [r4, #0]
 8006642:	07d0      	lsls	r0, r2, #31
 8006644:	d502      	bpl.n	800664c <_printf_float+0x194>
 8006646:	3301      	adds	r3, #1
 8006648:	440b      	add	r3, r1
 800664a:	6123      	str	r3, [r4, #16]
 800664c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800664e:	f04f 0900 	mov.w	r9, #0
 8006652:	e7db      	b.n	800660c <_printf_float+0x154>
 8006654:	b913      	cbnz	r3, 800665c <_printf_float+0x1a4>
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	07d2      	lsls	r2, r2, #31
 800665a:	d501      	bpl.n	8006660 <_printf_float+0x1a8>
 800665c:	3302      	adds	r3, #2
 800665e:	e7f4      	b.n	800664a <_printf_float+0x192>
 8006660:	2301      	movs	r3, #1
 8006662:	e7f2      	b.n	800664a <_printf_float+0x192>
 8006664:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800666a:	4299      	cmp	r1, r3
 800666c:	db05      	blt.n	800667a <_printf_float+0x1c2>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	6121      	str	r1, [r4, #16]
 8006672:	07d8      	lsls	r0, r3, #31
 8006674:	d5ea      	bpl.n	800664c <_printf_float+0x194>
 8006676:	1c4b      	adds	r3, r1, #1
 8006678:	e7e7      	b.n	800664a <_printf_float+0x192>
 800667a:	2900      	cmp	r1, #0
 800667c:	bfd4      	ite	le
 800667e:	f1c1 0202 	rsble	r2, r1, #2
 8006682:	2201      	movgt	r2, #1
 8006684:	4413      	add	r3, r2
 8006686:	e7e0      	b.n	800664a <_printf_float+0x192>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	055a      	lsls	r2, r3, #21
 800668c:	d407      	bmi.n	800669e <_printf_float+0x1e6>
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	4642      	mov	r2, r8
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	d12b      	bne.n	80066f4 <_printf_float+0x23c>
 800669c:	e767      	b.n	800656e <_printf_float+0xb6>
 800669e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066a2:	f240 80dd 	bls.w	8006860 <_printf_float+0x3a8>
 80066a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066aa:	2200      	movs	r2, #0
 80066ac:	2300      	movs	r3, #0
 80066ae:	f7fa fa1b 	bl	8000ae8 <__aeabi_dcmpeq>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d033      	beq.n	800671e <_printf_float+0x266>
 80066b6:	4a37      	ldr	r2, [pc, #220]	@ (8006794 <_printf_float+0x2dc>)
 80066b8:	2301      	movs	r3, #1
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	f43f af54 	beq.w	800656e <_printf_float+0xb6>
 80066c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066ca:	4543      	cmp	r3, r8
 80066cc:	db02      	blt.n	80066d4 <_printf_float+0x21c>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	07d8      	lsls	r0, r3, #31
 80066d2:	d50f      	bpl.n	80066f4 <_printf_float+0x23c>
 80066d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066d8:	4631      	mov	r1, r6
 80066da:	4628      	mov	r0, r5
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	f43f af45 	beq.w	800656e <_printf_float+0xb6>
 80066e4:	f04f 0900 	mov.w	r9, #0
 80066e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80066ec:	f104 0a1a 	add.w	sl, r4, #26
 80066f0:	45c8      	cmp	r8, r9
 80066f2:	dc09      	bgt.n	8006708 <_printf_float+0x250>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	079b      	lsls	r3, r3, #30
 80066f8:	f100 8103 	bmi.w	8006902 <_printf_float+0x44a>
 80066fc:	68e0      	ldr	r0, [r4, #12]
 80066fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006700:	4298      	cmp	r0, r3
 8006702:	bfb8      	it	lt
 8006704:	4618      	movlt	r0, r3
 8006706:	e734      	b.n	8006572 <_printf_float+0xba>
 8006708:	2301      	movs	r3, #1
 800670a:	4652      	mov	r2, sl
 800670c:	4631      	mov	r1, r6
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f af2b 	beq.w	800656e <_printf_float+0xb6>
 8006718:	f109 0901 	add.w	r9, r9, #1
 800671c:	e7e8      	b.n	80066f0 <_printf_float+0x238>
 800671e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	dc39      	bgt.n	8006798 <_printf_float+0x2e0>
 8006724:	4a1b      	ldr	r2, [pc, #108]	@ (8006794 <_printf_float+0x2dc>)
 8006726:	2301      	movs	r3, #1
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f af1d 	beq.w	800656e <_printf_float+0xb6>
 8006734:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006738:	ea59 0303 	orrs.w	r3, r9, r3
 800673c:	d102      	bne.n	8006744 <_printf_float+0x28c>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	07d9      	lsls	r1, r3, #31
 8006742:	d5d7      	bpl.n	80066f4 <_printf_float+0x23c>
 8006744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006748:	4631      	mov	r1, r6
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	f43f af0d 	beq.w	800656e <_printf_float+0xb6>
 8006754:	f04f 0a00 	mov.w	sl, #0
 8006758:	f104 0b1a 	add.w	fp, r4, #26
 800675c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675e:	425b      	negs	r3, r3
 8006760:	4553      	cmp	r3, sl
 8006762:	dc01      	bgt.n	8006768 <_printf_float+0x2b0>
 8006764:	464b      	mov	r3, r9
 8006766:	e793      	b.n	8006690 <_printf_float+0x1d8>
 8006768:	2301      	movs	r3, #1
 800676a:	465a      	mov	r2, fp
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	f43f aefb 	beq.w	800656e <_printf_float+0xb6>
 8006778:	f10a 0a01 	add.w	sl, sl, #1
 800677c:	e7ee      	b.n	800675c <_printf_float+0x2a4>
 800677e:	bf00      	nop
 8006780:	7fefffff 	.word	0x7fefffff
 8006784:	08008ea1 	.word	0x08008ea1
 8006788:	08008ea5 	.word	0x08008ea5
 800678c:	08008ea9 	.word	0x08008ea9
 8006790:	08008ead 	.word	0x08008ead
 8006794:	08008eb1 	.word	0x08008eb1
 8006798:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800679a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800679e:	4553      	cmp	r3, sl
 80067a0:	bfa8      	it	ge
 80067a2:	4653      	movge	r3, sl
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	4699      	mov	r9, r3
 80067a8:	dc36      	bgt.n	8006818 <_printf_float+0x360>
 80067aa:	f04f 0b00 	mov.w	fp, #0
 80067ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067b2:	f104 021a 	add.w	r2, r4, #26
 80067b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067b8:	9306      	str	r3, [sp, #24]
 80067ba:	eba3 0309 	sub.w	r3, r3, r9
 80067be:	455b      	cmp	r3, fp
 80067c0:	dc31      	bgt.n	8006826 <_printf_float+0x36e>
 80067c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c4:	459a      	cmp	sl, r3
 80067c6:	dc3a      	bgt.n	800683e <_printf_float+0x386>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	07da      	lsls	r2, r3, #31
 80067cc:	d437      	bmi.n	800683e <_printf_float+0x386>
 80067ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d0:	ebaa 0903 	sub.w	r9, sl, r3
 80067d4:	9b06      	ldr	r3, [sp, #24]
 80067d6:	ebaa 0303 	sub.w	r3, sl, r3
 80067da:	4599      	cmp	r9, r3
 80067dc:	bfa8      	it	ge
 80067de:	4699      	movge	r9, r3
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	dc33      	bgt.n	800684e <_printf_float+0x396>
 80067e6:	f04f 0800 	mov.w	r8, #0
 80067ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067ee:	f104 0b1a 	add.w	fp, r4, #26
 80067f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f4:	ebaa 0303 	sub.w	r3, sl, r3
 80067f8:	eba3 0309 	sub.w	r3, r3, r9
 80067fc:	4543      	cmp	r3, r8
 80067fe:	f77f af79 	ble.w	80066f4 <_printf_float+0x23c>
 8006802:	2301      	movs	r3, #1
 8006804:	465a      	mov	r2, fp
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f aeae 	beq.w	800656e <_printf_float+0xb6>
 8006812:	f108 0801 	add.w	r8, r8, #1
 8006816:	e7ec      	b.n	80067f2 <_printf_float+0x33a>
 8006818:	4642      	mov	r2, r8
 800681a:	4631      	mov	r1, r6
 800681c:	4628      	mov	r0, r5
 800681e:	47b8      	blx	r7
 8006820:	3001      	adds	r0, #1
 8006822:	d1c2      	bne.n	80067aa <_printf_float+0x2f2>
 8006824:	e6a3      	b.n	800656e <_printf_float+0xb6>
 8006826:	2301      	movs	r3, #1
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	9206      	str	r2, [sp, #24]
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	f43f ae9c 	beq.w	800656e <_printf_float+0xb6>
 8006836:	9a06      	ldr	r2, [sp, #24]
 8006838:	f10b 0b01 	add.w	fp, fp, #1
 800683c:	e7bb      	b.n	80067b6 <_printf_float+0x2fe>
 800683e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006842:	4631      	mov	r1, r6
 8006844:	4628      	mov	r0, r5
 8006846:	47b8      	blx	r7
 8006848:	3001      	adds	r0, #1
 800684a:	d1c0      	bne.n	80067ce <_printf_float+0x316>
 800684c:	e68f      	b.n	800656e <_printf_float+0xb6>
 800684e:	9a06      	ldr	r2, [sp, #24]
 8006850:	464b      	mov	r3, r9
 8006852:	4442      	add	r2, r8
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	47b8      	blx	r7
 800685a:	3001      	adds	r0, #1
 800685c:	d1c3      	bne.n	80067e6 <_printf_float+0x32e>
 800685e:	e686      	b.n	800656e <_printf_float+0xb6>
 8006860:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006864:	f1ba 0f01 	cmp.w	sl, #1
 8006868:	dc01      	bgt.n	800686e <_printf_float+0x3b6>
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d536      	bpl.n	80068dc <_printf_float+0x424>
 800686e:	2301      	movs	r3, #1
 8006870:	4642      	mov	r2, r8
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	f43f ae78 	beq.w	800656e <_printf_float+0xb6>
 800687e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	f43f ae70 	beq.w	800656e <_printf_float+0xb6>
 800688e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006892:	2200      	movs	r2, #0
 8006894:	2300      	movs	r3, #0
 8006896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800689a:	f7fa f925 	bl	8000ae8 <__aeabi_dcmpeq>
 800689e:	b9c0      	cbnz	r0, 80068d2 <_printf_float+0x41a>
 80068a0:	4653      	mov	r3, sl
 80068a2:	f108 0201 	add.w	r2, r8, #1
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	d10c      	bne.n	80068ca <_printf_float+0x412>
 80068b0:	e65d      	b.n	800656e <_printf_float+0xb6>
 80068b2:	2301      	movs	r3, #1
 80068b4:	465a      	mov	r2, fp
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	f43f ae56 	beq.w	800656e <_printf_float+0xb6>
 80068c2:	f108 0801 	add.w	r8, r8, #1
 80068c6:	45d0      	cmp	r8, sl
 80068c8:	dbf3      	blt.n	80068b2 <_printf_float+0x3fa>
 80068ca:	464b      	mov	r3, r9
 80068cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068d0:	e6df      	b.n	8006692 <_printf_float+0x1da>
 80068d2:	f04f 0800 	mov.w	r8, #0
 80068d6:	f104 0b1a 	add.w	fp, r4, #26
 80068da:	e7f4      	b.n	80068c6 <_printf_float+0x40e>
 80068dc:	2301      	movs	r3, #1
 80068de:	4642      	mov	r2, r8
 80068e0:	e7e1      	b.n	80068a6 <_printf_float+0x3ee>
 80068e2:	2301      	movs	r3, #1
 80068e4:	464a      	mov	r2, r9
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f ae3e 	beq.w	800656e <_printf_float+0xb6>
 80068f2:	f108 0801 	add.w	r8, r8, #1
 80068f6:	68e3      	ldr	r3, [r4, #12]
 80068f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068fa:	1a5b      	subs	r3, r3, r1
 80068fc:	4543      	cmp	r3, r8
 80068fe:	dcf0      	bgt.n	80068e2 <_printf_float+0x42a>
 8006900:	e6fc      	b.n	80066fc <_printf_float+0x244>
 8006902:	f04f 0800 	mov.w	r8, #0
 8006906:	f104 0919 	add.w	r9, r4, #25
 800690a:	e7f4      	b.n	80068f6 <_printf_float+0x43e>

0800690c <_printf_common>:
 800690c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	4616      	mov	r6, r2
 8006912:	4698      	mov	r8, r3
 8006914:	688a      	ldr	r2, [r1, #8]
 8006916:	690b      	ldr	r3, [r1, #16]
 8006918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800691c:	4293      	cmp	r3, r2
 800691e:	bfb8      	it	lt
 8006920:	4613      	movlt	r3, r2
 8006922:	6033      	str	r3, [r6, #0]
 8006924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006928:	4607      	mov	r7, r0
 800692a:	460c      	mov	r4, r1
 800692c:	b10a      	cbz	r2, 8006932 <_printf_common+0x26>
 800692e:	3301      	adds	r3, #1
 8006930:	6033      	str	r3, [r6, #0]
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	0699      	lsls	r1, r3, #26
 8006936:	bf42      	ittt	mi
 8006938:	6833      	ldrmi	r3, [r6, #0]
 800693a:	3302      	addmi	r3, #2
 800693c:	6033      	strmi	r3, [r6, #0]
 800693e:	6825      	ldr	r5, [r4, #0]
 8006940:	f015 0506 	ands.w	r5, r5, #6
 8006944:	d106      	bne.n	8006954 <_printf_common+0x48>
 8006946:	f104 0a19 	add.w	sl, r4, #25
 800694a:	68e3      	ldr	r3, [r4, #12]
 800694c:	6832      	ldr	r2, [r6, #0]
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	42ab      	cmp	r3, r5
 8006952:	dc26      	bgt.n	80069a2 <_printf_common+0x96>
 8006954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006958:	6822      	ldr	r2, [r4, #0]
 800695a:	3b00      	subs	r3, #0
 800695c:	bf18      	it	ne
 800695e:	2301      	movne	r3, #1
 8006960:	0692      	lsls	r2, r2, #26
 8006962:	d42b      	bmi.n	80069bc <_printf_common+0xb0>
 8006964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006968:	4641      	mov	r1, r8
 800696a:	4638      	mov	r0, r7
 800696c:	47c8      	blx	r9
 800696e:	3001      	adds	r0, #1
 8006970:	d01e      	beq.n	80069b0 <_printf_common+0xa4>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	6922      	ldr	r2, [r4, #16]
 8006976:	f003 0306 	and.w	r3, r3, #6
 800697a:	2b04      	cmp	r3, #4
 800697c:	bf02      	ittt	eq
 800697e:	68e5      	ldreq	r5, [r4, #12]
 8006980:	6833      	ldreq	r3, [r6, #0]
 8006982:	1aed      	subeq	r5, r5, r3
 8006984:	68a3      	ldr	r3, [r4, #8]
 8006986:	bf0c      	ite	eq
 8006988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800698c:	2500      	movne	r5, #0
 800698e:	4293      	cmp	r3, r2
 8006990:	bfc4      	itt	gt
 8006992:	1a9b      	subgt	r3, r3, r2
 8006994:	18ed      	addgt	r5, r5, r3
 8006996:	2600      	movs	r6, #0
 8006998:	341a      	adds	r4, #26
 800699a:	42b5      	cmp	r5, r6
 800699c:	d11a      	bne.n	80069d4 <_printf_common+0xc8>
 800699e:	2000      	movs	r0, #0
 80069a0:	e008      	b.n	80069b4 <_printf_common+0xa8>
 80069a2:	2301      	movs	r3, #1
 80069a4:	4652      	mov	r2, sl
 80069a6:	4641      	mov	r1, r8
 80069a8:	4638      	mov	r0, r7
 80069aa:	47c8      	blx	r9
 80069ac:	3001      	adds	r0, #1
 80069ae:	d103      	bne.n	80069b8 <_printf_common+0xac>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b8:	3501      	adds	r5, #1
 80069ba:	e7c6      	b.n	800694a <_printf_common+0x3e>
 80069bc:	18e1      	adds	r1, r4, r3
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	2030      	movs	r0, #48	@ 0x30
 80069c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069c6:	4422      	add	r2, r4
 80069c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069d0:	3302      	adds	r3, #2
 80069d2:	e7c7      	b.n	8006964 <_printf_common+0x58>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4622      	mov	r2, r4
 80069d8:	4641      	mov	r1, r8
 80069da:	4638      	mov	r0, r7
 80069dc:	47c8      	blx	r9
 80069de:	3001      	adds	r0, #1
 80069e0:	d0e6      	beq.n	80069b0 <_printf_common+0xa4>
 80069e2:	3601      	adds	r6, #1
 80069e4:	e7d9      	b.n	800699a <_printf_common+0x8e>
	...

080069e8 <_printf_i>:
 80069e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069ec:	7e0f      	ldrb	r7, [r1, #24]
 80069ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069f0:	2f78      	cmp	r7, #120	@ 0x78
 80069f2:	4691      	mov	r9, r2
 80069f4:	4680      	mov	r8, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	469a      	mov	sl, r3
 80069fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069fe:	d807      	bhi.n	8006a10 <_printf_i+0x28>
 8006a00:	2f62      	cmp	r7, #98	@ 0x62
 8006a02:	d80a      	bhi.n	8006a1a <_printf_i+0x32>
 8006a04:	2f00      	cmp	r7, #0
 8006a06:	f000 80d2 	beq.w	8006bae <_printf_i+0x1c6>
 8006a0a:	2f58      	cmp	r7, #88	@ 0x58
 8006a0c:	f000 80b9 	beq.w	8006b82 <_printf_i+0x19a>
 8006a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a18:	e03a      	b.n	8006a90 <_printf_i+0xa8>
 8006a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a1e:	2b15      	cmp	r3, #21
 8006a20:	d8f6      	bhi.n	8006a10 <_printf_i+0x28>
 8006a22:	a101      	add	r1, pc, #4	@ (adr r1, 8006a28 <_printf_i+0x40>)
 8006a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a28:	08006a81 	.word	0x08006a81
 8006a2c:	08006a95 	.word	0x08006a95
 8006a30:	08006a11 	.word	0x08006a11
 8006a34:	08006a11 	.word	0x08006a11
 8006a38:	08006a11 	.word	0x08006a11
 8006a3c:	08006a11 	.word	0x08006a11
 8006a40:	08006a95 	.word	0x08006a95
 8006a44:	08006a11 	.word	0x08006a11
 8006a48:	08006a11 	.word	0x08006a11
 8006a4c:	08006a11 	.word	0x08006a11
 8006a50:	08006a11 	.word	0x08006a11
 8006a54:	08006b95 	.word	0x08006b95
 8006a58:	08006abf 	.word	0x08006abf
 8006a5c:	08006b4f 	.word	0x08006b4f
 8006a60:	08006a11 	.word	0x08006a11
 8006a64:	08006a11 	.word	0x08006a11
 8006a68:	08006bb7 	.word	0x08006bb7
 8006a6c:	08006a11 	.word	0x08006a11
 8006a70:	08006abf 	.word	0x08006abf
 8006a74:	08006a11 	.word	0x08006a11
 8006a78:	08006a11 	.word	0x08006a11
 8006a7c:	08006b57 	.word	0x08006b57
 8006a80:	6833      	ldr	r3, [r6, #0]
 8006a82:	1d1a      	adds	r2, r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6032      	str	r2, [r6, #0]
 8006a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a90:	2301      	movs	r3, #1
 8006a92:	e09d      	b.n	8006bd0 <_printf_i+0x1e8>
 8006a94:	6833      	ldr	r3, [r6, #0]
 8006a96:	6820      	ldr	r0, [r4, #0]
 8006a98:	1d19      	adds	r1, r3, #4
 8006a9a:	6031      	str	r1, [r6, #0]
 8006a9c:	0606      	lsls	r6, r0, #24
 8006a9e:	d501      	bpl.n	8006aa4 <_printf_i+0xbc>
 8006aa0:	681d      	ldr	r5, [r3, #0]
 8006aa2:	e003      	b.n	8006aac <_printf_i+0xc4>
 8006aa4:	0645      	lsls	r5, r0, #25
 8006aa6:	d5fb      	bpl.n	8006aa0 <_printf_i+0xb8>
 8006aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006aac:	2d00      	cmp	r5, #0
 8006aae:	da03      	bge.n	8006ab8 <_printf_i+0xd0>
 8006ab0:	232d      	movs	r3, #45	@ 0x2d
 8006ab2:	426d      	negs	r5, r5
 8006ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ab8:	4859      	ldr	r0, [pc, #356]	@ (8006c20 <_printf_i+0x238>)
 8006aba:	230a      	movs	r3, #10
 8006abc:	e011      	b.n	8006ae2 <_printf_i+0xfa>
 8006abe:	6821      	ldr	r1, [r4, #0]
 8006ac0:	6833      	ldr	r3, [r6, #0]
 8006ac2:	0608      	lsls	r0, r1, #24
 8006ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ac8:	d402      	bmi.n	8006ad0 <_printf_i+0xe8>
 8006aca:	0649      	lsls	r1, r1, #25
 8006acc:	bf48      	it	mi
 8006ace:	b2ad      	uxthmi	r5, r5
 8006ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ad2:	4853      	ldr	r0, [pc, #332]	@ (8006c20 <_printf_i+0x238>)
 8006ad4:	6033      	str	r3, [r6, #0]
 8006ad6:	bf14      	ite	ne
 8006ad8:	230a      	movne	r3, #10
 8006ada:	2308      	moveq	r3, #8
 8006adc:	2100      	movs	r1, #0
 8006ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ae2:	6866      	ldr	r6, [r4, #4]
 8006ae4:	60a6      	str	r6, [r4, #8]
 8006ae6:	2e00      	cmp	r6, #0
 8006ae8:	bfa2      	ittt	ge
 8006aea:	6821      	ldrge	r1, [r4, #0]
 8006aec:	f021 0104 	bicge.w	r1, r1, #4
 8006af0:	6021      	strge	r1, [r4, #0]
 8006af2:	b90d      	cbnz	r5, 8006af8 <_printf_i+0x110>
 8006af4:	2e00      	cmp	r6, #0
 8006af6:	d04b      	beq.n	8006b90 <_printf_i+0x1a8>
 8006af8:	4616      	mov	r6, r2
 8006afa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006afe:	fb03 5711 	mls	r7, r3, r1, r5
 8006b02:	5dc7      	ldrb	r7, [r0, r7]
 8006b04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b08:	462f      	mov	r7, r5
 8006b0a:	42bb      	cmp	r3, r7
 8006b0c:	460d      	mov	r5, r1
 8006b0e:	d9f4      	bls.n	8006afa <_printf_i+0x112>
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d10b      	bne.n	8006b2c <_printf_i+0x144>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	07df      	lsls	r7, r3, #31
 8006b18:	d508      	bpl.n	8006b2c <_printf_i+0x144>
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	6861      	ldr	r1, [r4, #4]
 8006b1e:	4299      	cmp	r1, r3
 8006b20:	bfde      	ittt	le
 8006b22:	2330      	movle	r3, #48	@ 0x30
 8006b24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b2c:	1b92      	subs	r2, r2, r6
 8006b2e:	6122      	str	r2, [r4, #16]
 8006b30:	f8cd a000 	str.w	sl, [sp]
 8006b34:	464b      	mov	r3, r9
 8006b36:	aa03      	add	r2, sp, #12
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	f7ff fee6 	bl	800690c <_printf_common>
 8006b40:	3001      	adds	r0, #1
 8006b42:	d14a      	bne.n	8006bda <_printf_i+0x1f2>
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295
 8006b48:	b004      	add	sp, #16
 8006b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f043 0320 	orr.w	r3, r3, #32
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	4833      	ldr	r0, [pc, #204]	@ (8006c24 <_printf_i+0x23c>)
 8006b58:	2778      	movs	r7, #120	@ 0x78
 8006b5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	6831      	ldr	r1, [r6, #0]
 8006b62:	061f      	lsls	r7, r3, #24
 8006b64:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b68:	d402      	bmi.n	8006b70 <_printf_i+0x188>
 8006b6a:	065f      	lsls	r7, r3, #25
 8006b6c:	bf48      	it	mi
 8006b6e:	b2ad      	uxthmi	r5, r5
 8006b70:	6031      	str	r1, [r6, #0]
 8006b72:	07d9      	lsls	r1, r3, #31
 8006b74:	bf44      	itt	mi
 8006b76:	f043 0320 	orrmi.w	r3, r3, #32
 8006b7a:	6023      	strmi	r3, [r4, #0]
 8006b7c:	b11d      	cbz	r5, 8006b86 <_printf_i+0x19e>
 8006b7e:	2310      	movs	r3, #16
 8006b80:	e7ac      	b.n	8006adc <_printf_i+0xf4>
 8006b82:	4827      	ldr	r0, [pc, #156]	@ (8006c20 <_printf_i+0x238>)
 8006b84:	e7e9      	b.n	8006b5a <_printf_i+0x172>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	f023 0320 	bic.w	r3, r3, #32
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	e7f6      	b.n	8006b7e <_printf_i+0x196>
 8006b90:	4616      	mov	r6, r2
 8006b92:	e7bd      	b.n	8006b10 <_printf_i+0x128>
 8006b94:	6833      	ldr	r3, [r6, #0]
 8006b96:	6825      	ldr	r5, [r4, #0]
 8006b98:	6961      	ldr	r1, [r4, #20]
 8006b9a:	1d18      	adds	r0, r3, #4
 8006b9c:	6030      	str	r0, [r6, #0]
 8006b9e:	062e      	lsls	r6, r5, #24
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	d501      	bpl.n	8006ba8 <_printf_i+0x1c0>
 8006ba4:	6019      	str	r1, [r3, #0]
 8006ba6:	e002      	b.n	8006bae <_printf_i+0x1c6>
 8006ba8:	0668      	lsls	r0, r5, #25
 8006baa:	d5fb      	bpl.n	8006ba4 <_printf_i+0x1bc>
 8006bac:	8019      	strh	r1, [r3, #0]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	4616      	mov	r6, r2
 8006bb4:	e7bc      	b.n	8006b30 <_printf_i+0x148>
 8006bb6:	6833      	ldr	r3, [r6, #0]
 8006bb8:	1d1a      	adds	r2, r3, #4
 8006bba:	6032      	str	r2, [r6, #0]
 8006bbc:	681e      	ldr	r6, [r3, #0]
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f7f9 fb14 	bl	80001f0 <memchr>
 8006bc8:	b108      	cbz	r0, 8006bce <_printf_i+0x1e6>
 8006bca:	1b80      	subs	r0, r0, r6
 8006bcc:	6060      	str	r0, [r4, #4]
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd8:	e7aa      	b.n	8006b30 <_printf_i+0x148>
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	4632      	mov	r2, r6
 8006bde:	4649      	mov	r1, r9
 8006be0:	4640      	mov	r0, r8
 8006be2:	47d0      	blx	sl
 8006be4:	3001      	adds	r0, #1
 8006be6:	d0ad      	beq.n	8006b44 <_printf_i+0x15c>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	079b      	lsls	r3, r3, #30
 8006bec:	d413      	bmi.n	8006c16 <_printf_i+0x22e>
 8006bee:	68e0      	ldr	r0, [r4, #12]
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	4298      	cmp	r0, r3
 8006bf4:	bfb8      	it	lt
 8006bf6:	4618      	movlt	r0, r3
 8006bf8:	e7a6      	b.n	8006b48 <_printf_i+0x160>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	4649      	mov	r1, r9
 8006c00:	4640      	mov	r0, r8
 8006c02:	47d0      	blx	sl
 8006c04:	3001      	adds	r0, #1
 8006c06:	d09d      	beq.n	8006b44 <_printf_i+0x15c>
 8006c08:	3501      	adds	r5, #1
 8006c0a:	68e3      	ldr	r3, [r4, #12]
 8006c0c:	9903      	ldr	r1, [sp, #12]
 8006c0e:	1a5b      	subs	r3, r3, r1
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	dcf2      	bgt.n	8006bfa <_printf_i+0x212>
 8006c14:	e7eb      	b.n	8006bee <_printf_i+0x206>
 8006c16:	2500      	movs	r5, #0
 8006c18:	f104 0619 	add.w	r6, r4, #25
 8006c1c:	e7f5      	b.n	8006c0a <_printf_i+0x222>
 8006c1e:	bf00      	nop
 8006c20:	08008eb3 	.word	0x08008eb3
 8006c24:	08008ec4 	.word	0x08008ec4

08006c28 <std>:
 8006c28:	2300      	movs	r3, #0
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c36:	6083      	str	r3, [r0, #8]
 8006c38:	8181      	strh	r1, [r0, #12]
 8006c3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c3c:	81c2      	strh	r2, [r0, #14]
 8006c3e:	6183      	str	r3, [r0, #24]
 8006c40:	4619      	mov	r1, r3
 8006c42:	2208      	movs	r2, #8
 8006c44:	305c      	adds	r0, #92	@ 0x5c
 8006c46:	f000 f8f4 	bl	8006e32 <memset>
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c80 <std+0x58>)
 8006c4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <std+0x5c>)
 8006c50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c52:	4b0d      	ldr	r3, [pc, #52]	@ (8006c88 <std+0x60>)
 8006c54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c56:	4b0d      	ldr	r3, [pc, #52]	@ (8006c8c <std+0x64>)
 8006c58:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c90 <std+0x68>)
 8006c5c:	6224      	str	r4, [r4, #32]
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d006      	beq.n	8006c70 <std+0x48>
 8006c62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c66:	4294      	cmp	r4, r2
 8006c68:	d002      	beq.n	8006c70 <std+0x48>
 8006c6a:	33d0      	adds	r3, #208	@ 0xd0
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	d105      	bne.n	8006c7c <std+0x54>
 8006c70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c78:	f000 b9b4 	b.w	8006fe4 <__retarget_lock_init_recursive>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	bf00      	nop
 8006c80:	08006dad 	.word	0x08006dad
 8006c84:	08006dcf 	.word	0x08006dcf
 8006c88:	08006e07 	.word	0x08006e07
 8006c8c:	08006e2b 	.word	0x08006e2b
 8006c90:	20000408 	.word	0x20000408

08006c94 <stdio_exit_handler>:
 8006c94:	4a02      	ldr	r2, [pc, #8]	@ (8006ca0 <stdio_exit_handler+0xc>)
 8006c96:	4903      	ldr	r1, [pc, #12]	@ (8006ca4 <stdio_exit_handler+0x10>)
 8006c98:	4803      	ldr	r0, [pc, #12]	@ (8006ca8 <stdio_exit_handler+0x14>)
 8006c9a:	f000 b869 	b.w	8006d70 <_fwalk_sglue>
 8006c9e:	bf00      	nop
 8006ca0:	20000010 	.word	0x20000010
 8006ca4:	080086cd 	.word	0x080086cd
 8006ca8:	20000020 	.word	0x20000020

08006cac <cleanup_stdio>:
 8006cac:	6841      	ldr	r1, [r0, #4]
 8006cae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce0 <cleanup_stdio+0x34>)
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	d001      	beq.n	8006cbc <cleanup_stdio+0x10>
 8006cb8:	f001 fd08 	bl	80086cc <_fflush_r>
 8006cbc:	68a1      	ldr	r1, [r4, #8]
 8006cbe:	4b09      	ldr	r3, [pc, #36]	@ (8006ce4 <cleanup_stdio+0x38>)
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	d002      	beq.n	8006cca <cleanup_stdio+0x1e>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f001 fd01 	bl	80086cc <_fflush_r>
 8006cca:	68e1      	ldr	r1, [r4, #12]
 8006ccc:	4b06      	ldr	r3, [pc, #24]	@ (8006ce8 <cleanup_stdio+0x3c>)
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	d004      	beq.n	8006cdc <cleanup_stdio+0x30>
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd8:	f001 bcf8 	b.w	80086cc <_fflush_r>
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000408 	.word	0x20000408
 8006ce4:	20000470 	.word	0x20000470
 8006ce8:	200004d8 	.word	0x200004d8

08006cec <global_stdio_init.part.0>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <global_stdio_init.part.0+0x30>)
 8006cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8006d20 <global_stdio_init.part.0+0x34>)
 8006cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8006d24 <global_stdio_init.part.0+0x38>)
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	f7ff ff94 	bl	8006c28 <std>
 8006d00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d04:	2201      	movs	r2, #1
 8006d06:	2109      	movs	r1, #9
 8006d08:	f7ff ff8e 	bl	8006c28 <std>
 8006d0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d10:	2202      	movs	r2, #2
 8006d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d16:	2112      	movs	r1, #18
 8006d18:	f7ff bf86 	b.w	8006c28 <std>
 8006d1c:	20000540 	.word	0x20000540
 8006d20:	20000408 	.word	0x20000408
 8006d24:	08006c95 	.word	0x08006c95

08006d28 <__sfp_lock_acquire>:
 8006d28:	4801      	ldr	r0, [pc, #4]	@ (8006d30 <__sfp_lock_acquire+0x8>)
 8006d2a:	f000 b95c 	b.w	8006fe6 <__retarget_lock_acquire_recursive>
 8006d2e:	bf00      	nop
 8006d30:	20000549 	.word	0x20000549

08006d34 <__sfp_lock_release>:
 8006d34:	4801      	ldr	r0, [pc, #4]	@ (8006d3c <__sfp_lock_release+0x8>)
 8006d36:	f000 b957 	b.w	8006fe8 <__retarget_lock_release_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20000549 	.word	0x20000549

08006d40 <__sinit>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	4604      	mov	r4, r0
 8006d44:	f7ff fff0 	bl	8006d28 <__sfp_lock_acquire>
 8006d48:	6a23      	ldr	r3, [r4, #32]
 8006d4a:	b11b      	cbz	r3, 8006d54 <__sinit+0x14>
 8006d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d50:	f7ff bff0 	b.w	8006d34 <__sfp_lock_release>
 8006d54:	4b04      	ldr	r3, [pc, #16]	@ (8006d68 <__sinit+0x28>)
 8006d56:	6223      	str	r3, [r4, #32]
 8006d58:	4b04      	ldr	r3, [pc, #16]	@ (8006d6c <__sinit+0x2c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1f5      	bne.n	8006d4c <__sinit+0xc>
 8006d60:	f7ff ffc4 	bl	8006cec <global_stdio_init.part.0>
 8006d64:	e7f2      	b.n	8006d4c <__sinit+0xc>
 8006d66:	bf00      	nop
 8006d68:	08006cad 	.word	0x08006cad
 8006d6c:	20000540 	.word	0x20000540

08006d70 <_fwalk_sglue>:
 8006d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d74:	4607      	mov	r7, r0
 8006d76:	4688      	mov	r8, r1
 8006d78:	4614      	mov	r4, r2
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d80:	f1b9 0901 	subs.w	r9, r9, #1
 8006d84:	d505      	bpl.n	8006d92 <_fwalk_sglue+0x22>
 8006d86:	6824      	ldr	r4, [r4, #0]
 8006d88:	2c00      	cmp	r4, #0
 8006d8a:	d1f7      	bne.n	8006d7c <_fwalk_sglue+0xc>
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d92:	89ab      	ldrh	r3, [r5, #12]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d907      	bls.n	8006da8 <_fwalk_sglue+0x38>
 8006d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	d003      	beq.n	8006da8 <_fwalk_sglue+0x38>
 8006da0:	4629      	mov	r1, r5
 8006da2:	4638      	mov	r0, r7
 8006da4:	47c0      	blx	r8
 8006da6:	4306      	orrs	r6, r0
 8006da8:	3568      	adds	r5, #104	@ 0x68
 8006daa:	e7e9      	b.n	8006d80 <_fwalk_sglue+0x10>

08006dac <__sread>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	460c      	mov	r4, r1
 8006db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db4:	f000 f8c8 	bl	8006f48 <_read_r>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	bfab      	itete	ge
 8006dbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8006dc0:	181b      	addge	r3, r3, r0
 8006dc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dc6:	bfac      	ite	ge
 8006dc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dca:	81a3      	strhlt	r3, [r4, #12]
 8006dcc:	bd10      	pop	{r4, pc}

08006dce <__swrite>:
 8006dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd2:	461f      	mov	r7, r3
 8006dd4:	898b      	ldrh	r3, [r1, #12]
 8006dd6:	05db      	lsls	r3, r3, #23
 8006dd8:	4605      	mov	r5, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	4616      	mov	r6, r2
 8006dde:	d505      	bpl.n	8006dec <__swrite+0x1e>
 8006de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de4:	2302      	movs	r3, #2
 8006de6:	2200      	movs	r2, #0
 8006de8:	f000 f89c 	bl	8006f24 <_lseek_r>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006df2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	4632      	mov	r2, r6
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	f000 b8b3 	b.w	8006f6c <_write_r>

08006e06 <__sseek>:
 8006e06:	b510      	push	{r4, lr}
 8006e08:	460c      	mov	r4, r1
 8006e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0e:	f000 f889 	bl	8006f24 <_lseek_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	bf15      	itete	ne
 8006e18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e22:	81a3      	strheq	r3, [r4, #12]
 8006e24:	bf18      	it	ne
 8006e26:	81a3      	strhne	r3, [r4, #12]
 8006e28:	bd10      	pop	{r4, pc}

08006e2a <__sclose>:
 8006e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2e:	f000 b869 	b.w	8006f04 <_close_r>

08006e32 <memset>:
 8006e32:	4402      	add	r2, r0
 8006e34:	4603      	mov	r3, r0
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d100      	bne.n	8006e3c <memset+0xa>
 8006e3a:	4770      	bx	lr
 8006e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e40:	e7f9      	b.n	8006e36 <memset+0x4>
	...

08006e44 <strtok>:
 8006e44:	4b16      	ldr	r3, [pc, #88]	@ (8006ea0 <strtok+0x5c>)
 8006e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4a:	681f      	ldr	r7, [r3, #0]
 8006e4c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006e4e:	4605      	mov	r5, r0
 8006e50:	460e      	mov	r6, r1
 8006e52:	b9ec      	cbnz	r4, 8006e90 <strtok+0x4c>
 8006e54:	2050      	movs	r0, #80	@ 0x50
 8006e56:	f000 ff7d 	bl	8007d54 <malloc>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	6478      	str	r0, [r7, #68]	@ 0x44
 8006e5e:	b920      	cbnz	r0, 8006e6a <strtok+0x26>
 8006e60:	4b10      	ldr	r3, [pc, #64]	@ (8006ea4 <strtok+0x60>)
 8006e62:	4811      	ldr	r0, [pc, #68]	@ (8006ea8 <strtok+0x64>)
 8006e64:	215b      	movs	r1, #91	@ 0x5b
 8006e66:	f000 f8c1 	bl	8006fec <__assert_func>
 8006e6a:	e9c0 4400 	strd	r4, r4, [r0]
 8006e6e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006e72:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006e76:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006e7a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006e7e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006e82:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006e86:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006e8a:	6184      	str	r4, [r0, #24]
 8006e8c:	7704      	strb	r4, [r0, #28]
 8006e8e:	6244      	str	r4, [r0, #36]	@ 0x24
 8006e90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e92:	4631      	mov	r1, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	2301      	movs	r3, #1
 8006e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9c:	f000 b806 	b.w	8006eac <__strtok_r>
 8006ea0:	2000001c 	.word	0x2000001c
 8006ea4:	08008ed5 	.word	0x08008ed5
 8006ea8:	08008eec 	.word	0x08008eec

08006eac <__strtok_r>:
 8006eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eae:	4604      	mov	r4, r0
 8006eb0:	b908      	cbnz	r0, 8006eb6 <__strtok_r+0xa>
 8006eb2:	6814      	ldr	r4, [r2, #0]
 8006eb4:	b144      	cbz	r4, 8006ec8 <__strtok_r+0x1c>
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006ebc:	460f      	mov	r7, r1
 8006ebe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006ec2:	b91e      	cbnz	r6, 8006ecc <__strtok_r+0x20>
 8006ec4:	b965      	cbnz	r5, 8006ee0 <__strtok_r+0x34>
 8006ec6:	6015      	str	r5, [r2, #0]
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e005      	b.n	8006ed8 <__strtok_r+0x2c>
 8006ecc:	42b5      	cmp	r5, r6
 8006ece:	d1f6      	bne.n	8006ebe <__strtok_r+0x12>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1f0      	bne.n	8006eb6 <__strtok_r+0xa>
 8006ed4:	6014      	str	r4, [r2, #0]
 8006ed6:	7003      	strb	r3, [r0, #0]
 8006ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eda:	461c      	mov	r4, r3
 8006edc:	e00c      	b.n	8006ef8 <__strtok_r+0x4c>
 8006ede:	b915      	cbnz	r5, 8006ee6 <__strtok_r+0x3a>
 8006ee0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ee4:	460e      	mov	r6, r1
 8006ee6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	d1f7      	bne.n	8006ede <__strtok_r+0x32>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0f3      	beq.n	8006eda <__strtok_r+0x2e>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006ef8:	6014      	str	r4, [r2, #0]
 8006efa:	e7ed      	b.n	8006ed8 <__strtok_r+0x2c>

08006efc <_localeconv_r>:
 8006efc:	4800      	ldr	r0, [pc, #0]	@ (8006f00 <_localeconv_r+0x4>)
 8006efe:	4770      	bx	lr
 8006f00:	2000015c 	.word	0x2000015c

08006f04 <_close_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d06      	ldr	r5, [pc, #24]	@ (8006f20 <_close_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	f7fa fd52 	bl	80019b8 <_close>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_close_r+0x1a>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_close_r+0x1a>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	20000544 	.word	0x20000544

08006f24 <_lseek_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d07      	ldr	r5, [pc, #28]	@ (8006f44 <_lseek_r+0x20>)
 8006f28:	4604      	mov	r4, r0
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	602a      	str	r2, [r5, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f7fa fd67 	bl	8001a06 <_lseek>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_lseek_r+0x1e>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_lseek_r+0x1e>
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	20000544 	.word	0x20000544

08006f48 <_read_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d07      	ldr	r5, [pc, #28]	@ (8006f68 <_read_r+0x20>)
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	4608      	mov	r0, r1
 8006f50:	4611      	mov	r1, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	602a      	str	r2, [r5, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f7fa fcf5 	bl	8001946 <_read>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_read_r+0x1e>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_read_r+0x1e>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	20000544 	.word	0x20000544

08006f6c <_write_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4d07      	ldr	r5, [pc, #28]	@ (8006f8c <_write_r+0x20>)
 8006f70:	4604      	mov	r4, r0
 8006f72:	4608      	mov	r0, r1
 8006f74:	4611      	mov	r1, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	602a      	str	r2, [r5, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f7fa fd00 	bl	8001980 <_write>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_write_r+0x1e>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_write_r+0x1e>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	20000544 	.word	0x20000544

08006f90 <__errno>:
 8006f90:	4b01      	ldr	r3, [pc, #4]	@ (8006f98 <__errno+0x8>)
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	2000001c 	.word	0x2000001c

08006f9c <__libc_init_array>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8006fd4 <__libc_init_array+0x38>)
 8006fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8006fd8 <__libc_init_array+0x3c>)
 8006fa2:	1b64      	subs	r4, r4, r5
 8006fa4:	10a4      	asrs	r4, r4, #2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	42a6      	cmp	r6, r4
 8006faa:	d109      	bne.n	8006fc0 <__libc_init_array+0x24>
 8006fac:	4d0b      	ldr	r5, [pc, #44]	@ (8006fdc <__libc_init_array+0x40>)
 8006fae:	4c0c      	ldr	r4, [pc, #48]	@ (8006fe0 <__libc_init_array+0x44>)
 8006fb0:	f001 febc 	bl	8008d2c <_init>
 8006fb4:	1b64      	subs	r4, r4, r5
 8006fb6:	10a4      	asrs	r4, r4, #2
 8006fb8:	2600      	movs	r6, #0
 8006fba:	42a6      	cmp	r6, r4
 8006fbc:	d105      	bne.n	8006fca <__libc_init_array+0x2e>
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc4:	4798      	blx	r3
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7ee      	b.n	8006fa8 <__libc_init_array+0xc>
 8006fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fce:	4798      	blx	r3
 8006fd0:	3601      	adds	r6, #1
 8006fd2:	e7f2      	b.n	8006fba <__libc_init_array+0x1e>
 8006fd4:	08009174 	.word	0x08009174
 8006fd8:	08009174 	.word	0x08009174
 8006fdc:	08009174 	.word	0x08009174
 8006fe0:	08009178 	.word	0x08009178

08006fe4 <__retarget_lock_init_recursive>:
 8006fe4:	4770      	bx	lr

08006fe6 <__retarget_lock_acquire_recursive>:
 8006fe6:	4770      	bx	lr

08006fe8 <__retarget_lock_release_recursive>:
 8006fe8:	4770      	bx	lr
	...

08006fec <__assert_func>:
 8006fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fee:	4614      	mov	r4, r2
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <__assert_func+0x2c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	68d8      	ldr	r0, [r3, #12]
 8006ffa:	b954      	cbnz	r4, 8007012 <__assert_func+0x26>
 8006ffc:	4b07      	ldr	r3, [pc, #28]	@ (800701c <__assert_func+0x30>)
 8006ffe:	461c      	mov	r4, r3
 8007000:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007004:	9100      	str	r1, [sp, #0]
 8007006:	462b      	mov	r3, r5
 8007008:	4905      	ldr	r1, [pc, #20]	@ (8007020 <__assert_func+0x34>)
 800700a:	f001 fb87 	bl	800871c <fiprintf>
 800700e:	f001 fbb5 	bl	800877c <abort>
 8007012:	4b04      	ldr	r3, [pc, #16]	@ (8007024 <__assert_func+0x38>)
 8007014:	e7f4      	b.n	8007000 <__assert_func+0x14>
 8007016:	bf00      	nop
 8007018:	2000001c 	.word	0x2000001c
 800701c:	08008f81 	.word	0x08008f81
 8007020:	08008f53 	.word	0x08008f53
 8007024:	08008f46 	.word	0x08008f46

08007028 <quorem>:
 8007028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	6903      	ldr	r3, [r0, #16]
 800702e:	690c      	ldr	r4, [r1, #16]
 8007030:	42a3      	cmp	r3, r4
 8007032:	4607      	mov	r7, r0
 8007034:	db7e      	blt.n	8007134 <quorem+0x10c>
 8007036:	3c01      	subs	r4, #1
 8007038:	f101 0814 	add.w	r8, r1, #20
 800703c:	00a3      	lsls	r3, r4, #2
 800703e:	f100 0514 	add.w	r5, r0, #20
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800704e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007052:	3301      	adds	r3, #1
 8007054:	429a      	cmp	r2, r3
 8007056:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800705a:	fbb2 f6f3 	udiv	r6, r2, r3
 800705e:	d32e      	bcc.n	80070be <quorem+0x96>
 8007060:	f04f 0a00 	mov.w	sl, #0
 8007064:	46c4      	mov	ip, r8
 8007066:	46ae      	mov	lr, r5
 8007068:	46d3      	mov	fp, sl
 800706a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800706e:	b298      	uxth	r0, r3
 8007070:	fb06 a000 	mla	r0, r6, r0, sl
 8007074:	0c02      	lsrs	r2, r0, #16
 8007076:	0c1b      	lsrs	r3, r3, #16
 8007078:	fb06 2303 	mla	r3, r6, r3, r2
 800707c:	f8de 2000 	ldr.w	r2, [lr]
 8007080:	b280      	uxth	r0, r0
 8007082:	b292      	uxth	r2, r2
 8007084:	1a12      	subs	r2, r2, r0
 8007086:	445a      	add	r2, fp
 8007088:	f8de 0000 	ldr.w	r0, [lr]
 800708c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007090:	b29b      	uxth	r3, r3
 8007092:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007096:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800709a:	b292      	uxth	r2, r2
 800709c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070a0:	45e1      	cmp	r9, ip
 80070a2:	f84e 2b04 	str.w	r2, [lr], #4
 80070a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80070aa:	d2de      	bcs.n	800706a <quorem+0x42>
 80070ac:	9b00      	ldr	r3, [sp, #0]
 80070ae:	58eb      	ldr	r3, [r5, r3]
 80070b0:	b92b      	cbnz	r3, 80070be <quorem+0x96>
 80070b2:	9b01      	ldr	r3, [sp, #4]
 80070b4:	3b04      	subs	r3, #4
 80070b6:	429d      	cmp	r5, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	d32f      	bcc.n	800711c <quorem+0xf4>
 80070bc:	613c      	str	r4, [r7, #16]
 80070be:	4638      	mov	r0, r7
 80070c0:	f001 f978 	bl	80083b4 <__mcmp>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	db25      	blt.n	8007114 <quorem+0xec>
 80070c8:	4629      	mov	r1, r5
 80070ca:	2000      	movs	r0, #0
 80070cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80070d0:	f8d1 c000 	ldr.w	ip, [r1]
 80070d4:	fa1f fe82 	uxth.w	lr, r2
 80070d8:	fa1f f38c 	uxth.w	r3, ip
 80070dc:	eba3 030e 	sub.w	r3, r3, lr
 80070e0:	4403      	add	r3, r0
 80070e2:	0c12      	lsrs	r2, r2, #16
 80070e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80070e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070f2:	45c1      	cmp	r9, r8
 80070f4:	f841 3b04 	str.w	r3, [r1], #4
 80070f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070fc:	d2e6      	bcs.n	80070cc <quorem+0xa4>
 80070fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007106:	b922      	cbnz	r2, 8007112 <quorem+0xea>
 8007108:	3b04      	subs	r3, #4
 800710a:	429d      	cmp	r5, r3
 800710c:	461a      	mov	r2, r3
 800710e:	d30b      	bcc.n	8007128 <quorem+0x100>
 8007110:	613c      	str	r4, [r7, #16]
 8007112:	3601      	adds	r6, #1
 8007114:	4630      	mov	r0, r6
 8007116:	b003      	add	sp, #12
 8007118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711c:	6812      	ldr	r2, [r2, #0]
 800711e:	3b04      	subs	r3, #4
 8007120:	2a00      	cmp	r2, #0
 8007122:	d1cb      	bne.n	80070bc <quorem+0x94>
 8007124:	3c01      	subs	r4, #1
 8007126:	e7c6      	b.n	80070b6 <quorem+0x8e>
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	3b04      	subs	r3, #4
 800712c:	2a00      	cmp	r2, #0
 800712e:	d1ef      	bne.n	8007110 <quorem+0xe8>
 8007130:	3c01      	subs	r4, #1
 8007132:	e7ea      	b.n	800710a <quorem+0xe2>
 8007134:	2000      	movs	r0, #0
 8007136:	e7ee      	b.n	8007116 <quorem+0xee>

08007138 <_dtoa_r>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	69c7      	ldr	r7, [r0, #28]
 800713e:	b099      	sub	sp, #100	@ 0x64
 8007140:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007144:	ec55 4b10 	vmov	r4, r5, d0
 8007148:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800714a:	9109      	str	r1, [sp, #36]	@ 0x24
 800714c:	4683      	mov	fp, r0
 800714e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007150:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007152:	b97f      	cbnz	r7, 8007174 <_dtoa_r+0x3c>
 8007154:	2010      	movs	r0, #16
 8007156:	f000 fdfd 	bl	8007d54 <malloc>
 800715a:	4602      	mov	r2, r0
 800715c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007160:	b920      	cbnz	r0, 800716c <_dtoa_r+0x34>
 8007162:	4ba7      	ldr	r3, [pc, #668]	@ (8007400 <_dtoa_r+0x2c8>)
 8007164:	21ef      	movs	r1, #239	@ 0xef
 8007166:	48a7      	ldr	r0, [pc, #668]	@ (8007404 <_dtoa_r+0x2cc>)
 8007168:	f7ff ff40 	bl	8006fec <__assert_func>
 800716c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007170:	6007      	str	r7, [r0, #0]
 8007172:	60c7      	str	r7, [r0, #12]
 8007174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007178:	6819      	ldr	r1, [r3, #0]
 800717a:	b159      	cbz	r1, 8007194 <_dtoa_r+0x5c>
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	604a      	str	r2, [r1, #4]
 8007180:	2301      	movs	r3, #1
 8007182:	4093      	lsls	r3, r2
 8007184:	608b      	str	r3, [r1, #8]
 8007186:	4658      	mov	r0, fp
 8007188:	f000 feda 	bl	8007f40 <_Bfree>
 800718c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	1e2b      	subs	r3, r5, #0
 8007196:	bfb9      	ittee	lt
 8007198:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800719c:	9303      	strlt	r3, [sp, #12]
 800719e:	2300      	movge	r3, #0
 80071a0:	6033      	strge	r3, [r6, #0]
 80071a2:	9f03      	ldr	r7, [sp, #12]
 80071a4:	4b98      	ldr	r3, [pc, #608]	@ (8007408 <_dtoa_r+0x2d0>)
 80071a6:	bfbc      	itt	lt
 80071a8:	2201      	movlt	r2, #1
 80071aa:	6032      	strlt	r2, [r6, #0]
 80071ac:	43bb      	bics	r3, r7
 80071ae:	d112      	bne.n	80071d6 <_dtoa_r+0x9e>
 80071b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80071b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071bc:	4323      	orrs	r3, r4
 80071be:	f000 854d 	beq.w	8007c5c <_dtoa_r+0xb24>
 80071c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800741c <_dtoa_r+0x2e4>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 854f 	beq.w	8007c6c <_dtoa_r+0xb34>
 80071ce:	f10a 0303 	add.w	r3, sl, #3
 80071d2:	f000 bd49 	b.w	8007c68 <_dtoa_r+0xb30>
 80071d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071da:	2200      	movs	r2, #0
 80071dc:	ec51 0b17 	vmov	r0, r1, d7
 80071e0:	2300      	movs	r3, #0
 80071e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80071e6:	f7f9 fc7f 	bl	8000ae8 <__aeabi_dcmpeq>
 80071ea:	4680      	mov	r8, r0
 80071ec:	b158      	cbz	r0, 8007206 <_dtoa_r+0xce>
 80071ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80071f0:	2301      	movs	r3, #1
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071f6:	b113      	cbz	r3, 80071fe <_dtoa_r+0xc6>
 80071f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80071fa:	4b84      	ldr	r3, [pc, #528]	@ (800740c <_dtoa_r+0x2d4>)
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007420 <_dtoa_r+0x2e8>
 8007202:	f000 bd33 	b.w	8007c6c <_dtoa_r+0xb34>
 8007206:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800720a:	aa16      	add	r2, sp, #88	@ 0x58
 800720c:	a917      	add	r1, sp, #92	@ 0x5c
 800720e:	4658      	mov	r0, fp
 8007210:	f001 f980 	bl	8008514 <__d2b>
 8007214:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007218:	4681      	mov	r9, r0
 800721a:	2e00      	cmp	r6, #0
 800721c:	d077      	beq.n	800730e <_dtoa_r+0x1d6>
 800721e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007220:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800722c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007230:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007234:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007238:	4619      	mov	r1, r3
 800723a:	2200      	movs	r2, #0
 800723c:	4b74      	ldr	r3, [pc, #464]	@ (8007410 <_dtoa_r+0x2d8>)
 800723e:	f7f9 f833 	bl	80002a8 <__aeabi_dsub>
 8007242:	a369      	add	r3, pc, #420	@ (adr r3, 80073e8 <_dtoa_r+0x2b0>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f9 f9e6 	bl	8000618 <__aeabi_dmul>
 800724c:	a368      	add	r3, pc, #416	@ (adr r3, 80073f0 <_dtoa_r+0x2b8>)
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	f7f9 f82b 	bl	80002ac <__adddf3>
 8007256:	4604      	mov	r4, r0
 8007258:	4630      	mov	r0, r6
 800725a:	460d      	mov	r5, r1
 800725c:	f7f9 f972 	bl	8000544 <__aeabi_i2d>
 8007260:	a365      	add	r3, pc, #404	@ (adr r3, 80073f8 <_dtoa_r+0x2c0>)
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f7f9 f9d7 	bl	8000618 <__aeabi_dmul>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4620      	mov	r0, r4
 8007270:	4629      	mov	r1, r5
 8007272:	f7f9 f81b 	bl	80002ac <__adddf3>
 8007276:	4604      	mov	r4, r0
 8007278:	460d      	mov	r5, r1
 800727a:	f7f9 fc7d 	bl	8000b78 <__aeabi_d2iz>
 800727e:	2200      	movs	r2, #0
 8007280:	4607      	mov	r7, r0
 8007282:	2300      	movs	r3, #0
 8007284:	4620      	mov	r0, r4
 8007286:	4629      	mov	r1, r5
 8007288:	f7f9 fc38 	bl	8000afc <__aeabi_dcmplt>
 800728c:	b140      	cbz	r0, 80072a0 <_dtoa_r+0x168>
 800728e:	4638      	mov	r0, r7
 8007290:	f7f9 f958 	bl	8000544 <__aeabi_i2d>
 8007294:	4622      	mov	r2, r4
 8007296:	462b      	mov	r3, r5
 8007298:	f7f9 fc26 	bl	8000ae8 <__aeabi_dcmpeq>
 800729c:	b900      	cbnz	r0, 80072a0 <_dtoa_r+0x168>
 800729e:	3f01      	subs	r7, #1
 80072a0:	2f16      	cmp	r7, #22
 80072a2:	d851      	bhi.n	8007348 <_dtoa_r+0x210>
 80072a4:	4b5b      	ldr	r3, [pc, #364]	@ (8007414 <_dtoa_r+0x2dc>)
 80072a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072b2:	f7f9 fc23 	bl	8000afc <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d048      	beq.n	800734c <_dtoa_r+0x214>
 80072ba:	3f01      	subs	r7, #1
 80072bc:	2300      	movs	r3, #0
 80072be:	9312      	str	r3, [sp, #72]	@ 0x48
 80072c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072c2:	1b9b      	subs	r3, r3, r6
 80072c4:	1e5a      	subs	r2, r3, #1
 80072c6:	bf44      	itt	mi
 80072c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80072cc:	2300      	movmi	r3, #0
 80072ce:	9208      	str	r2, [sp, #32]
 80072d0:	bf54      	ite	pl
 80072d2:	f04f 0800 	movpl.w	r8, #0
 80072d6:	9308      	strmi	r3, [sp, #32]
 80072d8:	2f00      	cmp	r7, #0
 80072da:	db39      	blt.n	8007350 <_dtoa_r+0x218>
 80072dc:	9b08      	ldr	r3, [sp, #32]
 80072de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80072e0:	443b      	add	r3, r7
 80072e2:	9308      	str	r3, [sp, #32]
 80072e4:	2300      	movs	r3, #0
 80072e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ea:	2b09      	cmp	r3, #9
 80072ec:	d864      	bhi.n	80073b8 <_dtoa_r+0x280>
 80072ee:	2b05      	cmp	r3, #5
 80072f0:	bfc4      	itt	gt
 80072f2:	3b04      	subgt	r3, #4
 80072f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80072f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f8:	f1a3 0302 	sub.w	r3, r3, #2
 80072fc:	bfcc      	ite	gt
 80072fe:	2400      	movgt	r4, #0
 8007300:	2401      	movle	r4, #1
 8007302:	2b03      	cmp	r3, #3
 8007304:	d863      	bhi.n	80073ce <_dtoa_r+0x296>
 8007306:	e8df f003 	tbb	[pc, r3]
 800730a:	372a      	.short	0x372a
 800730c:	5535      	.short	0x5535
 800730e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007312:	441e      	add	r6, r3
 8007314:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007318:	2b20      	cmp	r3, #32
 800731a:	bfc1      	itttt	gt
 800731c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007320:	409f      	lslgt	r7, r3
 8007322:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007326:	fa24 f303 	lsrgt.w	r3, r4, r3
 800732a:	bfd6      	itet	le
 800732c:	f1c3 0320 	rsble	r3, r3, #32
 8007330:	ea47 0003 	orrgt.w	r0, r7, r3
 8007334:	fa04 f003 	lslle.w	r0, r4, r3
 8007338:	f7f9 f8f4 	bl	8000524 <__aeabi_ui2d>
 800733c:	2201      	movs	r2, #1
 800733e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007342:	3e01      	subs	r6, #1
 8007344:	9214      	str	r2, [sp, #80]	@ 0x50
 8007346:	e777      	b.n	8007238 <_dtoa_r+0x100>
 8007348:	2301      	movs	r3, #1
 800734a:	e7b8      	b.n	80072be <_dtoa_r+0x186>
 800734c:	9012      	str	r0, [sp, #72]	@ 0x48
 800734e:	e7b7      	b.n	80072c0 <_dtoa_r+0x188>
 8007350:	427b      	negs	r3, r7
 8007352:	930a      	str	r3, [sp, #40]	@ 0x28
 8007354:	2300      	movs	r3, #0
 8007356:	eba8 0807 	sub.w	r8, r8, r7
 800735a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800735c:	e7c4      	b.n	80072e8 <_dtoa_r+0x1b0>
 800735e:	2300      	movs	r3, #0
 8007360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007364:	2b00      	cmp	r3, #0
 8007366:	dc35      	bgt.n	80073d4 <_dtoa_r+0x29c>
 8007368:	2301      	movs	r3, #1
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	9307      	str	r3, [sp, #28]
 800736e:	461a      	mov	r2, r3
 8007370:	920e      	str	r2, [sp, #56]	@ 0x38
 8007372:	e00b      	b.n	800738c <_dtoa_r+0x254>
 8007374:	2301      	movs	r3, #1
 8007376:	e7f3      	b.n	8007360 <_dtoa_r+0x228>
 8007378:	2300      	movs	r3, #0
 800737a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800737c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	3301      	adds	r3, #1
 8007384:	2b01      	cmp	r3, #1
 8007386:	9307      	str	r3, [sp, #28]
 8007388:	bfb8      	it	lt
 800738a:	2301      	movlt	r3, #1
 800738c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007390:	2100      	movs	r1, #0
 8007392:	2204      	movs	r2, #4
 8007394:	f102 0514 	add.w	r5, r2, #20
 8007398:	429d      	cmp	r5, r3
 800739a:	d91f      	bls.n	80073dc <_dtoa_r+0x2a4>
 800739c:	6041      	str	r1, [r0, #4]
 800739e:	4658      	mov	r0, fp
 80073a0:	f000 fd8e 	bl	8007ec0 <_Balloc>
 80073a4:	4682      	mov	sl, r0
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d13c      	bne.n	8007424 <_dtoa_r+0x2ec>
 80073aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007418 <_dtoa_r+0x2e0>)
 80073ac:	4602      	mov	r2, r0
 80073ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80073b2:	e6d8      	b.n	8007166 <_dtoa_r+0x2e>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e7e0      	b.n	800737a <_dtoa_r+0x242>
 80073b8:	2401      	movs	r4, #1
 80073ba:	2300      	movs	r3, #0
 80073bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073c0:	f04f 33ff 	mov.w	r3, #4294967295
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	9307      	str	r3, [sp, #28]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2312      	movs	r3, #18
 80073cc:	e7d0      	b.n	8007370 <_dtoa_r+0x238>
 80073ce:	2301      	movs	r3, #1
 80073d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073d2:	e7f5      	b.n	80073c0 <_dtoa_r+0x288>
 80073d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	9307      	str	r3, [sp, #28]
 80073da:	e7d7      	b.n	800738c <_dtoa_r+0x254>
 80073dc:	3101      	adds	r1, #1
 80073de:	0052      	lsls	r2, r2, #1
 80073e0:	e7d8      	b.n	8007394 <_dtoa_r+0x25c>
 80073e2:	bf00      	nop
 80073e4:	f3af 8000 	nop.w
 80073e8:	636f4361 	.word	0x636f4361
 80073ec:	3fd287a7 	.word	0x3fd287a7
 80073f0:	8b60c8b3 	.word	0x8b60c8b3
 80073f4:	3fc68a28 	.word	0x3fc68a28
 80073f8:	509f79fb 	.word	0x509f79fb
 80073fc:	3fd34413 	.word	0x3fd34413
 8007400:	08008ed5 	.word	0x08008ed5
 8007404:	08008f8f 	.word	0x08008f8f
 8007408:	7ff00000 	.word	0x7ff00000
 800740c:	08008eb2 	.word	0x08008eb2
 8007410:	3ff80000 	.word	0x3ff80000
 8007414:	08009088 	.word	0x08009088
 8007418:	08008fe7 	.word	0x08008fe7
 800741c:	08008f8b 	.word	0x08008f8b
 8007420:	08008eb1 	.word	0x08008eb1
 8007424:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007428:	6018      	str	r0, [r3, #0]
 800742a:	9b07      	ldr	r3, [sp, #28]
 800742c:	2b0e      	cmp	r3, #14
 800742e:	f200 80a4 	bhi.w	800757a <_dtoa_r+0x442>
 8007432:	2c00      	cmp	r4, #0
 8007434:	f000 80a1 	beq.w	800757a <_dtoa_r+0x442>
 8007438:	2f00      	cmp	r7, #0
 800743a:	dd33      	ble.n	80074a4 <_dtoa_r+0x36c>
 800743c:	4bad      	ldr	r3, [pc, #692]	@ (80076f4 <_dtoa_r+0x5bc>)
 800743e:	f007 020f 	and.w	r2, r7, #15
 8007442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007446:	ed93 7b00 	vldr	d7, [r3]
 800744a:	05f8      	lsls	r0, r7, #23
 800744c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007450:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007454:	d516      	bpl.n	8007484 <_dtoa_r+0x34c>
 8007456:	4ba8      	ldr	r3, [pc, #672]	@ (80076f8 <_dtoa_r+0x5c0>)
 8007458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800745c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007460:	f7f9 fa04 	bl	800086c <__aeabi_ddiv>
 8007464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007468:	f004 040f 	and.w	r4, r4, #15
 800746c:	2603      	movs	r6, #3
 800746e:	4da2      	ldr	r5, [pc, #648]	@ (80076f8 <_dtoa_r+0x5c0>)
 8007470:	b954      	cbnz	r4, 8007488 <_dtoa_r+0x350>
 8007472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800747a:	f7f9 f9f7 	bl	800086c <__aeabi_ddiv>
 800747e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007482:	e028      	b.n	80074d6 <_dtoa_r+0x39e>
 8007484:	2602      	movs	r6, #2
 8007486:	e7f2      	b.n	800746e <_dtoa_r+0x336>
 8007488:	07e1      	lsls	r1, r4, #31
 800748a:	d508      	bpl.n	800749e <_dtoa_r+0x366>
 800748c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007490:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007494:	f7f9 f8c0 	bl	8000618 <__aeabi_dmul>
 8007498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800749c:	3601      	adds	r6, #1
 800749e:	1064      	asrs	r4, r4, #1
 80074a0:	3508      	adds	r5, #8
 80074a2:	e7e5      	b.n	8007470 <_dtoa_r+0x338>
 80074a4:	f000 80d2 	beq.w	800764c <_dtoa_r+0x514>
 80074a8:	427c      	negs	r4, r7
 80074aa:	4b92      	ldr	r3, [pc, #584]	@ (80076f4 <_dtoa_r+0x5bc>)
 80074ac:	4d92      	ldr	r5, [pc, #584]	@ (80076f8 <_dtoa_r+0x5c0>)
 80074ae:	f004 020f 	and.w	r2, r4, #15
 80074b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074be:	f7f9 f8ab 	bl	8000618 <__aeabi_dmul>
 80074c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c6:	1124      	asrs	r4, r4, #4
 80074c8:	2300      	movs	r3, #0
 80074ca:	2602      	movs	r6, #2
 80074cc:	2c00      	cmp	r4, #0
 80074ce:	f040 80b2 	bne.w	8007636 <_dtoa_r+0x4fe>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1d3      	bne.n	800747e <_dtoa_r+0x346>
 80074d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80b7 	beq.w	8007650 <_dtoa_r+0x518>
 80074e2:	4b86      	ldr	r3, [pc, #536]	@ (80076fc <_dtoa_r+0x5c4>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	4620      	mov	r0, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f9 fb07 	bl	8000afc <__aeabi_dcmplt>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	f000 80ae 	beq.w	8007650 <_dtoa_r+0x518>
 80074f4:	9b07      	ldr	r3, [sp, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 80aa 	beq.w	8007650 <_dtoa_r+0x518>
 80074fc:	9b00      	ldr	r3, [sp, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	dd37      	ble.n	8007572 <_dtoa_r+0x43a>
 8007502:	1e7b      	subs	r3, r7, #1
 8007504:	9304      	str	r3, [sp, #16]
 8007506:	4620      	mov	r0, r4
 8007508:	4b7d      	ldr	r3, [pc, #500]	@ (8007700 <_dtoa_r+0x5c8>)
 800750a:	2200      	movs	r2, #0
 800750c:	4629      	mov	r1, r5
 800750e:	f7f9 f883 	bl	8000618 <__aeabi_dmul>
 8007512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007516:	9c00      	ldr	r4, [sp, #0]
 8007518:	3601      	adds	r6, #1
 800751a:	4630      	mov	r0, r6
 800751c:	f7f9 f812 	bl	8000544 <__aeabi_i2d>
 8007520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007524:	f7f9 f878 	bl	8000618 <__aeabi_dmul>
 8007528:	4b76      	ldr	r3, [pc, #472]	@ (8007704 <_dtoa_r+0x5cc>)
 800752a:	2200      	movs	r2, #0
 800752c:	f7f8 febe 	bl	80002ac <__adddf3>
 8007530:	4605      	mov	r5, r0
 8007532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007536:	2c00      	cmp	r4, #0
 8007538:	f040 808d 	bne.w	8007656 <_dtoa_r+0x51e>
 800753c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007540:	4b71      	ldr	r3, [pc, #452]	@ (8007708 <_dtoa_r+0x5d0>)
 8007542:	2200      	movs	r2, #0
 8007544:	f7f8 feb0 	bl	80002a8 <__aeabi_dsub>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007550:	462a      	mov	r2, r5
 8007552:	4633      	mov	r3, r6
 8007554:	f7f9 faf0 	bl	8000b38 <__aeabi_dcmpgt>
 8007558:	2800      	cmp	r0, #0
 800755a:	f040 828b 	bne.w	8007a74 <_dtoa_r+0x93c>
 800755e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007562:	462a      	mov	r2, r5
 8007564:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007568:	f7f9 fac8 	bl	8000afc <__aeabi_dcmplt>
 800756c:	2800      	cmp	r0, #0
 800756e:	f040 8128 	bne.w	80077c2 <_dtoa_r+0x68a>
 8007572:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007576:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800757a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800757c:	2b00      	cmp	r3, #0
 800757e:	f2c0 815a 	blt.w	8007836 <_dtoa_r+0x6fe>
 8007582:	2f0e      	cmp	r7, #14
 8007584:	f300 8157 	bgt.w	8007836 <_dtoa_r+0x6fe>
 8007588:	4b5a      	ldr	r3, [pc, #360]	@ (80076f4 <_dtoa_r+0x5bc>)
 800758a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800758e:	ed93 7b00 	vldr	d7, [r3]
 8007592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007594:	2b00      	cmp	r3, #0
 8007596:	ed8d 7b00 	vstr	d7, [sp]
 800759a:	da03      	bge.n	80075a4 <_dtoa_r+0x46c>
 800759c:	9b07      	ldr	r3, [sp, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f340 8101 	ble.w	80077a6 <_dtoa_r+0x66e>
 80075a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075a8:	4656      	mov	r6, sl
 80075aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f9 f95b 	bl	800086c <__aeabi_ddiv>
 80075b6:	f7f9 fadf 	bl	8000b78 <__aeabi_d2iz>
 80075ba:	4680      	mov	r8, r0
 80075bc:	f7f8 ffc2 	bl	8000544 <__aeabi_i2d>
 80075c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075c4:	f7f9 f828 	bl	8000618 <__aeabi_dmul>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4620      	mov	r0, r4
 80075ce:	4629      	mov	r1, r5
 80075d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80075d4:	f7f8 fe68 	bl	80002a8 <__aeabi_dsub>
 80075d8:	f806 4b01 	strb.w	r4, [r6], #1
 80075dc:	9d07      	ldr	r5, [sp, #28]
 80075de:	eba6 040a 	sub.w	r4, r6, sl
 80075e2:	42a5      	cmp	r5, r4
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	f040 8117 	bne.w	800781a <_dtoa_r+0x6e2>
 80075ec:	f7f8 fe5e 	bl	80002ac <__adddf3>
 80075f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075f4:	4604      	mov	r4, r0
 80075f6:	460d      	mov	r5, r1
 80075f8:	f7f9 fa9e 	bl	8000b38 <__aeabi_dcmpgt>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f040 80f9 	bne.w	80077f4 <_dtoa_r+0x6bc>
 8007602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007606:	4620      	mov	r0, r4
 8007608:	4629      	mov	r1, r5
 800760a:	f7f9 fa6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800760e:	b118      	cbz	r0, 8007618 <_dtoa_r+0x4e0>
 8007610:	f018 0f01 	tst.w	r8, #1
 8007614:	f040 80ee 	bne.w	80077f4 <_dtoa_r+0x6bc>
 8007618:	4649      	mov	r1, r9
 800761a:	4658      	mov	r0, fp
 800761c:	f000 fc90 	bl	8007f40 <_Bfree>
 8007620:	2300      	movs	r3, #0
 8007622:	7033      	strb	r3, [r6, #0]
 8007624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007626:	3701      	adds	r7, #1
 8007628:	601f      	str	r7, [r3, #0]
 800762a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 831d 	beq.w	8007c6c <_dtoa_r+0xb34>
 8007632:	601e      	str	r6, [r3, #0]
 8007634:	e31a      	b.n	8007c6c <_dtoa_r+0xb34>
 8007636:	07e2      	lsls	r2, r4, #31
 8007638:	d505      	bpl.n	8007646 <_dtoa_r+0x50e>
 800763a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800763e:	f7f8 ffeb 	bl	8000618 <__aeabi_dmul>
 8007642:	3601      	adds	r6, #1
 8007644:	2301      	movs	r3, #1
 8007646:	1064      	asrs	r4, r4, #1
 8007648:	3508      	adds	r5, #8
 800764a:	e73f      	b.n	80074cc <_dtoa_r+0x394>
 800764c:	2602      	movs	r6, #2
 800764e:	e742      	b.n	80074d6 <_dtoa_r+0x39e>
 8007650:	9c07      	ldr	r4, [sp, #28]
 8007652:	9704      	str	r7, [sp, #16]
 8007654:	e761      	b.n	800751a <_dtoa_r+0x3e2>
 8007656:	4b27      	ldr	r3, [pc, #156]	@ (80076f4 <_dtoa_r+0x5bc>)
 8007658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800765a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800765e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007662:	4454      	add	r4, sl
 8007664:	2900      	cmp	r1, #0
 8007666:	d053      	beq.n	8007710 <_dtoa_r+0x5d8>
 8007668:	4928      	ldr	r1, [pc, #160]	@ (800770c <_dtoa_r+0x5d4>)
 800766a:	2000      	movs	r0, #0
 800766c:	f7f9 f8fe 	bl	800086c <__aeabi_ddiv>
 8007670:	4633      	mov	r3, r6
 8007672:	462a      	mov	r2, r5
 8007674:	f7f8 fe18 	bl	80002a8 <__aeabi_dsub>
 8007678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800767c:	4656      	mov	r6, sl
 800767e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007682:	f7f9 fa79 	bl	8000b78 <__aeabi_d2iz>
 8007686:	4605      	mov	r5, r0
 8007688:	f7f8 ff5c 	bl	8000544 <__aeabi_i2d>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007694:	f7f8 fe08 	bl	80002a8 <__aeabi_dsub>
 8007698:	3530      	adds	r5, #48	@ 0x30
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076a2:	f806 5b01 	strb.w	r5, [r6], #1
 80076a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076aa:	f7f9 fa27 	bl	8000afc <__aeabi_dcmplt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d171      	bne.n	8007796 <_dtoa_r+0x65e>
 80076b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076b6:	4911      	ldr	r1, [pc, #68]	@ (80076fc <_dtoa_r+0x5c4>)
 80076b8:	2000      	movs	r0, #0
 80076ba:	f7f8 fdf5 	bl	80002a8 <__aeabi_dsub>
 80076be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076c2:	f7f9 fa1b 	bl	8000afc <__aeabi_dcmplt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f040 8095 	bne.w	80077f6 <_dtoa_r+0x6be>
 80076cc:	42a6      	cmp	r6, r4
 80076ce:	f43f af50 	beq.w	8007572 <_dtoa_r+0x43a>
 80076d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007700 <_dtoa_r+0x5c8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	f7f8 ff9d 	bl	8000618 <__aeabi_dmul>
 80076de:	4b08      	ldr	r3, [pc, #32]	@ (8007700 <_dtoa_r+0x5c8>)
 80076e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076e4:	2200      	movs	r2, #0
 80076e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ea:	f7f8 ff95 	bl	8000618 <__aeabi_dmul>
 80076ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f2:	e7c4      	b.n	800767e <_dtoa_r+0x546>
 80076f4:	08009088 	.word	0x08009088
 80076f8:	08009060 	.word	0x08009060
 80076fc:	3ff00000 	.word	0x3ff00000
 8007700:	40240000 	.word	0x40240000
 8007704:	401c0000 	.word	0x401c0000
 8007708:	40140000 	.word	0x40140000
 800770c:	3fe00000 	.word	0x3fe00000
 8007710:	4631      	mov	r1, r6
 8007712:	4628      	mov	r0, r5
 8007714:	f7f8 ff80 	bl	8000618 <__aeabi_dmul>
 8007718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800771c:	9415      	str	r4, [sp, #84]	@ 0x54
 800771e:	4656      	mov	r6, sl
 8007720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007724:	f7f9 fa28 	bl	8000b78 <__aeabi_d2iz>
 8007728:	4605      	mov	r5, r0
 800772a:	f7f8 ff0b 	bl	8000544 <__aeabi_i2d>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007736:	f7f8 fdb7 	bl	80002a8 <__aeabi_dsub>
 800773a:	3530      	adds	r5, #48	@ 0x30
 800773c:	f806 5b01 	strb.w	r5, [r6], #1
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	42a6      	cmp	r6, r4
 8007746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	d124      	bne.n	800779a <_dtoa_r+0x662>
 8007750:	4bac      	ldr	r3, [pc, #688]	@ (8007a04 <_dtoa_r+0x8cc>)
 8007752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007756:	f7f8 fda9 	bl	80002ac <__adddf3>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007762:	f7f9 f9e9 	bl	8000b38 <__aeabi_dcmpgt>
 8007766:	2800      	cmp	r0, #0
 8007768:	d145      	bne.n	80077f6 <_dtoa_r+0x6be>
 800776a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800776e:	49a5      	ldr	r1, [pc, #660]	@ (8007a04 <_dtoa_r+0x8cc>)
 8007770:	2000      	movs	r0, #0
 8007772:	f7f8 fd99 	bl	80002a8 <__aeabi_dsub>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777e:	f7f9 f9bd 	bl	8000afc <__aeabi_dcmplt>
 8007782:	2800      	cmp	r0, #0
 8007784:	f43f aef5 	beq.w	8007572 <_dtoa_r+0x43a>
 8007788:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800778a:	1e73      	subs	r3, r6, #1
 800778c:	9315      	str	r3, [sp, #84]	@ 0x54
 800778e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007792:	2b30      	cmp	r3, #48	@ 0x30
 8007794:	d0f8      	beq.n	8007788 <_dtoa_r+0x650>
 8007796:	9f04      	ldr	r7, [sp, #16]
 8007798:	e73e      	b.n	8007618 <_dtoa_r+0x4e0>
 800779a:	4b9b      	ldr	r3, [pc, #620]	@ (8007a08 <_dtoa_r+0x8d0>)
 800779c:	f7f8 ff3c 	bl	8000618 <__aeabi_dmul>
 80077a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077a4:	e7bc      	b.n	8007720 <_dtoa_r+0x5e8>
 80077a6:	d10c      	bne.n	80077c2 <_dtoa_r+0x68a>
 80077a8:	4b98      	ldr	r3, [pc, #608]	@ (8007a0c <_dtoa_r+0x8d4>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077b0:	f7f8 ff32 	bl	8000618 <__aeabi_dmul>
 80077b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077b8:	f7f9 f9b4 	bl	8000b24 <__aeabi_dcmpge>
 80077bc:	2800      	cmp	r0, #0
 80077be:	f000 8157 	beq.w	8007a70 <_dtoa_r+0x938>
 80077c2:	2400      	movs	r4, #0
 80077c4:	4625      	mov	r5, r4
 80077c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077c8:	43db      	mvns	r3, r3
 80077ca:	9304      	str	r3, [sp, #16]
 80077cc:	4656      	mov	r6, sl
 80077ce:	2700      	movs	r7, #0
 80077d0:	4621      	mov	r1, r4
 80077d2:	4658      	mov	r0, fp
 80077d4:	f000 fbb4 	bl	8007f40 <_Bfree>
 80077d8:	2d00      	cmp	r5, #0
 80077da:	d0dc      	beq.n	8007796 <_dtoa_r+0x65e>
 80077dc:	b12f      	cbz	r7, 80077ea <_dtoa_r+0x6b2>
 80077de:	42af      	cmp	r7, r5
 80077e0:	d003      	beq.n	80077ea <_dtoa_r+0x6b2>
 80077e2:	4639      	mov	r1, r7
 80077e4:	4658      	mov	r0, fp
 80077e6:	f000 fbab 	bl	8007f40 <_Bfree>
 80077ea:	4629      	mov	r1, r5
 80077ec:	4658      	mov	r0, fp
 80077ee:	f000 fba7 	bl	8007f40 <_Bfree>
 80077f2:	e7d0      	b.n	8007796 <_dtoa_r+0x65e>
 80077f4:	9704      	str	r7, [sp, #16]
 80077f6:	4633      	mov	r3, r6
 80077f8:	461e      	mov	r6, r3
 80077fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077fe:	2a39      	cmp	r2, #57	@ 0x39
 8007800:	d107      	bne.n	8007812 <_dtoa_r+0x6da>
 8007802:	459a      	cmp	sl, r3
 8007804:	d1f8      	bne.n	80077f8 <_dtoa_r+0x6c0>
 8007806:	9a04      	ldr	r2, [sp, #16]
 8007808:	3201      	adds	r2, #1
 800780a:	9204      	str	r2, [sp, #16]
 800780c:	2230      	movs	r2, #48	@ 0x30
 800780e:	f88a 2000 	strb.w	r2, [sl]
 8007812:	781a      	ldrb	r2, [r3, #0]
 8007814:	3201      	adds	r2, #1
 8007816:	701a      	strb	r2, [r3, #0]
 8007818:	e7bd      	b.n	8007796 <_dtoa_r+0x65e>
 800781a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a08 <_dtoa_r+0x8d0>)
 800781c:	2200      	movs	r2, #0
 800781e:	f7f8 fefb 	bl	8000618 <__aeabi_dmul>
 8007822:	2200      	movs	r2, #0
 8007824:	2300      	movs	r3, #0
 8007826:	4604      	mov	r4, r0
 8007828:	460d      	mov	r5, r1
 800782a:	f7f9 f95d 	bl	8000ae8 <__aeabi_dcmpeq>
 800782e:	2800      	cmp	r0, #0
 8007830:	f43f aebb 	beq.w	80075aa <_dtoa_r+0x472>
 8007834:	e6f0      	b.n	8007618 <_dtoa_r+0x4e0>
 8007836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007838:	2a00      	cmp	r2, #0
 800783a:	f000 80db 	beq.w	80079f4 <_dtoa_r+0x8bc>
 800783e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007840:	2a01      	cmp	r2, #1
 8007842:	f300 80bf 	bgt.w	80079c4 <_dtoa_r+0x88c>
 8007846:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007848:	2a00      	cmp	r2, #0
 800784a:	f000 80b7 	beq.w	80079bc <_dtoa_r+0x884>
 800784e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007852:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007854:	4646      	mov	r6, r8
 8007856:	9a08      	ldr	r2, [sp, #32]
 8007858:	2101      	movs	r1, #1
 800785a:	441a      	add	r2, r3
 800785c:	4658      	mov	r0, fp
 800785e:	4498      	add	r8, r3
 8007860:	9208      	str	r2, [sp, #32]
 8007862:	f000 fc21 	bl	80080a8 <__i2b>
 8007866:	4605      	mov	r5, r0
 8007868:	b15e      	cbz	r6, 8007882 <_dtoa_r+0x74a>
 800786a:	9b08      	ldr	r3, [sp, #32]
 800786c:	2b00      	cmp	r3, #0
 800786e:	dd08      	ble.n	8007882 <_dtoa_r+0x74a>
 8007870:	42b3      	cmp	r3, r6
 8007872:	9a08      	ldr	r2, [sp, #32]
 8007874:	bfa8      	it	ge
 8007876:	4633      	movge	r3, r6
 8007878:	eba8 0803 	sub.w	r8, r8, r3
 800787c:	1af6      	subs	r6, r6, r3
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	9308      	str	r3, [sp, #32]
 8007882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007884:	b1f3      	cbz	r3, 80078c4 <_dtoa_r+0x78c>
 8007886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80b7 	beq.w	80079fc <_dtoa_r+0x8c4>
 800788e:	b18c      	cbz	r4, 80078b4 <_dtoa_r+0x77c>
 8007890:	4629      	mov	r1, r5
 8007892:	4622      	mov	r2, r4
 8007894:	4658      	mov	r0, fp
 8007896:	f000 fcc7 	bl	8008228 <__pow5mult>
 800789a:	464a      	mov	r2, r9
 800789c:	4601      	mov	r1, r0
 800789e:	4605      	mov	r5, r0
 80078a0:	4658      	mov	r0, fp
 80078a2:	f000 fc17 	bl	80080d4 <__multiply>
 80078a6:	4649      	mov	r1, r9
 80078a8:	9004      	str	r0, [sp, #16]
 80078aa:	4658      	mov	r0, fp
 80078ac:	f000 fb48 	bl	8007f40 <_Bfree>
 80078b0:	9b04      	ldr	r3, [sp, #16]
 80078b2:	4699      	mov	r9, r3
 80078b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078b6:	1b1a      	subs	r2, r3, r4
 80078b8:	d004      	beq.n	80078c4 <_dtoa_r+0x78c>
 80078ba:	4649      	mov	r1, r9
 80078bc:	4658      	mov	r0, fp
 80078be:	f000 fcb3 	bl	8008228 <__pow5mult>
 80078c2:	4681      	mov	r9, r0
 80078c4:	2101      	movs	r1, #1
 80078c6:	4658      	mov	r0, fp
 80078c8:	f000 fbee 	bl	80080a8 <__i2b>
 80078cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078ce:	4604      	mov	r4, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 81cf 	beq.w	8007c74 <_dtoa_r+0xb3c>
 80078d6:	461a      	mov	r2, r3
 80078d8:	4601      	mov	r1, r0
 80078da:	4658      	mov	r0, fp
 80078dc:	f000 fca4 	bl	8008228 <__pow5mult>
 80078e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	4604      	mov	r4, r0
 80078e6:	f300 8095 	bgt.w	8007a14 <_dtoa_r+0x8dc>
 80078ea:	9b02      	ldr	r3, [sp, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 8087 	bne.w	8007a00 <_dtoa_r+0x8c8>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f040 8089 	bne.w	8007a10 <_dtoa_r+0x8d8>
 80078fe:	9b03      	ldr	r3, [sp, #12]
 8007900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007904:	0d1b      	lsrs	r3, r3, #20
 8007906:	051b      	lsls	r3, r3, #20
 8007908:	b12b      	cbz	r3, 8007916 <_dtoa_r+0x7de>
 800790a:	9b08      	ldr	r3, [sp, #32]
 800790c:	3301      	adds	r3, #1
 800790e:	9308      	str	r3, [sp, #32]
 8007910:	f108 0801 	add.w	r8, r8, #1
 8007914:	2301      	movs	r3, #1
 8007916:	930a      	str	r3, [sp, #40]	@ 0x28
 8007918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 81b0 	beq.w	8007c80 <_dtoa_r+0xb48>
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007926:	6918      	ldr	r0, [r3, #16]
 8007928:	f000 fb72 	bl	8008010 <__hi0bits>
 800792c:	f1c0 0020 	rsb	r0, r0, #32
 8007930:	9b08      	ldr	r3, [sp, #32]
 8007932:	4418      	add	r0, r3
 8007934:	f010 001f 	ands.w	r0, r0, #31
 8007938:	d077      	beq.n	8007a2a <_dtoa_r+0x8f2>
 800793a:	f1c0 0320 	rsb	r3, r0, #32
 800793e:	2b04      	cmp	r3, #4
 8007940:	dd6b      	ble.n	8007a1a <_dtoa_r+0x8e2>
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	f1c0 001c 	rsb	r0, r0, #28
 8007948:	4403      	add	r3, r0
 800794a:	4480      	add	r8, r0
 800794c:	4406      	add	r6, r0
 800794e:	9308      	str	r3, [sp, #32]
 8007950:	f1b8 0f00 	cmp.w	r8, #0
 8007954:	dd05      	ble.n	8007962 <_dtoa_r+0x82a>
 8007956:	4649      	mov	r1, r9
 8007958:	4642      	mov	r2, r8
 800795a:	4658      	mov	r0, fp
 800795c:	f000 fcbe 	bl	80082dc <__lshift>
 8007960:	4681      	mov	r9, r0
 8007962:	9b08      	ldr	r3, [sp, #32]
 8007964:	2b00      	cmp	r3, #0
 8007966:	dd05      	ble.n	8007974 <_dtoa_r+0x83c>
 8007968:	4621      	mov	r1, r4
 800796a:	461a      	mov	r2, r3
 800796c:	4658      	mov	r0, fp
 800796e:	f000 fcb5 	bl	80082dc <__lshift>
 8007972:	4604      	mov	r4, r0
 8007974:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007976:	2b00      	cmp	r3, #0
 8007978:	d059      	beq.n	8007a2e <_dtoa_r+0x8f6>
 800797a:	4621      	mov	r1, r4
 800797c:	4648      	mov	r0, r9
 800797e:	f000 fd19 	bl	80083b4 <__mcmp>
 8007982:	2800      	cmp	r0, #0
 8007984:	da53      	bge.n	8007a2e <_dtoa_r+0x8f6>
 8007986:	1e7b      	subs	r3, r7, #1
 8007988:	9304      	str	r3, [sp, #16]
 800798a:	4649      	mov	r1, r9
 800798c:	2300      	movs	r3, #0
 800798e:	220a      	movs	r2, #10
 8007990:	4658      	mov	r0, fp
 8007992:	f000 faf7 	bl	8007f84 <__multadd>
 8007996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007998:	4681      	mov	r9, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8172 	beq.w	8007c84 <_dtoa_r+0xb4c>
 80079a0:	2300      	movs	r3, #0
 80079a2:	4629      	mov	r1, r5
 80079a4:	220a      	movs	r2, #10
 80079a6:	4658      	mov	r0, fp
 80079a8:	f000 faec 	bl	8007f84 <__multadd>
 80079ac:	9b00      	ldr	r3, [sp, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	4605      	mov	r5, r0
 80079b2:	dc67      	bgt.n	8007a84 <_dtoa_r+0x94c>
 80079b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	dc41      	bgt.n	8007a3e <_dtoa_r+0x906>
 80079ba:	e063      	b.n	8007a84 <_dtoa_r+0x94c>
 80079bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80079be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079c2:	e746      	b.n	8007852 <_dtoa_r+0x71a>
 80079c4:	9b07      	ldr	r3, [sp, #28]
 80079c6:	1e5c      	subs	r4, r3, #1
 80079c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ca:	42a3      	cmp	r3, r4
 80079cc:	bfbf      	itttt	lt
 80079ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80079d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80079d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80079d4:	1ae3      	sublt	r3, r4, r3
 80079d6:	bfb4      	ite	lt
 80079d8:	18d2      	addlt	r2, r2, r3
 80079da:	1b1c      	subge	r4, r3, r4
 80079dc:	9b07      	ldr	r3, [sp, #28]
 80079de:	bfbc      	itt	lt
 80079e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80079e2:	2400      	movlt	r4, #0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bfb5      	itete	lt
 80079e8:	eba8 0603 	sublt.w	r6, r8, r3
 80079ec:	9b07      	ldrge	r3, [sp, #28]
 80079ee:	2300      	movlt	r3, #0
 80079f0:	4646      	movge	r6, r8
 80079f2:	e730      	b.n	8007856 <_dtoa_r+0x71e>
 80079f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80079f8:	4646      	mov	r6, r8
 80079fa:	e735      	b.n	8007868 <_dtoa_r+0x730>
 80079fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079fe:	e75c      	b.n	80078ba <_dtoa_r+0x782>
 8007a00:	2300      	movs	r3, #0
 8007a02:	e788      	b.n	8007916 <_dtoa_r+0x7de>
 8007a04:	3fe00000 	.word	0x3fe00000
 8007a08:	40240000 	.word	0x40240000
 8007a0c:	40140000 	.word	0x40140000
 8007a10:	9b02      	ldr	r3, [sp, #8]
 8007a12:	e780      	b.n	8007916 <_dtoa_r+0x7de>
 8007a14:	2300      	movs	r3, #0
 8007a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a18:	e782      	b.n	8007920 <_dtoa_r+0x7e8>
 8007a1a:	d099      	beq.n	8007950 <_dtoa_r+0x818>
 8007a1c:	9a08      	ldr	r2, [sp, #32]
 8007a1e:	331c      	adds	r3, #28
 8007a20:	441a      	add	r2, r3
 8007a22:	4498      	add	r8, r3
 8007a24:	441e      	add	r6, r3
 8007a26:	9208      	str	r2, [sp, #32]
 8007a28:	e792      	b.n	8007950 <_dtoa_r+0x818>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	e7f6      	b.n	8007a1c <_dtoa_r+0x8e4>
 8007a2e:	9b07      	ldr	r3, [sp, #28]
 8007a30:	9704      	str	r7, [sp, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dc20      	bgt.n	8007a78 <_dtoa_r+0x940>
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	dd1e      	ble.n	8007a7c <_dtoa_r+0x944>
 8007a3e:	9b00      	ldr	r3, [sp, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f47f aec0 	bne.w	80077c6 <_dtoa_r+0x68e>
 8007a46:	4621      	mov	r1, r4
 8007a48:	2205      	movs	r2, #5
 8007a4a:	4658      	mov	r0, fp
 8007a4c:	f000 fa9a 	bl	8007f84 <__multadd>
 8007a50:	4601      	mov	r1, r0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4648      	mov	r0, r9
 8007a56:	f000 fcad 	bl	80083b4 <__mcmp>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	f77f aeb3 	ble.w	80077c6 <_dtoa_r+0x68e>
 8007a60:	4656      	mov	r6, sl
 8007a62:	2331      	movs	r3, #49	@ 0x31
 8007a64:	f806 3b01 	strb.w	r3, [r6], #1
 8007a68:	9b04      	ldr	r3, [sp, #16]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	e6ae      	b.n	80077ce <_dtoa_r+0x696>
 8007a70:	9c07      	ldr	r4, [sp, #28]
 8007a72:	9704      	str	r7, [sp, #16]
 8007a74:	4625      	mov	r5, r4
 8007a76:	e7f3      	b.n	8007a60 <_dtoa_r+0x928>
 8007a78:	9b07      	ldr	r3, [sp, #28]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 8104 	beq.w	8007c8c <_dtoa_r+0xb54>
 8007a84:	2e00      	cmp	r6, #0
 8007a86:	dd05      	ble.n	8007a94 <_dtoa_r+0x95c>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	4632      	mov	r2, r6
 8007a8c:	4658      	mov	r0, fp
 8007a8e:	f000 fc25 	bl	80082dc <__lshift>
 8007a92:	4605      	mov	r5, r0
 8007a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d05a      	beq.n	8007b50 <_dtoa_r+0xa18>
 8007a9a:	6869      	ldr	r1, [r5, #4]
 8007a9c:	4658      	mov	r0, fp
 8007a9e:	f000 fa0f 	bl	8007ec0 <_Balloc>
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	b928      	cbnz	r0, 8007ab2 <_dtoa_r+0x97a>
 8007aa6:	4b84      	ldr	r3, [pc, #528]	@ (8007cb8 <_dtoa_r+0xb80>)
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007aae:	f7ff bb5a 	b.w	8007166 <_dtoa_r+0x2e>
 8007ab2:	692a      	ldr	r2, [r5, #16]
 8007ab4:	3202      	adds	r2, #2
 8007ab6:	0092      	lsls	r2, r2, #2
 8007ab8:	f105 010c 	add.w	r1, r5, #12
 8007abc:	300c      	adds	r0, #12
 8007abe:	f000 fe4f 	bl	8008760 <memcpy>
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4658      	mov	r0, fp
 8007ac8:	f000 fc08 	bl	80082dc <__lshift>
 8007acc:	f10a 0301 	add.w	r3, sl, #1
 8007ad0:	9307      	str	r3, [sp, #28]
 8007ad2:	9b00      	ldr	r3, [sp, #0]
 8007ad4:	4453      	add	r3, sl
 8007ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ad8:	9b02      	ldr	r3, [sp, #8]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	462f      	mov	r7, r5
 8007ae0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	9b07      	ldr	r3, [sp, #28]
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	4648      	mov	r0, r9
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	f7ff fa9b 	bl	8007028 <quorem>
 8007af2:	4639      	mov	r1, r7
 8007af4:	9002      	str	r0, [sp, #8]
 8007af6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007afa:	4648      	mov	r0, r9
 8007afc:	f000 fc5a 	bl	80083b4 <__mcmp>
 8007b00:	462a      	mov	r2, r5
 8007b02:	9008      	str	r0, [sp, #32]
 8007b04:	4621      	mov	r1, r4
 8007b06:	4658      	mov	r0, fp
 8007b08:	f000 fc70 	bl	80083ec <__mdiff>
 8007b0c:	68c2      	ldr	r2, [r0, #12]
 8007b0e:	4606      	mov	r6, r0
 8007b10:	bb02      	cbnz	r2, 8007b54 <_dtoa_r+0xa1c>
 8007b12:	4601      	mov	r1, r0
 8007b14:	4648      	mov	r0, r9
 8007b16:	f000 fc4d 	bl	80083b4 <__mcmp>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4658      	mov	r0, fp
 8007b20:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b22:	f000 fa0d 	bl	8007f40 <_Bfree>
 8007b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b2a:	9e07      	ldr	r6, [sp, #28]
 8007b2c:	ea43 0102 	orr.w	r1, r3, r2
 8007b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b32:	4319      	orrs	r1, r3
 8007b34:	d110      	bne.n	8007b58 <_dtoa_r+0xa20>
 8007b36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b3a:	d029      	beq.n	8007b90 <_dtoa_r+0xa58>
 8007b3c:	9b08      	ldr	r3, [sp, #32]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	dd02      	ble.n	8007b48 <_dtoa_r+0xa10>
 8007b42:	9b02      	ldr	r3, [sp, #8]
 8007b44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007b48:	9b00      	ldr	r3, [sp, #0]
 8007b4a:	f883 8000 	strb.w	r8, [r3]
 8007b4e:	e63f      	b.n	80077d0 <_dtoa_r+0x698>
 8007b50:	4628      	mov	r0, r5
 8007b52:	e7bb      	b.n	8007acc <_dtoa_r+0x994>
 8007b54:	2201      	movs	r2, #1
 8007b56:	e7e1      	b.n	8007b1c <_dtoa_r+0x9e4>
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	db04      	blt.n	8007b68 <_dtoa_r+0xa30>
 8007b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b60:	430b      	orrs	r3, r1
 8007b62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b64:	430b      	orrs	r3, r1
 8007b66:	d120      	bne.n	8007baa <_dtoa_r+0xa72>
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	dded      	ble.n	8007b48 <_dtoa_r+0xa10>
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4658      	mov	r0, fp
 8007b72:	f000 fbb3 	bl	80082dc <__lshift>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4681      	mov	r9, r0
 8007b7a:	f000 fc1b 	bl	80083b4 <__mcmp>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	dc03      	bgt.n	8007b8a <_dtoa_r+0xa52>
 8007b82:	d1e1      	bne.n	8007b48 <_dtoa_r+0xa10>
 8007b84:	f018 0f01 	tst.w	r8, #1
 8007b88:	d0de      	beq.n	8007b48 <_dtoa_r+0xa10>
 8007b8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b8e:	d1d8      	bne.n	8007b42 <_dtoa_r+0xa0a>
 8007b90:	9a00      	ldr	r2, [sp, #0]
 8007b92:	2339      	movs	r3, #57	@ 0x39
 8007b94:	7013      	strb	r3, [r2, #0]
 8007b96:	4633      	mov	r3, r6
 8007b98:	461e      	mov	r6, r3
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ba0:	2a39      	cmp	r2, #57	@ 0x39
 8007ba2:	d052      	beq.n	8007c4a <_dtoa_r+0xb12>
 8007ba4:	3201      	adds	r2, #1
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e612      	b.n	80077d0 <_dtoa_r+0x698>
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	dd07      	ble.n	8007bbe <_dtoa_r+0xa86>
 8007bae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bb2:	d0ed      	beq.n	8007b90 <_dtoa_r+0xa58>
 8007bb4:	9a00      	ldr	r2, [sp, #0]
 8007bb6:	f108 0301 	add.w	r3, r8, #1
 8007bba:	7013      	strb	r3, [r2, #0]
 8007bbc:	e608      	b.n	80077d0 <_dtoa_r+0x698>
 8007bbe:	9b07      	ldr	r3, [sp, #28]
 8007bc0:	9a07      	ldr	r2, [sp, #28]
 8007bc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d028      	beq.n	8007c1e <_dtoa_r+0xae6>
 8007bcc:	4649      	mov	r1, r9
 8007bce:	2300      	movs	r3, #0
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	4658      	mov	r0, fp
 8007bd4:	f000 f9d6 	bl	8007f84 <__multadd>
 8007bd8:	42af      	cmp	r7, r5
 8007bda:	4681      	mov	r9, r0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	f04f 020a 	mov.w	r2, #10
 8007be4:	4639      	mov	r1, r7
 8007be6:	4658      	mov	r0, fp
 8007be8:	d107      	bne.n	8007bfa <_dtoa_r+0xac2>
 8007bea:	f000 f9cb 	bl	8007f84 <__multadd>
 8007bee:	4607      	mov	r7, r0
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	9b07      	ldr	r3, [sp, #28]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	9307      	str	r3, [sp, #28]
 8007bf8:	e774      	b.n	8007ae4 <_dtoa_r+0x9ac>
 8007bfa:	f000 f9c3 	bl	8007f84 <__multadd>
 8007bfe:	4629      	mov	r1, r5
 8007c00:	4607      	mov	r7, r0
 8007c02:	2300      	movs	r3, #0
 8007c04:	220a      	movs	r2, #10
 8007c06:	4658      	mov	r0, fp
 8007c08:	f000 f9bc 	bl	8007f84 <__multadd>
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	e7f0      	b.n	8007bf2 <_dtoa_r+0xaba>
 8007c10:	9b00      	ldr	r3, [sp, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bfcc      	ite	gt
 8007c16:	461e      	movgt	r6, r3
 8007c18:	2601      	movle	r6, #1
 8007c1a:	4456      	add	r6, sl
 8007c1c:	2700      	movs	r7, #0
 8007c1e:	4649      	mov	r1, r9
 8007c20:	2201      	movs	r2, #1
 8007c22:	4658      	mov	r0, fp
 8007c24:	f000 fb5a 	bl	80082dc <__lshift>
 8007c28:	4621      	mov	r1, r4
 8007c2a:	4681      	mov	r9, r0
 8007c2c:	f000 fbc2 	bl	80083b4 <__mcmp>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	dcb0      	bgt.n	8007b96 <_dtoa_r+0xa5e>
 8007c34:	d102      	bne.n	8007c3c <_dtoa_r+0xb04>
 8007c36:	f018 0f01 	tst.w	r8, #1
 8007c3a:	d1ac      	bne.n	8007b96 <_dtoa_r+0xa5e>
 8007c3c:	4633      	mov	r3, r6
 8007c3e:	461e      	mov	r6, r3
 8007c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c44:	2a30      	cmp	r2, #48	@ 0x30
 8007c46:	d0fa      	beq.n	8007c3e <_dtoa_r+0xb06>
 8007c48:	e5c2      	b.n	80077d0 <_dtoa_r+0x698>
 8007c4a:	459a      	cmp	sl, r3
 8007c4c:	d1a4      	bne.n	8007b98 <_dtoa_r+0xa60>
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	3301      	adds	r3, #1
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	2331      	movs	r3, #49	@ 0x31
 8007c56:	f88a 3000 	strb.w	r3, [sl]
 8007c5a:	e5b9      	b.n	80077d0 <_dtoa_r+0x698>
 8007c5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007cbc <_dtoa_r+0xb84>
 8007c62:	b11b      	cbz	r3, 8007c6c <_dtoa_r+0xb34>
 8007c64:	f10a 0308 	add.w	r3, sl, #8
 8007c68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	b019      	add	sp, #100	@ 0x64
 8007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	f77f ae37 	ble.w	80078ea <_dtoa_r+0x7b2>
 8007c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c80:	2001      	movs	r0, #1
 8007c82:	e655      	b.n	8007930 <_dtoa_r+0x7f8>
 8007c84:	9b00      	ldr	r3, [sp, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f77f aed6 	ble.w	8007a38 <_dtoa_r+0x900>
 8007c8c:	4656      	mov	r6, sl
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4648      	mov	r0, r9
 8007c92:	f7ff f9c9 	bl	8007028 <quorem>
 8007c96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c9a:	f806 8b01 	strb.w	r8, [r6], #1
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	eba6 020a 	sub.w	r2, r6, sl
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	ddb3      	ble.n	8007c10 <_dtoa_r+0xad8>
 8007ca8:	4649      	mov	r1, r9
 8007caa:	2300      	movs	r3, #0
 8007cac:	220a      	movs	r2, #10
 8007cae:	4658      	mov	r0, fp
 8007cb0:	f000 f968 	bl	8007f84 <__multadd>
 8007cb4:	4681      	mov	r9, r0
 8007cb6:	e7ea      	b.n	8007c8e <_dtoa_r+0xb56>
 8007cb8:	08008fe7 	.word	0x08008fe7
 8007cbc:	08008f82 	.word	0x08008f82

08007cc0 <_free_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	d041      	beq.n	8007d4c <_free_r+0x8c>
 8007cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ccc:	1f0c      	subs	r4, r1, #4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	bfb8      	it	lt
 8007cd2:	18e4      	addlt	r4, r4, r3
 8007cd4:	f000 f8e8 	bl	8007ea8 <__malloc_lock>
 8007cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d50 <_free_r+0x90>)
 8007cda:	6813      	ldr	r3, [r2, #0]
 8007cdc:	b933      	cbnz	r3, 8007cec <_free_r+0x2c>
 8007cde:	6063      	str	r3, [r4, #4]
 8007ce0:	6014      	str	r4, [r2, #0]
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce8:	f000 b8e4 	b.w	8007eb4 <__malloc_unlock>
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	d908      	bls.n	8007d02 <_free_r+0x42>
 8007cf0:	6820      	ldr	r0, [r4, #0]
 8007cf2:	1821      	adds	r1, r4, r0
 8007cf4:	428b      	cmp	r3, r1
 8007cf6:	bf01      	itttt	eq
 8007cf8:	6819      	ldreq	r1, [r3, #0]
 8007cfa:	685b      	ldreq	r3, [r3, #4]
 8007cfc:	1809      	addeq	r1, r1, r0
 8007cfe:	6021      	streq	r1, [r4, #0]
 8007d00:	e7ed      	b.n	8007cde <_free_r+0x1e>
 8007d02:	461a      	mov	r2, r3
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	b10b      	cbz	r3, 8007d0c <_free_r+0x4c>
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	d9fa      	bls.n	8007d02 <_free_r+0x42>
 8007d0c:	6811      	ldr	r1, [r2, #0]
 8007d0e:	1850      	adds	r0, r2, r1
 8007d10:	42a0      	cmp	r0, r4
 8007d12:	d10b      	bne.n	8007d2c <_free_r+0x6c>
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	4401      	add	r1, r0
 8007d18:	1850      	adds	r0, r2, r1
 8007d1a:	4283      	cmp	r3, r0
 8007d1c:	6011      	str	r1, [r2, #0]
 8007d1e:	d1e0      	bne.n	8007ce2 <_free_r+0x22>
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	6053      	str	r3, [r2, #4]
 8007d26:	4408      	add	r0, r1
 8007d28:	6010      	str	r0, [r2, #0]
 8007d2a:	e7da      	b.n	8007ce2 <_free_r+0x22>
 8007d2c:	d902      	bls.n	8007d34 <_free_r+0x74>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	e7d6      	b.n	8007ce2 <_free_r+0x22>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	1821      	adds	r1, r4, r0
 8007d38:	428b      	cmp	r3, r1
 8007d3a:	bf04      	itt	eq
 8007d3c:	6819      	ldreq	r1, [r3, #0]
 8007d3e:	685b      	ldreq	r3, [r3, #4]
 8007d40:	6063      	str	r3, [r4, #4]
 8007d42:	bf04      	itt	eq
 8007d44:	1809      	addeq	r1, r1, r0
 8007d46:	6021      	streq	r1, [r4, #0]
 8007d48:	6054      	str	r4, [r2, #4]
 8007d4a:	e7ca      	b.n	8007ce2 <_free_r+0x22>
 8007d4c:	bd38      	pop	{r3, r4, r5, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000550 	.word	0x20000550

08007d54 <malloc>:
 8007d54:	4b02      	ldr	r3, [pc, #8]	@ (8007d60 <malloc+0xc>)
 8007d56:	4601      	mov	r1, r0
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	f000 b825 	b.w	8007da8 <_malloc_r>
 8007d5e:	bf00      	nop
 8007d60:	2000001c 	.word	0x2000001c

08007d64 <sbrk_aligned>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	4e0f      	ldr	r6, [pc, #60]	@ (8007da4 <sbrk_aligned+0x40>)
 8007d68:	460c      	mov	r4, r1
 8007d6a:	6831      	ldr	r1, [r6, #0]
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	b911      	cbnz	r1, 8007d76 <sbrk_aligned+0x12>
 8007d70:	f000 fce6 	bl	8008740 <_sbrk_r>
 8007d74:	6030      	str	r0, [r6, #0]
 8007d76:	4621      	mov	r1, r4
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 fce1 	bl	8008740 <_sbrk_r>
 8007d7e:	1c43      	adds	r3, r0, #1
 8007d80:	d103      	bne.n	8007d8a <sbrk_aligned+0x26>
 8007d82:	f04f 34ff 	mov.w	r4, #4294967295
 8007d86:	4620      	mov	r0, r4
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	1cc4      	adds	r4, r0, #3
 8007d8c:	f024 0403 	bic.w	r4, r4, #3
 8007d90:	42a0      	cmp	r0, r4
 8007d92:	d0f8      	beq.n	8007d86 <sbrk_aligned+0x22>
 8007d94:	1a21      	subs	r1, r4, r0
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 fcd2 	bl	8008740 <_sbrk_r>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d1f2      	bne.n	8007d86 <sbrk_aligned+0x22>
 8007da0:	e7ef      	b.n	8007d82 <sbrk_aligned+0x1e>
 8007da2:	bf00      	nop
 8007da4:	2000054c 	.word	0x2000054c

08007da8 <_malloc_r>:
 8007da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dac:	1ccd      	adds	r5, r1, #3
 8007dae:	f025 0503 	bic.w	r5, r5, #3
 8007db2:	3508      	adds	r5, #8
 8007db4:	2d0c      	cmp	r5, #12
 8007db6:	bf38      	it	cc
 8007db8:	250c      	movcc	r5, #12
 8007dba:	2d00      	cmp	r5, #0
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	db01      	blt.n	8007dc4 <_malloc_r+0x1c>
 8007dc0:	42a9      	cmp	r1, r5
 8007dc2:	d904      	bls.n	8007dce <_malloc_r+0x26>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	6033      	str	r3, [r6, #0]
 8007dc8:	2000      	movs	r0, #0
 8007dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ea4 <_malloc_r+0xfc>
 8007dd2:	f000 f869 	bl	8007ea8 <__malloc_lock>
 8007dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dda:	461c      	mov	r4, r3
 8007ddc:	bb44      	cbnz	r4, 8007e30 <_malloc_r+0x88>
 8007dde:	4629      	mov	r1, r5
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff ffbf 	bl	8007d64 <sbrk_aligned>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	4604      	mov	r4, r0
 8007dea:	d158      	bne.n	8007e9e <_malloc_r+0xf6>
 8007dec:	f8d8 4000 	ldr.w	r4, [r8]
 8007df0:	4627      	mov	r7, r4
 8007df2:	2f00      	cmp	r7, #0
 8007df4:	d143      	bne.n	8007e7e <_malloc_r+0xd6>
 8007df6:	2c00      	cmp	r4, #0
 8007df8:	d04b      	beq.n	8007e92 <_malloc_r+0xea>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4630      	mov	r0, r6
 8007e00:	eb04 0903 	add.w	r9, r4, r3
 8007e04:	f000 fc9c 	bl	8008740 <_sbrk_r>
 8007e08:	4581      	cmp	r9, r0
 8007e0a:	d142      	bne.n	8007e92 <_malloc_r+0xea>
 8007e0c:	6821      	ldr	r1, [r4, #0]
 8007e0e:	1a6d      	subs	r5, r5, r1
 8007e10:	4629      	mov	r1, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ffa6 	bl	8007d64 <sbrk_aligned>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d03a      	beq.n	8007e92 <_malloc_r+0xea>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	442b      	add	r3, r5
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	f8d8 3000 	ldr.w	r3, [r8]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	bb62      	cbnz	r2, 8007e84 <_malloc_r+0xdc>
 8007e2a:	f8c8 7000 	str.w	r7, [r8]
 8007e2e:	e00f      	b.n	8007e50 <_malloc_r+0xa8>
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	1b52      	subs	r2, r2, r5
 8007e34:	d420      	bmi.n	8007e78 <_malloc_r+0xd0>
 8007e36:	2a0b      	cmp	r2, #11
 8007e38:	d917      	bls.n	8007e6a <_malloc_r+0xc2>
 8007e3a:	1961      	adds	r1, r4, r5
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	6025      	str	r5, [r4, #0]
 8007e40:	bf18      	it	ne
 8007e42:	6059      	strne	r1, [r3, #4]
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	bf08      	it	eq
 8007e48:	f8c8 1000 	streq.w	r1, [r8]
 8007e4c:	5162      	str	r2, [r4, r5]
 8007e4e:	604b      	str	r3, [r1, #4]
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 f82f 	bl	8007eb4 <__malloc_unlock>
 8007e56:	f104 000b 	add.w	r0, r4, #11
 8007e5a:	1d23      	adds	r3, r4, #4
 8007e5c:	f020 0007 	bic.w	r0, r0, #7
 8007e60:	1ac2      	subs	r2, r0, r3
 8007e62:	bf1c      	itt	ne
 8007e64:	1a1b      	subne	r3, r3, r0
 8007e66:	50a3      	strne	r3, [r4, r2]
 8007e68:	e7af      	b.n	8007dca <_malloc_r+0x22>
 8007e6a:	6862      	ldr	r2, [r4, #4]
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	bf0c      	ite	eq
 8007e70:	f8c8 2000 	streq.w	r2, [r8]
 8007e74:	605a      	strne	r2, [r3, #4]
 8007e76:	e7eb      	b.n	8007e50 <_malloc_r+0xa8>
 8007e78:	4623      	mov	r3, r4
 8007e7a:	6864      	ldr	r4, [r4, #4]
 8007e7c:	e7ae      	b.n	8007ddc <_malloc_r+0x34>
 8007e7e:	463c      	mov	r4, r7
 8007e80:	687f      	ldr	r7, [r7, #4]
 8007e82:	e7b6      	b.n	8007df2 <_malloc_r+0x4a>
 8007e84:	461a      	mov	r2, r3
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	d1fb      	bne.n	8007e84 <_malloc_r+0xdc>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	6053      	str	r3, [r2, #4]
 8007e90:	e7de      	b.n	8007e50 <_malloc_r+0xa8>
 8007e92:	230c      	movs	r3, #12
 8007e94:	6033      	str	r3, [r6, #0]
 8007e96:	4630      	mov	r0, r6
 8007e98:	f000 f80c 	bl	8007eb4 <__malloc_unlock>
 8007e9c:	e794      	b.n	8007dc8 <_malloc_r+0x20>
 8007e9e:	6005      	str	r5, [r0, #0]
 8007ea0:	e7d6      	b.n	8007e50 <_malloc_r+0xa8>
 8007ea2:	bf00      	nop
 8007ea4:	20000550 	.word	0x20000550

08007ea8 <__malloc_lock>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	@ (8007eb0 <__malloc_lock+0x8>)
 8007eaa:	f7ff b89c 	b.w	8006fe6 <__retarget_lock_acquire_recursive>
 8007eae:	bf00      	nop
 8007eb0:	20000548 	.word	0x20000548

08007eb4 <__malloc_unlock>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	@ (8007ebc <__malloc_unlock+0x8>)
 8007eb6:	f7ff b897 	b.w	8006fe8 <__retarget_lock_release_recursive>
 8007eba:	bf00      	nop
 8007ebc:	20000548 	.word	0x20000548

08007ec0 <_Balloc>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	69c6      	ldr	r6, [r0, #28]
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	b976      	cbnz	r6, 8007ee8 <_Balloc+0x28>
 8007eca:	2010      	movs	r0, #16
 8007ecc:	f7ff ff42 	bl	8007d54 <malloc>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	61e0      	str	r0, [r4, #28]
 8007ed4:	b920      	cbnz	r0, 8007ee0 <_Balloc+0x20>
 8007ed6:	4b18      	ldr	r3, [pc, #96]	@ (8007f38 <_Balloc+0x78>)
 8007ed8:	4818      	ldr	r0, [pc, #96]	@ (8007f3c <_Balloc+0x7c>)
 8007eda:	216b      	movs	r1, #107	@ 0x6b
 8007edc:	f7ff f886 	bl	8006fec <__assert_func>
 8007ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ee4:	6006      	str	r6, [r0, #0]
 8007ee6:	60c6      	str	r6, [r0, #12]
 8007ee8:	69e6      	ldr	r6, [r4, #28]
 8007eea:	68f3      	ldr	r3, [r6, #12]
 8007eec:	b183      	cbz	r3, 8007f10 <_Balloc+0x50>
 8007eee:	69e3      	ldr	r3, [r4, #28]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ef6:	b9b8      	cbnz	r0, 8007f28 <_Balloc+0x68>
 8007ef8:	2101      	movs	r1, #1
 8007efa:	fa01 f605 	lsl.w	r6, r1, r5
 8007efe:	1d72      	adds	r2, r6, #5
 8007f00:	0092      	lsls	r2, r2, #2
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 fc41 	bl	800878a <_calloc_r>
 8007f08:	b160      	cbz	r0, 8007f24 <_Balloc+0x64>
 8007f0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f0e:	e00e      	b.n	8007f2e <_Balloc+0x6e>
 8007f10:	2221      	movs	r2, #33	@ 0x21
 8007f12:	2104      	movs	r1, #4
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fc38 	bl	800878a <_calloc_r>
 8007f1a:	69e3      	ldr	r3, [r4, #28]
 8007f1c:	60f0      	str	r0, [r6, #12]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e4      	bne.n	8007eee <_Balloc+0x2e>
 8007f24:	2000      	movs	r0, #0
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	6802      	ldr	r2, [r0, #0]
 8007f2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f34:	e7f7      	b.n	8007f26 <_Balloc+0x66>
 8007f36:	bf00      	nop
 8007f38:	08008ed5 	.word	0x08008ed5
 8007f3c:	08008ff8 	.word	0x08008ff8

08007f40 <_Bfree>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	69c6      	ldr	r6, [r0, #28]
 8007f44:	4605      	mov	r5, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	b976      	cbnz	r6, 8007f68 <_Bfree+0x28>
 8007f4a:	2010      	movs	r0, #16
 8007f4c:	f7ff ff02 	bl	8007d54 <malloc>
 8007f50:	4602      	mov	r2, r0
 8007f52:	61e8      	str	r0, [r5, #28]
 8007f54:	b920      	cbnz	r0, 8007f60 <_Bfree+0x20>
 8007f56:	4b09      	ldr	r3, [pc, #36]	@ (8007f7c <_Bfree+0x3c>)
 8007f58:	4809      	ldr	r0, [pc, #36]	@ (8007f80 <_Bfree+0x40>)
 8007f5a:	218f      	movs	r1, #143	@ 0x8f
 8007f5c:	f7ff f846 	bl	8006fec <__assert_func>
 8007f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f64:	6006      	str	r6, [r0, #0]
 8007f66:	60c6      	str	r6, [r0, #12]
 8007f68:	b13c      	cbz	r4, 8007f7a <_Bfree+0x3a>
 8007f6a:	69eb      	ldr	r3, [r5, #28]
 8007f6c:	6862      	ldr	r2, [r4, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f74:	6021      	str	r1, [r4, #0]
 8007f76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	08008ed5 	.word	0x08008ed5
 8007f80:	08008ff8 	.word	0x08008ff8

08007f84 <__multadd>:
 8007f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f88:	690d      	ldr	r5, [r1, #16]
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	461e      	mov	r6, r3
 8007f90:	f101 0c14 	add.w	ip, r1, #20
 8007f94:	2000      	movs	r0, #0
 8007f96:	f8dc 3000 	ldr.w	r3, [ip]
 8007f9a:	b299      	uxth	r1, r3
 8007f9c:	fb02 6101 	mla	r1, r2, r1, r6
 8007fa0:	0c1e      	lsrs	r6, r3, #16
 8007fa2:	0c0b      	lsrs	r3, r1, #16
 8007fa4:	fb02 3306 	mla	r3, r2, r6, r3
 8007fa8:	b289      	uxth	r1, r1
 8007faa:	3001      	adds	r0, #1
 8007fac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fb0:	4285      	cmp	r5, r0
 8007fb2:	f84c 1b04 	str.w	r1, [ip], #4
 8007fb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fba:	dcec      	bgt.n	8007f96 <__multadd+0x12>
 8007fbc:	b30e      	cbz	r6, 8008002 <__multadd+0x7e>
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	42ab      	cmp	r3, r5
 8007fc2:	dc19      	bgt.n	8007ff8 <__multadd+0x74>
 8007fc4:	6861      	ldr	r1, [r4, #4]
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	3101      	adds	r1, #1
 8007fca:	f7ff ff79 	bl	8007ec0 <_Balloc>
 8007fce:	4680      	mov	r8, r0
 8007fd0:	b928      	cbnz	r0, 8007fde <__multadd+0x5a>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <__multadd+0x84>)
 8007fd6:	480d      	ldr	r0, [pc, #52]	@ (800800c <__multadd+0x88>)
 8007fd8:	21ba      	movs	r1, #186	@ 0xba
 8007fda:	f7ff f807 	bl	8006fec <__assert_func>
 8007fde:	6922      	ldr	r2, [r4, #16]
 8007fe0:	3202      	adds	r2, #2
 8007fe2:	f104 010c 	add.w	r1, r4, #12
 8007fe6:	0092      	lsls	r2, r2, #2
 8007fe8:	300c      	adds	r0, #12
 8007fea:	f000 fbb9 	bl	8008760 <memcpy>
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff ffa5 	bl	8007f40 <_Bfree>
 8007ff6:	4644      	mov	r4, r8
 8007ff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	615e      	str	r6, [r3, #20]
 8008000:	6125      	str	r5, [r4, #16]
 8008002:	4620      	mov	r0, r4
 8008004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008008:	08008fe7 	.word	0x08008fe7
 800800c:	08008ff8 	.word	0x08008ff8

08008010 <__hi0bits>:
 8008010:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008014:	4603      	mov	r3, r0
 8008016:	bf36      	itet	cc
 8008018:	0403      	lslcc	r3, r0, #16
 800801a:	2000      	movcs	r0, #0
 800801c:	2010      	movcc	r0, #16
 800801e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008022:	bf3c      	itt	cc
 8008024:	021b      	lslcc	r3, r3, #8
 8008026:	3008      	addcc	r0, #8
 8008028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800802c:	bf3c      	itt	cc
 800802e:	011b      	lslcc	r3, r3, #4
 8008030:	3004      	addcc	r0, #4
 8008032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008036:	bf3c      	itt	cc
 8008038:	009b      	lslcc	r3, r3, #2
 800803a:	3002      	addcc	r0, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	db05      	blt.n	800804c <__hi0bits+0x3c>
 8008040:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008044:	f100 0001 	add.w	r0, r0, #1
 8008048:	bf08      	it	eq
 800804a:	2020      	moveq	r0, #32
 800804c:	4770      	bx	lr

0800804e <__lo0bits>:
 800804e:	6803      	ldr	r3, [r0, #0]
 8008050:	4602      	mov	r2, r0
 8008052:	f013 0007 	ands.w	r0, r3, #7
 8008056:	d00b      	beq.n	8008070 <__lo0bits+0x22>
 8008058:	07d9      	lsls	r1, r3, #31
 800805a:	d421      	bmi.n	80080a0 <__lo0bits+0x52>
 800805c:	0798      	lsls	r0, r3, #30
 800805e:	bf49      	itett	mi
 8008060:	085b      	lsrmi	r3, r3, #1
 8008062:	089b      	lsrpl	r3, r3, #2
 8008064:	2001      	movmi	r0, #1
 8008066:	6013      	strmi	r3, [r2, #0]
 8008068:	bf5c      	itt	pl
 800806a:	6013      	strpl	r3, [r2, #0]
 800806c:	2002      	movpl	r0, #2
 800806e:	4770      	bx	lr
 8008070:	b299      	uxth	r1, r3
 8008072:	b909      	cbnz	r1, 8008078 <__lo0bits+0x2a>
 8008074:	0c1b      	lsrs	r3, r3, #16
 8008076:	2010      	movs	r0, #16
 8008078:	b2d9      	uxtb	r1, r3
 800807a:	b909      	cbnz	r1, 8008080 <__lo0bits+0x32>
 800807c:	3008      	adds	r0, #8
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	0719      	lsls	r1, r3, #28
 8008082:	bf04      	itt	eq
 8008084:	091b      	lsreq	r3, r3, #4
 8008086:	3004      	addeq	r0, #4
 8008088:	0799      	lsls	r1, r3, #30
 800808a:	bf04      	itt	eq
 800808c:	089b      	lsreq	r3, r3, #2
 800808e:	3002      	addeq	r0, #2
 8008090:	07d9      	lsls	r1, r3, #31
 8008092:	d403      	bmi.n	800809c <__lo0bits+0x4e>
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	f100 0001 	add.w	r0, r0, #1
 800809a:	d003      	beq.n	80080a4 <__lo0bits+0x56>
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	4770      	bx	lr
 80080a0:	2000      	movs	r0, #0
 80080a2:	4770      	bx	lr
 80080a4:	2020      	movs	r0, #32
 80080a6:	4770      	bx	lr

080080a8 <__i2b>:
 80080a8:	b510      	push	{r4, lr}
 80080aa:	460c      	mov	r4, r1
 80080ac:	2101      	movs	r1, #1
 80080ae:	f7ff ff07 	bl	8007ec0 <_Balloc>
 80080b2:	4602      	mov	r2, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <__i2b+0x1a>
 80080b6:	4b05      	ldr	r3, [pc, #20]	@ (80080cc <__i2b+0x24>)
 80080b8:	4805      	ldr	r0, [pc, #20]	@ (80080d0 <__i2b+0x28>)
 80080ba:	f240 1145 	movw	r1, #325	@ 0x145
 80080be:	f7fe ff95 	bl	8006fec <__assert_func>
 80080c2:	2301      	movs	r3, #1
 80080c4:	6144      	str	r4, [r0, #20]
 80080c6:	6103      	str	r3, [r0, #16]
 80080c8:	bd10      	pop	{r4, pc}
 80080ca:	bf00      	nop
 80080cc:	08008fe7 	.word	0x08008fe7
 80080d0:	08008ff8 	.word	0x08008ff8

080080d4 <__multiply>:
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	4614      	mov	r4, r2
 80080da:	690a      	ldr	r2, [r1, #16]
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	429a      	cmp	r2, r3
 80080e0:	bfa8      	it	ge
 80080e2:	4623      	movge	r3, r4
 80080e4:	460f      	mov	r7, r1
 80080e6:	bfa4      	itt	ge
 80080e8:	460c      	movge	r4, r1
 80080ea:	461f      	movge	r7, r3
 80080ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80080f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80080f4:	68a3      	ldr	r3, [r4, #8]
 80080f6:	6861      	ldr	r1, [r4, #4]
 80080f8:	eb0a 0609 	add.w	r6, sl, r9
 80080fc:	42b3      	cmp	r3, r6
 80080fe:	b085      	sub	sp, #20
 8008100:	bfb8      	it	lt
 8008102:	3101      	addlt	r1, #1
 8008104:	f7ff fedc 	bl	8007ec0 <_Balloc>
 8008108:	b930      	cbnz	r0, 8008118 <__multiply+0x44>
 800810a:	4602      	mov	r2, r0
 800810c:	4b44      	ldr	r3, [pc, #272]	@ (8008220 <__multiply+0x14c>)
 800810e:	4845      	ldr	r0, [pc, #276]	@ (8008224 <__multiply+0x150>)
 8008110:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008114:	f7fe ff6a 	bl	8006fec <__assert_func>
 8008118:	f100 0514 	add.w	r5, r0, #20
 800811c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008120:	462b      	mov	r3, r5
 8008122:	2200      	movs	r2, #0
 8008124:	4543      	cmp	r3, r8
 8008126:	d321      	bcc.n	800816c <__multiply+0x98>
 8008128:	f107 0114 	add.w	r1, r7, #20
 800812c:	f104 0214 	add.w	r2, r4, #20
 8008130:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008134:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008138:	9302      	str	r3, [sp, #8]
 800813a:	1b13      	subs	r3, r2, r4
 800813c:	3b15      	subs	r3, #21
 800813e:	f023 0303 	bic.w	r3, r3, #3
 8008142:	3304      	adds	r3, #4
 8008144:	f104 0715 	add.w	r7, r4, #21
 8008148:	42ba      	cmp	r2, r7
 800814a:	bf38      	it	cc
 800814c:	2304      	movcc	r3, #4
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	9b02      	ldr	r3, [sp, #8]
 8008152:	9103      	str	r1, [sp, #12]
 8008154:	428b      	cmp	r3, r1
 8008156:	d80c      	bhi.n	8008172 <__multiply+0x9e>
 8008158:	2e00      	cmp	r6, #0
 800815a:	dd03      	ble.n	8008164 <__multiply+0x90>
 800815c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008160:	2b00      	cmp	r3, #0
 8008162:	d05b      	beq.n	800821c <__multiply+0x148>
 8008164:	6106      	str	r6, [r0, #16]
 8008166:	b005      	add	sp, #20
 8008168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	f843 2b04 	str.w	r2, [r3], #4
 8008170:	e7d8      	b.n	8008124 <__multiply+0x50>
 8008172:	f8b1 a000 	ldrh.w	sl, [r1]
 8008176:	f1ba 0f00 	cmp.w	sl, #0
 800817a:	d024      	beq.n	80081c6 <__multiply+0xf2>
 800817c:	f104 0e14 	add.w	lr, r4, #20
 8008180:	46a9      	mov	r9, r5
 8008182:	f04f 0c00 	mov.w	ip, #0
 8008186:	f85e 7b04 	ldr.w	r7, [lr], #4
 800818a:	f8d9 3000 	ldr.w	r3, [r9]
 800818e:	fa1f fb87 	uxth.w	fp, r7
 8008192:	b29b      	uxth	r3, r3
 8008194:	fb0a 330b 	mla	r3, sl, fp, r3
 8008198:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800819c:	f8d9 7000 	ldr.w	r7, [r9]
 80081a0:	4463      	add	r3, ip
 80081a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80081aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80081b4:	4572      	cmp	r2, lr
 80081b6:	f849 3b04 	str.w	r3, [r9], #4
 80081ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081be:	d8e2      	bhi.n	8008186 <__multiply+0xb2>
 80081c0:	9b01      	ldr	r3, [sp, #4]
 80081c2:	f845 c003 	str.w	ip, [r5, r3]
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80081cc:	3104      	adds	r1, #4
 80081ce:	f1b9 0f00 	cmp.w	r9, #0
 80081d2:	d021      	beq.n	8008218 <__multiply+0x144>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	f104 0c14 	add.w	ip, r4, #20
 80081da:	46ae      	mov	lr, r5
 80081dc:	f04f 0a00 	mov.w	sl, #0
 80081e0:	f8bc b000 	ldrh.w	fp, [ip]
 80081e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80081e8:	fb09 770b 	mla	r7, r9, fp, r7
 80081ec:	4457      	add	r7, sl
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80081f4:	f84e 3b04 	str.w	r3, [lr], #4
 80081f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80081fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008200:	f8be 3000 	ldrh.w	r3, [lr]
 8008204:	fb09 330a 	mla	r3, r9, sl, r3
 8008208:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800820c:	4562      	cmp	r2, ip
 800820e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008212:	d8e5      	bhi.n	80081e0 <__multiply+0x10c>
 8008214:	9f01      	ldr	r7, [sp, #4]
 8008216:	51eb      	str	r3, [r5, r7]
 8008218:	3504      	adds	r5, #4
 800821a:	e799      	b.n	8008150 <__multiply+0x7c>
 800821c:	3e01      	subs	r6, #1
 800821e:	e79b      	b.n	8008158 <__multiply+0x84>
 8008220:	08008fe7 	.word	0x08008fe7
 8008224:	08008ff8 	.word	0x08008ff8

08008228 <__pow5mult>:
 8008228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800822c:	4615      	mov	r5, r2
 800822e:	f012 0203 	ands.w	r2, r2, #3
 8008232:	4607      	mov	r7, r0
 8008234:	460e      	mov	r6, r1
 8008236:	d007      	beq.n	8008248 <__pow5mult+0x20>
 8008238:	4c25      	ldr	r4, [pc, #148]	@ (80082d0 <__pow5mult+0xa8>)
 800823a:	3a01      	subs	r2, #1
 800823c:	2300      	movs	r3, #0
 800823e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008242:	f7ff fe9f 	bl	8007f84 <__multadd>
 8008246:	4606      	mov	r6, r0
 8008248:	10ad      	asrs	r5, r5, #2
 800824a:	d03d      	beq.n	80082c8 <__pow5mult+0xa0>
 800824c:	69fc      	ldr	r4, [r7, #28]
 800824e:	b97c      	cbnz	r4, 8008270 <__pow5mult+0x48>
 8008250:	2010      	movs	r0, #16
 8008252:	f7ff fd7f 	bl	8007d54 <malloc>
 8008256:	4602      	mov	r2, r0
 8008258:	61f8      	str	r0, [r7, #28]
 800825a:	b928      	cbnz	r0, 8008268 <__pow5mult+0x40>
 800825c:	4b1d      	ldr	r3, [pc, #116]	@ (80082d4 <__pow5mult+0xac>)
 800825e:	481e      	ldr	r0, [pc, #120]	@ (80082d8 <__pow5mult+0xb0>)
 8008260:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008264:	f7fe fec2 	bl	8006fec <__assert_func>
 8008268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800826c:	6004      	str	r4, [r0, #0]
 800826e:	60c4      	str	r4, [r0, #12]
 8008270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008278:	b94c      	cbnz	r4, 800828e <__pow5mult+0x66>
 800827a:	f240 2171 	movw	r1, #625	@ 0x271
 800827e:	4638      	mov	r0, r7
 8008280:	f7ff ff12 	bl	80080a8 <__i2b>
 8008284:	2300      	movs	r3, #0
 8008286:	f8c8 0008 	str.w	r0, [r8, #8]
 800828a:	4604      	mov	r4, r0
 800828c:	6003      	str	r3, [r0, #0]
 800828e:	f04f 0900 	mov.w	r9, #0
 8008292:	07eb      	lsls	r3, r5, #31
 8008294:	d50a      	bpl.n	80082ac <__pow5mult+0x84>
 8008296:	4631      	mov	r1, r6
 8008298:	4622      	mov	r2, r4
 800829a:	4638      	mov	r0, r7
 800829c:	f7ff ff1a 	bl	80080d4 <__multiply>
 80082a0:	4631      	mov	r1, r6
 80082a2:	4680      	mov	r8, r0
 80082a4:	4638      	mov	r0, r7
 80082a6:	f7ff fe4b 	bl	8007f40 <_Bfree>
 80082aa:	4646      	mov	r6, r8
 80082ac:	106d      	asrs	r5, r5, #1
 80082ae:	d00b      	beq.n	80082c8 <__pow5mult+0xa0>
 80082b0:	6820      	ldr	r0, [r4, #0]
 80082b2:	b938      	cbnz	r0, 80082c4 <__pow5mult+0x9c>
 80082b4:	4622      	mov	r2, r4
 80082b6:	4621      	mov	r1, r4
 80082b8:	4638      	mov	r0, r7
 80082ba:	f7ff ff0b 	bl	80080d4 <__multiply>
 80082be:	6020      	str	r0, [r4, #0]
 80082c0:	f8c0 9000 	str.w	r9, [r0]
 80082c4:	4604      	mov	r4, r0
 80082c6:	e7e4      	b.n	8008292 <__pow5mult+0x6a>
 80082c8:	4630      	mov	r0, r6
 80082ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ce:	bf00      	nop
 80082d0:	08009054 	.word	0x08009054
 80082d4:	08008ed5 	.word	0x08008ed5
 80082d8:	08008ff8 	.word	0x08008ff8

080082dc <__lshift>:
 80082dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e0:	460c      	mov	r4, r1
 80082e2:	6849      	ldr	r1, [r1, #4]
 80082e4:	6923      	ldr	r3, [r4, #16]
 80082e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	4607      	mov	r7, r0
 80082ee:	4691      	mov	r9, r2
 80082f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082f4:	f108 0601 	add.w	r6, r8, #1
 80082f8:	42b3      	cmp	r3, r6
 80082fa:	db0b      	blt.n	8008314 <__lshift+0x38>
 80082fc:	4638      	mov	r0, r7
 80082fe:	f7ff fddf 	bl	8007ec0 <_Balloc>
 8008302:	4605      	mov	r5, r0
 8008304:	b948      	cbnz	r0, 800831a <__lshift+0x3e>
 8008306:	4602      	mov	r2, r0
 8008308:	4b28      	ldr	r3, [pc, #160]	@ (80083ac <__lshift+0xd0>)
 800830a:	4829      	ldr	r0, [pc, #164]	@ (80083b0 <__lshift+0xd4>)
 800830c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008310:	f7fe fe6c 	bl	8006fec <__assert_func>
 8008314:	3101      	adds	r1, #1
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	e7ee      	b.n	80082f8 <__lshift+0x1c>
 800831a:	2300      	movs	r3, #0
 800831c:	f100 0114 	add.w	r1, r0, #20
 8008320:	f100 0210 	add.w	r2, r0, #16
 8008324:	4618      	mov	r0, r3
 8008326:	4553      	cmp	r3, sl
 8008328:	db33      	blt.n	8008392 <__lshift+0xb6>
 800832a:	6920      	ldr	r0, [r4, #16]
 800832c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008330:	f104 0314 	add.w	r3, r4, #20
 8008334:	f019 091f 	ands.w	r9, r9, #31
 8008338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800833c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008340:	d02b      	beq.n	800839a <__lshift+0xbe>
 8008342:	f1c9 0e20 	rsb	lr, r9, #32
 8008346:	468a      	mov	sl, r1
 8008348:	2200      	movs	r2, #0
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	fa00 f009 	lsl.w	r0, r0, r9
 8008350:	4310      	orrs	r0, r2
 8008352:	f84a 0b04 	str.w	r0, [sl], #4
 8008356:	f853 2b04 	ldr.w	r2, [r3], #4
 800835a:	459c      	cmp	ip, r3
 800835c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008360:	d8f3      	bhi.n	800834a <__lshift+0x6e>
 8008362:	ebac 0304 	sub.w	r3, ip, r4
 8008366:	3b15      	subs	r3, #21
 8008368:	f023 0303 	bic.w	r3, r3, #3
 800836c:	3304      	adds	r3, #4
 800836e:	f104 0015 	add.w	r0, r4, #21
 8008372:	4584      	cmp	ip, r0
 8008374:	bf38      	it	cc
 8008376:	2304      	movcc	r3, #4
 8008378:	50ca      	str	r2, [r1, r3]
 800837a:	b10a      	cbz	r2, 8008380 <__lshift+0xa4>
 800837c:	f108 0602 	add.w	r6, r8, #2
 8008380:	3e01      	subs	r6, #1
 8008382:	4638      	mov	r0, r7
 8008384:	612e      	str	r6, [r5, #16]
 8008386:	4621      	mov	r1, r4
 8008388:	f7ff fdda 	bl	8007f40 <_Bfree>
 800838c:	4628      	mov	r0, r5
 800838e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008392:	f842 0f04 	str.w	r0, [r2, #4]!
 8008396:	3301      	adds	r3, #1
 8008398:	e7c5      	b.n	8008326 <__lshift+0x4a>
 800839a:	3904      	subs	r1, #4
 800839c:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80083a4:	459c      	cmp	ip, r3
 80083a6:	d8f9      	bhi.n	800839c <__lshift+0xc0>
 80083a8:	e7ea      	b.n	8008380 <__lshift+0xa4>
 80083aa:	bf00      	nop
 80083ac:	08008fe7 	.word	0x08008fe7
 80083b0:	08008ff8 	.word	0x08008ff8

080083b4 <__mcmp>:
 80083b4:	690a      	ldr	r2, [r1, #16]
 80083b6:	4603      	mov	r3, r0
 80083b8:	6900      	ldr	r0, [r0, #16]
 80083ba:	1a80      	subs	r0, r0, r2
 80083bc:	b530      	push	{r4, r5, lr}
 80083be:	d10e      	bne.n	80083de <__mcmp+0x2a>
 80083c0:	3314      	adds	r3, #20
 80083c2:	3114      	adds	r1, #20
 80083c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083d4:	4295      	cmp	r5, r2
 80083d6:	d003      	beq.n	80083e0 <__mcmp+0x2c>
 80083d8:	d205      	bcs.n	80083e6 <__mcmp+0x32>
 80083da:	f04f 30ff 	mov.w	r0, #4294967295
 80083de:	bd30      	pop	{r4, r5, pc}
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	d3f3      	bcc.n	80083cc <__mcmp+0x18>
 80083e4:	e7fb      	b.n	80083de <__mcmp+0x2a>
 80083e6:	2001      	movs	r0, #1
 80083e8:	e7f9      	b.n	80083de <__mcmp+0x2a>
	...

080083ec <__mdiff>:
 80083ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f0:	4689      	mov	r9, r1
 80083f2:	4606      	mov	r6, r0
 80083f4:	4611      	mov	r1, r2
 80083f6:	4648      	mov	r0, r9
 80083f8:	4614      	mov	r4, r2
 80083fa:	f7ff ffdb 	bl	80083b4 <__mcmp>
 80083fe:	1e05      	subs	r5, r0, #0
 8008400:	d112      	bne.n	8008428 <__mdiff+0x3c>
 8008402:	4629      	mov	r1, r5
 8008404:	4630      	mov	r0, r6
 8008406:	f7ff fd5b 	bl	8007ec0 <_Balloc>
 800840a:	4602      	mov	r2, r0
 800840c:	b928      	cbnz	r0, 800841a <__mdiff+0x2e>
 800840e:	4b3f      	ldr	r3, [pc, #252]	@ (800850c <__mdiff+0x120>)
 8008410:	f240 2137 	movw	r1, #567	@ 0x237
 8008414:	483e      	ldr	r0, [pc, #248]	@ (8008510 <__mdiff+0x124>)
 8008416:	f7fe fde9 	bl	8006fec <__assert_func>
 800841a:	2301      	movs	r3, #1
 800841c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008420:	4610      	mov	r0, r2
 8008422:	b003      	add	sp, #12
 8008424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008428:	bfbc      	itt	lt
 800842a:	464b      	movlt	r3, r9
 800842c:	46a1      	movlt	r9, r4
 800842e:	4630      	mov	r0, r6
 8008430:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008434:	bfba      	itte	lt
 8008436:	461c      	movlt	r4, r3
 8008438:	2501      	movlt	r5, #1
 800843a:	2500      	movge	r5, #0
 800843c:	f7ff fd40 	bl	8007ec0 <_Balloc>
 8008440:	4602      	mov	r2, r0
 8008442:	b918      	cbnz	r0, 800844c <__mdiff+0x60>
 8008444:	4b31      	ldr	r3, [pc, #196]	@ (800850c <__mdiff+0x120>)
 8008446:	f240 2145 	movw	r1, #581	@ 0x245
 800844a:	e7e3      	b.n	8008414 <__mdiff+0x28>
 800844c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008450:	6926      	ldr	r6, [r4, #16]
 8008452:	60c5      	str	r5, [r0, #12]
 8008454:	f109 0310 	add.w	r3, r9, #16
 8008458:	f109 0514 	add.w	r5, r9, #20
 800845c:	f104 0e14 	add.w	lr, r4, #20
 8008460:	f100 0b14 	add.w	fp, r0, #20
 8008464:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008468:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	46d9      	mov	r9, fp
 8008470:	f04f 0c00 	mov.w	ip, #0
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	f85e 0b04 	ldr.w	r0, [lr], #4
 800847a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	fa1f f38a 	uxth.w	r3, sl
 8008484:	4619      	mov	r1, r3
 8008486:	b283      	uxth	r3, r0
 8008488:	1acb      	subs	r3, r1, r3
 800848a:	0c00      	lsrs	r0, r0, #16
 800848c:	4463      	add	r3, ip
 800848e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008492:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008496:	b29b      	uxth	r3, r3
 8008498:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800849c:	4576      	cmp	r6, lr
 800849e:	f849 3b04 	str.w	r3, [r9], #4
 80084a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084a6:	d8e5      	bhi.n	8008474 <__mdiff+0x88>
 80084a8:	1b33      	subs	r3, r6, r4
 80084aa:	3b15      	subs	r3, #21
 80084ac:	f023 0303 	bic.w	r3, r3, #3
 80084b0:	3415      	adds	r4, #21
 80084b2:	3304      	adds	r3, #4
 80084b4:	42a6      	cmp	r6, r4
 80084b6:	bf38      	it	cc
 80084b8:	2304      	movcc	r3, #4
 80084ba:	441d      	add	r5, r3
 80084bc:	445b      	add	r3, fp
 80084be:	461e      	mov	r6, r3
 80084c0:	462c      	mov	r4, r5
 80084c2:	4544      	cmp	r4, r8
 80084c4:	d30e      	bcc.n	80084e4 <__mdiff+0xf8>
 80084c6:	f108 0103 	add.w	r1, r8, #3
 80084ca:	1b49      	subs	r1, r1, r5
 80084cc:	f021 0103 	bic.w	r1, r1, #3
 80084d0:	3d03      	subs	r5, #3
 80084d2:	45a8      	cmp	r8, r5
 80084d4:	bf38      	it	cc
 80084d6:	2100      	movcc	r1, #0
 80084d8:	440b      	add	r3, r1
 80084da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084de:	b191      	cbz	r1, 8008506 <__mdiff+0x11a>
 80084e0:	6117      	str	r7, [r2, #16]
 80084e2:	e79d      	b.n	8008420 <__mdiff+0x34>
 80084e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80084e8:	46e6      	mov	lr, ip
 80084ea:	0c08      	lsrs	r0, r1, #16
 80084ec:	fa1c fc81 	uxtah	ip, ip, r1
 80084f0:	4471      	add	r1, lr
 80084f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80084f6:	b289      	uxth	r1, r1
 80084f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084fc:	f846 1b04 	str.w	r1, [r6], #4
 8008500:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008504:	e7dd      	b.n	80084c2 <__mdiff+0xd6>
 8008506:	3f01      	subs	r7, #1
 8008508:	e7e7      	b.n	80084da <__mdiff+0xee>
 800850a:	bf00      	nop
 800850c:	08008fe7 	.word	0x08008fe7
 8008510:	08008ff8 	.word	0x08008ff8

08008514 <__d2b>:
 8008514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008518:	460f      	mov	r7, r1
 800851a:	2101      	movs	r1, #1
 800851c:	ec59 8b10 	vmov	r8, r9, d0
 8008520:	4616      	mov	r6, r2
 8008522:	f7ff fccd 	bl	8007ec0 <_Balloc>
 8008526:	4604      	mov	r4, r0
 8008528:	b930      	cbnz	r0, 8008538 <__d2b+0x24>
 800852a:	4602      	mov	r2, r0
 800852c:	4b23      	ldr	r3, [pc, #140]	@ (80085bc <__d2b+0xa8>)
 800852e:	4824      	ldr	r0, [pc, #144]	@ (80085c0 <__d2b+0xac>)
 8008530:	f240 310f 	movw	r1, #783	@ 0x30f
 8008534:	f7fe fd5a 	bl	8006fec <__assert_func>
 8008538:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800853c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008540:	b10d      	cbz	r5, 8008546 <__d2b+0x32>
 8008542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	f1b8 0300 	subs.w	r3, r8, #0
 800854c:	d023      	beq.n	8008596 <__d2b+0x82>
 800854e:	4668      	mov	r0, sp
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	f7ff fd7c 	bl	800804e <__lo0bits>
 8008556:	e9dd 1200 	ldrd	r1, r2, [sp]
 800855a:	b1d0      	cbz	r0, 8008592 <__d2b+0x7e>
 800855c:	f1c0 0320 	rsb	r3, r0, #32
 8008560:	fa02 f303 	lsl.w	r3, r2, r3
 8008564:	430b      	orrs	r3, r1
 8008566:	40c2      	lsrs	r2, r0
 8008568:	6163      	str	r3, [r4, #20]
 800856a:	9201      	str	r2, [sp, #4]
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	61a3      	str	r3, [r4, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	bf0c      	ite	eq
 8008574:	2201      	moveq	r2, #1
 8008576:	2202      	movne	r2, #2
 8008578:	6122      	str	r2, [r4, #16]
 800857a:	b1a5      	cbz	r5, 80085a6 <__d2b+0x92>
 800857c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008580:	4405      	add	r5, r0
 8008582:	603d      	str	r5, [r7, #0]
 8008584:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008588:	6030      	str	r0, [r6, #0]
 800858a:	4620      	mov	r0, r4
 800858c:	b003      	add	sp, #12
 800858e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008592:	6161      	str	r1, [r4, #20]
 8008594:	e7ea      	b.n	800856c <__d2b+0x58>
 8008596:	a801      	add	r0, sp, #4
 8008598:	f7ff fd59 	bl	800804e <__lo0bits>
 800859c:	9b01      	ldr	r3, [sp, #4]
 800859e:	6163      	str	r3, [r4, #20]
 80085a0:	3020      	adds	r0, #32
 80085a2:	2201      	movs	r2, #1
 80085a4:	e7e8      	b.n	8008578 <__d2b+0x64>
 80085a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80085ae:	6038      	str	r0, [r7, #0]
 80085b0:	6918      	ldr	r0, [r3, #16]
 80085b2:	f7ff fd2d 	bl	8008010 <__hi0bits>
 80085b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085ba:	e7e5      	b.n	8008588 <__d2b+0x74>
 80085bc:	08008fe7 	.word	0x08008fe7
 80085c0:	08008ff8 	.word	0x08008ff8

080085c4 <__sflush_r>:
 80085c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	0716      	lsls	r6, r2, #28
 80085ce:	4605      	mov	r5, r0
 80085d0:	460c      	mov	r4, r1
 80085d2:	d454      	bmi.n	800867e <__sflush_r+0xba>
 80085d4:	684b      	ldr	r3, [r1, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dc02      	bgt.n	80085e0 <__sflush_r+0x1c>
 80085da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085dc:	2b00      	cmp	r3, #0
 80085de:	dd48      	ble.n	8008672 <__sflush_r+0xae>
 80085e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	d045      	beq.n	8008672 <__sflush_r+0xae>
 80085e6:	2300      	movs	r3, #0
 80085e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085ec:	682f      	ldr	r7, [r5, #0]
 80085ee:	6a21      	ldr	r1, [r4, #32]
 80085f0:	602b      	str	r3, [r5, #0]
 80085f2:	d030      	beq.n	8008656 <__sflush_r+0x92>
 80085f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	0759      	lsls	r1, r3, #29
 80085fa:	d505      	bpl.n	8008608 <__sflush_r+0x44>
 80085fc:	6863      	ldr	r3, [r4, #4]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008602:	b10b      	cbz	r3, 8008608 <__sflush_r+0x44>
 8008604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	2300      	movs	r3, #0
 800860a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800860c:	6a21      	ldr	r1, [r4, #32]
 800860e:	4628      	mov	r0, r5
 8008610:	47b0      	blx	r6
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	d106      	bne.n	8008626 <__sflush_r+0x62>
 8008618:	6829      	ldr	r1, [r5, #0]
 800861a:	291d      	cmp	r1, #29
 800861c:	d82b      	bhi.n	8008676 <__sflush_r+0xb2>
 800861e:	4a2a      	ldr	r2, [pc, #168]	@ (80086c8 <__sflush_r+0x104>)
 8008620:	410a      	asrs	r2, r1
 8008622:	07d6      	lsls	r6, r2, #31
 8008624:	d427      	bmi.n	8008676 <__sflush_r+0xb2>
 8008626:	2200      	movs	r2, #0
 8008628:	6062      	str	r2, [r4, #4]
 800862a:	04d9      	lsls	r1, r3, #19
 800862c:	6922      	ldr	r2, [r4, #16]
 800862e:	6022      	str	r2, [r4, #0]
 8008630:	d504      	bpl.n	800863c <__sflush_r+0x78>
 8008632:	1c42      	adds	r2, r0, #1
 8008634:	d101      	bne.n	800863a <__sflush_r+0x76>
 8008636:	682b      	ldr	r3, [r5, #0]
 8008638:	b903      	cbnz	r3, 800863c <__sflush_r+0x78>
 800863a:	6560      	str	r0, [r4, #84]	@ 0x54
 800863c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800863e:	602f      	str	r7, [r5, #0]
 8008640:	b1b9      	cbz	r1, 8008672 <__sflush_r+0xae>
 8008642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008646:	4299      	cmp	r1, r3
 8008648:	d002      	beq.n	8008650 <__sflush_r+0x8c>
 800864a:	4628      	mov	r0, r5
 800864c:	f7ff fb38 	bl	8007cc0 <_free_r>
 8008650:	2300      	movs	r3, #0
 8008652:	6363      	str	r3, [r4, #52]	@ 0x34
 8008654:	e00d      	b.n	8008672 <__sflush_r+0xae>
 8008656:	2301      	movs	r3, #1
 8008658:	4628      	mov	r0, r5
 800865a:	47b0      	blx	r6
 800865c:	4602      	mov	r2, r0
 800865e:	1c50      	adds	r0, r2, #1
 8008660:	d1c9      	bne.n	80085f6 <__sflush_r+0x32>
 8008662:	682b      	ldr	r3, [r5, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0c6      	beq.n	80085f6 <__sflush_r+0x32>
 8008668:	2b1d      	cmp	r3, #29
 800866a:	d001      	beq.n	8008670 <__sflush_r+0xac>
 800866c:	2b16      	cmp	r3, #22
 800866e:	d11e      	bne.n	80086ae <__sflush_r+0xea>
 8008670:	602f      	str	r7, [r5, #0]
 8008672:	2000      	movs	r0, #0
 8008674:	e022      	b.n	80086bc <__sflush_r+0xf8>
 8008676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800867a:	b21b      	sxth	r3, r3
 800867c:	e01b      	b.n	80086b6 <__sflush_r+0xf2>
 800867e:	690f      	ldr	r7, [r1, #16]
 8008680:	2f00      	cmp	r7, #0
 8008682:	d0f6      	beq.n	8008672 <__sflush_r+0xae>
 8008684:	0793      	lsls	r3, r2, #30
 8008686:	680e      	ldr	r6, [r1, #0]
 8008688:	bf08      	it	eq
 800868a:	694b      	ldreq	r3, [r1, #20]
 800868c:	600f      	str	r7, [r1, #0]
 800868e:	bf18      	it	ne
 8008690:	2300      	movne	r3, #0
 8008692:	eba6 0807 	sub.w	r8, r6, r7
 8008696:	608b      	str	r3, [r1, #8]
 8008698:	f1b8 0f00 	cmp.w	r8, #0
 800869c:	dde9      	ble.n	8008672 <__sflush_r+0xae>
 800869e:	6a21      	ldr	r1, [r4, #32]
 80086a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086a2:	4643      	mov	r3, r8
 80086a4:	463a      	mov	r2, r7
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b0      	blx	r6
 80086aa:	2800      	cmp	r0, #0
 80086ac:	dc08      	bgt.n	80086c0 <__sflush_r+0xfc>
 80086ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086b6:	81a3      	strh	r3, [r4, #12]
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c0:	4407      	add	r7, r0
 80086c2:	eba8 0800 	sub.w	r8, r8, r0
 80086c6:	e7e7      	b.n	8008698 <__sflush_r+0xd4>
 80086c8:	dfbffffe 	.word	0xdfbffffe

080086cc <_fflush_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	690b      	ldr	r3, [r1, #16]
 80086d0:	4605      	mov	r5, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	b913      	cbnz	r3, 80086dc <_fflush_r+0x10>
 80086d6:	2500      	movs	r5, #0
 80086d8:	4628      	mov	r0, r5
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	b118      	cbz	r0, 80086e6 <_fflush_r+0x1a>
 80086de:	6a03      	ldr	r3, [r0, #32]
 80086e0:	b90b      	cbnz	r3, 80086e6 <_fflush_r+0x1a>
 80086e2:	f7fe fb2d 	bl	8006d40 <__sinit>
 80086e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0f3      	beq.n	80086d6 <_fflush_r+0xa>
 80086ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086f0:	07d0      	lsls	r0, r2, #31
 80086f2:	d404      	bmi.n	80086fe <_fflush_r+0x32>
 80086f4:	0599      	lsls	r1, r3, #22
 80086f6:	d402      	bmi.n	80086fe <_fflush_r+0x32>
 80086f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086fa:	f7fe fc74 	bl	8006fe6 <__retarget_lock_acquire_recursive>
 80086fe:	4628      	mov	r0, r5
 8008700:	4621      	mov	r1, r4
 8008702:	f7ff ff5f 	bl	80085c4 <__sflush_r>
 8008706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008708:	07da      	lsls	r2, r3, #31
 800870a:	4605      	mov	r5, r0
 800870c:	d4e4      	bmi.n	80086d8 <_fflush_r+0xc>
 800870e:	89a3      	ldrh	r3, [r4, #12]
 8008710:	059b      	lsls	r3, r3, #22
 8008712:	d4e1      	bmi.n	80086d8 <_fflush_r+0xc>
 8008714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008716:	f7fe fc67 	bl	8006fe8 <__retarget_lock_release_recursive>
 800871a:	e7dd      	b.n	80086d8 <_fflush_r+0xc>

0800871c <fiprintf>:
 800871c:	b40e      	push	{r1, r2, r3}
 800871e:	b503      	push	{r0, r1, lr}
 8008720:	4601      	mov	r1, r0
 8008722:	ab03      	add	r3, sp, #12
 8008724:	4805      	ldr	r0, [pc, #20]	@ (800873c <fiprintf+0x20>)
 8008726:	f853 2b04 	ldr.w	r2, [r3], #4
 800872a:	6800      	ldr	r0, [r0, #0]
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	f000 f889 	bl	8008844 <_vfiprintf_r>
 8008732:	b002      	add	sp, #8
 8008734:	f85d eb04 	ldr.w	lr, [sp], #4
 8008738:	b003      	add	sp, #12
 800873a:	4770      	bx	lr
 800873c:	2000001c 	.word	0x2000001c

08008740 <_sbrk_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d06      	ldr	r5, [pc, #24]	@ (800875c <_sbrk_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	f7f9 f968 	bl	8001a20 <_sbrk>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_sbrk_r+0x1a>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_sbrk_r+0x1a>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	20000544 	.word	0x20000544

08008760 <memcpy>:
 8008760:	440a      	add	r2, r1
 8008762:	4291      	cmp	r1, r2
 8008764:	f100 33ff 	add.w	r3, r0, #4294967295
 8008768:	d100      	bne.n	800876c <memcpy+0xc>
 800876a:	4770      	bx	lr
 800876c:	b510      	push	{r4, lr}
 800876e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008776:	4291      	cmp	r1, r2
 8008778:	d1f9      	bne.n	800876e <memcpy+0xe>
 800877a:	bd10      	pop	{r4, pc}

0800877c <abort>:
 800877c:	b508      	push	{r3, lr}
 800877e:	2006      	movs	r0, #6
 8008780:	f000 fa34 	bl	8008bec <raise>
 8008784:	2001      	movs	r0, #1
 8008786:	f7f9 f8d3 	bl	8001930 <_exit>

0800878a <_calloc_r>:
 800878a:	b570      	push	{r4, r5, r6, lr}
 800878c:	fba1 5402 	umull	r5, r4, r1, r2
 8008790:	b93c      	cbnz	r4, 80087a2 <_calloc_r+0x18>
 8008792:	4629      	mov	r1, r5
 8008794:	f7ff fb08 	bl	8007da8 <_malloc_r>
 8008798:	4606      	mov	r6, r0
 800879a:	b928      	cbnz	r0, 80087a8 <_calloc_r+0x1e>
 800879c:	2600      	movs	r6, #0
 800879e:	4630      	mov	r0, r6
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
 80087a2:	220c      	movs	r2, #12
 80087a4:	6002      	str	r2, [r0, #0]
 80087a6:	e7f9      	b.n	800879c <_calloc_r+0x12>
 80087a8:	462a      	mov	r2, r5
 80087aa:	4621      	mov	r1, r4
 80087ac:	f7fe fb41 	bl	8006e32 <memset>
 80087b0:	e7f5      	b.n	800879e <_calloc_r+0x14>

080087b2 <__ascii_mbtowc>:
 80087b2:	b082      	sub	sp, #8
 80087b4:	b901      	cbnz	r1, 80087b8 <__ascii_mbtowc+0x6>
 80087b6:	a901      	add	r1, sp, #4
 80087b8:	b142      	cbz	r2, 80087cc <__ascii_mbtowc+0x1a>
 80087ba:	b14b      	cbz	r3, 80087d0 <__ascii_mbtowc+0x1e>
 80087bc:	7813      	ldrb	r3, [r2, #0]
 80087be:	600b      	str	r3, [r1, #0]
 80087c0:	7812      	ldrb	r2, [r2, #0]
 80087c2:	1e10      	subs	r0, r2, #0
 80087c4:	bf18      	it	ne
 80087c6:	2001      	movne	r0, #1
 80087c8:	b002      	add	sp, #8
 80087ca:	4770      	bx	lr
 80087cc:	4610      	mov	r0, r2
 80087ce:	e7fb      	b.n	80087c8 <__ascii_mbtowc+0x16>
 80087d0:	f06f 0001 	mvn.w	r0, #1
 80087d4:	e7f8      	b.n	80087c8 <__ascii_mbtowc+0x16>

080087d6 <__ascii_wctomb>:
 80087d6:	4603      	mov	r3, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	b141      	cbz	r1, 80087ee <__ascii_wctomb+0x18>
 80087dc:	2aff      	cmp	r2, #255	@ 0xff
 80087de:	d904      	bls.n	80087ea <__ascii_wctomb+0x14>
 80087e0:	228a      	movs	r2, #138	@ 0x8a
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	4770      	bx	lr
 80087ea:	700a      	strb	r2, [r1, #0]
 80087ec:	2001      	movs	r0, #1
 80087ee:	4770      	bx	lr

080087f0 <__sfputc_r>:
 80087f0:	6893      	ldr	r3, [r2, #8]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	b410      	push	{r4}
 80087f8:	6093      	str	r3, [r2, #8]
 80087fa:	da08      	bge.n	800880e <__sfputc_r+0x1e>
 80087fc:	6994      	ldr	r4, [r2, #24]
 80087fe:	42a3      	cmp	r3, r4
 8008800:	db01      	blt.n	8008806 <__sfputc_r+0x16>
 8008802:	290a      	cmp	r1, #10
 8008804:	d103      	bne.n	800880e <__sfputc_r+0x1e>
 8008806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800880a:	f000 b933 	b.w	8008a74 <__swbuf_r>
 800880e:	6813      	ldr	r3, [r2, #0]
 8008810:	1c58      	adds	r0, r3, #1
 8008812:	6010      	str	r0, [r2, #0]
 8008814:	7019      	strb	r1, [r3, #0]
 8008816:	4608      	mov	r0, r1
 8008818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800881c:	4770      	bx	lr

0800881e <__sfputs_r>:
 800881e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008820:	4606      	mov	r6, r0
 8008822:	460f      	mov	r7, r1
 8008824:	4614      	mov	r4, r2
 8008826:	18d5      	adds	r5, r2, r3
 8008828:	42ac      	cmp	r4, r5
 800882a:	d101      	bne.n	8008830 <__sfputs_r+0x12>
 800882c:	2000      	movs	r0, #0
 800882e:	e007      	b.n	8008840 <__sfputs_r+0x22>
 8008830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008834:	463a      	mov	r2, r7
 8008836:	4630      	mov	r0, r6
 8008838:	f7ff ffda 	bl	80087f0 <__sfputc_r>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d1f3      	bne.n	8008828 <__sfputs_r+0xa>
 8008840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008844 <_vfiprintf_r>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	460d      	mov	r5, r1
 800884a:	b09d      	sub	sp, #116	@ 0x74
 800884c:	4614      	mov	r4, r2
 800884e:	4698      	mov	r8, r3
 8008850:	4606      	mov	r6, r0
 8008852:	b118      	cbz	r0, 800885c <_vfiprintf_r+0x18>
 8008854:	6a03      	ldr	r3, [r0, #32]
 8008856:	b90b      	cbnz	r3, 800885c <_vfiprintf_r+0x18>
 8008858:	f7fe fa72 	bl	8006d40 <__sinit>
 800885c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800885e:	07d9      	lsls	r1, r3, #31
 8008860:	d405      	bmi.n	800886e <_vfiprintf_r+0x2a>
 8008862:	89ab      	ldrh	r3, [r5, #12]
 8008864:	059a      	lsls	r2, r3, #22
 8008866:	d402      	bmi.n	800886e <_vfiprintf_r+0x2a>
 8008868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800886a:	f7fe fbbc 	bl	8006fe6 <__retarget_lock_acquire_recursive>
 800886e:	89ab      	ldrh	r3, [r5, #12]
 8008870:	071b      	lsls	r3, r3, #28
 8008872:	d501      	bpl.n	8008878 <_vfiprintf_r+0x34>
 8008874:	692b      	ldr	r3, [r5, #16]
 8008876:	b99b      	cbnz	r3, 80088a0 <_vfiprintf_r+0x5c>
 8008878:	4629      	mov	r1, r5
 800887a:	4630      	mov	r0, r6
 800887c:	f000 f938 	bl	8008af0 <__swsetup_r>
 8008880:	b170      	cbz	r0, 80088a0 <_vfiprintf_r+0x5c>
 8008882:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008884:	07dc      	lsls	r4, r3, #31
 8008886:	d504      	bpl.n	8008892 <_vfiprintf_r+0x4e>
 8008888:	f04f 30ff 	mov.w	r0, #4294967295
 800888c:	b01d      	add	sp, #116	@ 0x74
 800888e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008892:	89ab      	ldrh	r3, [r5, #12]
 8008894:	0598      	lsls	r0, r3, #22
 8008896:	d4f7      	bmi.n	8008888 <_vfiprintf_r+0x44>
 8008898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800889a:	f7fe fba5 	bl	8006fe8 <__retarget_lock_release_recursive>
 800889e:	e7f3      	b.n	8008888 <_vfiprintf_r+0x44>
 80088a0:	2300      	movs	r3, #0
 80088a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088a4:	2320      	movs	r3, #32
 80088a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ae:	2330      	movs	r3, #48	@ 0x30
 80088b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a60 <_vfiprintf_r+0x21c>
 80088b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088b8:	f04f 0901 	mov.w	r9, #1
 80088bc:	4623      	mov	r3, r4
 80088be:	469a      	mov	sl, r3
 80088c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088c4:	b10a      	cbz	r2, 80088ca <_vfiprintf_r+0x86>
 80088c6:	2a25      	cmp	r2, #37	@ 0x25
 80088c8:	d1f9      	bne.n	80088be <_vfiprintf_r+0x7a>
 80088ca:	ebba 0b04 	subs.w	fp, sl, r4
 80088ce:	d00b      	beq.n	80088e8 <_vfiprintf_r+0xa4>
 80088d0:	465b      	mov	r3, fp
 80088d2:	4622      	mov	r2, r4
 80088d4:	4629      	mov	r1, r5
 80088d6:	4630      	mov	r0, r6
 80088d8:	f7ff ffa1 	bl	800881e <__sfputs_r>
 80088dc:	3001      	adds	r0, #1
 80088de:	f000 80a7 	beq.w	8008a30 <_vfiprintf_r+0x1ec>
 80088e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088e4:	445a      	add	r2, fp
 80088e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80088e8:	f89a 3000 	ldrb.w	r3, [sl]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 809f 	beq.w	8008a30 <_vfiprintf_r+0x1ec>
 80088f2:	2300      	movs	r3, #0
 80088f4:	f04f 32ff 	mov.w	r2, #4294967295
 80088f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088fc:	f10a 0a01 	add.w	sl, sl, #1
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	9307      	str	r3, [sp, #28]
 8008904:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008908:	931a      	str	r3, [sp, #104]	@ 0x68
 800890a:	4654      	mov	r4, sl
 800890c:	2205      	movs	r2, #5
 800890e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008912:	4853      	ldr	r0, [pc, #332]	@ (8008a60 <_vfiprintf_r+0x21c>)
 8008914:	f7f7 fc6c 	bl	80001f0 <memchr>
 8008918:	9a04      	ldr	r2, [sp, #16]
 800891a:	b9d8      	cbnz	r0, 8008954 <_vfiprintf_r+0x110>
 800891c:	06d1      	lsls	r1, r2, #27
 800891e:	bf44      	itt	mi
 8008920:	2320      	movmi	r3, #32
 8008922:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008926:	0713      	lsls	r3, r2, #28
 8008928:	bf44      	itt	mi
 800892a:	232b      	movmi	r3, #43	@ 0x2b
 800892c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008930:	f89a 3000 	ldrb.w	r3, [sl]
 8008934:	2b2a      	cmp	r3, #42	@ 0x2a
 8008936:	d015      	beq.n	8008964 <_vfiprintf_r+0x120>
 8008938:	9a07      	ldr	r2, [sp, #28]
 800893a:	4654      	mov	r4, sl
 800893c:	2000      	movs	r0, #0
 800893e:	f04f 0c0a 	mov.w	ip, #10
 8008942:	4621      	mov	r1, r4
 8008944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008948:	3b30      	subs	r3, #48	@ 0x30
 800894a:	2b09      	cmp	r3, #9
 800894c:	d94b      	bls.n	80089e6 <_vfiprintf_r+0x1a2>
 800894e:	b1b0      	cbz	r0, 800897e <_vfiprintf_r+0x13a>
 8008950:	9207      	str	r2, [sp, #28]
 8008952:	e014      	b.n	800897e <_vfiprintf_r+0x13a>
 8008954:	eba0 0308 	sub.w	r3, r0, r8
 8008958:	fa09 f303 	lsl.w	r3, r9, r3
 800895c:	4313      	orrs	r3, r2
 800895e:	9304      	str	r3, [sp, #16]
 8008960:	46a2      	mov	sl, r4
 8008962:	e7d2      	b.n	800890a <_vfiprintf_r+0xc6>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	1d19      	adds	r1, r3, #4
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	9103      	str	r1, [sp, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	bfbb      	ittet	lt
 8008970:	425b      	neglt	r3, r3
 8008972:	f042 0202 	orrlt.w	r2, r2, #2
 8008976:	9307      	strge	r3, [sp, #28]
 8008978:	9307      	strlt	r3, [sp, #28]
 800897a:	bfb8      	it	lt
 800897c:	9204      	strlt	r2, [sp, #16]
 800897e:	7823      	ldrb	r3, [r4, #0]
 8008980:	2b2e      	cmp	r3, #46	@ 0x2e
 8008982:	d10a      	bne.n	800899a <_vfiprintf_r+0x156>
 8008984:	7863      	ldrb	r3, [r4, #1]
 8008986:	2b2a      	cmp	r3, #42	@ 0x2a
 8008988:	d132      	bne.n	80089f0 <_vfiprintf_r+0x1ac>
 800898a:	9b03      	ldr	r3, [sp, #12]
 800898c:	1d1a      	adds	r2, r3, #4
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	9203      	str	r2, [sp, #12]
 8008992:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008996:	3402      	adds	r4, #2
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a70 <_vfiprintf_r+0x22c>
 800899e:	7821      	ldrb	r1, [r4, #0]
 80089a0:	2203      	movs	r2, #3
 80089a2:	4650      	mov	r0, sl
 80089a4:	f7f7 fc24 	bl	80001f0 <memchr>
 80089a8:	b138      	cbz	r0, 80089ba <_vfiprintf_r+0x176>
 80089aa:	9b04      	ldr	r3, [sp, #16]
 80089ac:	eba0 000a 	sub.w	r0, r0, sl
 80089b0:	2240      	movs	r2, #64	@ 0x40
 80089b2:	4082      	lsls	r2, r0
 80089b4:	4313      	orrs	r3, r2
 80089b6:	3401      	adds	r4, #1
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089be:	4829      	ldr	r0, [pc, #164]	@ (8008a64 <_vfiprintf_r+0x220>)
 80089c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089c4:	2206      	movs	r2, #6
 80089c6:	f7f7 fc13 	bl	80001f0 <memchr>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d03f      	beq.n	8008a4e <_vfiprintf_r+0x20a>
 80089ce:	4b26      	ldr	r3, [pc, #152]	@ (8008a68 <_vfiprintf_r+0x224>)
 80089d0:	bb1b      	cbnz	r3, 8008a1a <_vfiprintf_r+0x1d6>
 80089d2:	9b03      	ldr	r3, [sp, #12]
 80089d4:	3307      	adds	r3, #7
 80089d6:	f023 0307 	bic.w	r3, r3, #7
 80089da:	3308      	adds	r3, #8
 80089dc:	9303      	str	r3, [sp, #12]
 80089de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e0:	443b      	add	r3, r7
 80089e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80089e4:	e76a      	b.n	80088bc <_vfiprintf_r+0x78>
 80089e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ea:	460c      	mov	r4, r1
 80089ec:	2001      	movs	r0, #1
 80089ee:	e7a8      	b.n	8008942 <_vfiprintf_r+0xfe>
 80089f0:	2300      	movs	r3, #0
 80089f2:	3401      	adds	r4, #1
 80089f4:	9305      	str	r3, [sp, #20]
 80089f6:	4619      	mov	r1, r3
 80089f8:	f04f 0c0a 	mov.w	ip, #10
 80089fc:	4620      	mov	r0, r4
 80089fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a02:	3a30      	subs	r2, #48	@ 0x30
 8008a04:	2a09      	cmp	r2, #9
 8008a06:	d903      	bls.n	8008a10 <_vfiprintf_r+0x1cc>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0c6      	beq.n	800899a <_vfiprintf_r+0x156>
 8008a0c:	9105      	str	r1, [sp, #20]
 8008a0e:	e7c4      	b.n	800899a <_vfiprintf_r+0x156>
 8008a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a14:	4604      	mov	r4, r0
 8008a16:	2301      	movs	r3, #1
 8008a18:	e7f0      	b.n	80089fc <_vfiprintf_r+0x1b8>
 8008a1a:	ab03      	add	r3, sp, #12
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	462a      	mov	r2, r5
 8008a20:	4b12      	ldr	r3, [pc, #72]	@ (8008a6c <_vfiprintf_r+0x228>)
 8008a22:	a904      	add	r1, sp, #16
 8008a24:	4630      	mov	r0, r6
 8008a26:	f7fd fd47 	bl	80064b8 <_printf_float>
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	1c78      	adds	r0, r7, #1
 8008a2e:	d1d6      	bne.n	80089de <_vfiprintf_r+0x19a>
 8008a30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a32:	07d9      	lsls	r1, r3, #31
 8008a34:	d405      	bmi.n	8008a42 <_vfiprintf_r+0x1fe>
 8008a36:	89ab      	ldrh	r3, [r5, #12]
 8008a38:	059a      	lsls	r2, r3, #22
 8008a3a:	d402      	bmi.n	8008a42 <_vfiprintf_r+0x1fe>
 8008a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a3e:	f7fe fad3 	bl	8006fe8 <__retarget_lock_release_recursive>
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	065b      	lsls	r3, r3, #25
 8008a46:	f53f af1f 	bmi.w	8008888 <_vfiprintf_r+0x44>
 8008a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a4c:	e71e      	b.n	800888c <_vfiprintf_r+0x48>
 8008a4e:	ab03      	add	r3, sp, #12
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	462a      	mov	r2, r5
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <_vfiprintf_r+0x228>)
 8008a56:	a904      	add	r1, sp, #16
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f7fd ffc5 	bl	80069e8 <_printf_i>
 8008a5e:	e7e4      	b.n	8008a2a <_vfiprintf_r+0x1e6>
 8008a60:	0800915a 	.word	0x0800915a
 8008a64:	08009164 	.word	0x08009164
 8008a68:	080064b9 	.word	0x080064b9
 8008a6c:	0800881f 	.word	0x0800881f
 8008a70:	08009160 	.word	0x08009160

08008a74 <__swbuf_r>:
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a76:	460e      	mov	r6, r1
 8008a78:	4614      	mov	r4, r2
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	b118      	cbz	r0, 8008a86 <__swbuf_r+0x12>
 8008a7e:	6a03      	ldr	r3, [r0, #32]
 8008a80:	b90b      	cbnz	r3, 8008a86 <__swbuf_r+0x12>
 8008a82:	f7fe f95d 	bl	8006d40 <__sinit>
 8008a86:	69a3      	ldr	r3, [r4, #24]
 8008a88:	60a3      	str	r3, [r4, #8]
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	071a      	lsls	r2, r3, #28
 8008a8e:	d501      	bpl.n	8008a94 <__swbuf_r+0x20>
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	b943      	cbnz	r3, 8008aa6 <__swbuf_r+0x32>
 8008a94:	4621      	mov	r1, r4
 8008a96:	4628      	mov	r0, r5
 8008a98:	f000 f82a 	bl	8008af0 <__swsetup_r>
 8008a9c:	b118      	cbz	r0, 8008aa6 <__swbuf_r+0x32>
 8008a9e:	f04f 37ff 	mov.w	r7, #4294967295
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	6922      	ldr	r2, [r4, #16]
 8008aaa:	1a98      	subs	r0, r3, r2
 8008aac:	6963      	ldr	r3, [r4, #20]
 8008aae:	b2f6      	uxtb	r6, r6
 8008ab0:	4283      	cmp	r3, r0
 8008ab2:	4637      	mov	r7, r6
 8008ab4:	dc05      	bgt.n	8008ac2 <__swbuf_r+0x4e>
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4628      	mov	r0, r5
 8008aba:	f7ff fe07 	bl	80086cc <_fflush_r>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d1ed      	bne.n	8008a9e <__swbuf_r+0x2a>
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	60a3      	str	r3, [r4, #8]
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	1c5a      	adds	r2, r3, #1
 8008acc:	6022      	str	r2, [r4, #0]
 8008ace:	701e      	strb	r6, [r3, #0]
 8008ad0:	6962      	ldr	r2, [r4, #20]
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d004      	beq.n	8008ae2 <__swbuf_r+0x6e>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	07db      	lsls	r3, r3, #31
 8008adc:	d5e1      	bpl.n	8008aa2 <__swbuf_r+0x2e>
 8008ade:	2e0a      	cmp	r6, #10
 8008ae0:	d1df      	bne.n	8008aa2 <__swbuf_r+0x2e>
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f7ff fdf1 	bl	80086cc <_fflush_r>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d0d9      	beq.n	8008aa2 <__swbuf_r+0x2e>
 8008aee:	e7d6      	b.n	8008a9e <__swbuf_r+0x2a>

08008af0 <__swsetup_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4b29      	ldr	r3, [pc, #164]	@ (8008b98 <__swsetup_r+0xa8>)
 8008af4:	4605      	mov	r5, r0
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	460c      	mov	r4, r1
 8008afa:	b118      	cbz	r0, 8008b04 <__swsetup_r+0x14>
 8008afc:	6a03      	ldr	r3, [r0, #32]
 8008afe:	b90b      	cbnz	r3, 8008b04 <__swsetup_r+0x14>
 8008b00:	f7fe f91e 	bl	8006d40 <__sinit>
 8008b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b08:	0719      	lsls	r1, r3, #28
 8008b0a:	d422      	bmi.n	8008b52 <__swsetup_r+0x62>
 8008b0c:	06da      	lsls	r2, r3, #27
 8008b0e:	d407      	bmi.n	8008b20 <__swsetup_r+0x30>
 8008b10:	2209      	movs	r2, #9
 8008b12:	602a      	str	r2, [r5, #0]
 8008b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b18:	81a3      	strh	r3, [r4, #12]
 8008b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1e:	e033      	b.n	8008b88 <__swsetup_r+0x98>
 8008b20:	0758      	lsls	r0, r3, #29
 8008b22:	d512      	bpl.n	8008b4a <__swsetup_r+0x5a>
 8008b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b26:	b141      	cbz	r1, 8008b3a <__swsetup_r+0x4a>
 8008b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b2c:	4299      	cmp	r1, r3
 8008b2e:	d002      	beq.n	8008b36 <__swsetup_r+0x46>
 8008b30:	4628      	mov	r0, r5
 8008b32:	f7ff f8c5 	bl	8007cc0 <_free_r>
 8008b36:	2300      	movs	r3, #0
 8008b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	2300      	movs	r3, #0
 8008b44:	6063      	str	r3, [r4, #4]
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f043 0308 	orr.w	r3, r3, #8
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	b94b      	cbnz	r3, 8008b6a <__swsetup_r+0x7a>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b60:	d003      	beq.n	8008b6a <__swsetup_r+0x7a>
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 f883 	bl	8008c70 <__smakebuf_r>
 8008b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6e:	f013 0201 	ands.w	r2, r3, #1
 8008b72:	d00a      	beq.n	8008b8a <__swsetup_r+0x9a>
 8008b74:	2200      	movs	r2, #0
 8008b76:	60a2      	str	r2, [r4, #8]
 8008b78:	6962      	ldr	r2, [r4, #20]
 8008b7a:	4252      	negs	r2, r2
 8008b7c:	61a2      	str	r2, [r4, #24]
 8008b7e:	6922      	ldr	r2, [r4, #16]
 8008b80:	b942      	cbnz	r2, 8008b94 <__swsetup_r+0xa4>
 8008b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b86:	d1c5      	bne.n	8008b14 <__swsetup_r+0x24>
 8008b88:	bd38      	pop	{r3, r4, r5, pc}
 8008b8a:	0799      	lsls	r1, r3, #30
 8008b8c:	bf58      	it	pl
 8008b8e:	6962      	ldrpl	r2, [r4, #20]
 8008b90:	60a2      	str	r2, [r4, #8]
 8008b92:	e7f4      	b.n	8008b7e <__swsetup_r+0x8e>
 8008b94:	2000      	movs	r0, #0
 8008b96:	e7f7      	b.n	8008b88 <__swsetup_r+0x98>
 8008b98:	2000001c 	.word	0x2000001c

08008b9c <_raise_r>:
 8008b9c:	291f      	cmp	r1, #31
 8008b9e:	b538      	push	{r3, r4, r5, lr}
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	d904      	bls.n	8008bb0 <_raise_r+0x14>
 8008ba6:	2316      	movs	r3, #22
 8008ba8:	6003      	str	r3, [r0, #0]
 8008baa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008bb2:	b112      	cbz	r2, 8008bba <_raise_r+0x1e>
 8008bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bb8:	b94b      	cbnz	r3, 8008bce <_raise_r+0x32>
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 f830 	bl	8008c20 <_getpid_r>
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bca:	f000 b817 	b.w	8008bfc <_kill_r>
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d00a      	beq.n	8008be8 <_raise_r+0x4c>
 8008bd2:	1c59      	adds	r1, r3, #1
 8008bd4:	d103      	bne.n	8008bde <_raise_r+0x42>
 8008bd6:	2316      	movs	r3, #22
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	2001      	movs	r0, #1
 8008bdc:	e7e7      	b.n	8008bae <_raise_r+0x12>
 8008bde:	2100      	movs	r1, #0
 8008be0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008be4:	4620      	mov	r0, r4
 8008be6:	4798      	blx	r3
 8008be8:	2000      	movs	r0, #0
 8008bea:	e7e0      	b.n	8008bae <_raise_r+0x12>

08008bec <raise>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	@ (8008bf8 <raise+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f7ff bfd3 	b.w	8008b9c <_raise_r>
 8008bf6:	bf00      	nop
 8008bf8:	2000001c 	.word	0x2000001c

08008bfc <_kill_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4d07      	ldr	r5, [pc, #28]	@ (8008c1c <_kill_r+0x20>)
 8008c00:	2300      	movs	r3, #0
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	f7f8 fe81 	bl	8001910 <_kill>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	d102      	bne.n	8008c18 <_kill_r+0x1c>
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	b103      	cbz	r3, 8008c18 <_kill_r+0x1c>
 8008c16:	6023      	str	r3, [r4, #0]
 8008c18:	bd38      	pop	{r3, r4, r5, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000544 	.word	0x20000544

08008c20 <_getpid_r>:
 8008c20:	f7f8 be6e 	b.w	8001900 <_getpid>

08008c24 <__swhatbuf_r>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	460c      	mov	r4, r1
 8008c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	b096      	sub	sp, #88	@ 0x58
 8008c30:	4615      	mov	r5, r2
 8008c32:	461e      	mov	r6, r3
 8008c34:	da0d      	bge.n	8008c52 <__swhatbuf_r+0x2e>
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c3c:	f04f 0100 	mov.w	r1, #0
 8008c40:	bf14      	ite	ne
 8008c42:	2340      	movne	r3, #64	@ 0x40
 8008c44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c48:	2000      	movs	r0, #0
 8008c4a:	6031      	str	r1, [r6, #0]
 8008c4c:	602b      	str	r3, [r5, #0]
 8008c4e:	b016      	add	sp, #88	@ 0x58
 8008c50:	bd70      	pop	{r4, r5, r6, pc}
 8008c52:	466a      	mov	r2, sp
 8008c54:	f000 f848 	bl	8008ce8 <_fstat_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	dbec      	blt.n	8008c36 <__swhatbuf_r+0x12>
 8008c5c:	9901      	ldr	r1, [sp, #4]
 8008c5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c66:	4259      	negs	r1, r3
 8008c68:	4159      	adcs	r1, r3
 8008c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c6e:	e7eb      	b.n	8008c48 <__swhatbuf_r+0x24>

08008c70 <__smakebuf_r>:
 8008c70:	898b      	ldrh	r3, [r1, #12]
 8008c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c74:	079d      	lsls	r5, r3, #30
 8008c76:	4606      	mov	r6, r0
 8008c78:	460c      	mov	r4, r1
 8008c7a:	d507      	bpl.n	8008c8c <__smakebuf_r+0x1c>
 8008c7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	6123      	str	r3, [r4, #16]
 8008c84:	2301      	movs	r3, #1
 8008c86:	6163      	str	r3, [r4, #20]
 8008c88:	b003      	add	sp, #12
 8008c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c8c:	ab01      	add	r3, sp, #4
 8008c8e:	466a      	mov	r2, sp
 8008c90:	f7ff ffc8 	bl	8008c24 <__swhatbuf_r>
 8008c94:	9f00      	ldr	r7, [sp, #0]
 8008c96:	4605      	mov	r5, r0
 8008c98:	4639      	mov	r1, r7
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7ff f884 	bl	8007da8 <_malloc_r>
 8008ca0:	b948      	cbnz	r0, 8008cb6 <__smakebuf_r+0x46>
 8008ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca6:	059a      	lsls	r2, r3, #22
 8008ca8:	d4ee      	bmi.n	8008c88 <__smakebuf_r+0x18>
 8008caa:	f023 0303 	bic.w	r3, r3, #3
 8008cae:	f043 0302 	orr.w	r3, r3, #2
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	e7e2      	b.n	8008c7c <__smakebuf_r+0xc>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	6020      	str	r0, [r4, #0]
 8008cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	9b01      	ldr	r3, [sp, #4]
 8008cc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008cc6:	b15b      	cbz	r3, 8008ce0 <__smakebuf_r+0x70>
 8008cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f000 f81d 	bl	8008d0c <_isatty_r>
 8008cd2:	b128      	cbz	r0, 8008ce0 <__smakebuf_r+0x70>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	431d      	orrs	r5, r3
 8008ce4:	81a5      	strh	r5, [r4, #12]
 8008ce6:	e7cf      	b.n	8008c88 <__smakebuf_r+0x18>

08008ce8 <_fstat_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d07      	ldr	r5, [pc, #28]	@ (8008d08 <_fstat_r+0x20>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	602b      	str	r3, [r5, #0]
 8008cf6:	f7f8 fe6b 	bl	80019d0 <_fstat>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	d102      	bne.n	8008d04 <_fstat_r+0x1c>
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	b103      	cbz	r3, 8008d04 <_fstat_r+0x1c>
 8008d02:	6023      	str	r3, [r4, #0]
 8008d04:	bd38      	pop	{r3, r4, r5, pc}
 8008d06:	bf00      	nop
 8008d08:	20000544 	.word	0x20000544

08008d0c <_isatty_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d06      	ldr	r5, [pc, #24]	@ (8008d28 <_isatty_r+0x1c>)
 8008d10:	2300      	movs	r3, #0
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	602b      	str	r3, [r5, #0]
 8008d18:	f7f8 fe6a 	bl	80019f0 <_isatty>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_isatty_r+0x1a>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_isatty_r+0x1a>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	20000544 	.word	0x20000544

08008d2c <_init>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	bf00      	nop
 8008d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d32:	bc08      	pop	{r3}
 8008d34:	469e      	mov	lr, r3
 8008d36:	4770      	bx	lr

08008d38 <_fini>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	bf00      	nop
 8008d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3e:	bc08      	pop	{r3}
 8008d40:	469e      	mov	lr, r3
 8008d42:	4770      	bx	lr
