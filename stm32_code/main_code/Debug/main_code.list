
main_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08008b98  08008b98  00009b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f68  08008f68  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008f68  08008f68  00009f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f70  08008f70  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f70  08008f70  00009f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f74  08008f74  00009f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008f78  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001d4  0800914c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800914c  0000a500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117f3  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e4  00000000  00000000  0001b9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbb  00000000  00000000  0001f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bdf  00000000  00000000  0001fcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013215  00000000  00000000  000478ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f458d  00000000  00000000  0005aacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f05c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a0  00000000  00000000  0014f0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00154540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b7c 	.word	0x08008b7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008b7c 	.word	0x08008b7c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__io_putchar>:
static void MX_TIM5_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4803      	ldr	r0, [pc, #12]	@ (8000ed8 <__io_putchar+0x20>)
 8000eca:	f003 fe1d 	bl	8004b08 <HAL_UART_Transmit>
  return ch;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000320 	.word	0x20000320

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 fd8e 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f83a 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 fa46 	bl	8001378 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eec:	f000 fa14 	bl	8001318 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000ef0:	f000 f99a 	bl	8001228 <MX_TIM16_Init>
  MX_TIM5_Init();
 8000ef4:	f000 f94a 	bl	800118c <MX_TIM5_Init>
  MX_TIM2_Init();
 8000ef8:	f000 f882 	bl	8001000 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000efc:	f000 f8ce 	bl	800109c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n\r Starting\n\n\r");
 8000f00:	4810      	ldr	r0, [pc, #64]	@ (8000f44 <main+0x68>)
 8000f02:	f005 fec1 	bl	8006c88 <iprintf>


  __HAL_TIM_SET_COUNTER(&htim5, 0);  // Reset the counter to 0
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <main+0x6c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim5);
 8000f0e:	480e      	ldr	r0, [pc, #56]	@ (8000f48 <main+0x6c>)
 8000f10:	f002 fcbc 	bl	800388c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim16);
 8000f14:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <main+0x70>)
 8000f16:	f002 fcb9 	bl	800388c <HAL_TIM_Base_Start>
  TIM16->CCR1 = 1052;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <main+0x74>)
 8000f1c:	f240 421c 	movw	r2, #1052	@ 0x41c
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000f22:	2100      	movs	r1, #0
 8000f24:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <main+0x70>)
 8000f26:	f002 fd7b 	bl	8003a20 <HAL_TIM_PWM_Start>
//  uint32_t data = 0b10110100101110001111;
//  for (int i = 0; i<3; i++){
//	  sendSIRCSData(data);
//  }

  HAL_UART_Receive_IT(&huart2, &receivedWord, 4);
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4909      	ldr	r1, [pc, #36]	@ (8000f54 <main+0x78>)
 8000f2e:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <main+0x7c>)
 8000f30:	f003 fe74 	bl	8004c1c <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2120      	movs	r1, #32
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3c:	f001 f916 	bl	800216c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <main+0x64>
 8000f44:	08008b98 	.word	0x08008b98
 8000f48:	20000288 	.word	0x20000288
 8000f4c:	200002d4 	.word	0x200002d4
 8000f50:	40014400 	.word	0x40014400
 8000f54:	200003a8 	.word	0x200003a8
 8000f58:	20000320 	.word	0x20000320

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b096      	sub	sp, #88	@ 0x58
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2244      	movs	r2, #68	@ 0x44
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 fee1 	bl	8006d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f82:	f001 f919 	bl	80021b8 <HAL_PWREx_ControlVoltageScaling>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f8c:	f000 fa94 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000faa:	230a      	movs	r3, #10
 8000fac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 f950 	bl	8002264 <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fca:	f000 fa75 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fd18 	bl	8002a1c <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ff2:	f000 fa61 	bl	80014b8 <Error_Handler>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3758      	adds	r7, #88	@ 0x58
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <MX_TIM2_Init+0x98>)
 8001020:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001024:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <MX_TIM2_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <MX_TIM2_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <MX_TIM2_Init+0x98>)
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_TIM2_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <MX_TIM2_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001046:	4814      	ldr	r0, [pc, #80]	@ (8001098 <MX_TIM2_Init+0x98>)
 8001048:	f002 fbc8 	bl	80037dc <HAL_TIM_Base_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001052:	f000 fa31 	bl	80014b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	480d      	ldr	r0, [pc, #52]	@ (8001098 <MX_TIM2_Init+0x98>)
 8001064:	f002 fef6 	bl	8003e54 <HAL_TIM_ConfigClockSource>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800106e:	f000 fa23 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <MX_TIM2_Init+0x98>)
 8001080:	f003 fbee 	bl	8004860 <HAL_TIMEx_MasterConfigSynchronization>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800108a:	f000 fa15 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001f0 	.word	0x200001f0

0800109c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	@ 0x38
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <MX_TIM3_Init+0xe8>)
 80010d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001188 <MX_TIM3_Init+0xec>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <MX_TIM3_Init+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b2a      	ldr	r3, [pc, #168]	@ (8001184 <MX_TIM3_Init+0xe8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010e0:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <MX_TIM3_Init+0xe8>)
 80010e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <MX_TIM3_Init+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <MX_TIM3_Init+0xe8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010f4:	4823      	ldr	r0, [pc, #140]	@ (8001184 <MX_TIM3_Init+0xe8>)
 80010f6:	f002 fb71 	bl	80037dc <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001100:	f000 f9da 	bl	80014b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800110a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110e:	4619      	mov	r1, r3
 8001110:	481c      	ldr	r0, [pc, #112]	@ (8001184 <MX_TIM3_Init+0xe8>)
 8001112:	f002 fe9f 	bl	8003e54 <HAL_TIM_ConfigClockSource>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800111c:	f000 f9cc 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001120:	4818      	ldr	r0, [pc, #96]	@ (8001184 <MX_TIM3_Init+0xe8>)
 8001122:	f002 fc1b 	bl	800395c <HAL_TIM_PWM_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800112c:	f000 f9c4 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4811      	ldr	r0, [pc, #68]	@ (8001184 <MX_TIM3_Init+0xe8>)
 8001140:	f003 fb8e 	bl	8004860 <HAL_TIMEx_MasterConfigSynchronization>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800114a:	f000 f9b5 	bl	80014b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114e:	2360      	movs	r3, #96	@ 0x60
 8001150:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	2204      	movs	r2, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4807      	ldr	r0, [pc, #28]	@ (8001184 <MX_TIM3_Init+0xe8>)
 8001166:	f002 fd61 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001170:	f000 f9a2 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <MX_TIM3_Init+0xe8>)
 8001176:	f000 fa23 	bl	80015c0 <HAL_TIM_MspPostInit>

}
 800117a:	bf00      	nop
 800117c:	3738      	adds	r7, #56	@ 0x38
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000023c 	.word	0x2000023c
 8001188:	40000400 	.word	0x40000400

0800118c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <MX_TIM5_Init+0x94>)
 80011ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <MX_TIM5_Init+0x98>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <MX_TIM5_Init+0x94>)
 80011b2:	224f      	movs	r2, #79	@ 0x4f
 80011b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_TIM5_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <MX_TIM5_Init+0x94>)
 80011be:	f04f 32ff 	mov.w	r2, #4294967295
 80011c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <MX_TIM5_Init+0x94>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <MX_TIM5_Init+0x94>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011d0:	4813      	ldr	r0, [pc, #76]	@ (8001220 <MX_TIM5_Init+0x94>)
 80011d2:	f002 fb03 	bl	80037dc <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80011dc:	f000 f96c 	bl	80014b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4619      	mov	r1, r3
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <MX_TIM5_Init+0x94>)
 80011ee:	f002 fe31 	bl	8003e54 <HAL_TIM_ConfigClockSource>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80011f8:	f000 f95e 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_TIM5_Init+0x94>)
 800120a:	f003 fb29 	bl	8004860 <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001214:	f000 f950 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000288 	.word	0x20000288
 8001224:	40000c00 	.word	0x40000c00

08001228 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b092      	sub	sp, #72	@ 0x48
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	222c      	movs	r2, #44	@ 0x2c
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f005 fd72 	bl	8006d32 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800124e:	4b30      	ldr	r3, [pc, #192]	@ (8001310 <MX_TIM16_Init+0xe8>)
 8001250:	4a30      	ldr	r2, [pc, #192]	@ (8001314 <MX_TIM16_Init+0xec>)
 8001252:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001254:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <MX_TIM16_Init+0xe8>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b2d      	ldr	r3, [pc, #180]	@ (8001310 <MX_TIM16_Init+0xe8>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000-1;
 8001260:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <MX_TIM16_Init+0xe8>)
 8001262:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001266:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <MX_TIM16_Init+0xe8>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <MX_TIM16_Init+0xe8>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <MX_TIM16_Init+0xe8>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800127a:	4825      	ldr	r0, [pc, #148]	@ (8001310 <MX_TIM16_Init+0xe8>)
 800127c:	f002 faae 	bl	80037dc <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001286:	f000 f917 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800128a:	4821      	ldr	r0, [pc, #132]	@ (8001310 <MX_TIM16_Init+0xe8>)
 800128c:	f002 fb66 	bl	800395c <HAL_TIM_PWM_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001296:	f000 f90f 	bl	80014b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129a:	2360      	movs	r3, #96	@ 0x60
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	4814      	ldr	r0, [pc, #80]	@ (8001310 <MX_TIM16_Init+0xe8>)
 80012c0:	f002 fcb4 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80012ca:	f000 f8f5 	bl	80014b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4807      	ldr	r0, [pc, #28]	@ (8001310 <MX_TIM16_Init+0xe8>)
 80012f2:	f003 fb3d 	bl	8004970 <HAL_TIMEx_ConfigBreakDeadTime>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80012fc:	f000 f8dc 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001300:	4803      	ldr	r0, [pc, #12]	@ (8001310 <MX_TIM16_Init+0xe8>)
 8001302:	f000 f95d 	bl	80015c0 <HAL_TIM_MspPostInit>

}
 8001306:	bf00      	nop
 8001308:	3748      	adds	r7, #72	@ 0x48
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200002d4 	.word	0x200002d4
 8001314:	40014400 	.word	0x40014400

08001318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <MX_USART2_UART_Init+0x5c>)
 8001320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_USART2_UART_Init+0x58>)
 800135c:	f003 fb86 	bl	8004a6c <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001366:	f000 f8a7 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000320 	.word	0x20000320
 8001374:	40004400 	.word	0x40004400

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	4b47      	ldr	r3, [pc, #284]	@ (80014ac <MX_GPIO_Init+0x134>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	4a46      	ldr	r2, [pc, #280]	@ (80014ac <MX_GPIO_Init+0x134>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139a:	4b44      	ldr	r3, [pc, #272]	@ (80014ac <MX_GPIO_Init+0x134>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	4b41      	ldr	r3, [pc, #260]	@ (80014ac <MX_GPIO_Init+0x134>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	4a40      	ldr	r2, [pc, #256]	@ (80014ac <MX_GPIO_Init+0x134>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b2:	4b3e      	ldr	r3, [pc, #248]	@ (80014ac <MX_GPIO_Init+0x134>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b3b      	ldr	r3, [pc, #236]	@ (80014ac <MX_GPIO_Init+0x134>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a3a      	ldr	r2, [pc, #232]	@ (80014ac <MX_GPIO_Init+0x134>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b38      	ldr	r3, [pc, #224]	@ (80014ac <MX_GPIO_Init+0x134>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b35      	ldr	r3, [pc, #212]	@ (80014ac <MX_GPIO_Init+0x134>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a34      	ldr	r2, [pc, #208]	@ (80014ac <MX_GPIO_Init+0x134>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b32      	ldr	r3, [pc, #200]	@ (80014ac <MX_GPIO_Init+0x134>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8
 80013ee:	2200      	movs	r2, #0
 80013f0:	f240 7123 	movw	r1, #1827	@ 0x723
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f8:	f000 feb8 	bl	800216c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8001402:	482b      	ldr	r0, [pc, #172]	@ (80014b0 <MX_GPIO_Init+0x138>)
 8001404:	f000 feb2 	bl	800216c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2180      	movs	r1, #128	@ 0x80
 800140c:	4829      	ldr	r0, [pc, #164]	@ (80014b4 <MX_GPIO_Init+0x13c>)
 800140e:	f000 fead 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001412:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001418:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4822      	ldr	r0, [pc, #136]	@ (80014b4 <MX_GPIO_Init+0x13c>)
 800142a:	f000 fcf5 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8
 800142e:	f240 7323 	movw	r3, #1827	@ 0x723
 8001432:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f000 fce5 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144e:	2310      	movs	r3, #16
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001464:	f000 fcd8 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001468:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 800146c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <MX_GPIO_Init+0x138>)
 8001482:	f000 fcc9 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001486:	2380      	movs	r3, #128	@ 0x80
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_GPIO_Init+0x13c>)
 800149e:	f000 fcbb 	bl	8001e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	@ 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000400 	.word	0x48000400
 80014b4:	48000800 	.word	0x48000800

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <Error_Handler+0x8>

080014c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <HAL_MspInit+0x44>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_MspInit+0x44>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <HAL_MspInit+0x44>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	4a08      	ldr	r2, [pc, #32]	@ (8001508 <HAL_MspInit+0x44>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_MspInit+0x44>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800151c:	d10c      	bne.n	8001538 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151e:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	4a23      	ldr	r2, [pc, #140]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6593      	str	r3, [r2, #88]	@ 0x58
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001536:	e034      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1d      	ldr	r2, [pc, #116]	@ (80015b4 <HAL_TIM_Base_MspInit+0xa8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10c      	bne.n	800155c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	4a1a      	ldr	r2, [pc, #104]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6593      	str	r3, [r2, #88]	@ 0x58
 800154e:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
}
 800155a:	e022      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a15      	ldr	r2, [pc, #84]	@ (80015b8 <HAL_TIM_Base_MspInit+0xac>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10c      	bne.n	8001580 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	4a11      	ldr	r2, [pc, #68]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	6593      	str	r3, [r2, #88]	@ 0x58
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	e010      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <HAL_TIM_Base_MspInit+0xb0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10b      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158e:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 8001590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001594:	6613      	str	r3, [r2, #96]	@ 0x60
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_TIM_Base_MspInit+0xa4>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
}
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40000400 	.word	0x40000400
 80015b8:	40000c00 	.word	0x40000c00
 80015bc:	40014400 	.word	0x40014400

080015c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a23      	ldr	r2, [pc, #140]	@ (800166c <HAL_TIM_MspPostInit+0xac>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d11d      	bne.n	800161e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <HAL_TIM_MspPostInit+0xb0>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	4a22      	ldr	r2, [pc, #136]	@ (8001670 <HAL_TIM_MspPostInit+0xb0>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <HAL_TIM_MspPostInit+0xb0>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800160a:	2302      	movs	r3, #2
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001618:	f000 fbfe 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800161c:	e021      	b.n	8001662 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM16)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <HAL_TIM_MspPostInit+0xb4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d11c      	bne.n	8001662 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <HAL_TIM_MspPostInit+0xb0>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162c:	4a10      	ldr	r2, [pc, #64]	@ (8001670 <HAL_TIM_MspPostInit+0xb0>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001634:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <HAL_TIM_MspPostInit+0xb0>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001640:	2340      	movs	r3, #64	@ 0x40
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001650:	230e      	movs	r3, #14
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f000 fbdb 	bl	8001e18 <HAL_GPIO_Init>
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	@ 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40000400 	.word	0x40000400
 8001670:	40021000 	.word	0x40021000
 8001674:	40014400 	.word	0x40014400

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0ac      	sub	sp, #176	@ 0xb0
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2288      	movs	r2, #136	@ 0x88
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f005 fb4a 	bl	8006d32 <memset>
  if(huart->Instance==USART2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a25      	ldr	r2, [pc, #148]	@ (8001738 <HAL_UART_MspInit+0xc0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d143      	bne.n	8001730 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 fbd5 	bl	8002e64 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016c0:	f7ff fefa 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <HAL_UART_MspInit+0xc4>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	4a1c      	ldr	r2, [pc, #112]	@ (800173c <HAL_UART_MspInit+0xc4>)
 80016ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <HAL_UART_MspInit+0xc4>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <HAL_UART_MspInit+0xc4>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	4a16      	ldr	r2, [pc, #88]	@ (800173c <HAL_UART_MspInit+0xc4>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_UART_MspInit+0xc4>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016f4:	230c      	movs	r3, #12
 80016f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170c:	2307      	movs	r3, #7
 800170e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171c:	f000 fb7c 	bl	8001e18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2026      	movs	r0, #38	@ 0x26
 8001726:	f000 fac2 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800172a:	2026      	movs	r0, #38	@ 0x26
 800172c:	f000 fadb 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001730:	bf00      	nop
 8001732:	37b0      	adds	r7, #176	@ 0xb0
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40004400 	.word	0x40004400
 800173c:	40021000 	.word	0x40021000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <NMI_Handler+0x4>

08001748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <MemManage_Handler+0x4>

08001758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <UsageFault_Handler+0x4>

08001768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001796:	f000 f98f 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a4:	4811      	ldr	r0, [pc, #68]	@ (80017ec <USART2_IRQHandler+0x4c>)
 80017a6:	f003 fa85 	bl	8004cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if (strcmp(receivedWord, "off")== 0){
 80017aa:	4911      	ldr	r1, [pc, #68]	@ (80017f0 <USART2_IRQHandler+0x50>)
 80017ac:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <USART2_IRQHandler+0x54>)
 80017ae:	f7fe fd0f 	bl	80001d0 <strcmp>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <USART2_IRQHandler+0x24>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2120      	movs	r1, #32
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c0:	f000 fcd4 	bl	800216c <HAL_GPIO_WritePin>
  }
  if (strcmp(receivedWord, "on ")== 0){
 80017c4:	490c      	ldr	r1, [pc, #48]	@ (80017f8 <USART2_IRQHandler+0x58>)
 80017c6:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <USART2_IRQHandler+0x54>)
 80017c8:	f7fe fd02 	bl	80001d0 <strcmp>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <USART2_IRQHandler+0x3e>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2120      	movs	r1, #32
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017da:	f000 fcc7 	bl	800216c <HAL_GPIO_WritePin>
    }

  HAL_UART_Receive_IT(&huart2, receivedWord, 4);
 80017de:	2204      	movs	r2, #4
 80017e0:	4904      	ldr	r1, [pc, #16]	@ (80017f4 <USART2_IRQHandler+0x54>)
 80017e2:	4802      	ldr	r0, [pc, #8]	@ (80017ec <USART2_IRQHandler+0x4c>)
 80017e4:	f003 fa1a 	bl	8004c1c <HAL_UART_Receive_IT>
//  char receivedCharacter;
//
//
//  HAL_UART_Receive_IT(&huart2, &receivedCharacter, 1);
  /* USER CODE END USART2_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000320 	.word	0x20000320
 80017f0:	08008ba8 	.word	0x08008ba8
 80017f4:	200003a8 	.word	0x200003a8
 80017f8:	08008bac 	.word	0x08008bac

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001816:	f005 fadf 	bl	8006dd8 <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
  return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
  while (1) {}    /* Make sure we hang here */
 800183e:	bf00      	nop
 8001840:	e7fd      	b.n	800183e <_exit+0x12>

08001842 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e00a      	b.n	800186a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001854:	f3af 8000 	nop.w
 8001858:	4601      	mov	r1, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	60ba      	str	r2, [r7, #8]
 8001860:	b2ca      	uxtb	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbf0      	blt.n	8001854 <_read+0x12>
  }

  return len;
 8001872:	687b      	ldr	r3, [r7, #4]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e009      	b.n	80018a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60ba      	str	r2, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb0e 	bl	8000eb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbf1      	blt.n	800188e <_write+0x12>
  }
  return len;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_close>:

int _close(int file)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018dc:	605a      	str	r2, [r3, #4]
  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_isatty>:

int _isatty(int file)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f005 fa44 	bl	8006dd8 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20018000 	.word	0x20018000
 800197c:	00000400 	.word	0x00000400
 8001980:	200003ac 	.word	0x200003ac
 8001984:	20000500 	.word	0x20000500

08001988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff ffea 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	@ (80019ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <LoopForever+0xe>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	@ (80019f8 <LoopForever+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f005 fa03 	bl	8006de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff fa7d 	bl	8000edc <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019f0:	08008f78 	.word	0x08008f78
  ldr r2, =_sbss
 80019f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019f8:	20000500 	.word	0x20000500

080019fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_2_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_Init+0x3c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a3c <HAL_Init+0x3c>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a16:	2003      	movs	r0, #3
 8001a18:	f000 f93e 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f000 f80f 	bl	8001a40 <HAL_InitTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	71fb      	strb	r3, [r7, #7]
 8001a2c:	e001      	b.n	8001a32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a2e:	f7ff fd49 	bl	80014c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a32:	79fb      	ldrb	r3, [r7, #7]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40022000 	.word	0x40022000

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a4c:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <HAL_InitTick+0x6c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d023      	beq.n	8001a9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <HAL_InitTick+0x70>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <HAL_InitTick+0x6c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f949 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10f      	bne.n	8001a96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d809      	bhi.n	8001a90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f913 	bl	8001cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <HAL_InitTick+0x74>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e007      	b.n	8001aa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e004      	b.n	8001aa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	e001      	b.n	8001aa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x20>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x24>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <HAL_IncTick+0x24>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	200003b0 	.word	0x200003b0

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	200003b0 	.word	0x200003b0

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	@ (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff3e 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff31 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d008      	beq.n	8001d44 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2204      	movs	r2, #4
 8001d36:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e022      	b.n	8001d8a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 020e 	bic.w	r2, r2, #14
 8001d52:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d68:	f003 021c 	and.w	r2, r3, #28
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d005      	beq.n	8001dba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2204      	movs	r2, #4
 8001db2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	e029      	b.n	8001e0e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 020e 	bic.w	r2, r2, #14
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	f003 021c 	and.w	r2, r3, #28
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
    }
  }
  return status;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e17f      	b.n	8002128 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8171 	beq.w	8002122 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d005      	beq.n	8001e58 <HAL_GPIO_Init+0x40>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d130      	bne.n	8001eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8e:	2201      	movs	r2, #1
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	f003 0201 	and.w	r2, r3, #1
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d118      	bne.n	8001ef8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	f003 0201 	and.w	r2, r3, #1
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d017      	beq.n	8001f34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d123      	bne.n	8001f88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	6939      	ldr	r1, [r7, #16]
 8001f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0203 	and.w	r2, r3, #3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80ac 	beq.w	8002122 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <HAL_GPIO_Init+0x330>)
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fce:	4a5e      	ldr	r2, [pc, #376]	@ (8002148 <HAL_GPIO_Init+0x330>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002148 <HAL_GPIO_Init+0x330>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fe2:	4a5a      	ldr	r2, [pc, #360]	@ (800214c <HAL_GPIO_Init+0x334>)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x242>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4f      	ldr	r2, [pc, #316]	@ (8002150 <HAL_GPIO_Init+0x338>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x23e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4e      	ldr	r2, [pc, #312]	@ (8002154 <HAL_GPIO_Init+0x33c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x23a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4d      	ldr	r2, [pc, #308]	@ (8002158 <HAL_GPIO_Init+0x340>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x236>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4c      	ldr	r2, [pc, #304]	@ (800215c <HAL_GPIO_Init+0x344>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x232>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4b      	ldr	r2, [pc, #300]	@ (8002160 <HAL_GPIO_Init+0x348>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x22e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4a      	ldr	r2, [pc, #296]	@ (8002164 <HAL_GPIO_Init+0x34c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x22a>
 800203e:	2306      	movs	r3, #6
 8002040:	e00c      	b.n	800205c <HAL_GPIO_Init+0x244>
 8002042:	2307      	movs	r3, #7
 8002044:	e00a      	b.n	800205c <HAL_GPIO_Init+0x244>
 8002046:	2305      	movs	r3, #5
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x244>
 800204a:	2304      	movs	r3, #4
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x244>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x244>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x244>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x244>
 800205a:	2300      	movs	r3, #0
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800206c:	4937      	ldr	r1, [pc, #220]	@ (800214c <HAL_GPIO_Init+0x334>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800207a:	4b3b      	ldr	r3, [pc, #236]	@ (8002168 <HAL_GPIO_Init+0x350>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800209e:	4a32      	ldr	r2, [pc, #200]	@ (8002168 <HAL_GPIO_Init+0x350>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020a4:	4b30      	ldr	r3, [pc, #192]	@ (8002168 <HAL_GPIO_Init+0x350>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c8:	4a27      	ldr	r2, [pc, #156]	@ (8002168 <HAL_GPIO_Init+0x350>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ce:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <HAL_GPIO_Init+0x350>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002168 <HAL_GPIO_Init+0x350>)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <HAL_GPIO_Init+0x350>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800211c:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <HAL_GPIO_Init+0x350>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	f47f ae78 	bne.w	8001e28 <HAL_GPIO_Init+0x10>
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40010000 	.word	0x40010000
 8002150:	48000400 	.word	0x48000400
 8002154:	48000800 	.word	0x48000800
 8002158:	48000c00 	.word	0x48000c00
 800215c:	48001000 	.word	0x48001000
 8002160:	48001400 	.word	0x48001400
 8002164:	48001800 	.word	0x48001800
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800217c:	787b      	ldrb	r3, [r7, #1]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002188:	e002      	b.n	8002190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021a0:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40007000 	.word	0x40007000

080021b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021c6:	d130      	bne.n	800222a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c8:	4b23      	ldr	r3, [pc, #140]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d4:	d038      	beq.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d6:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021de:	4a1e      	ldr	r2, [pc, #120]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e6:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2232      	movs	r2, #50	@ 0x32
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002260 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9b      	lsrs	r3, r3, #18
 80021f8:	3301      	adds	r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fc:	e002      	b.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3b01      	subs	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002210:	d102      	bne.n	8002218 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f2      	bne.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002218:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002224:	d110      	bne.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e00f      	b.n	800224a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002236:	d007      	beq.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002240:	4a05      	ldr	r2, [pc, #20]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002246:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000
 800225c:	20000000 	.word	0x20000000
 8002260:	431bde83 	.word	0x431bde83

08002264 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e3ca      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002276:	4b97      	ldr	r3, [pc, #604]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002280:	4b94      	ldr	r3, [pc, #592]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80e4 	beq.w	8002460 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_RCC_OscConfig+0x4a>
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	f040 808b 	bne.w	80023bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f040 8087 	bne.w	80023bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ae:	4b89      	ldr	r3, [pc, #548]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x62>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e3a2      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1a      	ldr	r2, [r3, #32]
 80022ca:	4b82      	ldr	r3, [pc, #520]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_RCC_OscConfig+0x7c>
 80022d6:	4b7f      	ldr	r3, [pc, #508]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022de:	e005      	b.n	80022ec <HAL_RCC_OscConfig+0x88>
 80022e0:	4b7c      	ldr	r3, [pc, #496]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d223      	bcs.n	8002338 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fd55 	bl	8002da4 <RCC_SetFlashLatencyFromMSIRange>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e383      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002304:	4b73      	ldr	r3, [pc, #460]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a72      	ldr	r2, [pc, #456]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 800230a:	f043 0308 	orr.w	r3, r3, #8
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b70      	ldr	r3, [pc, #448]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	496d      	ldr	r1, [pc, #436]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002322:	4b6c      	ldr	r3, [pc, #432]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	4968      	ldr	r1, [pc, #416]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
 8002336:	e025      	b.n	8002384 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002338:	4b66      	ldr	r3, [pc, #408]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a65      	ldr	r2, [pc, #404]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b63      	ldr	r3, [pc, #396]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4960      	ldr	r1, [pc, #384]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002356:	4b5f      	ldr	r3, [pc, #380]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	495b      	ldr	r1, [pc, #364]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fd15 	bl	8002da4 <RCC_SetFlashLatencyFromMSIRange>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e343      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002384:	f000 fc4a 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b52      	ldr	r3, [pc, #328]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	4950      	ldr	r1, [pc, #320]	@ (80024d8 <HAL_RCC_OscConfig+0x274>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	4a4e      	ldr	r2, [pc, #312]	@ (80024dc <HAL_RCC_OscConfig+0x278>)
 80023a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023a4:	4b4e      	ldr	r3, [pc, #312]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fb49 	bl	8001a40 <HAL_InitTick>
 80023ae:	4603      	mov	r3, r0
 80023b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d052      	beq.n	800245e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	e327      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d032      	beq.n	800242a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c4:	4b43      	ldr	r3, [pc, #268]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a42      	ldr	r2, [pc, #264]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d0:	f7ff fb86 	bl	8001ae0 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d8:	f7ff fb82 	bl	8001ae0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e310      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ea:	4b3a      	ldr	r3, [pc, #232]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f6:	4b37      	ldr	r3, [pc, #220]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a36      	ldr	r2, [pc, #216]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b34      	ldr	r3, [pc, #208]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4931      	ldr	r1, [pc, #196]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002414:	4b2f      	ldr	r3, [pc, #188]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	492c      	ldr	r1, [pc, #176]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
 8002428:	e01a      	b.n	8002460 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800242a:	4b2a      	ldr	r3, [pc, #168]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a29      	ldr	r2, [pc, #164]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002436:	f7ff fb53 	bl	8001ae0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800243e:	f7ff fb4f 	bl	8001ae0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e2dd      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002450:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0x1da>
 800245c:	e000      	b.n	8002460 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800245e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d074      	beq.n	8002556 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b08      	cmp	r3, #8
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x21a>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b0c      	cmp	r3, #12
 8002476:	d10e      	bne.n	8002496 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d10b      	bne.n	8002496 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d064      	beq.n	8002554 <HAL_RCC_OscConfig+0x2f0>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d160      	bne.n	8002554 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e2ba      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x24a>
 80024a0:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0b      	ldr	r2, [pc, #44]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	e026      	b.n	80024fc <HAL_RCC_OscConfig+0x298>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024b6:	d115      	bne.n	80024e4 <HAL_RCC_OscConfig+0x280>
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a05      	ldr	r2, [pc, #20]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a02      	ldr	r2, [pc, #8]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x298>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	08008bb0 	.word	0x08008bb0
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004
 80024e4:	4ba0      	ldr	r3, [pc, #640]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a9f      	ldr	r2, [pc, #636]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b9d      	ldr	r3, [pc, #628]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a9c      	ldr	r2, [pc, #624]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff faec 	bl	8001ae0 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff fae8 	bl	8001ae0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	@ 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e276      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251e:	4b92      	ldr	r3, [pc, #584]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x2a8>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff fad8 	bl	8001ae0 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff fad4 	bl	8001ae0 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	@ 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e262      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002546:	4b88      	ldr	r3, [pc, #544]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x2d0>
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d060      	beq.n	8002624 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d005      	beq.n	8002574 <HAL_RCC_OscConfig+0x310>
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d116      	bne.n	80025a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002574:	4b7c      	ldr	r3, [pc, #496]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x328>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e23f      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b76      	ldr	r3, [pc, #472]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	4973      	ldr	r1, [pc, #460]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a0:	e040      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d023      	beq.n	80025f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7ff fa93 	bl	8001ae0 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff fa8f 	bl	8001ae0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e21d      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d0:	4b65      	ldr	r3, [pc, #404]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b62      	ldr	r3, [pc, #392]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	495f      	ldr	r1, [pc, #380]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e018      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80025f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7ff fa6f 	bl	8001ae0 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002606:	f7ff fa6b 	bl	8001ae0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1f9      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002618:	4b53      	ldr	r3, [pc, #332]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d03c      	beq.n	80026aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01c      	beq.n	8002672 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002638:	4b4b      	ldr	r3, [pc, #300]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 800263a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800263e:	4a4a      	ldr	r2, [pc, #296]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7ff fa4a 	bl	8001ae0 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff fa46 	bl	8001ae0 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1d4      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002662:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 8002664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ef      	beq.n	8002650 <HAL_RCC_OscConfig+0x3ec>
 8002670:	e01b      	b.n	80026aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002672:	4b3d      	ldr	r3, [pc, #244]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 8002674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002678:	4a3b      	ldr	r2, [pc, #236]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7ff fa2d 	bl	8001ae0 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268a:	f7ff fa29 	bl	8001ae0 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1b7      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269c:	4b32      	ldr	r3, [pc, #200]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 800269e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ef      	bne.n	800268a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80a6 	beq.w	8002804 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4b27      	ldr	r3, [pc, #156]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026cc:	4a26      	ldr	r2, [pc, #152]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d4:	4b24      	ldr	r3, [pc, #144]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e0:	2301      	movs	r3, #1
 80026e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e4:	4b21      	ldr	r3, [pc, #132]	@ (800276c <HAL_RCC_OscConfig+0x508>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d118      	bne.n	8002722 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f0:	4b1e      	ldr	r3, [pc, #120]	@ (800276c <HAL_RCC_OscConfig+0x508>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1d      	ldr	r2, [pc, #116]	@ (800276c <HAL_RCC_OscConfig+0x508>)
 80026f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fc:	f7ff f9f0 	bl	8001ae0 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002704:	f7ff f9ec 	bl	8001ae0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e17a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <HAL_RCC_OscConfig+0x508>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d108      	bne.n	800273c <HAL_RCC_OscConfig+0x4d8>
 800272a:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002730:	4a0d      	ldr	r2, [pc, #52]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800273a:	e029      	b.n	8002790 <HAL_RCC_OscConfig+0x52c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b05      	cmp	r3, #5
 8002742:	d115      	bne.n	8002770 <HAL_RCC_OscConfig+0x50c>
 8002744:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274a:	4a07      	ldr	r2, [pc, #28]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275a:	4a03      	ldr	r2, [pc, #12]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x52c>
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	40007000 	.word	0x40007000
 8002770:	4b9c      	ldr	r3, [pc, #624]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002776:	4a9b      	ldr	r2, [pc, #620]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002780:	4b98      	ldr	r3, [pc, #608]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	4a97      	ldr	r2, [pc, #604]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d016      	beq.n	80027c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7ff f9a2 	bl	8001ae0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7ff f99e 	bl	8001ae0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e12a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b6:	4b8b      	ldr	r3, [pc, #556]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ed      	beq.n	80027a0 <HAL_RCC_OscConfig+0x53c>
 80027c4:	e015      	b.n	80027f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7ff f98b 	bl	8001ae0 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7ff f987 	bl	8001ae0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e113      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e4:	4b7f      	ldr	r3, [pc, #508]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ed      	bne.n	80027ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f2:	7ffb      	ldrb	r3, [r7, #31]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b7a      	ldr	r3, [pc, #488]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	4a79      	ldr	r2, [pc, #484]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80fe 	beq.w	8002a0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	2b02      	cmp	r3, #2
 8002814:	f040 80d0 	bne.w	80029b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002818:	4b72      	ldr	r3, [pc, #456]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d130      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	3b01      	subs	r3, #1
 8002838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d127      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002848:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d11f      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002858:	2a07      	cmp	r2, #7
 800285a:	bf14      	ite	ne
 800285c:	2201      	movne	r2, #1
 800285e:	2200      	moveq	r2, #0
 8002860:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002862:	4293      	cmp	r3, r2
 8002864:	d113      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	3b01      	subs	r3, #1
 8002874:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d109      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d06e      	beq.n	800296c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d069      	beq.n	8002968 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002894:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028a0:	4b50      	ldr	r3, [pc, #320]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0ad      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028b0:	4b4c      	ldr	r3, [pc, #304]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4b      	ldr	r2, [pc, #300]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028bc:	f7ff f910 	bl	8001ae0 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff f90c 	bl	8001ae0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e09a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d6:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e2:	4b40      	ldr	r3, [pc, #256]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	4b40      	ldr	r3, [pc, #256]	@ (80029e8 <HAL_RCC_OscConfig+0x784>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028f2:	3a01      	subs	r2, #1
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028fc:	0212      	lsls	r2, r2, #8
 80028fe:	4311      	orrs	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002904:	0852      	lsrs	r2, r2, #1
 8002906:	3a01      	subs	r2, #1
 8002908:	0552      	lsls	r2, r2, #21
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002910:	0852      	lsrs	r2, r2, #1
 8002912:	3a01      	subs	r2, #1
 8002914:	0652      	lsls	r2, r2, #25
 8002916:	4311      	orrs	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800291c:	0912      	lsrs	r2, r2, #4
 800291e:	0452      	lsls	r2, r2, #17
 8002920:	430a      	orrs	r2, r1
 8002922:	4930      	ldr	r1, [pc, #192]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002924:	4313      	orrs	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002928:	4b2e      	ldr	r3, [pc, #184]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2d      	ldr	r2, [pc, #180]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b2b      	ldr	r3, [pc, #172]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a2a      	ldr	r2, [pc, #168]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002940:	f7ff f8ce 	bl	8001ae0 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7ff f8ca 	bl	8001ae0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e058      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002966:	e050      	b.n	8002a0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04f      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296c:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d148      	bne.n	8002a0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002978:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a19      	ldr	r2, [pc, #100]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 800297e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002982:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002984:	4b17      	ldr	r3, [pc, #92]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a16      	ldr	r2, [pc, #88]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 800298a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800298e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002990:	f7ff f8a6 	bl	8001ae0 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7ff f8a2 	bl	8001ae0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e030      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029aa:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x734>
 80029b6:	e028      	b.n	8002a0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d023      	beq.n	8002a06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a08      	ldr	r2, [pc, #32]	@ (80029e4 <HAL_RCC_OscConfig+0x780>)
 80029c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff f889 	bl	8001ae0 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	e00c      	b.n	80029ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d2:	f7ff f885 	bl	8001ae0 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d905      	bls.n	80029ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e013      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
 80029e4:	40021000 	.word	0x40021000
 80029e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ec:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ec      	bne.n	80029d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4905      	ldr	r1, [pc, #20]	@ (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x7b4>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	60cb      	str	r3, [r1, #12]
 8002a04:	e001      	b.n	8002a0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	feeefffc 	.word	0xfeeefffc

08002a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0e7      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b75      	ldr	r3, [pc, #468]	@ (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d910      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b72      	ldr	r3, [pc, #456]	@ (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4970      	ldr	r1, [pc, #448]	@ (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cf      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d010      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4b66      	ldr	r3, [pc, #408]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d908      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b63      	ldr	r3, [pc, #396]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4960      	ldr	r1, [pc, #384]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d04c      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d121      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0a6      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aba:	4b54      	ldr	r3, [pc, #336]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d115      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e09a      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e08e      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e086      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b46      	ldr	r3, [pc, #280]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4943      	ldr	r1, [pc, #268]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b04:	f7fe ffec 	bl	8001ae0 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe ffe8 	bl	8001ae0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e06e      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b3a      	ldr	r3, [pc, #232]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d010      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4b31      	ldr	r3, [pc, #196]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d208      	bcs.n	8002b62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b2e      	ldr	r3, [pc, #184]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	492b      	ldr	r1, [pc, #172]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b62:	4b29      	ldr	r3, [pc, #164]	@ (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d210      	bcs.n	8002b92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b70:	4b25      	ldr	r3, [pc, #148]	@ (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 0207 	bic.w	r2, r3, #7
 8002b78:	4923      	ldr	r1, [pc, #140]	@ (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b80:	4b21      	ldr	r3, [pc, #132]	@ (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e036      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	4918      	ldr	r1, [pc, #96]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbc:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4910      	ldr	r1, [pc, #64]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd0:	f000 f824 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	490b      	ldr	r1, [pc, #44]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f4>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bec:	4a09      	ldr	r2, [pc, #36]	@ (8002c14 <HAL_RCC_ClockConfig+0x1f8>)
 8002bee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf0:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_RCC_ClockConfig+0x1fc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ff23 	bl	8001a40 <HAL_InitTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08008bb0 	.word	0x08008bb0
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000004 	.word	0x20000004

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	@ 0x24
 8002c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c34:	4b3b      	ldr	r3, [pc, #236]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d121      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d11e      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c50:	4b34      	ldr	r3, [pc, #208]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c5c:	4b31      	ldr	r3, [pc, #196]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e005      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c78:	4a2b      	ldr	r2, [pc, #172]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d102      	bne.n	8002c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c94:	4b25      	ldr	r3, [pc, #148]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e004      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca0:	4b23      	ldr	r3, [pc, #140]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d134      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002caa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8002cc0:	e005      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc4:	617b      	str	r3, [r7, #20]
      break;
 8002cc6:	e005      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cca:	617b      	str	r3, [r7, #20]
      break;
 8002ccc:	e002      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	617b      	str	r3, [r7, #20]
      break;
 8002cd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd4:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	3301      	adds	r3, #1
 8002ce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	fb03 f202 	mul.w	r2, r3, r2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	0e5b      	lsrs	r3, r3, #25
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	3301      	adds	r3, #1
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d14:	69bb      	ldr	r3, [r7, #24]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	@ 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08008bc8 	.word	0x08008bc8
 8002d2c:	00f42400 	.word	0x00f42400
 8002d30:	007a1200 	.word	0x007a1200

08002d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d38:	4b03      	ldr	r3, [pc, #12]	@ (8002d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000000 	.word	0x20000000

08002d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d50:	f7ff fff0 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4904      	ldr	r1, [pc, #16]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08008bc0 	.word	0x08008bc0

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d7c:	f7ff ffda 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0adb      	lsrs	r3, r3, #11
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4904      	ldr	r1, [pc, #16]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08008bc0 	.word	0x08008bc0

08002da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002db0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dbc:	f7ff f9ee 	bl	800219c <HAL_PWREx_GetVoltageRange>
 8002dc0:	6178      	str	r0, [r7, #20]
 8002dc2:	e014      	b.n	8002dee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc4:	4b25      	ldr	r3, [pc, #148]	@ (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc8:	4a24      	ldr	r2, [pc, #144]	@ (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dd0:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ddc:	f7ff f9de 	bl	800219c <HAL_PWREx_GetVoltageRange>
 8002de0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002de2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df4:	d10b      	bne.n	8002e0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b80      	cmp	r3, #128	@ 0x80
 8002dfa:	d919      	bls.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e00:	d902      	bls.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e02:	2302      	movs	r3, #2
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	e013      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e08:	2301      	movs	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	e010      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b80      	cmp	r3, #128	@ 0x80
 8002e12:	d902      	bls.n	8002e1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e14:	2303      	movs	r3, #3
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	e00a      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b80      	cmp	r3, #128	@ 0x80
 8002e1e:	d102      	bne.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e20:	2302      	movs	r3, #2
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e004      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b70      	cmp	r3, #112	@ 0x70
 8002e2a:	d101      	bne.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 0207 	bic.w	r2, r3, #7
 8002e38:	4909      	ldr	r1, [pc, #36]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e40:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40022000 	.word	0x40022000

08002e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e70:	2300      	movs	r3, #0
 8002e72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d041      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e88:	d02a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e8e:	d824      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e94:	d008      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e9a:	d81e      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ea0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ea4:	d010      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ea6:	e018      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea8:	4b86      	ldr	r3, [pc, #536]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a85      	ldr	r2, [pc, #532]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fabb 	bl	8003438 <RCCEx_PLLSAI1_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ec6:	e00c      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3320      	adds	r3, #32
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fba6 	bl	8003620 <RCCEx_PLLSAI2_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ed8:	e003      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ede:	e000      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee2:	7cfb      	ldrb	r3, [r7, #19]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ee8:	4b76      	ldr	r3, [pc, #472]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ef6:	4973      	ldr	r1, [pc, #460]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002efe:	e001      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d041      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f18:	d02a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f1e:	d824      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f24:	d008      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f2a:	d81e      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f34:	d010      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f36:	e018      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f38:	4b62      	ldr	r3, [pc, #392]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a61      	ldr	r2, [pc, #388]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f44:	e015      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fa73 	bl	8003438 <RCCEx_PLLSAI1_Config>
 8002f52:	4603      	mov	r3, r0
 8002f54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f56:	e00c      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3320      	adds	r3, #32
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fb5e 	bl	8003620 <RCCEx_PLLSAI2_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f68:	e003      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f6e:	e000      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f78:	4b52      	ldr	r3, [pc, #328]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f86:	494f      	ldr	r1, [pc, #316]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f8e:	e001      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80a0 	beq.w	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fa6:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00d      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	4b41      	ldr	r3, [pc, #260]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	4a40      	ldr	r2, [pc, #256]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fd7c 	bl	8001ae0 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fea:	e009      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fec:	f7fe fd78 	bl	8001ae0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d902      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	74fb      	strb	r3, [r7, #19]
        break;
 8002ffe:	e005      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003000:	4b31      	ldr	r3, [pc, #196]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ef      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d15c      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003012:	4b2c      	ldr	r3, [pc, #176]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800301c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01f      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	d019      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003030:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800303a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800303c:	4b21      	ldr	r3, [pc, #132]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003042:	4a20      	ldr	r2, [pc, #128]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800304c:	4b1d      	ldr	r3, [pc, #116]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	4a1c      	ldr	r2, [pc, #112]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800305c:	4a19      	ldr	r2, [pc, #100]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe fd37 	bl	8001ae0 <HAL_GetTick>
 8003072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003074:	e00b      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe fd33 	bl	8001ae0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d902      	bls.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	74fb      	strb	r3, [r7, #19]
            break;
 800308c:	e006      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308e:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ec      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a2:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b2:	4904      	ldr	r1, [pc, #16]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030ba:	e009      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
 80030c0:	e006      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d0:	7c7b      	ldrb	r3, [r7, #17]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d105      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d6:	4b9e      	ldr	r3, [pc, #632]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	4a9d      	ldr	r2, [pc, #628]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ee:	4b98      	ldr	r3, [pc, #608]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f4:	f023 0203 	bic.w	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	4994      	ldr	r1, [pc, #592]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003110:	4b8f      	ldr	r3, [pc, #572]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f023 020c 	bic.w	r2, r3, #12
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311e:	498c      	ldr	r1, [pc, #560]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003132:	4b87      	ldr	r3, [pc, #540]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003138:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	4983      	ldr	r1, [pc, #524]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003154:	4b7e      	ldr	r3, [pc, #504]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	497b      	ldr	r1, [pc, #492]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003176:	4b76      	ldr	r3, [pc, #472]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003184:	4972      	ldr	r1, [pc, #456]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003198:	4b6d      	ldr	r3, [pc, #436]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a6:	496a      	ldr	r1, [pc, #424]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ba:	4b65      	ldr	r3, [pc, #404]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	4961      	ldr	r1, [pc, #388]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031dc:	4b5c      	ldr	r3, [pc, #368]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ea:	4959      	ldr	r1, [pc, #356]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031fe:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320c:	4950      	ldr	r1, [pc, #320]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003220:	4b4b      	ldr	r3, [pc, #300]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003226:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	4948      	ldr	r1, [pc, #288]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003242:	4b43      	ldr	r3, [pc, #268]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003248:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	493f      	ldr	r1, [pc, #252]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d028      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003264:	4b3a      	ldr	r3, [pc, #232]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003272:	4937      	ldr	r1, [pc, #220]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800327e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003282:	d106      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003284:	4b32      	ldr	r3, [pc, #200]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a31      	ldr	r2, [pc, #196]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800328e:	60d3      	str	r3, [r2, #12]
 8003290:	e011      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003296:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800329a:	d10c      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	2101      	movs	r1, #1
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f8c8 	bl	8003438 <RCCEx_PLLSAI1_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d028      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c2:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	491f      	ldr	r1, [pc, #124]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032e0:	d106      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ec:	60d3      	str	r3, [r2, #12]
 80032ee:	e011      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032f8:	d10c      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f899 	bl	8003438 <RCCEx_PLLSAI1_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d02b      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003326:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332e:	4908      	ldr	r1, [pc, #32]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800333a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800333e:	d109      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003340:	4b03      	ldr	r3, [pc, #12]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a02      	ldr	r2, [pc, #8]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800334a:	60d3      	str	r3, [r2, #12]
 800334c:	e014      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003358:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800335c:	d10c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3304      	adds	r3, #4
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f867 	bl	8003438 <RCCEx_PLLSAI1_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02f      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003384:	4b2b      	ldr	r3, [pc, #172]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003392:	4928      	ldr	r1, [pc, #160]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800339e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f844 	bl	8003438 <RCCEx_PLLSAI1_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d014      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033ba:	7cfb      	ldrb	r3, [r7, #19]
 80033bc:	74bb      	strb	r3, [r7, #18]
 80033be:	e011      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3320      	adds	r3, #32
 80033ce:	2102      	movs	r1, #2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f925 	bl	8003620 <RCCEx_PLLSAI2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033da:	7cfb      	ldrb	r3, [r7, #19]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033f0:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033fe:	490d      	ldr	r1, [pc, #52]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003412:	4b08      	ldr	r3, [pc, #32]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003418:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003422:	4904      	ldr	r1, [pc, #16]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800342a:	7cbb      	ldrb	r3, [r7, #18]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000

08003438 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003446:	4b75      	ldr	r3, [pc, #468]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d018      	beq.n	8003484 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003452:	4b72      	ldr	r3, [pc, #456]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0203 	and.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d10d      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
       ||
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800346a:	4b6c      	ldr	r3, [pc, #432]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
       ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d047      	beq.n	800350e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
 8003482:	e044      	b.n	800350e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d018      	beq.n	80034be <RCCEx_PLLSAI1_Config+0x86>
 800348c:	2b03      	cmp	r3, #3
 800348e:	d825      	bhi.n	80034dc <RCCEx_PLLSAI1_Config+0xa4>
 8003490:	2b01      	cmp	r3, #1
 8003492:	d002      	beq.n	800349a <RCCEx_PLLSAI1_Config+0x62>
 8003494:	2b02      	cmp	r3, #2
 8003496:	d009      	beq.n	80034ac <RCCEx_PLLSAI1_Config+0x74>
 8003498:	e020      	b.n	80034dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800349a:	4b60      	ldr	r3, [pc, #384]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11d      	bne.n	80034e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034aa:	e01a      	b.n	80034e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034ac:	4b5b      	ldr	r3, [pc, #364]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d116      	bne.n	80034e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034bc:	e013      	b.n	80034e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034be:	4b57      	ldr	r3, [pc, #348]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ca:	4b54      	ldr	r3, [pc, #336]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034da:	e006      	b.n	80034ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      break;
 80034e0:	e004      	b.n	80034ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034e2:	bf00      	nop
 80034e4:	e002      	b.n	80034ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034e6:	bf00      	nop
 80034e8:	e000      	b.n	80034ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034f2:	4b4a      	ldr	r3, [pc, #296]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	430b      	orrs	r3, r1
 8003508:	4944      	ldr	r1, [pc, #272]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 800350a:	4313      	orrs	r3, r2
 800350c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d17d      	bne.n	8003610 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003514:	4b41      	ldr	r3, [pc, #260]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a40      	ldr	r2, [pc, #256]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800351e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003520:	f7fe fade 	bl	8001ae0 <HAL_GetTick>
 8003524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003526:	e009      	b.n	800353c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003528:	f7fe fada 	bl	8001ae0 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d902      	bls.n	800353c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	73fb      	strb	r3, [r7, #15]
        break;
 800353a:	e005      	b.n	8003548 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800353c:	4b37      	ldr	r3, [pc, #220]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ef      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d160      	bne.n	8003610 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003554:	4b31      	ldr	r3, [pc, #196]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800355c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6892      	ldr	r2, [r2, #8]
 8003564:	0211      	lsls	r1, r2, #8
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68d2      	ldr	r2, [r2, #12]
 800356a:	0912      	lsrs	r2, r2, #4
 800356c:	0452      	lsls	r2, r2, #17
 800356e:	430a      	orrs	r2, r1
 8003570:	492a      	ldr	r1, [pc, #168]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	610b      	str	r3, [r1, #16]
 8003576:	e027      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d112      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800357e:	4b27      	ldr	r3, [pc, #156]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003586:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6892      	ldr	r2, [r2, #8]
 800358e:	0211      	lsls	r1, r2, #8
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6912      	ldr	r2, [r2, #16]
 8003594:	0852      	lsrs	r2, r2, #1
 8003596:	3a01      	subs	r2, #1
 8003598:	0552      	lsls	r2, r2, #21
 800359a:	430a      	orrs	r2, r1
 800359c:	491f      	ldr	r1, [pc, #124]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	610b      	str	r3, [r1, #16]
 80035a2:	e011      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a4:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6892      	ldr	r2, [r2, #8]
 80035b4:	0211      	lsls	r1, r2, #8
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6952      	ldr	r2, [r2, #20]
 80035ba:	0852      	lsrs	r2, r2, #1
 80035bc:	3a01      	subs	r2, #1
 80035be:	0652      	lsls	r2, r2, #25
 80035c0:	430a      	orrs	r2, r1
 80035c2:	4916      	ldr	r1, [pc, #88]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035c8:	4b14      	ldr	r3, [pc, #80]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a13      	ldr	r2, [pc, #76]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fe fa84 	bl	8001ae0 <HAL_GetTick>
 80035d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035da:	e009      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035dc:	f7fe fa80 	bl	8001ae0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d902      	bls.n	80035f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	73fb      	strb	r3, [r7, #15]
          break;
 80035ee:	e005      	b.n	80035fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ef      	beq.n	80035dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003602:	4b06      	ldr	r3, [pc, #24]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	4904      	ldr	r1, [pc, #16]	@ (800361c <RCCEx_PLLSAI1_Config+0x1e4>)
 800360c:	4313      	orrs	r3, r2
 800360e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000

08003620 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800362e:	4b6a      	ldr	r3, [pc, #424]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800363a:	4b67      	ldr	r3, [pc, #412]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0203 	and.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d10d      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
       ||
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003652:	4b61      	ldr	r3, [pc, #388]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
       ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d047      	beq.n	80036f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	e044      	b.n	80036f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d018      	beq.n	80036a6 <RCCEx_PLLSAI2_Config+0x86>
 8003674:	2b03      	cmp	r3, #3
 8003676:	d825      	bhi.n	80036c4 <RCCEx_PLLSAI2_Config+0xa4>
 8003678:	2b01      	cmp	r3, #1
 800367a:	d002      	beq.n	8003682 <RCCEx_PLLSAI2_Config+0x62>
 800367c:	2b02      	cmp	r3, #2
 800367e:	d009      	beq.n	8003694 <RCCEx_PLLSAI2_Config+0x74>
 8003680:	e020      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003682:	4b55      	ldr	r3, [pc, #340]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d11d      	bne.n	80036ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003692:	e01a      	b.n	80036ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003694:	4b50      	ldr	r3, [pc, #320]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d116      	bne.n	80036ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e013      	b.n	80036ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036a6:	4b4c      	ldr	r3, [pc, #304]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10f      	bne.n	80036d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036b2:	4b49      	ldr	r3, [pc, #292]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036c2:	e006      	b.n	80036d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      break;
 80036c8:	e004      	b.n	80036d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036da:	4b3f      	ldr	r3, [pc, #252]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	430b      	orrs	r3, r1
 80036f0:	4939      	ldr	r1, [pc, #228]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d167      	bne.n	80037cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036fc:	4b36      	ldr	r3, [pc, #216]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a35      	ldr	r2, [pc, #212]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fe f9ea 	bl	8001ae0 <HAL_GetTick>
 800370c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800370e:	e009      	b.n	8003724 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003710:	f7fe f9e6 	bl	8001ae0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d902      	bls.n	8003724 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	73fb      	strb	r3, [r7, #15]
        break;
 8003722:	e005      	b.n	8003730 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003724:	4b2c      	ldr	r3, [pc, #176]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ef      	bne.n	8003710 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d14a      	bne.n	80037cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d111      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800373c:	4b26      	ldr	r3, [pc, #152]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6892      	ldr	r2, [r2, #8]
 800374c:	0211      	lsls	r1, r2, #8
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	0912      	lsrs	r2, r2, #4
 8003754:	0452      	lsls	r2, r2, #17
 8003756:	430a      	orrs	r2, r1
 8003758:	491f      	ldr	r1, [pc, #124]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	614b      	str	r3, [r1, #20]
 800375e:	e011      	b.n	8003784 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003760:	4b1d      	ldr	r3, [pc, #116]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003768:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6892      	ldr	r2, [r2, #8]
 8003770:	0211      	lsls	r1, r2, #8
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6912      	ldr	r2, [r2, #16]
 8003776:	0852      	lsrs	r2, r2, #1
 8003778:	3a01      	subs	r2, #1
 800377a:	0652      	lsls	r2, r2, #25
 800377c:	430a      	orrs	r2, r1
 800377e:	4916      	ldr	r1, [pc, #88]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003784:	4b14      	ldr	r3, [pc, #80]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a13      	ldr	r2, [pc, #76]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800378e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fe f9a6 	bl	8001ae0 <HAL_GetTick>
 8003794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003796:	e009      	b.n	80037ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003798:	f7fe f9a2 	bl	8001ae0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d902      	bls.n	80037ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	73fb      	strb	r3, [r7, #15]
          break;
 80037aa:	e005      	b.n	80037b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ac:	4b0a      	ldr	r3, [pc, #40]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	4904      	ldr	r1, [pc, #16]	@ (80037d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000

080037dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e049      	b.n	8003882 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fe82 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 fbe4 	bl	8003fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d001      	beq.n	80038a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e047      	b.n	8003934 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a23      	ldr	r2, [pc, #140]	@ (8003940 <HAL_TIM_Base_Start+0xb4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_TIM_Base_Start+0x66>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038be:	d018      	beq.n	80038f2 <HAL_TIM_Base_Start+0x66>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003944 <HAL_TIM_Base_Start+0xb8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_TIM_Base_Start+0x66>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003948 <HAL_TIM_Base_Start+0xbc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_TIM_Base_Start+0x66>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <HAL_TIM_Base_Start+0xc0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_TIM_Base_Start+0x66>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003950 <HAL_TIM_Base_Start+0xc4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_TIM_Base_Start+0x66>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a19      	ldr	r2, [pc, #100]	@ (8003954 <HAL_TIM_Base_Start+0xc8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d115      	bne.n	800391e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	4b17      	ldr	r3, [pc, #92]	@ (8003958 <HAL_TIM_Base_Start+0xcc>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b06      	cmp	r3, #6
 8003902:	d015      	beq.n	8003930 <HAL_TIM_Base_Start+0xa4>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390a:	d011      	beq.n	8003930 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391c:	e008      	b.n	8003930 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e000      	b.n	8003932 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800
 800394c:	40000c00 	.word	0x40000c00
 8003950:	40013400 	.word	0x40013400
 8003954:	40014000 	.word	0x40014000
 8003958:	00010007 	.word	0x00010007

0800395c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e049      	b.n	8003a02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f841 	bl	8003a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 fb24 	bl	8003fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_TIM_PWM_Start+0x24>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e03c      	b.n	8003abe <HAL_TIM_PWM_Start+0x9e>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d109      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x3e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	e02f      	b.n	8003abe <HAL_TIM_PWM_Start+0x9e>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d109      	bne.n	8003a78 <HAL_TIM_PWM_Start+0x58>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e022      	b.n	8003abe <HAL_TIM_PWM_Start+0x9e>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d109      	bne.n	8003a92 <HAL_TIM_PWM_Start+0x72>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	e015      	b.n	8003abe <HAL_TIM_PWM_Start+0x9e>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d109      	bne.n	8003aac <HAL_TIM_PWM_Start+0x8c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	e008      	b.n	8003abe <HAL_TIM_PWM_Start+0x9e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e09c      	b.n	8003c00 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0xb6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ad4:	e023      	b.n	8003b1e <HAL_TIM_PWM_Start+0xfe>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d104      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0xc6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ae4:	e01b      	b.n	8003b1e <HAL_TIM_PWM_Start+0xfe>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_PWM_Start+0xd6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af4:	e013      	b.n	8003b1e <HAL_TIM_PWM_Start+0xfe>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_PWM_Start+0xe6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b04:	e00b      	b.n	8003b1e <HAL_TIM_PWM_Start+0xfe>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d104      	bne.n	8003b16 <HAL_TIM_PWM_Start+0xf6>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b14:	e003      	b.n	8003b1e <HAL_TIM_PWM_Start+0xfe>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fe74 	bl	8004814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a35      	ldr	r2, [pc, #212]	@ (8003c08 <HAL_TIM_PWM_Start+0x1e8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x13e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a34      	ldr	r2, [pc, #208]	@ (8003c0c <HAL_TIM_PWM_Start+0x1ec>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x13e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a32      	ldr	r2, [pc, #200]	@ (8003c10 <HAL_TIM_PWM_Start+0x1f0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x13e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a31      	ldr	r2, [pc, #196]	@ (8003c14 <HAL_TIM_PWM_Start+0x1f4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x13e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2f      	ldr	r2, [pc, #188]	@ (8003c18 <HAL_TIM_PWM_Start+0x1f8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_PWM_Start+0x142>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <HAL_TIM_PWM_Start+0x144>
 8003b62:	2300      	movs	r3, #0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a22      	ldr	r2, [pc, #136]	@ (8003c08 <HAL_TIM_PWM_Start+0x1e8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01d      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x19e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8a:	d018      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x19e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a22      	ldr	r2, [pc, #136]	@ (8003c1c <HAL_TIM_PWM_Start+0x1fc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x19e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a21      	ldr	r2, [pc, #132]	@ (8003c20 <HAL_TIM_PWM_Start+0x200>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x19e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c24 <HAL_TIM_PWM_Start+0x204>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x19e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a17      	ldr	r2, [pc, #92]	@ (8003c0c <HAL_TIM_PWM_Start+0x1ec>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x19e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <HAL_TIM_PWM_Start+0x1f0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d115      	bne.n	8003bea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	4b18      	ldr	r3, [pc, #96]	@ (8003c28 <HAL_TIM_PWM_Start+0x208>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b06      	cmp	r3, #6
 8003bce:	d015      	beq.n	8003bfc <HAL_TIM_PWM_Start+0x1dc>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd6:	d011      	beq.n	8003bfc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be8:	e008      	b.n	8003bfc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e000      	b.n	8003bfe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40013400 	.word	0x40013400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	00010007 	.word	0x00010007

08003c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0ff      	b.n	8003e4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b14      	cmp	r3, #20
 8003c56:	f200 80f0 	bhi.w	8003e3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003cb5 	.word	0x08003cb5
 8003c64:	08003e3b 	.word	0x08003e3b
 8003c68:	08003e3b 	.word	0x08003e3b
 8003c6c:	08003e3b 	.word	0x08003e3b
 8003c70:	08003cf5 	.word	0x08003cf5
 8003c74:	08003e3b 	.word	0x08003e3b
 8003c78:	08003e3b 	.word	0x08003e3b
 8003c7c:	08003e3b 	.word	0x08003e3b
 8003c80:	08003d37 	.word	0x08003d37
 8003c84:	08003e3b 	.word	0x08003e3b
 8003c88:	08003e3b 	.word	0x08003e3b
 8003c8c:	08003e3b 	.word	0x08003e3b
 8003c90:	08003d77 	.word	0x08003d77
 8003c94:	08003e3b 	.word	0x08003e3b
 8003c98:	08003e3b 	.word	0x08003e3b
 8003c9c:	08003e3b 	.word	0x08003e3b
 8003ca0:	08003db9 	.word	0x08003db9
 8003ca4:	08003e3b 	.word	0x08003e3b
 8003ca8:	08003e3b 	.word	0x08003e3b
 8003cac:	08003e3b 	.word	0x08003e3b
 8003cb0:	08003df9 	.word	0x08003df9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fa3a 	bl	8004134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0208 	orr.w	r2, r2, #8
 8003cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0204 	bic.w	r2, r2, #4
 8003cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6999      	ldr	r1, [r3, #24]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	619a      	str	r2, [r3, #24]
      break;
 8003cf2:	e0a5      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 faaa 	bl	8004254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	619a      	str	r2, [r3, #24]
      break;
 8003d34:	e084      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fb13 	bl	8004368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0208 	orr.w	r2, r2, #8
 8003d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0204 	bic.w	r2, r2, #4
 8003d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69d9      	ldr	r1, [r3, #28]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	61da      	str	r2, [r3, #28]
      break;
 8003d74:	e064      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fb7b 	bl	8004478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	021a      	lsls	r2, r3, #8
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	61da      	str	r2, [r3, #28]
      break;
 8003db6:	e043      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fbc4 	bl	800454c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0204 	bic.w	r2, r2, #4
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003df6:	e023      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fc08 	bl	8004614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	021a      	lsls	r2, r3, #8
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e38:	e002      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop

08003e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIM_ConfigClockSource+0x1c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e0b6      	b.n	8003fde <HAL_TIM_ConfigClockSource+0x18a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eac:	d03e      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0xd8>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eb2:	f200 8087 	bhi.w	8003fc4 <HAL_TIM_ConfigClockSource+0x170>
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eba:	f000 8086 	beq.w	8003fca <HAL_TIM_ConfigClockSource+0x176>
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec2:	d87f      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x170>
 8003ec4:	2b70      	cmp	r3, #112	@ 0x70
 8003ec6:	d01a      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xaa>
 8003ec8:	2b70      	cmp	r3, #112	@ 0x70
 8003eca:	d87b      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x170>
 8003ecc:	2b60      	cmp	r3, #96	@ 0x60
 8003ece:	d050      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x11e>
 8003ed0:	2b60      	cmp	r3, #96	@ 0x60
 8003ed2:	d877      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x170>
 8003ed4:	2b50      	cmp	r3, #80	@ 0x50
 8003ed6:	d03c      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0xfe>
 8003ed8:	2b50      	cmp	r3, #80	@ 0x50
 8003eda:	d873      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x170>
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d058      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x13e>
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	d86f      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x170>
 8003ee4:	2b30      	cmp	r3, #48	@ 0x30
 8003ee6:	d064      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x15e>
 8003ee8:	2b30      	cmp	r3, #48	@ 0x30
 8003eea:	d86b      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x170>
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d060      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x15e>
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d867      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x170>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d05c      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x15e>
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d05a      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x15e>
 8003efc:	e062      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f0e:	f000 fc61 	bl	80047d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	609a      	str	r2, [r3, #8]
      break;
 8003f2a:	e04f      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f3c:	f000 fc4a 	bl	80047d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f4e:	609a      	str	r2, [r3, #8]
      break;
 8003f50:	e03c      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f000 fbbe 	bl	80046e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2150      	movs	r1, #80	@ 0x50
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fc17 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8003f70:	e02c      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 fbdd 	bl	800473e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2160      	movs	r1, #96	@ 0x60
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fc07 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8003f90:	e01c      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 fb9e 	bl	80046e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2140      	movs	r1, #64	@ 0x40
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fbf7 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e00c      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 fbee 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8003fc2:	e003      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc8:	e000      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a46      	ldr	r2, [pc, #280]	@ (8004114 <TIM_Base_SetConfig+0x12c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004006:	d00f      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a43      	ldr	r2, [pc, #268]	@ (8004118 <TIM_Base_SetConfig+0x130>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00b      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a42      	ldr	r2, [pc, #264]	@ (800411c <TIM_Base_SetConfig+0x134>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d007      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a41      	ldr	r2, [pc, #260]	@ (8004120 <TIM_Base_SetConfig+0x138>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a40      	ldr	r2, [pc, #256]	@ (8004124 <TIM_Base_SetConfig+0x13c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d108      	bne.n	800403a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a35      	ldr	r2, [pc, #212]	@ (8004114 <TIM_Base_SetConfig+0x12c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01f      	beq.n	8004082 <TIM_Base_SetConfig+0x9a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004048:	d01b      	beq.n	8004082 <TIM_Base_SetConfig+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a32      	ldr	r2, [pc, #200]	@ (8004118 <TIM_Base_SetConfig+0x130>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d017      	beq.n	8004082 <TIM_Base_SetConfig+0x9a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a31      	ldr	r2, [pc, #196]	@ (800411c <TIM_Base_SetConfig+0x134>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <TIM_Base_SetConfig+0x9a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a30      	ldr	r2, [pc, #192]	@ (8004120 <TIM_Base_SetConfig+0x138>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00f      	beq.n	8004082 <TIM_Base_SetConfig+0x9a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2f      	ldr	r2, [pc, #188]	@ (8004124 <TIM_Base_SetConfig+0x13c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0x9a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2e      	ldr	r2, [pc, #184]	@ (8004128 <TIM_Base_SetConfig+0x140>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0x9a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2d      	ldr	r2, [pc, #180]	@ (800412c <TIM_Base_SetConfig+0x144>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0x9a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <TIM_Base_SetConfig+0x148>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a16      	ldr	r2, [pc, #88]	@ (8004114 <TIM_Base_SetConfig+0x12c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00f      	beq.n	80040e0 <TIM_Base_SetConfig+0xf8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a18      	ldr	r2, [pc, #96]	@ (8004124 <TIM_Base_SetConfig+0x13c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0xf8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a17      	ldr	r2, [pc, #92]	@ (8004128 <TIM_Base_SetConfig+0x140>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0xf8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a16      	ldr	r2, [pc, #88]	@ (800412c <TIM_Base_SetConfig+0x144>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0xf8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a15      	ldr	r2, [pc, #84]	@ (8004130 <TIM_Base_SetConfig+0x148>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d105      	bne.n	8004106 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f023 0201 	bic.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]
  }
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40013400 	.word	0x40013400
 8004128:	40014000 	.word	0x40014000
 800412c:	40014400 	.word	0x40014400
 8004130:	40014800 	.word	0x40014800

08004134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f023 0201 	bic.w	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f023 0302 	bic.w	r3, r3, #2
 8004180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a2c      	ldr	r2, [pc, #176]	@ (8004240 <TIM_OC1_SetConfig+0x10c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00f      	beq.n	80041b4 <TIM_OC1_SetConfig+0x80>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2b      	ldr	r2, [pc, #172]	@ (8004244 <TIM_OC1_SetConfig+0x110>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00b      	beq.n	80041b4 <TIM_OC1_SetConfig+0x80>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a2a      	ldr	r2, [pc, #168]	@ (8004248 <TIM_OC1_SetConfig+0x114>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <TIM_OC1_SetConfig+0x80>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a29      	ldr	r2, [pc, #164]	@ (800424c <TIM_OC1_SetConfig+0x118>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC1_SetConfig+0x80>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a28      	ldr	r2, [pc, #160]	@ (8004250 <TIM_OC1_SetConfig+0x11c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10c      	bne.n	80041ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0308 	bic.w	r3, r3, #8
 80041ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004240 <TIM_OC1_SetConfig+0x10c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00f      	beq.n	80041f6 <TIM_OC1_SetConfig+0xc2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004244 <TIM_OC1_SetConfig+0x110>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <TIM_OC1_SetConfig+0xc2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a19      	ldr	r2, [pc, #100]	@ (8004248 <TIM_OC1_SetConfig+0x114>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_OC1_SetConfig+0xc2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a18      	ldr	r2, [pc, #96]	@ (800424c <TIM_OC1_SetConfig+0x118>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_OC1_SetConfig+0xc2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a17      	ldr	r2, [pc, #92]	@ (8004250 <TIM_OC1_SetConfig+0x11c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d111      	bne.n	800421a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	621a      	str	r2, [r3, #32]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40013400 	.word	0x40013400
 8004248:	40014000 	.word	0x40014000
 800424c:	40014400 	.word	0x40014400
 8004250:	40014800 	.word	0x40014800

08004254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f023 0210 	bic.w	r2, r3, #16
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800428e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0320 	bic.w	r3, r3, #32
 80042a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a28      	ldr	r2, [pc, #160]	@ (8004354 <TIM_OC2_SetConfig+0x100>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_OC2_SetConfig+0x6c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a27      	ldr	r2, [pc, #156]	@ (8004358 <TIM_OC2_SetConfig+0x104>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10d      	bne.n	80042dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a1d      	ldr	r2, [pc, #116]	@ (8004354 <TIM_OC2_SetConfig+0x100>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00f      	beq.n	8004304 <TIM_OC2_SetConfig+0xb0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004358 <TIM_OC2_SetConfig+0x104>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00b      	beq.n	8004304 <TIM_OC2_SetConfig+0xb0>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <TIM_OC2_SetConfig+0x108>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_OC2_SetConfig+0xb0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004360 <TIM_OC2_SetConfig+0x10c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_OC2_SetConfig+0xb0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a19      	ldr	r2, [pc, #100]	@ (8004364 <TIM_OC2_SetConfig+0x110>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d113      	bne.n	800432c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800430a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40013400 	.word	0x40013400
 800435c:	40014000 	.word	0x40014000
 8004360:	40014400 	.word	0x40014400
 8004364:	40014800 	.word	0x40014800

08004368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a27      	ldr	r2, [pc, #156]	@ (8004464 <TIM_OC3_SetConfig+0xfc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_OC3_SetConfig+0x6a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a26      	ldr	r2, [pc, #152]	@ (8004468 <TIM_OC3_SetConfig+0x100>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10d      	bne.n	80043ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <TIM_OC3_SetConfig+0xfc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00f      	beq.n	8004416 <TIM_OC3_SetConfig+0xae>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004468 <TIM_OC3_SetConfig+0x100>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <TIM_OC3_SetConfig+0xae>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1a      	ldr	r2, [pc, #104]	@ (800446c <TIM_OC3_SetConfig+0x104>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <TIM_OC3_SetConfig+0xae>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a19      	ldr	r2, [pc, #100]	@ (8004470 <TIM_OC3_SetConfig+0x108>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_OC3_SetConfig+0xae>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a18      	ldr	r2, [pc, #96]	@ (8004474 <TIM_OC3_SetConfig+0x10c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d113      	bne.n	800443e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40014000 	.word	0x40014000
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800

08004478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	031b      	lsls	r3, r3, #12
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a18      	ldr	r2, [pc, #96]	@ (8004538 <TIM_OC4_SetConfig+0xc0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00f      	beq.n	80044fc <TIM_OC4_SetConfig+0x84>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a17      	ldr	r2, [pc, #92]	@ (800453c <TIM_OC4_SetConfig+0xc4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00b      	beq.n	80044fc <TIM_OC4_SetConfig+0x84>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a16      	ldr	r2, [pc, #88]	@ (8004540 <TIM_OC4_SetConfig+0xc8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <TIM_OC4_SetConfig+0x84>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a15      	ldr	r2, [pc, #84]	@ (8004544 <TIM_OC4_SetConfig+0xcc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_OC4_SetConfig+0x84>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a14      	ldr	r2, [pc, #80]	@ (8004548 <TIM_OC4_SetConfig+0xd0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d109      	bne.n	8004510 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40012c00 	.word	0x40012c00
 800453c:	40013400 	.word	0x40013400
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800

0800454c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800457a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <TIM_OC5_SetConfig+0xb4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <TIM_OC5_SetConfig+0x7a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <TIM_OC5_SetConfig+0xb8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_OC5_SetConfig+0x7a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <TIM_OC5_SetConfig+0xbc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_OC5_SetConfig+0x7a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a14      	ldr	r2, [pc, #80]	@ (800460c <TIM_OC5_SetConfig+0xc0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_OC5_SetConfig+0x7a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a13      	ldr	r2, [pc, #76]	@ (8004610 <TIM_OC5_SetConfig+0xc4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d109      	bne.n	80045da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	621a      	str	r2, [r3, #32]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40013400 	.word	0x40013400
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800

08004614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800465a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	051b      	lsls	r3, r3, #20
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a18      	ldr	r2, [pc, #96]	@ (80046cc <TIM_OC6_SetConfig+0xb8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00f      	beq.n	8004690 <TIM_OC6_SetConfig+0x7c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a17      	ldr	r2, [pc, #92]	@ (80046d0 <TIM_OC6_SetConfig+0xbc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00b      	beq.n	8004690 <TIM_OC6_SetConfig+0x7c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a16      	ldr	r2, [pc, #88]	@ (80046d4 <TIM_OC6_SetConfig+0xc0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_OC6_SetConfig+0x7c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <TIM_OC6_SetConfig+0xc4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC6_SetConfig+0x7c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <TIM_OC6_SetConfig+0xc8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40013400 	.word	0x40013400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800

080046e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0201 	bic.w	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800470a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f023 030a 	bic.w	r3, r3, #10
 800471c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473e:	b480      	push	{r7}
 8004740:	b087      	sub	sp, #28
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f023 0210 	bic.w	r2, r3, #16
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	031b      	lsls	r3, r3, #12
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800477a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f043 0307 	orr.w	r3, r3, #7
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	021a      	lsls	r2, r3, #8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	609a      	str	r2, [r3, #8]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2201      	movs	r2, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1a      	ldr	r2, [r3, #32]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	43db      	mvns	r3, r3
 8004836:	401a      	ands	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	431a      	orrs	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004874:	2302      	movs	r3, #2
 8004876:	e068      	b.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2e      	ldr	r2, [pc, #184]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2d      	ldr	r2, [pc, #180]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d108      	bne.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80048b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01d      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ea:	d018      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a18      	ldr	r2, [pc, #96]	@ (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a13      	ldr	r2, [pc, #76]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a14      	ldr	r2, [pc, #80]	@ (800496c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10c      	bne.n	8004938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	4313      	orrs	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40013400 	.word	0x40013400
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40014000 	.word	0x40014000

08004970 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004988:	2302      	movs	r3, #2
 800498a:	e065      	b.n	8004a58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a16      	ldr	r2, [pc, #88]	@ (8004a64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a14      	ldr	r2, [pc, #80]	@ (8004a68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d115      	bne.n	8004a46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	051b      	lsls	r3, r3, #20
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40013400 	.word	0x40013400

08004a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e040      	b.n	8004b00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc fdf2 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2224      	movs	r2, #36	@ 0x24
 8004a98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fee6 	bl	8005884 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fc2b 	bl	8005314 <UART_SetConfig>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e01b      	b.n	8004b00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 ff65 	bl	80059c8 <UART_CheckIdleState>
 8004afe:	4603      	mov	r3, r0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	@ 0x28
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	4613      	mov	r3, r2
 8004b16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d177      	bne.n	8004c10 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_UART_Transmit+0x24>
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e070      	b.n	8004c12 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2221      	movs	r2, #33	@ 0x21
 8004b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3e:	f7fc ffcf 	bl	8001ae0 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b5c:	d108      	bne.n	8004b70 <HAL_UART_Transmit+0x68>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d104      	bne.n	8004b70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	e003      	b.n	8004b78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b78:	e02f      	b.n	8004bda <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	2180      	movs	r1, #128	@ 0x80
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 ffc7 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e03b      	b.n	8004c12 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	881a      	ldrh	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bac:	b292      	uxth	r2, r2
 8004bae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	e007      	b.n	8004bc8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	781a      	ldrb	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1c9      	bne.n	8004b7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	2140      	movs	r1, #64	@ 0x40
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 ff91 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e005      	b.n	8004c12 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	@ 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d137      	bne.n	8004ca4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_UART_Receive_IT+0x24>
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e030      	b.n	8004ca6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a18      	ldr	r2, [pc, #96]	@ (8004cb0 <HAL_UART_Receive_IT+0x94>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d01f      	beq.n	8004c94 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d018      	beq.n	8004c94 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	623b      	str	r3, [r7, #32]
 8004c82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	69f9      	ldr	r1, [r7, #28]
 8004c86:	6a3a      	ldr	r2, [r7, #32]
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e6      	bne.n	8004c62 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	461a      	mov	r2, r3
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 ffaa 	bl	8005bf4 <UART_Start_Receive_IT>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	e000      	b.n	8004ca6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3728      	adds	r7, #40	@ 0x28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40008000 	.word	0x40008000

08004cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b0ba      	sub	sp, #232	@ 0xe8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004cde:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d115      	bne.n	8004d1c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00f      	beq.n	8004d1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 82ca 	beq.w	80052a6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4798      	blx	r3
      }
      return;
 8004d1a:	e2c4      	b.n	80052a6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8117 	beq.w	8004f54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004d36:	4b85      	ldr	r3, [pc, #532]	@ (8004f4c <HAL_UART_IRQHandler+0x298>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 810a 	beq.w	8004f54 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d011      	beq.n	8004d70 <HAL_UART_IRQHandler+0xbc>
 8004d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00b      	beq.n	8004d70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d66:	f043 0201 	orr.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d011      	beq.n	8004da0 <HAL_UART_IRQHandler+0xec>
 8004d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00b      	beq.n	8004da0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d96:	f043 0204 	orr.w	r2, r3, #4
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d011      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x11c>
 8004dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dc6:	f043 0202 	orr.w	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d017      	beq.n	8004e0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e02:	f043 0208 	orr.w	r2, r3, #8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d012      	beq.n	8004e3e <HAL_UART_IRQHandler+0x18a>
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00c      	beq.n	8004e3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8230 	beq.w	80052aa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e86:	2b40      	cmp	r3, #64	@ 0x40
 8004e88:	d005      	beq.n	8004e96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04f      	beq.n	8004f36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 ff72 	bl	8005d80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea6:	2b40      	cmp	r3, #64	@ 0x40
 8004ea8:	d141      	bne.n	8004f2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004eda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1d9      	bne.n	8004eaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d013      	beq.n	8004f26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f02:	4a13      	ldr	r2, [pc, #76]	@ (8004f50 <HAL_UART_IRQHandler+0x29c>)
 8004f04:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fc ff43 	bl	8001d96 <HAL_DMA_Abort_IT>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d017      	beq.n	8004f46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f20:	4610      	mov	r0, r2
 8004f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	e00f      	b.n	8004f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f9de 	bl	80052e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	e00b      	b.n	8004f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9da 	bl	80052e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f34:	e007      	b.n	8004f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9d6 	bl	80052e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004f44:	e1b1      	b.n	80052aa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f46:	bf00      	nop
    return;
 8004f48:	e1af      	b.n	80052aa <HAL_UART_IRQHandler+0x5f6>
 8004f4a:	bf00      	nop
 8004f4c:	04000120 	.word	0x04000120
 8004f50:	08005e49 	.word	0x08005e49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 816a 	bne.w	8005232 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8163 	beq.w	8005232 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 815c 	beq.w	8005232 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2210      	movs	r2, #16
 8004f80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8c:	2b40      	cmp	r3, #64	@ 0x40
 8004f8e:	f040 80d4 	bne.w	800513a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80ad 	beq.w	8005102 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	f080 80a5 	bcs.w	8005102 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 8086 	bne.w	80050e0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005002:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800500a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1da      	bne.n	8004fd4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3308      	adds	r3, #8
 8005024:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800502e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005042:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005046:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800504a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e1      	bne.n	800501e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3308      	adds	r3, #8
 8005060:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800506a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800506c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005070:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3308      	adds	r3, #8
 800507a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800507e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005080:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005084:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800508c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e3      	bne.n	800505a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050b0:	f023 0310 	bic.w	r3, r3, #16
 80050b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e4      	bne.n	80050a0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fc fe1d 	bl	8001d1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f8fe 	bl	80052fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005100:	e0d5      	b.n	80052ae <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800510c:	429a      	cmp	r2, r3
 800510e:	f040 80ce 	bne.w	80052ae <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b20      	cmp	r3, #32
 8005120:	f040 80c5 	bne.w	80052ae <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f8e2 	bl	80052fc <HAL_UARTEx_RxEventCallback>
      return;
 8005138:	e0b9      	b.n	80052ae <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005146:	b29b      	uxth	r3, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80ab 	beq.w	80052b2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800515c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80a6 	beq.w	80052b2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005176:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800517a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005188:	647b      	str	r3, [r7, #68]	@ 0x44
 800518a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800518e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e4      	bne.n	8005166 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3308      	adds	r3, #8
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	623b      	str	r3, [r7, #32]
   return(result);
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80051c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e3      	bne.n	800519c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f023 0310 	bic.w	r3, r3, #16
 80051fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	69b9      	ldr	r1, [r7, #24]
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	617b      	str	r3, [r7, #20]
   return(result);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e4      	bne.n	80051e8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f866 	bl	80052fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005230:	e03f      	b.n	80052b2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00e      	beq.n	800525c <HAL_UART_IRQHandler+0x5a8>
 800523e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005252:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fff3 	bl	8006240 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800525a:	e02d      	b.n	80052b8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800525c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00e      	beq.n	8005286 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800526c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01c      	beq.n	80052b6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
    }
    return;
 8005284:	e017      	b.n	80052b6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d012      	beq.n	80052b8 <HAL_UART_IRQHandler+0x604>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fde8 	bl	8005e74 <UART_EndTransmit_IT>
    return;
 80052a4:	e008      	b.n	80052b8 <HAL_UART_IRQHandler+0x604>
      return;
 80052a6:	bf00      	nop
 80052a8:	e006      	b.n	80052b8 <HAL_UART_IRQHandler+0x604>
    return;
 80052aa:	bf00      	nop
 80052ac:	e004      	b.n	80052b8 <HAL_UART_IRQHandler+0x604>
      return;
 80052ae:	bf00      	nop
 80052b0:	e002      	b.n	80052b8 <HAL_UART_IRQHandler+0x604>
      return;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <HAL_UART_IRQHandler+0x604>
    return;
 80052b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80052b8:	37e8      	adds	r7, #232	@ 0xe8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop

080052c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005318:	b08a      	sub	sp, #40	@ 0x28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	431a      	orrs	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	431a      	orrs	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4313      	orrs	r3, r2
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4ba4      	ldr	r3, [pc, #656]	@ (80055d4 <UART_SetConfig+0x2c0>)
 8005344:	4013      	ands	r3, r2
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800534c:	430b      	orrs	r3, r1
 800534e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a99      	ldr	r2, [pc, #612]	@ (80055d8 <UART_SetConfig+0x2c4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800537c:	4313      	orrs	r3, r2
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005390:	430a      	orrs	r2, r1
 8005392:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a90      	ldr	r2, [pc, #576]	@ (80055dc <UART_SetConfig+0x2c8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d126      	bne.n	80053ec <UART_SetConfig+0xd8>
 800539e:	4b90      	ldr	r3, [pc, #576]	@ (80055e0 <UART_SetConfig+0x2cc>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d81b      	bhi.n	80053e4 <UART_SetConfig+0xd0>
 80053ac:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <UART_SetConfig+0xa0>)
 80053ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b2:	bf00      	nop
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	080053d5 	.word	0x080053d5
 80053bc:	080053cd 	.word	0x080053cd
 80053c0:	080053dd 	.word	0x080053dd
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ca:	e116      	b.n	80055fa <UART_SetConfig+0x2e6>
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053d2:	e112      	b.n	80055fa <UART_SetConfig+0x2e6>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053da:	e10e      	b.n	80055fa <UART_SetConfig+0x2e6>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e2:	e10a      	b.n	80055fa <UART_SetConfig+0x2e6>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ea:	e106      	b.n	80055fa <UART_SetConfig+0x2e6>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a7c      	ldr	r2, [pc, #496]	@ (80055e4 <UART_SetConfig+0x2d0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d138      	bne.n	8005468 <UART_SetConfig+0x154>
 80053f6:	4b7a      	ldr	r3, [pc, #488]	@ (80055e0 <UART_SetConfig+0x2cc>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f003 030c 	and.w	r3, r3, #12
 8005400:	2b0c      	cmp	r3, #12
 8005402:	d82d      	bhi.n	8005460 <UART_SetConfig+0x14c>
 8005404:	a201      	add	r2, pc, #4	@ (adr r2, 800540c <UART_SetConfig+0xf8>)
 8005406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540a:	bf00      	nop
 800540c:	08005441 	.word	0x08005441
 8005410:	08005461 	.word	0x08005461
 8005414:	08005461 	.word	0x08005461
 8005418:	08005461 	.word	0x08005461
 800541c:	08005451 	.word	0x08005451
 8005420:	08005461 	.word	0x08005461
 8005424:	08005461 	.word	0x08005461
 8005428:	08005461 	.word	0x08005461
 800542c:	08005449 	.word	0x08005449
 8005430:	08005461 	.word	0x08005461
 8005434:	08005461 	.word	0x08005461
 8005438:	08005461 	.word	0x08005461
 800543c:	08005459 	.word	0x08005459
 8005440:	2300      	movs	r3, #0
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005446:	e0d8      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005448:	2302      	movs	r3, #2
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544e:	e0d4      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005450:	2304      	movs	r3, #4
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005456:	e0d0      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005458:	2308      	movs	r3, #8
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800545e:	e0cc      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005460:	2310      	movs	r3, #16
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005466:	e0c8      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a5e      	ldr	r2, [pc, #376]	@ (80055e8 <UART_SetConfig+0x2d4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d125      	bne.n	80054be <UART_SetConfig+0x1aa>
 8005472:	4b5b      	ldr	r3, [pc, #364]	@ (80055e0 <UART_SetConfig+0x2cc>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005478:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800547c:	2b30      	cmp	r3, #48	@ 0x30
 800547e:	d016      	beq.n	80054ae <UART_SetConfig+0x19a>
 8005480:	2b30      	cmp	r3, #48	@ 0x30
 8005482:	d818      	bhi.n	80054b6 <UART_SetConfig+0x1a2>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d00a      	beq.n	800549e <UART_SetConfig+0x18a>
 8005488:	2b20      	cmp	r3, #32
 800548a:	d814      	bhi.n	80054b6 <UART_SetConfig+0x1a2>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <UART_SetConfig+0x182>
 8005490:	2b10      	cmp	r3, #16
 8005492:	d008      	beq.n	80054a6 <UART_SetConfig+0x192>
 8005494:	e00f      	b.n	80054b6 <UART_SetConfig+0x1a2>
 8005496:	2300      	movs	r3, #0
 8005498:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549c:	e0ad      	b.n	80055fa <UART_SetConfig+0x2e6>
 800549e:	2302      	movs	r3, #2
 80054a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a4:	e0a9      	b.n	80055fa <UART_SetConfig+0x2e6>
 80054a6:	2304      	movs	r3, #4
 80054a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ac:	e0a5      	b.n	80055fa <UART_SetConfig+0x2e6>
 80054ae:	2308      	movs	r3, #8
 80054b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b4:	e0a1      	b.n	80055fa <UART_SetConfig+0x2e6>
 80054b6:	2310      	movs	r3, #16
 80054b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054bc:	e09d      	b.n	80055fa <UART_SetConfig+0x2e6>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a4a      	ldr	r2, [pc, #296]	@ (80055ec <UART_SetConfig+0x2d8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d125      	bne.n	8005514 <UART_SetConfig+0x200>
 80054c8:	4b45      	ldr	r3, [pc, #276]	@ (80055e0 <UART_SetConfig+0x2cc>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80054d4:	d016      	beq.n	8005504 <UART_SetConfig+0x1f0>
 80054d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054d8:	d818      	bhi.n	800550c <UART_SetConfig+0x1f8>
 80054da:	2b80      	cmp	r3, #128	@ 0x80
 80054dc:	d00a      	beq.n	80054f4 <UART_SetConfig+0x1e0>
 80054de:	2b80      	cmp	r3, #128	@ 0x80
 80054e0:	d814      	bhi.n	800550c <UART_SetConfig+0x1f8>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <UART_SetConfig+0x1d8>
 80054e6:	2b40      	cmp	r3, #64	@ 0x40
 80054e8:	d008      	beq.n	80054fc <UART_SetConfig+0x1e8>
 80054ea:	e00f      	b.n	800550c <UART_SetConfig+0x1f8>
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f2:	e082      	b.n	80055fa <UART_SetConfig+0x2e6>
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fa:	e07e      	b.n	80055fa <UART_SetConfig+0x2e6>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005502:	e07a      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800550a:	e076      	b.n	80055fa <UART_SetConfig+0x2e6>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005512:	e072      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a35      	ldr	r2, [pc, #212]	@ (80055f0 <UART_SetConfig+0x2dc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d12a      	bne.n	8005574 <UART_SetConfig+0x260>
 800551e:	4b30      	ldr	r3, [pc, #192]	@ (80055e0 <UART_SetConfig+0x2cc>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005524:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800552c:	d01a      	beq.n	8005564 <UART_SetConfig+0x250>
 800552e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005532:	d81b      	bhi.n	800556c <UART_SetConfig+0x258>
 8005534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005538:	d00c      	beq.n	8005554 <UART_SetConfig+0x240>
 800553a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800553e:	d815      	bhi.n	800556c <UART_SetConfig+0x258>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <UART_SetConfig+0x238>
 8005544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005548:	d008      	beq.n	800555c <UART_SetConfig+0x248>
 800554a:	e00f      	b.n	800556c <UART_SetConfig+0x258>
 800554c:	2300      	movs	r3, #0
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005552:	e052      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005554:	2302      	movs	r3, #2
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800555a:	e04e      	b.n	80055fa <UART_SetConfig+0x2e6>
 800555c:	2304      	movs	r3, #4
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005562:	e04a      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005564:	2308      	movs	r3, #8
 8005566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800556a:	e046      	b.n	80055fa <UART_SetConfig+0x2e6>
 800556c:	2310      	movs	r3, #16
 800556e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005572:	e042      	b.n	80055fa <UART_SetConfig+0x2e6>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a17      	ldr	r2, [pc, #92]	@ (80055d8 <UART_SetConfig+0x2c4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d13a      	bne.n	80055f4 <UART_SetConfig+0x2e0>
 800557e:	4b18      	ldr	r3, [pc, #96]	@ (80055e0 <UART_SetConfig+0x2cc>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005588:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800558c:	d01a      	beq.n	80055c4 <UART_SetConfig+0x2b0>
 800558e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005592:	d81b      	bhi.n	80055cc <UART_SetConfig+0x2b8>
 8005594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005598:	d00c      	beq.n	80055b4 <UART_SetConfig+0x2a0>
 800559a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800559e:	d815      	bhi.n	80055cc <UART_SetConfig+0x2b8>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <UART_SetConfig+0x298>
 80055a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a8:	d008      	beq.n	80055bc <UART_SetConfig+0x2a8>
 80055aa:	e00f      	b.n	80055cc <UART_SetConfig+0x2b8>
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b2:	e022      	b.n	80055fa <UART_SetConfig+0x2e6>
 80055b4:	2302      	movs	r3, #2
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ba:	e01e      	b.n	80055fa <UART_SetConfig+0x2e6>
 80055bc:	2304      	movs	r3, #4
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c2:	e01a      	b.n	80055fa <UART_SetConfig+0x2e6>
 80055c4:	2308      	movs	r3, #8
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ca:	e016      	b.n	80055fa <UART_SetConfig+0x2e6>
 80055cc:	2310      	movs	r3, #16
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055d2:	e012      	b.n	80055fa <UART_SetConfig+0x2e6>
 80055d4:	efff69f3 	.word	0xefff69f3
 80055d8:	40008000 	.word	0x40008000
 80055dc:	40013800 	.word	0x40013800
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40004400 	.word	0x40004400
 80055e8:	40004800 	.word	0x40004800
 80055ec:	40004c00 	.word	0x40004c00
 80055f0:	40005000 	.word	0x40005000
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a9f      	ldr	r2, [pc, #636]	@ (800587c <UART_SetConfig+0x568>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d17a      	bne.n	80056fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005604:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005608:	2b08      	cmp	r3, #8
 800560a:	d824      	bhi.n	8005656 <UART_SetConfig+0x342>
 800560c:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <UART_SetConfig+0x300>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005639 	.word	0x08005639
 8005618:	08005657 	.word	0x08005657
 800561c:	08005641 	.word	0x08005641
 8005620:	08005657 	.word	0x08005657
 8005624:	08005647 	.word	0x08005647
 8005628:	08005657 	.word	0x08005657
 800562c:	08005657 	.word	0x08005657
 8005630:	08005657 	.word	0x08005657
 8005634:	0800564f 	.word	0x0800564f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fd fb88 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 800563c:	61f8      	str	r0, [r7, #28]
        break;
 800563e:	e010      	b.n	8005662 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005640:	4b8f      	ldr	r3, [pc, #572]	@ (8005880 <UART_SetConfig+0x56c>)
 8005642:	61fb      	str	r3, [r7, #28]
        break;
 8005644:	e00d      	b.n	8005662 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005646:	f7fd fae9 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 800564a:	61f8      	str	r0, [r7, #28]
        break;
 800564c:	e009      	b.n	8005662 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005652:	61fb      	str	r3, [r7, #28]
        break;
 8005654:	e005      	b.n	8005662 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005660:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80fb 	beq.w	8005860 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4413      	add	r3, r2
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	429a      	cmp	r2, r3
 8005678:	d305      	bcc.n	8005686 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	429a      	cmp	r2, r3
 8005684:	d903      	bls.n	800568e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800568c:	e0e8      	b.n	8005860 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	2200      	movs	r2, #0
 8005692:	461c      	mov	r4, r3
 8005694:	4615      	mov	r5, r2
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	022b      	lsls	r3, r5, #8
 80056a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056a4:	0222      	lsls	r2, r4, #8
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	6849      	ldr	r1, [r1, #4]
 80056aa:	0849      	lsrs	r1, r1, #1
 80056ac:	2000      	movs	r0, #0
 80056ae:	4688      	mov	r8, r1
 80056b0:	4681      	mov	r9, r0
 80056b2:	eb12 0a08 	adds.w	sl, r2, r8
 80056b6:	eb43 0b09 	adc.w	fp, r3, r9
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c8:	4650      	mov	r0, sl
 80056ca:	4659      	mov	r1, fp
 80056cc:	f7fb fa7c 	bl	8000bc8 <__aeabi_uldivmod>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4613      	mov	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056de:	d308      	bcc.n	80056f2 <UART_SetConfig+0x3de>
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056e6:	d204      	bcs.n	80056f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	e0b6      	b.n	8005860 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056f8:	e0b2      	b.n	8005860 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005702:	d15e      	bne.n	80057c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005704:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005708:	2b08      	cmp	r3, #8
 800570a:	d828      	bhi.n	800575e <UART_SetConfig+0x44a>
 800570c:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <UART_SetConfig+0x400>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	0800575f 	.word	0x0800575f
 8005724:	0800574f 	.word	0x0800574f
 8005728:	0800575f 	.word	0x0800575f
 800572c:	0800575f 	.word	0x0800575f
 8005730:	0800575f 	.word	0x0800575f
 8005734:	08005757 	.word	0x08005757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fd fb08 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 800573c:	61f8      	str	r0, [r7, #28]
        break;
 800573e:	e014      	b.n	800576a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005740:	f7fd fb1a 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8005744:	61f8      	str	r0, [r7, #28]
        break;
 8005746:	e010      	b.n	800576a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005748:	4b4d      	ldr	r3, [pc, #308]	@ (8005880 <UART_SetConfig+0x56c>)
 800574a:	61fb      	str	r3, [r7, #28]
        break;
 800574c:	e00d      	b.n	800576a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574e:	f7fd fa65 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8005752:	61f8      	str	r0, [r7, #28]
        break;
 8005754:	e009      	b.n	800576a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800575a:	61fb      	str	r3, [r7, #28]
        break;
 800575c:	e005      	b.n	800576a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d077      	beq.n	8005860 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	005a      	lsls	r2, r3, #1
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	085b      	lsrs	r3, r3, #1
 800577a:	441a      	add	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b0f      	cmp	r3, #15
 800578a:	d916      	bls.n	80057ba <UART_SetConfig+0x4a6>
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005792:	d212      	bcs.n	80057ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f023 030f 	bic.w	r3, r3, #15
 800579c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	8afb      	ldrh	r3, [r7, #22]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	8afa      	ldrh	r2, [r7, #22]
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	e052      	b.n	8005860 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057c0:	e04e      	b.n	8005860 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d827      	bhi.n	800581a <UART_SetConfig+0x506>
 80057ca:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <UART_SetConfig+0x4bc>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	080057f5 	.word	0x080057f5
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	08005805 	.word	0x08005805
 80057dc:	0800581b 	.word	0x0800581b
 80057e0:	0800580b 	.word	0x0800580b
 80057e4:	0800581b 	.word	0x0800581b
 80057e8:	0800581b 	.word	0x0800581b
 80057ec:	0800581b 	.word	0x0800581b
 80057f0:	08005813 	.word	0x08005813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f4:	f7fd faaa 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 80057f8:	61f8      	str	r0, [r7, #28]
        break;
 80057fa:	e014      	b.n	8005826 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057fc:	f7fd fabc 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8005800:	61f8      	str	r0, [r7, #28]
        break;
 8005802:	e010      	b.n	8005826 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005804:	4b1e      	ldr	r3, [pc, #120]	@ (8005880 <UART_SetConfig+0x56c>)
 8005806:	61fb      	str	r3, [r7, #28]
        break;
 8005808:	e00d      	b.n	8005826 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580a:	f7fd fa07 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 800580e:	61f8      	str	r0, [r7, #28]
        break;
 8005810:	e009      	b.n	8005826 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005816:	61fb      	str	r3, [r7, #28]
        break;
 8005818:	e005      	b.n	8005826 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005824:	bf00      	nop
    }

    if (pclk != 0U)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d019      	beq.n	8005860 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	085a      	lsrs	r2, r3, #1
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	441a      	add	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b0f      	cmp	r3, #15
 8005844:	d909      	bls.n	800585a <UART_SetConfig+0x546>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800584c:	d205      	bcs.n	800585a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60da      	str	r2, [r3, #12]
 8005858:	e002      	b.n	8005860 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800586c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005870:	4618      	mov	r0, r3
 8005872:	3728      	adds	r7, #40	@ 0x28
 8005874:	46bd      	mov	sp, r7
 8005876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800587a:	bf00      	nop
 800587c:	40008000 	.word	0x40008000
 8005880:	00f42400 	.word	0x00f42400

08005884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01a      	beq.n	800599a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005982:	d10a      	bne.n	800599a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  }
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b098      	sub	sp, #96	@ 0x60
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059d8:	f7fc f882 	bl	8001ae0 <HAL_GetTick>
 80059dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d12e      	bne.n	8005a4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f4:	2200      	movs	r2, #0
 80059f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f88c 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d021      	beq.n	8005a4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e6      	bne.n	8005a06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e062      	b.n	8005b10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d149      	bne.n	8005aec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a60:	2200      	movs	r2, #0
 8005a62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f856 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d03c      	beq.n	8005aec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e6      	bne.n	8005a72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac4:	61fa      	str	r2, [r7, #28]
 8005ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	69b9      	ldr	r1, [r7, #24]
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e011      	b.n	8005b10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3758      	adds	r7, #88	@ 0x58
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	e04f      	b.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d04b      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b32:	f7fb ffd5 	bl	8001ae0 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d302      	bcc.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e04e      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d037      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b80      	cmp	r3, #128	@ 0x80
 8005b5e:	d034      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b40      	cmp	r3, #64	@ 0x40
 8005b64:	d031      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d110      	bne.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2208      	movs	r2, #8
 8005b7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f8ff 	bl	8005d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2208      	movs	r2, #8
 8005b86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e029      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ba4:	d111      	bne.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f8e5 	bl	8005d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e00f      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	bf0c      	ite	eq
 8005bda:	2301      	moveq	r3, #1
 8005bdc:	2300      	movne	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d0a0      	beq.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b097      	sub	sp, #92	@ 0x5c
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c26:	d10e      	bne.n	8005c46 <UART_Start_Receive_IT+0x52>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <UART_Start_Receive_IT+0x48>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005c36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c3a:	e02d      	b.n	8005c98 <UART_Start_Receive_IT+0xa4>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	22ff      	movs	r2, #255	@ 0xff
 8005c40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c44:	e028      	b.n	8005c98 <UART_Start_Receive_IT+0xa4>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10d      	bne.n	8005c6a <UART_Start_Receive_IT+0x76>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <UART_Start_Receive_IT+0x6c>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	22ff      	movs	r2, #255	@ 0xff
 8005c5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c5e:	e01b      	b.n	8005c98 <UART_Start_Receive_IT+0xa4>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	227f      	movs	r2, #127	@ 0x7f
 8005c64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c68:	e016      	b.n	8005c98 <UART_Start_Receive_IT+0xa4>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c72:	d10d      	bne.n	8005c90 <UART_Start_Receive_IT+0x9c>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <UART_Start_Receive_IT+0x92>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	227f      	movs	r2, #127	@ 0x7f
 8005c80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c84:	e008      	b.n	8005c98 <UART_Start_Receive_IT+0xa4>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	223f      	movs	r2, #63	@ 0x3f
 8005c8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c8e:	e003      	b.n	8005c98 <UART_Start_Receive_IT+0xa4>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2222      	movs	r2, #34	@ 0x22
 8005ca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cc8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005cca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e5      	bne.n	8005ca8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce4:	d107      	bne.n	8005cf6 <UART_Start_Receive_IT+0x102>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4a21      	ldr	r2, [pc, #132]	@ (8005d78 <UART_Start_Receive_IT+0x184>)
 8005cf2:	669a      	str	r2, [r3, #104]	@ 0x68
 8005cf4:	e002      	b.n	8005cfc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a20      	ldr	r2, [pc, #128]	@ (8005d7c <UART_Start_Receive_IT+0x188>)
 8005cfa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d019      	beq.n	8005d38 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d24:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e6      	bne.n	8005d04 <UART_Start_Receive_IT+0x110>
 8005d36:	e018      	b.n	8005d6a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	613b      	str	r3, [r7, #16]
   return(result);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f043 0320 	orr.w	r3, r3, #32
 8005d4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d56:	623b      	str	r3, [r7, #32]
 8005d58:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	69f9      	ldr	r1, [r7, #28]
 8005d5c:	6a3a      	ldr	r2, [r7, #32]
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e6      	bne.n	8005d38 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	375c      	adds	r7, #92	@ 0x5c
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	08006085 	.word	0x08006085
 8005d7c:	08005ec9 	.word	0x08005ec9

08005d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b095      	sub	sp, #84	@ 0x54
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e6      	bne.n	8005d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e5      	bne.n	8005dba <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d118      	bne.n	8005e28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f023 0310 	bic.w	r3, r3, #16
 8005e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6979      	ldr	r1, [r7, #20]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	613b      	str	r3, [r7, #16]
   return(result);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e3c:	bf00      	nop
 8005e3e:	3754      	adds	r7, #84	@ 0x54
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff fa3e 	bl	80052e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e90:	61fb      	str	r3, [r7, #28]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6979      	ldr	r1, [r7, #20]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e6      	bne.n	8005e7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff fa00 	bl	80052c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec0:	bf00      	nop
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b09c      	sub	sp, #112	@ 0x70
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ed6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ee0:	2b22      	cmp	r3, #34	@ 0x22
 8005ee2:	f040 80be 	bne.w	8006062 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005eec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ef0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ef4:	b2d9      	uxtb	r1, r3
 8005ef6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f00:	400a      	ands	r2, r1
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 80a3 	bne.w	8006076 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e6      	bne.n	8005f30 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3308      	adds	r3, #8
 8005f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f82:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e5      	bne.n	8005f62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a34      	ldr	r2, [pc, #208]	@ (8006080 <UART_RxISR_8BIT+0x1b8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d01f      	beq.n	8005ff4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d018      	beq.n	8005ff4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	623b      	str	r3, [r7, #32]
   return(result);
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fe2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e6      	bne.n	8005fc2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d12e      	bne.n	800605a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0310 	bic.w	r3, r3, #16
 8006016:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	69b9      	ldr	r1, [r7, #24]
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	617b      	str	r3, [r7, #20]
   return(result);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b10      	cmp	r3, #16
 8006040:	d103      	bne.n	800604a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2210      	movs	r2, #16
 8006048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff f952 	bl	80052fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006058:	e00d      	b.n	8006076 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff f93a 	bl	80052d4 <HAL_UART_RxCpltCallback>
}
 8006060:	e009      	b.n	8006076 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	8b1b      	ldrh	r3, [r3, #24]
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0208 	orr.w	r2, r2, #8
 8006072:	b292      	uxth	r2, r2
 8006074:	831a      	strh	r2, [r3, #24]
}
 8006076:	bf00      	nop
 8006078:	3770      	adds	r7, #112	@ 0x70
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40008000 	.word	0x40008000

08006084 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b09c      	sub	sp, #112	@ 0x70
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006092:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800609c:	2b22      	cmp	r3, #34	@ 0x22
 800609e:	f040 80be 	bne.w	800621e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80060a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80060b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80060b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80060ba:	4013      	ands	r3, r2
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c6:	1c9a      	adds	r2, r3, #2
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 80a3 	bne.w	8006232 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80060fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006100:	667b      	str	r3, [r7, #100]	@ 0x64
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800610a:	657b      	str	r3, [r7, #84]	@ 0x54
 800610c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006110:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e6      	bne.n	80060ec <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3308      	adds	r3, #8
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	663b      	str	r3, [r7, #96]	@ 0x60
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800613e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006144:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a34      	ldr	r2, [pc, #208]	@ (800623c <UART_RxISR_16BIT+0x1b8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d01f      	beq.n	80061b0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d018      	beq.n	80061b0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	61fb      	str	r3, [r7, #28]
   return(result);
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800619c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800619e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e6      	bne.n	800617e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d12e      	bne.n	8006216 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f023 0310 	bic.w	r3, r3, #16
 80061d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	6979      	ldr	r1, [r7, #20]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	613b      	str	r3, [r7, #16]
   return(result);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e6      	bne.n	80061be <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	d103      	bne.n	8006206 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2210      	movs	r2, #16
 8006204:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff f874 	bl	80052fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006214:	e00d      	b.n	8006232 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff f85c 	bl	80052d4 <HAL_UART_RxCpltCallback>
}
 800621c:	e009      	b.n	8006232 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	8b1b      	ldrh	r3, [r3, #24]
 8006224:	b29a      	uxth	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0208 	orr.w	r2, r2, #8
 800622e:	b292      	uxth	r2, r2
 8006230:	831a      	strh	r2, [r3, #24]
}
 8006232:	bf00      	nop
 8006234:	3770      	adds	r7, #112	@ 0x70
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40008000 	.word	0x40008000

08006240 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <__cvt>:
 8006254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	ec57 6b10 	vmov	r6, r7, d0
 800625c:	2f00      	cmp	r7, #0
 800625e:	460c      	mov	r4, r1
 8006260:	4619      	mov	r1, r3
 8006262:	463b      	mov	r3, r7
 8006264:	bfbb      	ittet	lt
 8006266:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800626a:	461f      	movlt	r7, r3
 800626c:	2300      	movge	r3, #0
 800626e:	232d      	movlt	r3, #45	@ 0x2d
 8006270:	700b      	strb	r3, [r1, #0]
 8006272:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006274:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006278:	4691      	mov	r9, r2
 800627a:	f023 0820 	bic.w	r8, r3, #32
 800627e:	bfbc      	itt	lt
 8006280:	4632      	movlt	r2, r6
 8006282:	4616      	movlt	r6, r2
 8006284:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006288:	d005      	beq.n	8006296 <__cvt+0x42>
 800628a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800628e:	d100      	bne.n	8006292 <__cvt+0x3e>
 8006290:	3401      	adds	r4, #1
 8006292:	2102      	movs	r1, #2
 8006294:	e000      	b.n	8006298 <__cvt+0x44>
 8006296:	2103      	movs	r1, #3
 8006298:	ab03      	add	r3, sp, #12
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	ab02      	add	r3, sp, #8
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	ec47 6b10 	vmov	d0, r6, r7
 80062a4:	4653      	mov	r3, sl
 80062a6:	4622      	mov	r2, r4
 80062a8:	f000 fe4e 	bl	8006f48 <_dtoa_r>
 80062ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80062b0:	4605      	mov	r5, r0
 80062b2:	d119      	bne.n	80062e8 <__cvt+0x94>
 80062b4:	f019 0f01 	tst.w	r9, #1
 80062b8:	d00e      	beq.n	80062d8 <__cvt+0x84>
 80062ba:	eb00 0904 	add.w	r9, r0, r4
 80062be:	2200      	movs	r2, #0
 80062c0:	2300      	movs	r3, #0
 80062c2:	4630      	mov	r0, r6
 80062c4:	4639      	mov	r1, r7
 80062c6:	f7fa fc0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80062ca:	b108      	cbz	r0, 80062d0 <__cvt+0x7c>
 80062cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80062d0:	2230      	movs	r2, #48	@ 0x30
 80062d2:	9b03      	ldr	r3, [sp, #12]
 80062d4:	454b      	cmp	r3, r9
 80062d6:	d31e      	bcc.n	8006316 <__cvt+0xc2>
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062dc:	1b5b      	subs	r3, r3, r5
 80062de:	4628      	mov	r0, r5
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	b004      	add	sp, #16
 80062e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062ec:	eb00 0904 	add.w	r9, r0, r4
 80062f0:	d1e5      	bne.n	80062be <__cvt+0x6a>
 80062f2:	7803      	ldrb	r3, [r0, #0]
 80062f4:	2b30      	cmp	r3, #48	@ 0x30
 80062f6:	d10a      	bne.n	800630e <__cvt+0xba>
 80062f8:	2200      	movs	r2, #0
 80062fa:	2300      	movs	r3, #0
 80062fc:	4630      	mov	r0, r6
 80062fe:	4639      	mov	r1, r7
 8006300:	f7fa fbf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006304:	b918      	cbnz	r0, 800630e <__cvt+0xba>
 8006306:	f1c4 0401 	rsb	r4, r4, #1
 800630a:	f8ca 4000 	str.w	r4, [sl]
 800630e:	f8da 3000 	ldr.w	r3, [sl]
 8006312:	4499      	add	r9, r3
 8006314:	e7d3      	b.n	80062be <__cvt+0x6a>
 8006316:	1c59      	adds	r1, r3, #1
 8006318:	9103      	str	r1, [sp, #12]
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	e7d9      	b.n	80062d2 <__cvt+0x7e>

0800631e <__exponent>:
 800631e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006320:	2900      	cmp	r1, #0
 8006322:	bfba      	itte	lt
 8006324:	4249      	neglt	r1, r1
 8006326:	232d      	movlt	r3, #45	@ 0x2d
 8006328:	232b      	movge	r3, #43	@ 0x2b
 800632a:	2909      	cmp	r1, #9
 800632c:	7002      	strb	r2, [r0, #0]
 800632e:	7043      	strb	r3, [r0, #1]
 8006330:	dd29      	ble.n	8006386 <__exponent+0x68>
 8006332:	f10d 0307 	add.w	r3, sp, #7
 8006336:	461d      	mov	r5, r3
 8006338:	270a      	movs	r7, #10
 800633a:	461a      	mov	r2, r3
 800633c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006340:	fb07 1416 	mls	r4, r7, r6, r1
 8006344:	3430      	adds	r4, #48	@ 0x30
 8006346:	f802 4c01 	strb.w	r4, [r2, #-1]
 800634a:	460c      	mov	r4, r1
 800634c:	2c63      	cmp	r4, #99	@ 0x63
 800634e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006352:	4631      	mov	r1, r6
 8006354:	dcf1      	bgt.n	800633a <__exponent+0x1c>
 8006356:	3130      	adds	r1, #48	@ 0x30
 8006358:	1e94      	subs	r4, r2, #2
 800635a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800635e:	1c41      	adds	r1, r0, #1
 8006360:	4623      	mov	r3, r4
 8006362:	42ab      	cmp	r3, r5
 8006364:	d30a      	bcc.n	800637c <__exponent+0x5e>
 8006366:	f10d 0309 	add.w	r3, sp, #9
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	42ac      	cmp	r4, r5
 800636e:	bf88      	it	hi
 8006370:	2300      	movhi	r3, #0
 8006372:	3302      	adds	r3, #2
 8006374:	4403      	add	r3, r0
 8006376:	1a18      	subs	r0, r3, r0
 8006378:	b003      	add	sp, #12
 800637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800637c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006380:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006384:	e7ed      	b.n	8006362 <__exponent+0x44>
 8006386:	2330      	movs	r3, #48	@ 0x30
 8006388:	3130      	adds	r1, #48	@ 0x30
 800638a:	7083      	strb	r3, [r0, #2]
 800638c:	70c1      	strb	r1, [r0, #3]
 800638e:	1d03      	adds	r3, r0, #4
 8006390:	e7f1      	b.n	8006376 <__exponent+0x58>
	...

08006394 <_printf_float>:
 8006394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	b08d      	sub	sp, #52	@ 0x34
 800639a:	460c      	mov	r4, r1
 800639c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80063a0:	4616      	mov	r6, r2
 80063a2:	461f      	mov	r7, r3
 80063a4:	4605      	mov	r5, r0
 80063a6:	f000 fccd 	bl	8006d44 <_localeconv_r>
 80063aa:	6803      	ldr	r3, [r0, #0]
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7f9 ff6e 	bl	8000290 <strlen>
 80063b4:	2300      	movs	r3, #0
 80063b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80063b8:	f8d8 3000 	ldr.w	r3, [r8]
 80063bc:	9005      	str	r0, [sp, #20]
 80063be:	3307      	adds	r3, #7
 80063c0:	f023 0307 	bic.w	r3, r3, #7
 80063c4:	f103 0208 	add.w	r2, r3, #8
 80063c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063cc:	f8d4 b000 	ldr.w	fp, [r4]
 80063d0:	f8c8 2000 	str.w	r2, [r8]
 80063d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063dc:	9307      	str	r3, [sp, #28]
 80063de:	f8cd 8018 	str.w	r8, [sp, #24]
 80063e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80063e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063ea:	4b9c      	ldr	r3, [pc, #624]	@ (800665c <_printf_float+0x2c8>)
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	f7fa fbac 	bl	8000b4c <__aeabi_dcmpun>
 80063f4:	bb70      	cbnz	r0, 8006454 <_printf_float+0xc0>
 80063f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063fa:	4b98      	ldr	r3, [pc, #608]	@ (800665c <_printf_float+0x2c8>)
 80063fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006400:	f7fa fb86 	bl	8000b10 <__aeabi_dcmple>
 8006404:	bb30      	cbnz	r0, 8006454 <_printf_float+0xc0>
 8006406:	2200      	movs	r2, #0
 8006408:	2300      	movs	r3, #0
 800640a:	4640      	mov	r0, r8
 800640c:	4649      	mov	r1, r9
 800640e:	f7fa fb75 	bl	8000afc <__aeabi_dcmplt>
 8006412:	b110      	cbz	r0, 800641a <_printf_float+0x86>
 8006414:	232d      	movs	r3, #45	@ 0x2d
 8006416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800641a:	4a91      	ldr	r2, [pc, #580]	@ (8006660 <_printf_float+0x2cc>)
 800641c:	4b91      	ldr	r3, [pc, #580]	@ (8006664 <_printf_float+0x2d0>)
 800641e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006422:	bf94      	ite	ls
 8006424:	4690      	movls	r8, r2
 8006426:	4698      	movhi	r8, r3
 8006428:	2303      	movs	r3, #3
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	f02b 0304 	bic.w	r3, fp, #4
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	f04f 0900 	mov.w	r9, #0
 8006436:	9700      	str	r7, [sp, #0]
 8006438:	4633      	mov	r3, r6
 800643a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800643c:	4621      	mov	r1, r4
 800643e:	4628      	mov	r0, r5
 8006440:	f000 f9d2 	bl	80067e8 <_printf_common>
 8006444:	3001      	adds	r0, #1
 8006446:	f040 808d 	bne.w	8006564 <_printf_float+0x1d0>
 800644a:	f04f 30ff 	mov.w	r0, #4294967295
 800644e:	b00d      	add	sp, #52	@ 0x34
 8006450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	4640      	mov	r0, r8
 800645a:	4649      	mov	r1, r9
 800645c:	f7fa fb76 	bl	8000b4c <__aeabi_dcmpun>
 8006460:	b140      	cbz	r0, 8006474 <_printf_float+0xe0>
 8006462:	464b      	mov	r3, r9
 8006464:	2b00      	cmp	r3, #0
 8006466:	bfbc      	itt	lt
 8006468:	232d      	movlt	r3, #45	@ 0x2d
 800646a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800646e:	4a7e      	ldr	r2, [pc, #504]	@ (8006668 <_printf_float+0x2d4>)
 8006470:	4b7e      	ldr	r3, [pc, #504]	@ (800666c <_printf_float+0x2d8>)
 8006472:	e7d4      	b.n	800641e <_printf_float+0x8a>
 8006474:	6863      	ldr	r3, [r4, #4]
 8006476:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800647a:	9206      	str	r2, [sp, #24]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	d13b      	bne.n	80064f8 <_printf_float+0x164>
 8006480:	2306      	movs	r3, #6
 8006482:	6063      	str	r3, [r4, #4]
 8006484:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006488:	2300      	movs	r3, #0
 800648a:	6022      	str	r2, [r4, #0]
 800648c:	9303      	str	r3, [sp, #12]
 800648e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006490:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006494:	ab09      	add	r3, sp, #36	@ 0x24
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	6861      	ldr	r1, [r4, #4]
 800649a:	ec49 8b10 	vmov	d0, r8, r9
 800649e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80064a2:	4628      	mov	r0, r5
 80064a4:	f7ff fed6 	bl	8006254 <__cvt>
 80064a8:	9b06      	ldr	r3, [sp, #24]
 80064aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064ac:	2b47      	cmp	r3, #71	@ 0x47
 80064ae:	4680      	mov	r8, r0
 80064b0:	d129      	bne.n	8006506 <_printf_float+0x172>
 80064b2:	1cc8      	adds	r0, r1, #3
 80064b4:	db02      	blt.n	80064bc <_printf_float+0x128>
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	4299      	cmp	r1, r3
 80064ba:	dd41      	ble.n	8006540 <_printf_float+0x1ac>
 80064bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80064c0:	fa5f fa8a 	uxtb.w	sl, sl
 80064c4:	3901      	subs	r1, #1
 80064c6:	4652      	mov	r2, sl
 80064c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80064ce:	f7ff ff26 	bl	800631e <__exponent>
 80064d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064d4:	1813      	adds	r3, r2, r0
 80064d6:	2a01      	cmp	r2, #1
 80064d8:	4681      	mov	r9, r0
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	dc02      	bgt.n	80064e4 <_printf_float+0x150>
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	07d2      	lsls	r2, r2, #31
 80064e2:	d501      	bpl.n	80064e8 <_printf_float+0x154>
 80064e4:	3301      	adds	r3, #1
 80064e6:	6123      	str	r3, [r4, #16]
 80064e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0a2      	beq.n	8006436 <_printf_float+0xa2>
 80064f0:	232d      	movs	r3, #45	@ 0x2d
 80064f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064f6:	e79e      	b.n	8006436 <_printf_float+0xa2>
 80064f8:	9a06      	ldr	r2, [sp, #24]
 80064fa:	2a47      	cmp	r2, #71	@ 0x47
 80064fc:	d1c2      	bne.n	8006484 <_printf_float+0xf0>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1c0      	bne.n	8006484 <_printf_float+0xf0>
 8006502:	2301      	movs	r3, #1
 8006504:	e7bd      	b.n	8006482 <_printf_float+0xee>
 8006506:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800650a:	d9db      	bls.n	80064c4 <_printf_float+0x130>
 800650c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006510:	d118      	bne.n	8006544 <_printf_float+0x1b0>
 8006512:	2900      	cmp	r1, #0
 8006514:	6863      	ldr	r3, [r4, #4]
 8006516:	dd0b      	ble.n	8006530 <_printf_float+0x19c>
 8006518:	6121      	str	r1, [r4, #16]
 800651a:	b913      	cbnz	r3, 8006522 <_printf_float+0x18e>
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	07d0      	lsls	r0, r2, #31
 8006520:	d502      	bpl.n	8006528 <_printf_float+0x194>
 8006522:	3301      	adds	r3, #1
 8006524:	440b      	add	r3, r1
 8006526:	6123      	str	r3, [r4, #16]
 8006528:	65a1      	str	r1, [r4, #88]	@ 0x58
 800652a:	f04f 0900 	mov.w	r9, #0
 800652e:	e7db      	b.n	80064e8 <_printf_float+0x154>
 8006530:	b913      	cbnz	r3, 8006538 <_printf_float+0x1a4>
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	07d2      	lsls	r2, r2, #31
 8006536:	d501      	bpl.n	800653c <_printf_float+0x1a8>
 8006538:	3302      	adds	r3, #2
 800653a:	e7f4      	b.n	8006526 <_printf_float+0x192>
 800653c:	2301      	movs	r3, #1
 800653e:	e7f2      	b.n	8006526 <_printf_float+0x192>
 8006540:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006546:	4299      	cmp	r1, r3
 8006548:	db05      	blt.n	8006556 <_printf_float+0x1c2>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	6121      	str	r1, [r4, #16]
 800654e:	07d8      	lsls	r0, r3, #31
 8006550:	d5ea      	bpl.n	8006528 <_printf_float+0x194>
 8006552:	1c4b      	adds	r3, r1, #1
 8006554:	e7e7      	b.n	8006526 <_printf_float+0x192>
 8006556:	2900      	cmp	r1, #0
 8006558:	bfd4      	ite	le
 800655a:	f1c1 0202 	rsble	r2, r1, #2
 800655e:	2201      	movgt	r2, #1
 8006560:	4413      	add	r3, r2
 8006562:	e7e0      	b.n	8006526 <_printf_float+0x192>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	055a      	lsls	r2, r3, #21
 8006568:	d407      	bmi.n	800657a <_printf_float+0x1e6>
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	4642      	mov	r2, r8
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	d12b      	bne.n	80065d0 <_printf_float+0x23c>
 8006578:	e767      	b.n	800644a <_printf_float+0xb6>
 800657a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800657e:	f240 80dd 	bls.w	800673c <_printf_float+0x3a8>
 8006582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006586:	2200      	movs	r2, #0
 8006588:	2300      	movs	r3, #0
 800658a:	f7fa faad 	bl	8000ae8 <__aeabi_dcmpeq>
 800658e:	2800      	cmp	r0, #0
 8006590:	d033      	beq.n	80065fa <_printf_float+0x266>
 8006592:	4a37      	ldr	r2, [pc, #220]	@ (8006670 <_printf_float+0x2dc>)
 8006594:	2301      	movs	r3, #1
 8006596:	4631      	mov	r1, r6
 8006598:	4628      	mov	r0, r5
 800659a:	47b8      	blx	r7
 800659c:	3001      	adds	r0, #1
 800659e:	f43f af54 	beq.w	800644a <_printf_float+0xb6>
 80065a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80065a6:	4543      	cmp	r3, r8
 80065a8:	db02      	blt.n	80065b0 <_printf_float+0x21c>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	07d8      	lsls	r0, r3, #31
 80065ae:	d50f      	bpl.n	80065d0 <_printf_float+0x23c>
 80065b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065b4:	4631      	mov	r1, r6
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b8      	blx	r7
 80065ba:	3001      	adds	r0, #1
 80065bc:	f43f af45 	beq.w	800644a <_printf_float+0xb6>
 80065c0:	f04f 0900 	mov.w	r9, #0
 80065c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80065c8:	f104 0a1a 	add.w	sl, r4, #26
 80065cc:	45c8      	cmp	r8, r9
 80065ce:	dc09      	bgt.n	80065e4 <_printf_float+0x250>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	079b      	lsls	r3, r3, #30
 80065d4:	f100 8103 	bmi.w	80067de <_printf_float+0x44a>
 80065d8:	68e0      	ldr	r0, [r4, #12]
 80065da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065dc:	4298      	cmp	r0, r3
 80065de:	bfb8      	it	lt
 80065e0:	4618      	movlt	r0, r3
 80065e2:	e734      	b.n	800644e <_printf_float+0xba>
 80065e4:	2301      	movs	r3, #1
 80065e6:	4652      	mov	r2, sl
 80065e8:	4631      	mov	r1, r6
 80065ea:	4628      	mov	r0, r5
 80065ec:	47b8      	blx	r7
 80065ee:	3001      	adds	r0, #1
 80065f0:	f43f af2b 	beq.w	800644a <_printf_float+0xb6>
 80065f4:	f109 0901 	add.w	r9, r9, #1
 80065f8:	e7e8      	b.n	80065cc <_printf_float+0x238>
 80065fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	dc39      	bgt.n	8006674 <_printf_float+0x2e0>
 8006600:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <_printf_float+0x2dc>)
 8006602:	2301      	movs	r3, #1
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f af1d 	beq.w	800644a <_printf_float+0xb6>
 8006610:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006614:	ea59 0303 	orrs.w	r3, r9, r3
 8006618:	d102      	bne.n	8006620 <_printf_float+0x28c>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	07d9      	lsls	r1, r3, #31
 800661e:	d5d7      	bpl.n	80065d0 <_printf_float+0x23c>
 8006620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	f43f af0d 	beq.w	800644a <_printf_float+0xb6>
 8006630:	f04f 0a00 	mov.w	sl, #0
 8006634:	f104 0b1a 	add.w	fp, r4, #26
 8006638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800663a:	425b      	negs	r3, r3
 800663c:	4553      	cmp	r3, sl
 800663e:	dc01      	bgt.n	8006644 <_printf_float+0x2b0>
 8006640:	464b      	mov	r3, r9
 8006642:	e793      	b.n	800656c <_printf_float+0x1d8>
 8006644:	2301      	movs	r3, #1
 8006646:	465a      	mov	r2, fp
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f aefb 	beq.w	800644a <_printf_float+0xb6>
 8006654:	f10a 0a01 	add.w	sl, sl, #1
 8006658:	e7ee      	b.n	8006638 <_printf_float+0x2a4>
 800665a:	bf00      	nop
 800665c:	7fefffff 	.word	0x7fefffff
 8006660:	08008bf8 	.word	0x08008bf8
 8006664:	08008bfc 	.word	0x08008bfc
 8006668:	08008c00 	.word	0x08008c00
 800666c:	08008c04 	.word	0x08008c04
 8006670:	08008c08 	.word	0x08008c08
 8006674:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006676:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800667a:	4553      	cmp	r3, sl
 800667c:	bfa8      	it	ge
 800667e:	4653      	movge	r3, sl
 8006680:	2b00      	cmp	r3, #0
 8006682:	4699      	mov	r9, r3
 8006684:	dc36      	bgt.n	80066f4 <_printf_float+0x360>
 8006686:	f04f 0b00 	mov.w	fp, #0
 800668a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800668e:	f104 021a 	add.w	r2, r4, #26
 8006692:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006694:	9306      	str	r3, [sp, #24]
 8006696:	eba3 0309 	sub.w	r3, r3, r9
 800669a:	455b      	cmp	r3, fp
 800669c:	dc31      	bgt.n	8006702 <_printf_float+0x36e>
 800669e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a0:	459a      	cmp	sl, r3
 80066a2:	dc3a      	bgt.n	800671a <_printf_float+0x386>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	07da      	lsls	r2, r3, #31
 80066a8:	d437      	bmi.n	800671a <_printf_float+0x386>
 80066aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ac:	ebaa 0903 	sub.w	r9, sl, r3
 80066b0:	9b06      	ldr	r3, [sp, #24]
 80066b2:	ebaa 0303 	sub.w	r3, sl, r3
 80066b6:	4599      	cmp	r9, r3
 80066b8:	bfa8      	it	ge
 80066ba:	4699      	movge	r9, r3
 80066bc:	f1b9 0f00 	cmp.w	r9, #0
 80066c0:	dc33      	bgt.n	800672a <_printf_float+0x396>
 80066c2:	f04f 0800 	mov.w	r8, #0
 80066c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ca:	f104 0b1a 	add.w	fp, r4, #26
 80066ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d0:	ebaa 0303 	sub.w	r3, sl, r3
 80066d4:	eba3 0309 	sub.w	r3, r3, r9
 80066d8:	4543      	cmp	r3, r8
 80066da:	f77f af79 	ble.w	80065d0 <_printf_float+0x23c>
 80066de:	2301      	movs	r3, #1
 80066e0:	465a      	mov	r2, fp
 80066e2:	4631      	mov	r1, r6
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b8      	blx	r7
 80066e8:	3001      	adds	r0, #1
 80066ea:	f43f aeae 	beq.w	800644a <_printf_float+0xb6>
 80066ee:	f108 0801 	add.w	r8, r8, #1
 80066f2:	e7ec      	b.n	80066ce <_printf_float+0x33a>
 80066f4:	4642      	mov	r2, r8
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	d1c2      	bne.n	8006686 <_printf_float+0x2f2>
 8006700:	e6a3      	b.n	800644a <_printf_float+0xb6>
 8006702:	2301      	movs	r3, #1
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	9206      	str	r2, [sp, #24]
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	f43f ae9c 	beq.w	800644a <_printf_float+0xb6>
 8006712:	9a06      	ldr	r2, [sp, #24]
 8006714:	f10b 0b01 	add.w	fp, fp, #1
 8006718:	e7bb      	b.n	8006692 <_printf_float+0x2fe>
 800671a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671e:	4631      	mov	r1, r6
 8006720:	4628      	mov	r0, r5
 8006722:	47b8      	blx	r7
 8006724:	3001      	adds	r0, #1
 8006726:	d1c0      	bne.n	80066aa <_printf_float+0x316>
 8006728:	e68f      	b.n	800644a <_printf_float+0xb6>
 800672a:	9a06      	ldr	r2, [sp, #24]
 800672c:	464b      	mov	r3, r9
 800672e:	4442      	add	r2, r8
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	d1c3      	bne.n	80066c2 <_printf_float+0x32e>
 800673a:	e686      	b.n	800644a <_printf_float+0xb6>
 800673c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006740:	f1ba 0f01 	cmp.w	sl, #1
 8006744:	dc01      	bgt.n	800674a <_printf_float+0x3b6>
 8006746:	07db      	lsls	r3, r3, #31
 8006748:	d536      	bpl.n	80067b8 <_printf_float+0x424>
 800674a:	2301      	movs	r3, #1
 800674c:	4642      	mov	r2, r8
 800674e:	4631      	mov	r1, r6
 8006750:	4628      	mov	r0, r5
 8006752:	47b8      	blx	r7
 8006754:	3001      	adds	r0, #1
 8006756:	f43f ae78 	beq.w	800644a <_printf_float+0xb6>
 800675a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	f43f ae70 	beq.w	800644a <_printf_float+0xb6>
 800676a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800676e:	2200      	movs	r2, #0
 8006770:	2300      	movs	r3, #0
 8006772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006776:	f7fa f9b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800677a:	b9c0      	cbnz	r0, 80067ae <_printf_float+0x41a>
 800677c:	4653      	mov	r3, sl
 800677e:	f108 0201 	add.w	r2, r8, #1
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	d10c      	bne.n	80067a6 <_printf_float+0x412>
 800678c:	e65d      	b.n	800644a <_printf_float+0xb6>
 800678e:	2301      	movs	r3, #1
 8006790:	465a      	mov	r2, fp
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	f43f ae56 	beq.w	800644a <_printf_float+0xb6>
 800679e:	f108 0801 	add.w	r8, r8, #1
 80067a2:	45d0      	cmp	r8, sl
 80067a4:	dbf3      	blt.n	800678e <_printf_float+0x3fa>
 80067a6:	464b      	mov	r3, r9
 80067a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80067ac:	e6df      	b.n	800656e <_printf_float+0x1da>
 80067ae:	f04f 0800 	mov.w	r8, #0
 80067b2:	f104 0b1a 	add.w	fp, r4, #26
 80067b6:	e7f4      	b.n	80067a2 <_printf_float+0x40e>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4642      	mov	r2, r8
 80067bc:	e7e1      	b.n	8006782 <_printf_float+0x3ee>
 80067be:	2301      	movs	r3, #1
 80067c0:	464a      	mov	r2, r9
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	f43f ae3e 	beq.w	800644a <_printf_float+0xb6>
 80067ce:	f108 0801 	add.w	r8, r8, #1
 80067d2:	68e3      	ldr	r3, [r4, #12]
 80067d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067d6:	1a5b      	subs	r3, r3, r1
 80067d8:	4543      	cmp	r3, r8
 80067da:	dcf0      	bgt.n	80067be <_printf_float+0x42a>
 80067dc:	e6fc      	b.n	80065d8 <_printf_float+0x244>
 80067de:	f04f 0800 	mov.w	r8, #0
 80067e2:	f104 0919 	add.w	r9, r4, #25
 80067e6:	e7f4      	b.n	80067d2 <_printf_float+0x43e>

080067e8 <_printf_common>:
 80067e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ec:	4616      	mov	r6, r2
 80067ee:	4698      	mov	r8, r3
 80067f0:	688a      	ldr	r2, [r1, #8]
 80067f2:	690b      	ldr	r3, [r1, #16]
 80067f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067f8:	4293      	cmp	r3, r2
 80067fa:	bfb8      	it	lt
 80067fc:	4613      	movlt	r3, r2
 80067fe:	6033      	str	r3, [r6, #0]
 8006800:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006804:	4607      	mov	r7, r0
 8006806:	460c      	mov	r4, r1
 8006808:	b10a      	cbz	r2, 800680e <_printf_common+0x26>
 800680a:	3301      	adds	r3, #1
 800680c:	6033      	str	r3, [r6, #0]
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	0699      	lsls	r1, r3, #26
 8006812:	bf42      	ittt	mi
 8006814:	6833      	ldrmi	r3, [r6, #0]
 8006816:	3302      	addmi	r3, #2
 8006818:	6033      	strmi	r3, [r6, #0]
 800681a:	6825      	ldr	r5, [r4, #0]
 800681c:	f015 0506 	ands.w	r5, r5, #6
 8006820:	d106      	bne.n	8006830 <_printf_common+0x48>
 8006822:	f104 0a19 	add.w	sl, r4, #25
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	6832      	ldr	r2, [r6, #0]
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	42ab      	cmp	r3, r5
 800682e:	dc26      	bgt.n	800687e <_printf_common+0x96>
 8006830:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006834:	6822      	ldr	r2, [r4, #0]
 8006836:	3b00      	subs	r3, #0
 8006838:	bf18      	it	ne
 800683a:	2301      	movne	r3, #1
 800683c:	0692      	lsls	r2, r2, #26
 800683e:	d42b      	bmi.n	8006898 <_printf_common+0xb0>
 8006840:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006844:	4641      	mov	r1, r8
 8006846:	4638      	mov	r0, r7
 8006848:	47c8      	blx	r9
 800684a:	3001      	adds	r0, #1
 800684c:	d01e      	beq.n	800688c <_printf_common+0xa4>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	6922      	ldr	r2, [r4, #16]
 8006852:	f003 0306 	and.w	r3, r3, #6
 8006856:	2b04      	cmp	r3, #4
 8006858:	bf02      	ittt	eq
 800685a:	68e5      	ldreq	r5, [r4, #12]
 800685c:	6833      	ldreq	r3, [r6, #0]
 800685e:	1aed      	subeq	r5, r5, r3
 8006860:	68a3      	ldr	r3, [r4, #8]
 8006862:	bf0c      	ite	eq
 8006864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006868:	2500      	movne	r5, #0
 800686a:	4293      	cmp	r3, r2
 800686c:	bfc4      	itt	gt
 800686e:	1a9b      	subgt	r3, r3, r2
 8006870:	18ed      	addgt	r5, r5, r3
 8006872:	2600      	movs	r6, #0
 8006874:	341a      	adds	r4, #26
 8006876:	42b5      	cmp	r5, r6
 8006878:	d11a      	bne.n	80068b0 <_printf_common+0xc8>
 800687a:	2000      	movs	r0, #0
 800687c:	e008      	b.n	8006890 <_printf_common+0xa8>
 800687e:	2301      	movs	r3, #1
 8006880:	4652      	mov	r2, sl
 8006882:	4641      	mov	r1, r8
 8006884:	4638      	mov	r0, r7
 8006886:	47c8      	blx	r9
 8006888:	3001      	adds	r0, #1
 800688a:	d103      	bne.n	8006894 <_printf_common+0xac>
 800688c:	f04f 30ff 	mov.w	r0, #4294967295
 8006890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006894:	3501      	adds	r5, #1
 8006896:	e7c6      	b.n	8006826 <_printf_common+0x3e>
 8006898:	18e1      	adds	r1, r4, r3
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	2030      	movs	r0, #48	@ 0x30
 800689e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068a2:	4422      	add	r2, r4
 80068a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068ac:	3302      	adds	r3, #2
 80068ae:	e7c7      	b.n	8006840 <_printf_common+0x58>
 80068b0:	2301      	movs	r3, #1
 80068b2:	4622      	mov	r2, r4
 80068b4:	4641      	mov	r1, r8
 80068b6:	4638      	mov	r0, r7
 80068b8:	47c8      	blx	r9
 80068ba:	3001      	adds	r0, #1
 80068bc:	d0e6      	beq.n	800688c <_printf_common+0xa4>
 80068be:	3601      	adds	r6, #1
 80068c0:	e7d9      	b.n	8006876 <_printf_common+0x8e>
	...

080068c4 <_printf_i>:
 80068c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068c8:	7e0f      	ldrb	r7, [r1, #24]
 80068ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068cc:	2f78      	cmp	r7, #120	@ 0x78
 80068ce:	4691      	mov	r9, r2
 80068d0:	4680      	mov	r8, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	469a      	mov	sl, r3
 80068d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068da:	d807      	bhi.n	80068ec <_printf_i+0x28>
 80068dc:	2f62      	cmp	r7, #98	@ 0x62
 80068de:	d80a      	bhi.n	80068f6 <_printf_i+0x32>
 80068e0:	2f00      	cmp	r7, #0
 80068e2:	f000 80d2 	beq.w	8006a8a <_printf_i+0x1c6>
 80068e6:	2f58      	cmp	r7, #88	@ 0x58
 80068e8:	f000 80b9 	beq.w	8006a5e <_printf_i+0x19a>
 80068ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068f4:	e03a      	b.n	800696c <_printf_i+0xa8>
 80068f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068fa:	2b15      	cmp	r3, #21
 80068fc:	d8f6      	bhi.n	80068ec <_printf_i+0x28>
 80068fe:	a101      	add	r1, pc, #4	@ (adr r1, 8006904 <_printf_i+0x40>)
 8006900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006904:	0800695d 	.word	0x0800695d
 8006908:	08006971 	.word	0x08006971
 800690c:	080068ed 	.word	0x080068ed
 8006910:	080068ed 	.word	0x080068ed
 8006914:	080068ed 	.word	0x080068ed
 8006918:	080068ed 	.word	0x080068ed
 800691c:	08006971 	.word	0x08006971
 8006920:	080068ed 	.word	0x080068ed
 8006924:	080068ed 	.word	0x080068ed
 8006928:	080068ed 	.word	0x080068ed
 800692c:	080068ed 	.word	0x080068ed
 8006930:	08006a71 	.word	0x08006a71
 8006934:	0800699b 	.word	0x0800699b
 8006938:	08006a2b 	.word	0x08006a2b
 800693c:	080068ed 	.word	0x080068ed
 8006940:	080068ed 	.word	0x080068ed
 8006944:	08006a93 	.word	0x08006a93
 8006948:	080068ed 	.word	0x080068ed
 800694c:	0800699b 	.word	0x0800699b
 8006950:	080068ed 	.word	0x080068ed
 8006954:	080068ed 	.word	0x080068ed
 8006958:	08006a33 	.word	0x08006a33
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	1d1a      	adds	r2, r3, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6032      	str	r2, [r6, #0]
 8006964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006968:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800696c:	2301      	movs	r3, #1
 800696e:	e09d      	b.n	8006aac <_printf_i+0x1e8>
 8006970:	6833      	ldr	r3, [r6, #0]
 8006972:	6820      	ldr	r0, [r4, #0]
 8006974:	1d19      	adds	r1, r3, #4
 8006976:	6031      	str	r1, [r6, #0]
 8006978:	0606      	lsls	r6, r0, #24
 800697a:	d501      	bpl.n	8006980 <_printf_i+0xbc>
 800697c:	681d      	ldr	r5, [r3, #0]
 800697e:	e003      	b.n	8006988 <_printf_i+0xc4>
 8006980:	0645      	lsls	r5, r0, #25
 8006982:	d5fb      	bpl.n	800697c <_printf_i+0xb8>
 8006984:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006988:	2d00      	cmp	r5, #0
 800698a:	da03      	bge.n	8006994 <_printf_i+0xd0>
 800698c:	232d      	movs	r3, #45	@ 0x2d
 800698e:	426d      	negs	r5, r5
 8006990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006994:	4859      	ldr	r0, [pc, #356]	@ (8006afc <_printf_i+0x238>)
 8006996:	230a      	movs	r3, #10
 8006998:	e011      	b.n	80069be <_printf_i+0xfa>
 800699a:	6821      	ldr	r1, [r4, #0]
 800699c:	6833      	ldr	r3, [r6, #0]
 800699e:	0608      	lsls	r0, r1, #24
 80069a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80069a4:	d402      	bmi.n	80069ac <_printf_i+0xe8>
 80069a6:	0649      	lsls	r1, r1, #25
 80069a8:	bf48      	it	mi
 80069aa:	b2ad      	uxthmi	r5, r5
 80069ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80069ae:	4853      	ldr	r0, [pc, #332]	@ (8006afc <_printf_i+0x238>)
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	bf14      	ite	ne
 80069b4:	230a      	movne	r3, #10
 80069b6:	2308      	moveq	r3, #8
 80069b8:	2100      	movs	r1, #0
 80069ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069be:	6866      	ldr	r6, [r4, #4]
 80069c0:	60a6      	str	r6, [r4, #8]
 80069c2:	2e00      	cmp	r6, #0
 80069c4:	bfa2      	ittt	ge
 80069c6:	6821      	ldrge	r1, [r4, #0]
 80069c8:	f021 0104 	bicge.w	r1, r1, #4
 80069cc:	6021      	strge	r1, [r4, #0]
 80069ce:	b90d      	cbnz	r5, 80069d4 <_printf_i+0x110>
 80069d0:	2e00      	cmp	r6, #0
 80069d2:	d04b      	beq.n	8006a6c <_printf_i+0x1a8>
 80069d4:	4616      	mov	r6, r2
 80069d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80069da:	fb03 5711 	mls	r7, r3, r1, r5
 80069de:	5dc7      	ldrb	r7, [r0, r7]
 80069e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069e4:	462f      	mov	r7, r5
 80069e6:	42bb      	cmp	r3, r7
 80069e8:	460d      	mov	r5, r1
 80069ea:	d9f4      	bls.n	80069d6 <_printf_i+0x112>
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d10b      	bne.n	8006a08 <_printf_i+0x144>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	07df      	lsls	r7, r3, #31
 80069f4:	d508      	bpl.n	8006a08 <_printf_i+0x144>
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	6861      	ldr	r1, [r4, #4]
 80069fa:	4299      	cmp	r1, r3
 80069fc:	bfde      	ittt	le
 80069fe:	2330      	movle	r3, #48	@ 0x30
 8006a00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a08:	1b92      	subs	r2, r2, r6
 8006a0a:	6122      	str	r2, [r4, #16]
 8006a0c:	f8cd a000 	str.w	sl, [sp]
 8006a10:	464b      	mov	r3, r9
 8006a12:	aa03      	add	r2, sp, #12
 8006a14:	4621      	mov	r1, r4
 8006a16:	4640      	mov	r0, r8
 8006a18:	f7ff fee6 	bl	80067e8 <_printf_common>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d14a      	bne.n	8006ab6 <_printf_i+0x1f2>
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	b004      	add	sp, #16
 8006a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	f043 0320 	orr.w	r3, r3, #32
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	4833      	ldr	r0, [pc, #204]	@ (8006b00 <_printf_i+0x23c>)
 8006a34:	2778      	movs	r7, #120	@ 0x78
 8006a36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	6831      	ldr	r1, [r6, #0]
 8006a3e:	061f      	lsls	r7, r3, #24
 8006a40:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a44:	d402      	bmi.n	8006a4c <_printf_i+0x188>
 8006a46:	065f      	lsls	r7, r3, #25
 8006a48:	bf48      	it	mi
 8006a4a:	b2ad      	uxthmi	r5, r5
 8006a4c:	6031      	str	r1, [r6, #0]
 8006a4e:	07d9      	lsls	r1, r3, #31
 8006a50:	bf44      	itt	mi
 8006a52:	f043 0320 	orrmi.w	r3, r3, #32
 8006a56:	6023      	strmi	r3, [r4, #0]
 8006a58:	b11d      	cbz	r5, 8006a62 <_printf_i+0x19e>
 8006a5a:	2310      	movs	r3, #16
 8006a5c:	e7ac      	b.n	80069b8 <_printf_i+0xf4>
 8006a5e:	4827      	ldr	r0, [pc, #156]	@ (8006afc <_printf_i+0x238>)
 8006a60:	e7e9      	b.n	8006a36 <_printf_i+0x172>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	f023 0320 	bic.w	r3, r3, #32
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	e7f6      	b.n	8006a5a <_printf_i+0x196>
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	e7bd      	b.n	80069ec <_printf_i+0x128>
 8006a70:	6833      	ldr	r3, [r6, #0]
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	6961      	ldr	r1, [r4, #20]
 8006a76:	1d18      	adds	r0, r3, #4
 8006a78:	6030      	str	r0, [r6, #0]
 8006a7a:	062e      	lsls	r6, r5, #24
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	d501      	bpl.n	8006a84 <_printf_i+0x1c0>
 8006a80:	6019      	str	r1, [r3, #0]
 8006a82:	e002      	b.n	8006a8a <_printf_i+0x1c6>
 8006a84:	0668      	lsls	r0, r5, #25
 8006a86:	d5fb      	bpl.n	8006a80 <_printf_i+0x1bc>
 8006a88:	8019      	strh	r1, [r3, #0]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	4616      	mov	r6, r2
 8006a90:	e7bc      	b.n	8006a0c <_printf_i+0x148>
 8006a92:	6833      	ldr	r3, [r6, #0]
 8006a94:	1d1a      	adds	r2, r3, #4
 8006a96:	6032      	str	r2, [r6, #0]
 8006a98:	681e      	ldr	r6, [r3, #0]
 8006a9a:	6862      	ldr	r2, [r4, #4]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f7f9 fba6 	bl	80001f0 <memchr>
 8006aa4:	b108      	cbz	r0, 8006aaa <_printf_i+0x1e6>
 8006aa6:	1b80      	subs	r0, r0, r6
 8006aa8:	6060      	str	r0, [r4, #4]
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	6123      	str	r3, [r4, #16]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ab4:	e7aa      	b.n	8006a0c <_printf_i+0x148>
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4649      	mov	r1, r9
 8006abc:	4640      	mov	r0, r8
 8006abe:	47d0      	blx	sl
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d0ad      	beq.n	8006a20 <_printf_i+0x15c>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	079b      	lsls	r3, r3, #30
 8006ac8:	d413      	bmi.n	8006af2 <_printf_i+0x22e>
 8006aca:	68e0      	ldr	r0, [r4, #12]
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	4298      	cmp	r0, r3
 8006ad0:	bfb8      	it	lt
 8006ad2:	4618      	movlt	r0, r3
 8006ad4:	e7a6      	b.n	8006a24 <_printf_i+0x160>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4632      	mov	r2, r6
 8006ada:	4649      	mov	r1, r9
 8006adc:	4640      	mov	r0, r8
 8006ade:	47d0      	blx	sl
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d09d      	beq.n	8006a20 <_printf_i+0x15c>
 8006ae4:	3501      	adds	r5, #1
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	9903      	ldr	r1, [sp, #12]
 8006aea:	1a5b      	subs	r3, r3, r1
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dcf2      	bgt.n	8006ad6 <_printf_i+0x212>
 8006af0:	e7eb      	b.n	8006aca <_printf_i+0x206>
 8006af2:	2500      	movs	r5, #0
 8006af4:	f104 0619 	add.w	r6, r4, #25
 8006af8:	e7f5      	b.n	8006ae6 <_printf_i+0x222>
 8006afa:	bf00      	nop
 8006afc:	08008c0a 	.word	0x08008c0a
 8006b00:	08008c1b 	.word	0x08008c1b

08006b04 <std>:
 8006b04:	2300      	movs	r3, #0
 8006b06:	b510      	push	{r4, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b12:	6083      	str	r3, [r0, #8]
 8006b14:	8181      	strh	r1, [r0, #12]
 8006b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b18:	81c2      	strh	r2, [r0, #14]
 8006b1a:	6183      	str	r3, [r0, #24]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	2208      	movs	r2, #8
 8006b20:	305c      	adds	r0, #92	@ 0x5c
 8006b22:	f000 f906 	bl	8006d32 <memset>
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <std+0x58>)
 8006b28:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <std+0x5c>)
 8006b2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b64 <std+0x60>)
 8006b30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b32:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <std+0x64>)
 8006b34:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b36:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <std+0x68>)
 8006b38:	6224      	str	r4, [r4, #32]
 8006b3a:	429c      	cmp	r4, r3
 8006b3c:	d006      	beq.n	8006b4c <std+0x48>
 8006b3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b42:	4294      	cmp	r4, r2
 8006b44:	d002      	beq.n	8006b4c <std+0x48>
 8006b46:	33d0      	adds	r3, #208	@ 0xd0
 8006b48:	429c      	cmp	r4, r3
 8006b4a:	d105      	bne.n	8006b58 <std+0x54>
 8006b4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b54:	f000 b96a 	b.w	8006e2c <__retarget_lock_init_recursive>
 8006b58:	bd10      	pop	{r4, pc}
 8006b5a:	bf00      	nop
 8006b5c:	08006cad 	.word	0x08006cad
 8006b60:	08006ccf 	.word	0x08006ccf
 8006b64:	08006d07 	.word	0x08006d07
 8006b68:	08006d2b 	.word	0x08006d2b
 8006b6c:	200003b4 	.word	0x200003b4

08006b70 <stdio_exit_handler>:
 8006b70:	4a02      	ldr	r2, [pc, #8]	@ (8006b7c <stdio_exit_handler+0xc>)
 8006b72:	4903      	ldr	r1, [pc, #12]	@ (8006b80 <stdio_exit_handler+0x10>)
 8006b74:	4803      	ldr	r0, [pc, #12]	@ (8006b84 <stdio_exit_handler+0x14>)
 8006b76:	f000 b869 	b.w	8006c4c <_fwalk_sglue>
 8006b7a:	bf00      	nop
 8006b7c:	2000000c 	.word	0x2000000c
 8006b80:	08008761 	.word	0x08008761
 8006b84:	2000001c 	.word	0x2000001c

08006b88 <cleanup_stdio>:
 8006b88:	6841      	ldr	r1, [r0, #4]
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bbc <cleanup_stdio+0x34>)
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	4604      	mov	r4, r0
 8006b92:	d001      	beq.n	8006b98 <cleanup_stdio+0x10>
 8006b94:	f001 fde4 	bl	8008760 <_fflush_r>
 8006b98:	68a1      	ldr	r1, [r4, #8]
 8006b9a:	4b09      	ldr	r3, [pc, #36]	@ (8006bc0 <cleanup_stdio+0x38>)
 8006b9c:	4299      	cmp	r1, r3
 8006b9e:	d002      	beq.n	8006ba6 <cleanup_stdio+0x1e>
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f001 fddd 	bl	8008760 <_fflush_r>
 8006ba6:	68e1      	ldr	r1, [r4, #12]
 8006ba8:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <cleanup_stdio+0x3c>)
 8006baa:	4299      	cmp	r1, r3
 8006bac:	d004      	beq.n	8006bb8 <cleanup_stdio+0x30>
 8006bae:	4620      	mov	r0, r4
 8006bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb4:	f001 bdd4 	b.w	8008760 <_fflush_r>
 8006bb8:	bd10      	pop	{r4, pc}
 8006bba:	bf00      	nop
 8006bbc:	200003b4 	.word	0x200003b4
 8006bc0:	2000041c 	.word	0x2000041c
 8006bc4:	20000484 	.word	0x20000484

08006bc8 <global_stdio_init.part.0>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf8 <global_stdio_init.part.0+0x30>)
 8006bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8006bfc <global_stdio_init.part.0+0x34>)
 8006bce:	4a0c      	ldr	r2, [pc, #48]	@ (8006c00 <global_stdio_init.part.0+0x38>)
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	f7ff ff94 	bl	8006b04 <std>
 8006bdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006be0:	2201      	movs	r2, #1
 8006be2:	2109      	movs	r1, #9
 8006be4:	f7ff ff8e 	bl	8006b04 <std>
 8006be8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bec:	2202      	movs	r2, #2
 8006bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf2:	2112      	movs	r1, #18
 8006bf4:	f7ff bf86 	b.w	8006b04 <std>
 8006bf8:	200004ec 	.word	0x200004ec
 8006bfc:	200003b4 	.word	0x200003b4
 8006c00:	08006b71 	.word	0x08006b71

08006c04 <__sfp_lock_acquire>:
 8006c04:	4801      	ldr	r0, [pc, #4]	@ (8006c0c <__sfp_lock_acquire+0x8>)
 8006c06:	f000 b912 	b.w	8006e2e <__retarget_lock_acquire_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	200004f5 	.word	0x200004f5

08006c10 <__sfp_lock_release>:
 8006c10:	4801      	ldr	r0, [pc, #4]	@ (8006c18 <__sfp_lock_release+0x8>)
 8006c12:	f000 b90d 	b.w	8006e30 <__retarget_lock_release_recursive>
 8006c16:	bf00      	nop
 8006c18:	200004f5 	.word	0x200004f5

08006c1c <__sinit>:
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	4604      	mov	r4, r0
 8006c20:	f7ff fff0 	bl	8006c04 <__sfp_lock_acquire>
 8006c24:	6a23      	ldr	r3, [r4, #32]
 8006c26:	b11b      	cbz	r3, 8006c30 <__sinit+0x14>
 8006c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2c:	f7ff bff0 	b.w	8006c10 <__sfp_lock_release>
 8006c30:	4b04      	ldr	r3, [pc, #16]	@ (8006c44 <__sinit+0x28>)
 8006c32:	6223      	str	r3, [r4, #32]
 8006c34:	4b04      	ldr	r3, [pc, #16]	@ (8006c48 <__sinit+0x2c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f5      	bne.n	8006c28 <__sinit+0xc>
 8006c3c:	f7ff ffc4 	bl	8006bc8 <global_stdio_init.part.0>
 8006c40:	e7f2      	b.n	8006c28 <__sinit+0xc>
 8006c42:	bf00      	nop
 8006c44:	08006b89 	.word	0x08006b89
 8006c48:	200004ec 	.word	0x200004ec

08006c4c <_fwalk_sglue>:
 8006c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c50:	4607      	mov	r7, r0
 8006c52:	4688      	mov	r8, r1
 8006c54:	4614      	mov	r4, r2
 8006c56:	2600      	movs	r6, #0
 8006c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c60:	d505      	bpl.n	8006c6e <_fwalk_sglue+0x22>
 8006c62:	6824      	ldr	r4, [r4, #0]
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	d1f7      	bne.n	8006c58 <_fwalk_sglue+0xc>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d907      	bls.n	8006c84 <_fwalk_sglue+0x38>
 8006c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	d003      	beq.n	8006c84 <_fwalk_sglue+0x38>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4638      	mov	r0, r7
 8006c80:	47c0      	blx	r8
 8006c82:	4306      	orrs	r6, r0
 8006c84:	3568      	adds	r5, #104	@ 0x68
 8006c86:	e7e9      	b.n	8006c5c <_fwalk_sglue+0x10>

08006c88 <iprintf>:
 8006c88:	b40f      	push	{r0, r1, r2, r3}
 8006c8a:	b507      	push	{r0, r1, r2, lr}
 8006c8c:	4906      	ldr	r1, [pc, #24]	@ (8006ca8 <iprintf+0x20>)
 8006c8e:	ab04      	add	r3, sp, #16
 8006c90:	6808      	ldr	r0, [r1, #0]
 8006c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c96:	6881      	ldr	r1, [r0, #8]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	f001 fbc5 	bl	8008428 <_vfiprintf_r>
 8006c9e:	b003      	add	sp, #12
 8006ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca4:	b004      	add	sp, #16
 8006ca6:	4770      	bx	lr
 8006ca8:	20000018 	.word	0x20000018

08006cac <__sread>:
 8006cac:	b510      	push	{r4, lr}
 8006cae:	460c      	mov	r4, r1
 8006cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb4:	f000 f86c 	bl	8006d90 <_read_r>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	bfab      	itete	ge
 8006cbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc0:	181b      	addge	r3, r3, r0
 8006cc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cc6:	bfac      	ite	ge
 8006cc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cca:	81a3      	strhlt	r3, [r4, #12]
 8006ccc:	bd10      	pop	{r4, pc}

08006cce <__swrite>:
 8006cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd2:	461f      	mov	r7, r3
 8006cd4:	898b      	ldrh	r3, [r1, #12]
 8006cd6:	05db      	lsls	r3, r3, #23
 8006cd8:	4605      	mov	r5, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	4616      	mov	r6, r2
 8006cde:	d505      	bpl.n	8006cec <__swrite+0x1e>
 8006ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f000 f840 	bl	8006d6c <_lseek_r>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d02:	f000 b857 	b.w	8006db4 <_write_r>

08006d06 <__sseek>:
 8006d06:	b510      	push	{r4, lr}
 8006d08:	460c      	mov	r4, r1
 8006d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0e:	f000 f82d 	bl	8006d6c <_lseek_r>
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	bf15      	itete	ne
 8006d18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d22:	81a3      	strheq	r3, [r4, #12]
 8006d24:	bf18      	it	ne
 8006d26:	81a3      	strhne	r3, [r4, #12]
 8006d28:	bd10      	pop	{r4, pc}

08006d2a <__sclose>:
 8006d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2e:	f000 b80d 	b.w	8006d4c <_close_r>

08006d32 <memset>:
 8006d32:	4402      	add	r2, r0
 8006d34:	4603      	mov	r3, r0
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d100      	bne.n	8006d3c <memset+0xa>
 8006d3a:	4770      	bx	lr
 8006d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d40:	e7f9      	b.n	8006d36 <memset+0x4>
	...

08006d44 <_localeconv_r>:
 8006d44:	4800      	ldr	r0, [pc, #0]	@ (8006d48 <_localeconv_r+0x4>)
 8006d46:	4770      	bx	lr
 8006d48:	20000158 	.word	0x20000158

08006d4c <_close_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d06      	ldr	r5, [pc, #24]	@ (8006d68 <_close_r+0x1c>)
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	f7fa fdac 	bl	80018b4 <_close>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_close_r+0x1a>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_close_r+0x1a>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	200004f0 	.word	0x200004f0

08006d6c <_lseek_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d07      	ldr	r5, [pc, #28]	@ (8006d8c <_lseek_r+0x20>)
 8006d70:	4604      	mov	r4, r0
 8006d72:	4608      	mov	r0, r1
 8006d74:	4611      	mov	r1, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	602a      	str	r2, [r5, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f7fa fdc1 	bl	8001902 <_lseek>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_lseek_r+0x1e>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_lseek_r+0x1e>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	200004f0 	.word	0x200004f0

08006d90 <_read_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d07      	ldr	r5, [pc, #28]	@ (8006db0 <_read_r+0x20>)
 8006d94:	4604      	mov	r4, r0
 8006d96:	4608      	mov	r0, r1
 8006d98:	4611      	mov	r1, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7fa fd4f 	bl	8001842 <_read>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_read_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_read_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	200004f0 	.word	0x200004f0

08006db4 <_write_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d07      	ldr	r5, [pc, #28]	@ (8006dd4 <_write_r+0x20>)
 8006db8:	4604      	mov	r4, r0
 8006dba:	4608      	mov	r0, r1
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f7fa fd5a 	bl	800187c <_write>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_write_r+0x1e>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_write_r+0x1e>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	200004f0 	.word	0x200004f0

08006dd8 <__errno>:
 8006dd8:	4b01      	ldr	r3, [pc, #4]	@ (8006de0 <__errno+0x8>)
 8006dda:	6818      	ldr	r0, [r3, #0]
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20000018 	.word	0x20000018

08006de4 <__libc_init_array>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	4d0d      	ldr	r5, [pc, #52]	@ (8006e1c <__libc_init_array+0x38>)
 8006de8:	4c0d      	ldr	r4, [pc, #52]	@ (8006e20 <__libc_init_array+0x3c>)
 8006dea:	1b64      	subs	r4, r4, r5
 8006dec:	10a4      	asrs	r4, r4, #2
 8006dee:	2600      	movs	r6, #0
 8006df0:	42a6      	cmp	r6, r4
 8006df2:	d109      	bne.n	8006e08 <__libc_init_array+0x24>
 8006df4:	4d0b      	ldr	r5, [pc, #44]	@ (8006e24 <__libc_init_array+0x40>)
 8006df6:	4c0c      	ldr	r4, [pc, #48]	@ (8006e28 <__libc_init_array+0x44>)
 8006df8:	f001 fec0 	bl	8008b7c <_init>
 8006dfc:	1b64      	subs	r4, r4, r5
 8006dfe:	10a4      	asrs	r4, r4, #2
 8006e00:	2600      	movs	r6, #0
 8006e02:	42a6      	cmp	r6, r4
 8006e04:	d105      	bne.n	8006e12 <__libc_init_array+0x2e>
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0c:	4798      	blx	r3
 8006e0e:	3601      	adds	r6, #1
 8006e10:	e7ee      	b.n	8006df0 <__libc_init_array+0xc>
 8006e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e16:	4798      	blx	r3
 8006e18:	3601      	adds	r6, #1
 8006e1a:	e7f2      	b.n	8006e02 <__libc_init_array+0x1e>
 8006e1c:	08008f70 	.word	0x08008f70
 8006e20:	08008f70 	.word	0x08008f70
 8006e24:	08008f70 	.word	0x08008f70
 8006e28:	08008f74 	.word	0x08008f74

08006e2c <__retarget_lock_init_recursive>:
 8006e2c:	4770      	bx	lr

08006e2e <__retarget_lock_acquire_recursive>:
 8006e2e:	4770      	bx	lr

08006e30 <__retarget_lock_release_recursive>:
 8006e30:	4770      	bx	lr

08006e32 <quorem>:
 8006e32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e36:	6903      	ldr	r3, [r0, #16]
 8006e38:	690c      	ldr	r4, [r1, #16]
 8006e3a:	42a3      	cmp	r3, r4
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	db7e      	blt.n	8006f3e <quorem+0x10c>
 8006e40:	3c01      	subs	r4, #1
 8006e42:	f101 0814 	add.w	r8, r1, #20
 8006e46:	00a3      	lsls	r3, r4, #2
 8006e48:	f100 0514 	add.w	r5, r0, #20
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e52:	9301      	str	r3, [sp, #4]
 8006e54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e64:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e68:	d32e      	bcc.n	8006ec8 <quorem+0x96>
 8006e6a:	f04f 0a00 	mov.w	sl, #0
 8006e6e:	46c4      	mov	ip, r8
 8006e70:	46ae      	mov	lr, r5
 8006e72:	46d3      	mov	fp, sl
 8006e74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e78:	b298      	uxth	r0, r3
 8006e7a:	fb06 a000 	mla	r0, r6, r0, sl
 8006e7e:	0c02      	lsrs	r2, r0, #16
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	fb06 2303 	mla	r3, r6, r3, r2
 8006e86:	f8de 2000 	ldr.w	r2, [lr]
 8006e8a:	b280      	uxth	r0, r0
 8006e8c:	b292      	uxth	r2, r2
 8006e8e:	1a12      	subs	r2, r2, r0
 8006e90:	445a      	add	r2, fp
 8006e92:	f8de 0000 	ldr.w	r0, [lr]
 8006e96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ea0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ea4:	b292      	uxth	r2, r2
 8006ea6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006eaa:	45e1      	cmp	r9, ip
 8006eac:	f84e 2b04 	str.w	r2, [lr], #4
 8006eb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006eb4:	d2de      	bcs.n	8006e74 <quorem+0x42>
 8006eb6:	9b00      	ldr	r3, [sp, #0]
 8006eb8:	58eb      	ldr	r3, [r5, r3]
 8006eba:	b92b      	cbnz	r3, 8006ec8 <quorem+0x96>
 8006ebc:	9b01      	ldr	r3, [sp, #4]
 8006ebe:	3b04      	subs	r3, #4
 8006ec0:	429d      	cmp	r5, r3
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	d32f      	bcc.n	8006f26 <quorem+0xf4>
 8006ec6:	613c      	str	r4, [r7, #16]
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f001 f97b 	bl	80081c4 <__mcmp>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	db25      	blt.n	8006f1e <quorem+0xec>
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006eda:	f8d1 c000 	ldr.w	ip, [r1]
 8006ede:	fa1f fe82 	uxth.w	lr, r2
 8006ee2:	fa1f f38c 	uxth.w	r3, ip
 8006ee6:	eba3 030e 	sub.w	r3, r3, lr
 8006eea:	4403      	add	r3, r0
 8006eec:	0c12      	lsrs	r2, r2, #16
 8006eee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ef2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006efc:	45c1      	cmp	r9, r8
 8006efe:	f841 3b04 	str.w	r3, [r1], #4
 8006f02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f06:	d2e6      	bcs.n	8006ed6 <quorem+0xa4>
 8006f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f10:	b922      	cbnz	r2, 8006f1c <quorem+0xea>
 8006f12:	3b04      	subs	r3, #4
 8006f14:	429d      	cmp	r5, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	d30b      	bcc.n	8006f32 <quorem+0x100>
 8006f1a:	613c      	str	r4, [r7, #16]
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	4630      	mov	r0, r6
 8006f20:	b003      	add	sp, #12
 8006f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	3b04      	subs	r3, #4
 8006f2a:	2a00      	cmp	r2, #0
 8006f2c:	d1cb      	bne.n	8006ec6 <quorem+0x94>
 8006f2e:	3c01      	subs	r4, #1
 8006f30:	e7c6      	b.n	8006ec0 <quorem+0x8e>
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	3b04      	subs	r3, #4
 8006f36:	2a00      	cmp	r2, #0
 8006f38:	d1ef      	bne.n	8006f1a <quorem+0xe8>
 8006f3a:	3c01      	subs	r4, #1
 8006f3c:	e7ea      	b.n	8006f14 <quorem+0xe2>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e7ee      	b.n	8006f20 <quorem+0xee>
 8006f42:	0000      	movs	r0, r0
 8006f44:	0000      	movs	r0, r0
	...

08006f48 <_dtoa_r>:
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	69c7      	ldr	r7, [r0, #28]
 8006f4e:	b099      	sub	sp, #100	@ 0x64
 8006f50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f54:	ec55 4b10 	vmov	r4, r5, d0
 8006f58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006f5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f5c:	4683      	mov	fp, r0
 8006f5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f62:	b97f      	cbnz	r7, 8006f84 <_dtoa_r+0x3c>
 8006f64:	2010      	movs	r0, #16
 8006f66:	f000 fdfd 	bl	8007b64 <malloc>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f70:	b920      	cbnz	r0, 8006f7c <_dtoa_r+0x34>
 8006f72:	4ba7      	ldr	r3, [pc, #668]	@ (8007210 <_dtoa_r+0x2c8>)
 8006f74:	21ef      	movs	r1, #239	@ 0xef
 8006f76:	48a7      	ldr	r0, [pc, #668]	@ (8007214 <_dtoa_r+0x2cc>)
 8006f78:	f001 fccc 	bl	8008914 <__assert_func>
 8006f7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f80:	6007      	str	r7, [r0, #0]
 8006f82:	60c7      	str	r7, [r0, #12]
 8006f84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f88:	6819      	ldr	r1, [r3, #0]
 8006f8a:	b159      	cbz	r1, 8006fa4 <_dtoa_r+0x5c>
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	604a      	str	r2, [r1, #4]
 8006f90:	2301      	movs	r3, #1
 8006f92:	4093      	lsls	r3, r2
 8006f94:	608b      	str	r3, [r1, #8]
 8006f96:	4658      	mov	r0, fp
 8006f98:	f000 feda 	bl	8007d50 <_Bfree>
 8006f9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	1e2b      	subs	r3, r5, #0
 8006fa6:	bfb9      	ittee	lt
 8006fa8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006fac:	9303      	strlt	r3, [sp, #12]
 8006fae:	2300      	movge	r3, #0
 8006fb0:	6033      	strge	r3, [r6, #0]
 8006fb2:	9f03      	ldr	r7, [sp, #12]
 8006fb4:	4b98      	ldr	r3, [pc, #608]	@ (8007218 <_dtoa_r+0x2d0>)
 8006fb6:	bfbc      	itt	lt
 8006fb8:	2201      	movlt	r2, #1
 8006fba:	6032      	strlt	r2, [r6, #0]
 8006fbc:	43bb      	bics	r3, r7
 8006fbe:	d112      	bne.n	8006fe6 <_dtoa_r+0x9e>
 8006fc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006fc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fcc:	4323      	orrs	r3, r4
 8006fce:	f000 854d 	beq.w	8007a6c <_dtoa_r+0xb24>
 8006fd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800722c <_dtoa_r+0x2e4>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 854f 	beq.w	8007a7c <_dtoa_r+0xb34>
 8006fde:	f10a 0303 	add.w	r3, sl, #3
 8006fe2:	f000 bd49 	b.w	8007a78 <_dtoa_r+0xb30>
 8006fe6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fea:	2200      	movs	r2, #0
 8006fec:	ec51 0b17 	vmov	r0, r1, d7
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ff6:	f7f9 fd77 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	b158      	cbz	r0, 8007016 <_dtoa_r+0xce>
 8006ffe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007000:	2301      	movs	r3, #1
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007006:	b113      	cbz	r3, 800700e <_dtoa_r+0xc6>
 8007008:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800700a:	4b84      	ldr	r3, [pc, #528]	@ (800721c <_dtoa_r+0x2d4>)
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007230 <_dtoa_r+0x2e8>
 8007012:	f000 bd33 	b.w	8007a7c <_dtoa_r+0xb34>
 8007016:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800701a:	aa16      	add	r2, sp, #88	@ 0x58
 800701c:	a917      	add	r1, sp, #92	@ 0x5c
 800701e:	4658      	mov	r0, fp
 8007020:	f001 f980 	bl	8008324 <__d2b>
 8007024:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007028:	4681      	mov	r9, r0
 800702a:	2e00      	cmp	r6, #0
 800702c:	d077      	beq.n	800711e <_dtoa_r+0x1d6>
 800702e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007030:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800703c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007040:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007044:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007048:	4619      	mov	r1, r3
 800704a:	2200      	movs	r2, #0
 800704c:	4b74      	ldr	r3, [pc, #464]	@ (8007220 <_dtoa_r+0x2d8>)
 800704e:	f7f9 f92b 	bl	80002a8 <__aeabi_dsub>
 8007052:	a369      	add	r3, pc, #420	@ (adr r3, 80071f8 <_dtoa_r+0x2b0>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f7f9 fade 	bl	8000618 <__aeabi_dmul>
 800705c:	a368      	add	r3, pc, #416	@ (adr r3, 8007200 <_dtoa_r+0x2b8>)
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	f7f9 f923 	bl	80002ac <__adddf3>
 8007066:	4604      	mov	r4, r0
 8007068:	4630      	mov	r0, r6
 800706a:	460d      	mov	r5, r1
 800706c:	f7f9 fa6a 	bl	8000544 <__aeabi_i2d>
 8007070:	a365      	add	r3, pc, #404	@ (adr r3, 8007208 <_dtoa_r+0x2c0>)
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	f7f9 facf 	bl	8000618 <__aeabi_dmul>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4620      	mov	r0, r4
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 f913 	bl	80002ac <__adddf3>
 8007086:	4604      	mov	r4, r0
 8007088:	460d      	mov	r5, r1
 800708a:	f7f9 fd75 	bl	8000b78 <__aeabi_d2iz>
 800708e:	2200      	movs	r2, #0
 8007090:	4607      	mov	r7, r0
 8007092:	2300      	movs	r3, #0
 8007094:	4620      	mov	r0, r4
 8007096:	4629      	mov	r1, r5
 8007098:	f7f9 fd30 	bl	8000afc <__aeabi_dcmplt>
 800709c:	b140      	cbz	r0, 80070b0 <_dtoa_r+0x168>
 800709e:	4638      	mov	r0, r7
 80070a0:	f7f9 fa50 	bl	8000544 <__aeabi_i2d>
 80070a4:	4622      	mov	r2, r4
 80070a6:	462b      	mov	r3, r5
 80070a8:	f7f9 fd1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80070ac:	b900      	cbnz	r0, 80070b0 <_dtoa_r+0x168>
 80070ae:	3f01      	subs	r7, #1
 80070b0:	2f16      	cmp	r7, #22
 80070b2:	d851      	bhi.n	8007158 <_dtoa_r+0x210>
 80070b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007224 <_dtoa_r+0x2dc>)
 80070b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070c2:	f7f9 fd1b 	bl	8000afc <__aeabi_dcmplt>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d048      	beq.n	800715c <_dtoa_r+0x214>
 80070ca:	3f01      	subs	r7, #1
 80070cc:	2300      	movs	r3, #0
 80070ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80070d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070d2:	1b9b      	subs	r3, r3, r6
 80070d4:	1e5a      	subs	r2, r3, #1
 80070d6:	bf44      	itt	mi
 80070d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80070dc:	2300      	movmi	r3, #0
 80070de:	9208      	str	r2, [sp, #32]
 80070e0:	bf54      	ite	pl
 80070e2:	f04f 0800 	movpl.w	r8, #0
 80070e6:	9308      	strmi	r3, [sp, #32]
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	db39      	blt.n	8007160 <_dtoa_r+0x218>
 80070ec:	9b08      	ldr	r3, [sp, #32]
 80070ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80070f0:	443b      	add	r3, r7
 80070f2:	9308      	str	r3, [sp, #32]
 80070f4:	2300      	movs	r3, #0
 80070f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070fa:	2b09      	cmp	r3, #9
 80070fc:	d864      	bhi.n	80071c8 <_dtoa_r+0x280>
 80070fe:	2b05      	cmp	r3, #5
 8007100:	bfc4      	itt	gt
 8007102:	3b04      	subgt	r3, #4
 8007104:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007108:	f1a3 0302 	sub.w	r3, r3, #2
 800710c:	bfcc      	ite	gt
 800710e:	2400      	movgt	r4, #0
 8007110:	2401      	movle	r4, #1
 8007112:	2b03      	cmp	r3, #3
 8007114:	d863      	bhi.n	80071de <_dtoa_r+0x296>
 8007116:	e8df f003 	tbb	[pc, r3]
 800711a:	372a      	.short	0x372a
 800711c:	5535      	.short	0x5535
 800711e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007122:	441e      	add	r6, r3
 8007124:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007128:	2b20      	cmp	r3, #32
 800712a:	bfc1      	itttt	gt
 800712c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007130:	409f      	lslgt	r7, r3
 8007132:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007136:	fa24 f303 	lsrgt.w	r3, r4, r3
 800713a:	bfd6      	itet	le
 800713c:	f1c3 0320 	rsble	r3, r3, #32
 8007140:	ea47 0003 	orrgt.w	r0, r7, r3
 8007144:	fa04 f003 	lslle.w	r0, r4, r3
 8007148:	f7f9 f9ec 	bl	8000524 <__aeabi_ui2d>
 800714c:	2201      	movs	r2, #1
 800714e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007152:	3e01      	subs	r6, #1
 8007154:	9214      	str	r2, [sp, #80]	@ 0x50
 8007156:	e777      	b.n	8007048 <_dtoa_r+0x100>
 8007158:	2301      	movs	r3, #1
 800715a:	e7b8      	b.n	80070ce <_dtoa_r+0x186>
 800715c:	9012      	str	r0, [sp, #72]	@ 0x48
 800715e:	e7b7      	b.n	80070d0 <_dtoa_r+0x188>
 8007160:	427b      	negs	r3, r7
 8007162:	930a      	str	r3, [sp, #40]	@ 0x28
 8007164:	2300      	movs	r3, #0
 8007166:	eba8 0807 	sub.w	r8, r8, r7
 800716a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800716c:	e7c4      	b.n	80070f8 <_dtoa_r+0x1b0>
 800716e:	2300      	movs	r3, #0
 8007170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007174:	2b00      	cmp	r3, #0
 8007176:	dc35      	bgt.n	80071e4 <_dtoa_r+0x29c>
 8007178:	2301      	movs	r3, #1
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	9307      	str	r3, [sp, #28]
 800717e:	461a      	mov	r2, r3
 8007180:	920e      	str	r2, [sp, #56]	@ 0x38
 8007182:	e00b      	b.n	800719c <_dtoa_r+0x254>
 8007184:	2301      	movs	r3, #1
 8007186:	e7f3      	b.n	8007170 <_dtoa_r+0x228>
 8007188:	2300      	movs	r3, #0
 800718a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800718c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800718e:	18fb      	adds	r3, r7, r3
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	3301      	adds	r3, #1
 8007194:	2b01      	cmp	r3, #1
 8007196:	9307      	str	r3, [sp, #28]
 8007198:	bfb8      	it	lt
 800719a:	2301      	movlt	r3, #1
 800719c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80071a0:	2100      	movs	r1, #0
 80071a2:	2204      	movs	r2, #4
 80071a4:	f102 0514 	add.w	r5, r2, #20
 80071a8:	429d      	cmp	r5, r3
 80071aa:	d91f      	bls.n	80071ec <_dtoa_r+0x2a4>
 80071ac:	6041      	str	r1, [r0, #4]
 80071ae:	4658      	mov	r0, fp
 80071b0:	f000 fd8e 	bl	8007cd0 <_Balloc>
 80071b4:	4682      	mov	sl, r0
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d13c      	bne.n	8007234 <_dtoa_r+0x2ec>
 80071ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007228 <_dtoa_r+0x2e0>)
 80071bc:	4602      	mov	r2, r0
 80071be:	f240 11af 	movw	r1, #431	@ 0x1af
 80071c2:	e6d8      	b.n	8006f76 <_dtoa_r+0x2e>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e7e0      	b.n	800718a <_dtoa_r+0x242>
 80071c8:	2401      	movs	r4, #1
 80071ca:	2300      	movs	r3, #0
 80071cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071d0:	f04f 33ff 	mov.w	r3, #4294967295
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	9307      	str	r3, [sp, #28]
 80071d8:	2200      	movs	r2, #0
 80071da:	2312      	movs	r3, #18
 80071dc:	e7d0      	b.n	8007180 <_dtoa_r+0x238>
 80071de:	2301      	movs	r3, #1
 80071e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071e2:	e7f5      	b.n	80071d0 <_dtoa_r+0x288>
 80071e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	9307      	str	r3, [sp, #28]
 80071ea:	e7d7      	b.n	800719c <_dtoa_r+0x254>
 80071ec:	3101      	adds	r1, #1
 80071ee:	0052      	lsls	r2, r2, #1
 80071f0:	e7d8      	b.n	80071a4 <_dtoa_r+0x25c>
 80071f2:	bf00      	nop
 80071f4:	f3af 8000 	nop.w
 80071f8:	636f4361 	.word	0x636f4361
 80071fc:	3fd287a7 	.word	0x3fd287a7
 8007200:	8b60c8b3 	.word	0x8b60c8b3
 8007204:	3fc68a28 	.word	0x3fc68a28
 8007208:	509f79fb 	.word	0x509f79fb
 800720c:	3fd34413 	.word	0x3fd34413
 8007210:	08008c39 	.word	0x08008c39
 8007214:	08008c50 	.word	0x08008c50
 8007218:	7ff00000 	.word	0x7ff00000
 800721c:	08008c09 	.word	0x08008c09
 8007220:	3ff80000 	.word	0x3ff80000
 8007224:	08008d48 	.word	0x08008d48
 8007228:	08008ca8 	.word	0x08008ca8
 800722c:	08008c35 	.word	0x08008c35
 8007230:	08008c08 	.word	0x08008c08
 8007234:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007238:	6018      	str	r0, [r3, #0]
 800723a:	9b07      	ldr	r3, [sp, #28]
 800723c:	2b0e      	cmp	r3, #14
 800723e:	f200 80a4 	bhi.w	800738a <_dtoa_r+0x442>
 8007242:	2c00      	cmp	r4, #0
 8007244:	f000 80a1 	beq.w	800738a <_dtoa_r+0x442>
 8007248:	2f00      	cmp	r7, #0
 800724a:	dd33      	ble.n	80072b4 <_dtoa_r+0x36c>
 800724c:	4bad      	ldr	r3, [pc, #692]	@ (8007504 <_dtoa_r+0x5bc>)
 800724e:	f007 020f 	and.w	r2, r7, #15
 8007252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007256:	ed93 7b00 	vldr	d7, [r3]
 800725a:	05f8      	lsls	r0, r7, #23
 800725c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007260:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007264:	d516      	bpl.n	8007294 <_dtoa_r+0x34c>
 8007266:	4ba8      	ldr	r3, [pc, #672]	@ (8007508 <_dtoa_r+0x5c0>)
 8007268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800726c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007270:	f7f9 fafc 	bl	800086c <__aeabi_ddiv>
 8007274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007278:	f004 040f 	and.w	r4, r4, #15
 800727c:	2603      	movs	r6, #3
 800727e:	4da2      	ldr	r5, [pc, #648]	@ (8007508 <_dtoa_r+0x5c0>)
 8007280:	b954      	cbnz	r4, 8007298 <_dtoa_r+0x350>
 8007282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728a:	f7f9 faef 	bl	800086c <__aeabi_ddiv>
 800728e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007292:	e028      	b.n	80072e6 <_dtoa_r+0x39e>
 8007294:	2602      	movs	r6, #2
 8007296:	e7f2      	b.n	800727e <_dtoa_r+0x336>
 8007298:	07e1      	lsls	r1, r4, #31
 800729a:	d508      	bpl.n	80072ae <_dtoa_r+0x366>
 800729c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072a4:	f7f9 f9b8 	bl	8000618 <__aeabi_dmul>
 80072a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072ac:	3601      	adds	r6, #1
 80072ae:	1064      	asrs	r4, r4, #1
 80072b0:	3508      	adds	r5, #8
 80072b2:	e7e5      	b.n	8007280 <_dtoa_r+0x338>
 80072b4:	f000 80d2 	beq.w	800745c <_dtoa_r+0x514>
 80072b8:	427c      	negs	r4, r7
 80072ba:	4b92      	ldr	r3, [pc, #584]	@ (8007504 <_dtoa_r+0x5bc>)
 80072bc:	4d92      	ldr	r5, [pc, #584]	@ (8007508 <_dtoa_r+0x5c0>)
 80072be:	f004 020f 	and.w	r2, r4, #15
 80072c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072ce:	f7f9 f9a3 	bl	8000618 <__aeabi_dmul>
 80072d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072d6:	1124      	asrs	r4, r4, #4
 80072d8:	2300      	movs	r3, #0
 80072da:	2602      	movs	r6, #2
 80072dc:	2c00      	cmp	r4, #0
 80072de:	f040 80b2 	bne.w	8007446 <_dtoa_r+0x4fe>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1d3      	bne.n	800728e <_dtoa_r+0x346>
 80072e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80b7 	beq.w	8007460 <_dtoa_r+0x518>
 80072f2:	4b86      	ldr	r3, [pc, #536]	@ (800750c <_dtoa_r+0x5c4>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	4620      	mov	r0, r4
 80072f8:	4629      	mov	r1, r5
 80072fa:	f7f9 fbff 	bl	8000afc <__aeabi_dcmplt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f000 80ae 	beq.w	8007460 <_dtoa_r+0x518>
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80aa 	beq.w	8007460 <_dtoa_r+0x518>
 800730c:	9b00      	ldr	r3, [sp, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd37      	ble.n	8007382 <_dtoa_r+0x43a>
 8007312:	1e7b      	subs	r3, r7, #1
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	4620      	mov	r0, r4
 8007318:	4b7d      	ldr	r3, [pc, #500]	@ (8007510 <_dtoa_r+0x5c8>)
 800731a:	2200      	movs	r2, #0
 800731c:	4629      	mov	r1, r5
 800731e:	f7f9 f97b 	bl	8000618 <__aeabi_dmul>
 8007322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007326:	9c00      	ldr	r4, [sp, #0]
 8007328:	3601      	adds	r6, #1
 800732a:	4630      	mov	r0, r6
 800732c:	f7f9 f90a 	bl	8000544 <__aeabi_i2d>
 8007330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007334:	f7f9 f970 	bl	8000618 <__aeabi_dmul>
 8007338:	4b76      	ldr	r3, [pc, #472]	@ (8007514 <_dtoa_r+0x5cc>)
 800733a:	2200      	movs	r2, #0
 800733c:	f7f8 ffb6 	bl	80002ac <__adddf3>
 8007340:	4605      	mov	r5, r0
 8007342:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007346:	2c00      	cmp	r4, #0
 8007348:	f040 808d 	bne.w	8007466 <_dtoa_r+0x51e>
 800734c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007350:	4b71      	ldr	r3, [pc, #452]	@ (8007518 <_dtoa_r+0x5d0>)
 8007352:	2200      	movs	r2, #0
 8007354:	f7f8 ffa8 	bl	80002a8 <__aeabi_dsub>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007360:	462a      	mov	r2, r5
 8007362:	4633      	mov	r3, r6
 8007364:	f7f9 fbe8 	bl	8000b38 <__aeabi_dcmpgt>
 8007368:	2800      	cmp	r0, #0
 800736a:	f040 828b 	bne.w	8007884 <_dtoa_r+0x93c>
 800736e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007372:	462a      	mov	r2, r5
 8007374:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007378:	f7f9 fbc0 	bl	8000afc <__aeabi_dcmplt>
 800737c:	2800      	cmp	r0, #0
 800737e:	f040 8128 	bne.w	80075d2 <_dtoa_r+0x68a>
 8007382:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007386:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800738a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800738c:	2b00      	cmp	r3, #0
 800738e:	f2c0 815a 	blt.w	8007646 <_dtoa_r+0x6fe>
 8007392:	2f0e      	cmp	r7, #14
 8007394:	f300 8157 	bgt.w	8007646 <_dtoa_r+0x6fe>
 8007398:	4b5a      	ldr	r3, [pc, #360]	@ (8007504 <_dtoa_r+0x5bc>)
 800739a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800739e:	ed93 7b00 	vldr	d7, [r3]
 80073a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	ed8d 7b00 	vstr	d7, [sp]
 80073aa:	da03      	bge.n	80073b4 <_dtoa_r+0x46c>
 80073ac:	9b07      	ldr	r3, [sp, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f340 8101 	ble.w	80075b6 <_dtoa_r+0x66e>
 80073b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073b8:	4656      	mov	r6, sl
 80073ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073be:	4620      	mov	r0, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7f9 fa53 	bl	800086c <__aeabi_ddiv>
 80073c6:	f7f9 fbd7 	bl	8000b78 <__aeabi_d2iz>
 80073ca:	4680      	mov	r8, r0
 80073cc:	f7f9 f8ba 	bl	8000544 <__aeabi_i2d>
 80073d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073d4:	f7f9 f920 	bl	8000618 <__aeabi_dmul>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4620      	mov	r0, r4
 80073de:	4629      	mov	r1, r5
 80073e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073e4:	f7f8 ff60 	bl	80002a8 <__aeabi_dsub>
 80073e8:	f806 4b01 	strb.w	r4, [r6], #1
 80073ec:	9d07      	ldr	r5, [sp, #28]
 80073ee:	eba6 040a 	sub.w	r4, r6, sl
 80073f2:	42a5      	cmp	r5, r4
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	f040 8117 	bne.w	800762a <_dtoa_r+0x6e2>
 80073fc:	f7f8 ff56 	bl	80002ac <__adddf3>
 8007400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007404:	4604      	mov	r4, r0
 8007406:	460d      	mov	r5, r1
 8007408:	f7f9 fb96 	bl	8000b38 <__aeabi_dcmpgt>
 800740c:	2800      	cmp	r0, #0
 800740e:	f040 80f9 	bne.w	8007604 <_dtoa_r+0x6bc>
 8007412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	f7f9 fb65 	bl	8000ae8 <__aeabi_dcmpeq>
 800741e:	b118      	cbz	r0, 8007428 <_dtoa_r+0x4e0>
 8007420:	f018 0f01 	tst.w	r8, #1
 8007424:	f040 80ee 	bne.w	8007604 <_dtoa_r+0x6bc>
 8007428:	4649      	mov	r1, r9
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fc90 	bl	8007d50 <_Bfree>
 8007430:	2300      	movs	r3, #0
 8007432:	7033      	strb	r3, [r6, #0]
 8007434:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007436:	3701      	adds	r7, #1
 8007438:	601f      	str	r7, [r3, #0]
 800743a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 831d 	beq.w	8007a7c <_dtoa_r+0xb34>
 8007442:	601e      	str	r6, [r3, #0]
 8007444:	e31a      	b.n	8007a7c <_dtoa_r+0xb34>
 8007446:	07e2      	lsls	r2, r4, #31
 8007448:	d505      	bpl.n	8007456 <_dtoa_r+0x50e>
 800744a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800744e:	f7f9 f8e3 	bl	8000618 <__aeabi_dmul>
 8007452:	3601      	adds	r6, #1
 8007454:	2301      	movs	r3, #1
 8007456:	1064      	asrs	r4, r4, #1
 8007458:	3508      	adds	r5, #8
 800745a:	e73f      	b.n	80072dc <_dtoa_r+0x394>
 800745c:	2602      	movs	r6, #2
 800745e:	e742      	b.n	80072e6 <_dtoa_r+0x39e>
 8007460:	9c07      	ldr	r4, [sp, #28]
 8007462:	9704      	str	r7, [sp, #16]
 8007464:	e761      	b.n	800732a <_dtoa_r+0x3e2>
 8007466:	4b27      	ldr	r3, [pc, #156]	@ (8007504 <_dtoa_r+0x5bc>)
 8007468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800746a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800746e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007472:	4454      	add	r4, sl
 8007474:	2900      	cmp	r1, #0
 8007476:	d053      	beq.n	8007520 <_dtoa_r+0x5d8>
 8007478:	4928      	ldr	r1, [pc, #160]	@ (800751c <_dtoa_r+0x5d4>)
 800747a:	2000      	movs	r0, #0
 800747c:	f7f9 f9f6 	bl	800086c <__aeabi_ddiv>
 8007480:	4633      	mov	r3, r6
 8007482:	462a      	mov	r2, r5
 8007484:	f7f8 ff10 	bl	80002a8 <__aeabi_dsub>
 8007488:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800748c:	4656      	mov	r6, sl
 800748e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007492:	f7f9 fb71 	bl	8000b78 <__aeabi_d2iz>
 8007496:	4605      	mov	r5, r0
 8007498:	f7f9 f854 	bl	8000544 <__aeabi_i2d>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074a4:	f7f8 ff00 	bl	80002a8 <__aeabi_dsub>
 80074a8:	3530      	adds	r5, #48	@ 0x30
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074b2:	f806 5b01 	strb.w	r5, [r6], #1
 80074b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074ba:	f7f9 fb1f 	bl	8000afc <__aeabi_dcmplt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d171      	bne.n	80075a6 <_dtoa_r+0x65e>
 80074c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c6:	4911      	ldr	r1, [pc, #68]	@ (800750c <_dtoa_r+0x5c4>)
 80074c8:	2000      	movs	r0, #0
 80074ca:	f7f8 feed 	bl	80002a8 <__aeabi_dsub>
 80074ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074d2:	f7f9 fb13 	bl	8000afc <__aeabi_dcmplt>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f040 8095 	bne.w	8007606 <_dtoa_r+0x6be>
 80074dc:	42a6      	cmp	r6, r4
 80074de:	f43f af50 	beq.w	8007382 <_dtoa_r+0x43a>
 80074e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007510 <_dtoa_r+0x5c8>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	f7f9 f895 	bl	8000618 <__aeabi_dmul>
 80074ee:	4b08      	ldr	r3, [pc, #32]	@ (8007510 <_dtoa_r+0x5c8>)
 80074f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074f4:	2200      	movs	r2, #0
 80074f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074fa:	f7f9 f88d 	bl	8000618 <__aeabi_dmul>
 80074fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007502:	e7c4      	b.n	800748e <_dtoa_r+0x546>
 8007504:	08008d48 	.word	0x08008d48
 8007508:	08008d20 	.word	0x08008d20
 800750c:	3ff00000 	.word	0x3ff00000
 8007510:	40240000 	.word	0x40240000
 8007514:	401c0000 	.word	0x401c0000
 8007518:	40140000 	.word	0x40140000
 800751c:	3fe00000 	.word	0x3fe00000
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	f7f9 f878 	bl	8000618 <__aeabi_dmul>
 8007528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800752c:	9415      	str	r4, [sp, #84]	@ 0x54
 800752e:	4656      	mov	r6, sl
 8007530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007534:	f7f9 fb20 	bl	8000b78 <__aeabi_d2iz>
 8007538:	4605      	mov	r5, r0
 800753a:	f7f9 f803 	bl	8000544 <__aeabi_i2d>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007546:	f7f8 feaf 	bl	80002a8 <__aeabi_dsub>
 800754a:	3530      	adds	r5, #48	@ 0x30
 800754c:	f806 5b01 	strb.w	r5, [r6], #1
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	42a6      	cmp	r6, r4
 8007556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	d124      	bne.n	80075aa <_dtoa_r+0x662>
 8007560:	4bac      	ldr	r3, [pc, #688]	@ (8007814 <_dtoa_r+0x8cc>)
 8007562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007566:	f7f8 fea1 	bl	80002ac <__adddf3>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007572:	f7f9 fae1 	bl	8000b38 <__aeabi_dcmpgt>
 8007576:	2800      	cmp	r0, #0
 8007578:	d145      	bne.n	8007606 <_dtoa_r+0x6be>
 800757a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800757e:	49a5      	ldr	r1, [pc, #660]	@ (8007814 <_dtoa_r+0x8cc>)
 8007580:	2000      	movs	r0, #0
 8007582:	f7f8 fe91 	bl	80002a8 <__aeabi_dsub>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758e:	f7f9 fab5 	bl	8000afc <__aeabi_dcmplt>
 8007592:	2800      	cmp	r0, #0
 8007594:	f43f aef5 	beq.w	8007382 <_dtoa_r+0x43a>
 8007598:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800759a:	1e73      	subs	r3, r6, #1
 800759c:	9315      	str	r3, [sp, #84]	@ 0x54
 800759e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075a2:	2b30      	cmp	r3, #48	@ 0x30
 80075a4:	d0f8      	beq.n	8007598 <_dtoa_r+0x650>
 80075a6:	9f04      	ldr	r7, [sp, #16]
 80075a8:	e73e      	b.n	8007428 <_dtoa_r+0x4e0>
 80075aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007818 <_dtoa_r+0x8d0>)
 80075ac:	f7f9 f834 	bl	8000618 <__aeabi_dmul>
 80075b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b4:	e7bc      	b.n	8007530 <_dtoa_r+0x5e8>
 80075b6:	d10c      	bne.n	80075d2 <_dtoa_r+0x68a>
 80075b8:	4b98      	ldr	r3, [pc, #608]	@ (800781c <_dtoa_r+0x8d4>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075c0:	f7f9 f82a 	bl	8000618 <__aeabi_dmul>
 80075c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075c8:	f7f9 faac 	bl	8000b24 <__aeabi_dcmpge>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f000 8157 	beq.w	8007880 <_dtoa_r+0x938>
 80075d2:	2400      	movs	r4, #0
 80075d4:	4625      	mov	r5, r4
 80075d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075d8:	43db      	mvns	r3, r3
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	4656      	mov	r6, sl
 80075de:	2700      	movs	r7, #0
 80075e0:	4621      	mov	r1, r4
 80075e2:	4658      	mov	r0, fp
 80075e4:	f000 fbb4 	bl	8007d50 <_Bfree>
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	d0dc      	beq.n	80075a6 <_dtoa_r+0x65e>
 80075ec:	b12f      	cbz	r7, 80075fa <_dtoa_r+0x6b2>
 80075ee:	42af      	cmp	r7, r5
 80075f0:	d003      	beq.n	80075fa <_dtoa_r+0x6b2>
 80075f2:	4639      	mov	r1, r7
 80075f4:	4658      	mov	r0, fp
 80075f6:	f000 fbab 	bl	8007d50 <_Bfree>
 80075fa:	4629      	mov	r1, r5
 80075fc:	4658      	mov	r0, fp
 80075fe:	f000 fba7 	bl	8007d50 <_Bfree>
 8007602:	e7d0      	b.n	80075a6 <_dtoa_r+0x65e>
 8007604:	9704      	str	r7, [sp, #16]
 8007606:	4633      	mov	r3, r6
 8007608:	461e      	mov	r6, r3
 800760a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800760e:	2a39      	cmp	r2, #57	@ 0x39
 8007610:	d107      	bne.n	8007622 <_dtoa_r+0x6da>
 8007612:	459a      	cmp	sl, r3
 8007614:	d1f8      	bne.n	8007608 <_dtoa_r+0x6c0>
 8007616:	9a04      	ldr	r2, [sp, #16]
 8007618:	3201      	adds	r2, #1
 800761a:	9204      	str	r2, [sp, #16]
 800761c:	2230      	movs	r2, #48	@ 0x30
 800761e:	f88a 2000 	strb.w	r2, [sl]
 8007622:	781a      	ldrb	r2, [r3, #0]
 8007624:	3201      	adds	r2, #1
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	e7bd      	b.n	80075a6 <_dtoa_r+0x65e>
 800762a:	4b7b      	ldr	r3, [pc, #492]	@ (8007818 <_dtoa_r+0x8d0>)
 800762c:	2200      	movs	r2, #0
 800762e:	f7f8 fff3 	bl	8000618 <__aeabi_dmul>
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	460d      	mov	r5, r1
 800763a:	f7f9 fa55 	bl	8000ae8 <__aeabi_dcmpeq>
 800763e:	2800      	cmp	r0, #0
 8007640:	f43f aebb 	beq.w	80073ba <_dtoa_r+0x472>
 8007644:	e6f0      	b.n	8007428 <_dtoa_r+0x4e0>
 8007646:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007648:	2a00      	cmp	r2, #0
 800764a:	f000 80db 	beq.w	8007804 <_dtoa_r+0x8bc>
 800764e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007650:	2a01      	cmp	r2, #1
 8007652:	f300 80bf 	bgt.w	80077d4 <_dtoa_r+0x88c>
 8007656:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007658:	2a00      	cmp	r2, #0
 800765a:	f000 80b7 	beq.w	80077cc <_dtoa_r+0x884>
 800765e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007662:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007664:	4646      	mov	r6, r8
 8007666:	9a08      	ldr	r2, [sp, #32]
 8007668:	2101      	movs	r1, #1
 800766a:	441a      	add	r2, r3
 800766c:	4658      	mov	r0, fp
 800766e:	4498      	add	r8, r3
 8007670:	9208      	str	r2, [sp, #32]
 8007672:	f000 fc21 	bl	8007eb8 <__i2b>
 8007676:	4605      	mov	r5, r0
 8007678:	b15e      	cbz	r6, 8007692 <_dtoa_r+0x74a>
 800767a:	9b08      	ldr	r3, [sp, #32]
 800767c:	2b00      	cmp	r3, #0
 800767e:	dd08      	ble.n	8007692 <_dtoa_r+0x74a>
 8007680:	42b3      	cmp	r3, r6
 8007682:	9a08      	ldr	r2, [sp, #32]
 8007684:	bfa8      	it	ge
 8007686:	4633      	movge	r3, r6
 8007688:	eba8 0803 	sub.w	r8, r8, r3
 800768c:	1af6      	subs	r6, r6, r3
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	9308      	str	r3, [sp, #32]
 8007692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007694:	b1f3      	cbz	r3, 80076d4 <_dtoa_r+0x78c>
 8007696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80b7 	beq.w	800780c <_dtoa_r+0x8c4>
 800769e:	b18c      	cbz	r4, 80076c4 <_dtoa_r+0x77c>
 80076a0:	4629      	mov	r1, r5
 80076a2:	4622      	mov	r2, r4
 80076a4:	4658      	mov	r0, fp
 80076a6:	f000 fcc7 	bl	8008038 <__pow5mult>
 80076aa:	464a      	mov	r2, r9
 80076ac:	4601      	mov	r1, r0
 80076ae:	4605      	mov	r5, r0
 80076b0:	4658      	mov	r0, fp
 80076b2:	f000 fc17 	bl	8007ee4 <__multiply>
 80076b6:	4649      	mov	r1, r9
 80076b8:	9004      	str	r0, [sp, #16]
 80076ba:	4658      	mov	r0, fp
 80076bc:	f000 fb48 	bl	8007d50 <_Bfree>
 80076c0:	9b04      	ldr	r3, [sp, #16]
 80076c2:	4699      	mov	r9, r3
 80076c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076c6:	1b1a      	subs	r2, r3, r4
 80076c8:	d004      	beq.n	80076d4 <_dtoa_r+0x78c>
 80076ca:	4649      	mov	r1, r9
 80076cc:	4658      	mov	r0, fp
 80076ce:	f000 fcb3 	bl	8008038 <__pow5mult>
 80076d2:	4681      	mov	r9, r0
 80076d4:	2101      	movs	r1, #1
 80076d6:	4658      	mov	r0, fp
 80076d8:	f000 fbee 	bl	8007eb8 <__i2b>
 80076dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076de:	4604      	mov	r4, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 81cf 	beq.w	8007a84 <_dtoa_r+0xb3c>
 80076e6:	461a      	mov	r2, r3
 80076e8:	4601      	mov	r1, r0
 80076ea:	4658      	mov	r0, fp
 80076ec:	f000 fca4 	bl	8008038 <__pow5mult>
 80076f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	4604      	mov	r4, r0
 80076f6:	f300 8095 	bgt.w	8007824 <_dtoa_r+0x8dc>
 80076fa:	9b02      	ldr	r3, [sp, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f040 8087 	bne.w	8007810 <_dtoa_r+0x8c8>
 8007702:	9b03      	ldr	r3, [sp, #12]
 8007704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007708:	2b00      	cmp	r3, #0
 800770a:	f040 8089 	bne.w	8007820 <_dtoa_r+0x8d8>
 800770e:	9b03      	ldr	r3, [sp, #12]
 8007710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007714:	0d1b      	lsrs	r3, r3, #20
 8007716:	051b      	lsls	r3, r3, #20
 8007718:	b12b      	cbz	r3, 8007726 <_dtoa_r+0x7de>
 800771a:	9b08      	ldr	r3, [sp, #32]
 800771c:	3301      	adds	r3, #1
 800771e:	9308      	str	r3, [sp, #32]
 8007720:	f108 0801 	add.w	r8, r8, #1
 8007724:	2301      	movs	r3, #1
 8007726:	930a      	str	r3, [sp, #40]	@ 0x28
 8007728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 81b0 	beq.w	8007a90 <_dtoa_r+0xb48>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007736:	6918      	ldr	r0, [r3, #16]
 8007738:	f000 fb72 	bl	8007e20 <__hi0bits>
 800773c:	f1c0 0020 	rsb	r0, r0, #32
 8007740:	9b08      	ldr	r3, [sp, #32]
 8007742:	4418      	add	r0, r3
 8007744:	f010 001f 	ands.w	r0, r0, #31
 8007748:	d077      	beq.n	800783a <_dtoa_r+0x8f2>
 800774a:	f1c0 0320 	rsb	r3, r0, #32
 800774e:	2b04      	cmp	r3, #4
 8007750:	dd6b      	ble.n	800782a <_dtoa_r+0x8e2>
 8007752:	9b08      	ldr	r3, [sp, #32]
 8007754:	f1c0 001c 	rsb	r0, r0, #28
 8007758:	4403      	add	r3, r0
 800775a:	4480      	add	r8, r0
 800775c:	4406      	add	r6, r0
 800775e:	9308      	str	r3, [sp, #32]
 8007760:	f1b8 0f00 	cmp.w	r8, #0
 8007764:	dd05      	ble.n	8007772 <_dtoa_r+0x82a>
 8007766:	4649      	mov	r1, r9
 8007768:	4642      	mov	r2, r8
 800776a:	4658      	mov	r0, fp
 800776c:	f000 fcbe 	bl	80080ec <__lshift>
 8007770:	4681      	mov	r9, r0
 8007772:	9b08      	ldr	r3, [sp, #32]
 8007774:	2b00      	cmp	r3, #0
 8007776:	dd05      	ble.n	8007784 <_dtoa_r+0x83c>
 8007778:	4621      	mov	r1, r4
 800777a:	461a      	mov	r2, r3
 800777c:	4658      	mov	r0, fp
 800777e:	f000 fcb5 	bl	80080ec <__lshift>
 8007782:	4604      	mov	r4, r0
 8007784:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007786:	2b00      	cmp	r3, #0
 8007788:	d059      	beq.n	800783e <_dtoa_r+0x8f6>
 800778a:	4621      	mov	r1, r4
 800778c:	4648      	mov	r0, r9
 800778e:	f000 fd19 	bl	80081c4 <__mcmp>
 8007792:	2800      	cmp	r0, #0
 8007794:	da53      	bge.n	800783e <_dtoa_r+0x8f6>
 8007796:	1e7b      	subs	r3, r7, #1
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	4649      	mov	r1, r9
 800779c:	2300      	movs	r3, #0
 800779e:	220a      	movs	r2, #10
 80077a0:	4658      	mov	r0, fp
 80077a2:	f000 faf7 	bl	8007d94 <__multadd>
 80077a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077a8:	4681      	mov	r9, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 8172 	beq.w	8007a94 <_dtoa_r+0xb4c>
 80077b0:	2300      	movs	r3, #0
 80077b2:	4629      	mov	r1, r5
 80077b4:	220a      	movs	r2, #10
 80077b6:	4658      	mov	r0, fp
 80077b8:	f000 faec 	bl	8007d94 <__multadd>
 80077bc:	9b00      	ldr	r3, [sp, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	4605      	mov	r5, r0
 80077c2:	dc67      	bgt.n	8007894 <_dtoa_r+0x94c>
 80077c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	dc41      	bgt.n	800784e <_dtoa_r+0x906>
 80077ca:	e063      	b.n	8007894 <_dtoa_r+0x94c>
 80077cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80077ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077d2:	e746      	b.n	8007662 <_dtoa_r+0x71a>
 80077d4:	9b07      	ldr	r3, [sp, #28]
 80077d6:	1e5c      	subs	r4, r3, #1
 80077d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077da:	42a3      	cmp	r3, r4
 80077dc:	bfbf      	itttt	lt
 80077de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80077e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80077e4:	1ae3      	sublt	r3, r4, r3
 80077e6:	bfb4      	ite	lt
 80077e8:	18d2      	addlt	r2, r2, r3
 80077ea:	1b1c      	subge	r4, r3, r4
 80077ec:	9b07      	ldr	r3, [sp, #28]
 80077ee:	bfbc      	itt	lt
 80077f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80077f2:	2400      	movlt	r4, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bfb5      	itete	lt
 80077f8:	eba8 0603 	sublt.w	r6, r8, r3
 80077fc:	9b07      	ldrge	r3, [sp, #28]
 80077fe:	2300      	movlt	r3, #0
 8007800:	4646      	movge	r6, r8
 8007802:	e730      	b.n	8007666 <_dtoa_r+0x71e>
 8007804:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007806:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007808:	4646      	mov	r6, r8
 800780a:	e735      	b.n	8007678 <_dtoa_r+0x730>
 800780c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800780e:	e75c      	b.n	80076ca <_dtoa_r+0x782>
 8007810:	2300      	movs	r3, #0
 8007812:	e788      	b.n	8007726 <_dtoa_r+0x7de>
 8007814:	3fe00000 	.word	0x3fe00000
 8007818:	40240000 	.word	0x40240000
 800781c:	40140000 	.word	0x40140000
 8007820:	9b02      	ldr	r3, [sp, #8]
 8007822:	e780      	b.n	8007726 <_dtoa_r+0x7de>
 8007824:	2300      	movs	r3, #0
 8007826:	930a      	str	r3, [sp, #40]	@ 0x28
 8007828:	e782      	b.n	8007730 <_dtoa_r+0x7e8>
 800782a:	d099      	beq.n	8007760 <_dtoa_r+0x818>
 800782c:	9a08      	ldr	r2, [sp, #32]
 800782e:	331c      	adds	r3, #28
 8007830:	441a      	add	r2, r3
 8007832:	4498      	add	r8, r3
 8007834:	441e      	add	r6, r3
 8007836:	9208      	str	r2, [sp, #32]
 8007838:	e792      	b.n	8007760 <_dtoa_r+0x818>
 800783a:	4603      	mov	r3, r0
 800783c:	e7f6      	b.n	800782c <_dtoa_r+0x8e4>
 800783e:	9b07      	ldr	r3, [sp, #28]
 8007840:	9704      	str	r7, [sp, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	dc20      	bgt.n	8007888 <_dtoa_r+0x940>
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784a:	2b02      	cmp	r3, #2
 800784c:	dd1e      	ble.n	800788c <_dtoa_r+0x944>
 800784e:	9b00      	ldr	r3, [sp, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	f47f aec0 	bne.w	80075d6 <_dtoa_r+0x68e>
 8007856:	4621      	mov	r1, r4
 8007858:	2205      	movs	r2, #5
 800785a:	4658      	mov	r0, fp
 800785c:	f000 fa9a 	bl	8007d94 <__multadd>
 8007860:	4601      	mov	r1, r0
 8007862:	4604      	mov	r4, r0
 8007864:	4648      	mov	r0, r9
 8007866:	f000 fcad 	bl	80081c4 <__mcmp>
 800786a:	2800      	cmp	r0, #0
 800786c:	f77f aeb3 	ble.w	80075d6 <_dtoa_r+0x68e>
 8007870:	4656      	mov	r6, sl
 8007872:	2331      	movs	r3, #49	@ 0x31
 8007874:	f806 3b01 	strb.w	r3, [r6], #1
 8007878:	9b04      	ldr	r3, [sp, #16]
 800787a:	3301      	adds	r3, #1
 800787c:	9304      	str	r3, [sp, #16]
 800787e:	e6ae      	b.n	80075de <_dtoa_r+0x696>
 8007880:	9c07      	ldr	r4, [sp, #28]
 8007882:	9704      	str	r7, [sp, #16]
 8007884:	4625      	mov	r5, r4
 8007886:	e7f3      	b.n	8007870 <_dtoa_r+0x928>
 8007888:	9b07      	ldr	r3, [sp, #28]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 8104 	beq.w	8007a9c <_dtoa_r+0xb54>
 8007894:	2e00      	cmp	r6, #0
 8007896:	dd05      	ble.n	80078a4 <_dtoa_r+0x95c>
 8007898:	4629      	mov	r1, r5
 800789a:	4632      	mov	r2, r6
 800789c:	4658      	mov	r0, fp
 800789e:	f000 fc25 	bl	80080ec <__lshift>
 80078a2:	4605      	mov	r5, r0
 80078a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d05a      	beq.n	8007960 <_dtoa_r+0xa18>
 80078aa:	6869      	ldr	r1, [r5, #4]
 80078ac:	4658      	mov	r0, fp
 80078ae:	f000 fa0f 	bl	8007cd0 <_Balloc>
 80078b2:	4606      	mov	r6, r0
 80078b4:	b928      	cbnz	r0, 80078c2 <_dtoa_r+0x97a>
 80078b6:	4b84      	ldr	r3, [pc, #528]	@ (8007ac8 <_dtoa_r+0xb80>)
 80078b8:	4602      	mov	r2, r0
 80078ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80078be:	f7ff bb5a 	b.w	8006f76 <_dtoa_r+0x2e>
 80078c2:	692a      	ldr	r2, [r5, #16]
 80078c4:	3202      	adds	r2, #2
 80078c6:	0092      	lsls	r2, r2, #2
 80078c8:	f105 010c 	add.w	r1, r5, #12
 80078cc:	300c      	adds	r0, #12
 80078ce:	f001 f813 	bl	80088f8 <memcpy>
 80078d2:	2201      	movs	r2, #1
 80078d4:	4631      	mov	r1, r6
 80078d6:	4658      	mov	r0, fp
 80078d8:	f000 fc08 	bl	80080ec <__lshift>
 80078dc:	f10a 0301 	add.w	r3, sl, #1
 80078e0:	9307      	str	r3, [sp, #28]
 80078e2:	9b00      	ldr	r3, [sp, #0]
 80078e4:	4453      	add	r3, sl
 80078e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078e8:	9b02      	ldr	r3, [sp, #8]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	462f      	mov	r7, r5
 80078f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f2:	4605      	mov	r5, r0
 80078f4:	9b07      	ldr	r3, [sp, #28]
 80078f6:	4621      	mov	r1, r4
 80078f8:	3b01      	subs	r3, #1
 80078fa:	4648      	mov	r0, r9
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	f7ff fa98 	bl	8006e32 <quorem>
 8007902:	4639      	mov	r1, r7
 8007904:	9002      	str	r0, [sp, #8]
 8007906:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800790a:	4648      	mov	r0, r9
 800790c:	f000 fc5a 	bl	80081c4 <__mcmp>
 8007910:	462a      	mov	r2, r5
 8007912:	9008      	str	r0, [sp, #32]
 8007914:	4621      	mov	r1, r4
 8007916:	4658      	mov	r0, fp
 8007918:	f000 fc70 	bl	80081fc <__mdiff>
 800791c:	68c2      	ldr	r2, [r0, #12]
 800791e:	4606      	mov	r6, r0
 8007920:	bb02      	cbnz	r2, 8007964 <_dtoa_r+0xa1c>
 8007922:	4601      	mov	r1, r0
 8007924:	4648      	mov	r0, r9
 8007926:	f000 fc4d 	bl	80081c4 <__mcmp>
 800792a:	4602      	mov	r2, r0
 800792c:	4631      	mov	r1, r6
 800792e:	4658      	mov	r0, fp
 8007930:	920e      	str	r2, [sp, #56]	@ 0x38
 8007932:	f000 fa0d 	bl	8007d50 <_Bfree>
 8007936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007938:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800793a:	9e07      	ldr	r6, [sp, #28]
 800793c:	ea43 0102 	orr.w	r1, r3, r2
 8007940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007942:	4319      	orrs	r1, r3
 8007944:	d110      	bne.n	8007968 <_dtoa_r+0xa20>
 8007946:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800794a:	d029      	beq.n	80079a0 <_dtoa_r+0xa58>
 800794c:	9b08      	ldr	r3, [sp, #32]
 800794e:	2b00      	cmp	r3, #0
 8007950:	dd02      	ble.n	8007958 <_dtoa_r+0xa10>
 8007952:	9b02      	ldr	r3, [sp, #8]
 8007954:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007958:	9b00      	ldr	r3, [sp, #0]
 800795a:	f883 8000 	strb.w	r8, [r3]
 800795e:	e63f      	b.n	80075e0 <_dtoa_r+0x698>
 8007960:	4628      	mov	r0, r5
 8007962:	e7bb      	b.n	80078dc <_dtoa_r+0x994>
 8007964:	2201      	movs	r2, #1
 8007966:	e7e1      	b.n	800792c <_dtoa_r+0x9e4>
 8007968:	9b08      	ldr	r3, [sp, #32]
 800796a:	2b00      	cmp	r3, #0
 800796c:	db04      	blt.n	8007978 <_dtoa_r+0xa30>
 800796e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007970:	430b      	orrs	r3, r1
 8007972:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007974:	430b      	orrs	r3, r1
 8007976:	d120      	bne.n	80079ba <_dtoa_r+0xa72>
 8007978:	2a00      	cmp	r2, #0
 800797a:	dded      	ble.n	8007958 <_dtoa_r+0xa10>
 800797c:	4649      	mov	r1, r9
 800797e:	2201      	movs	r2, #1
 8007980:	4658      	mov	r0, fp
 8007982:	f000 fbb3 	bl	80080ec <__lshift>
 8007986:	4621      	mov	r1, r4
 8007988:	4681      	mov	r9, r0
 800798a:	f000 fc1b 	bl	80081c4 <__mcmp>
 800798e:	2800      	cmp	r0, #0
 8007990:	dc03      	bgt.n	800799a <_dtoa_r+0xa52>
 8007992:	d1e1      	bne.n	8007958 <_dtoa_r+0xa10>
 8007994:	f018 0f01 	tst.w	r8, #1
 8007998:	d0de      	beq.n	8007958 <_dtoa_r+0xa10>
 800799a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800799e:	d1d8      	bne.n	8007952 <_dtoa_r+0xa0a>
 80079a0:	9a00      	ldr	r2, [sp, #0]
 80079a2:	2339      	movs	r3, #57	@ 0x39
 80079a4:	7013      	strb	r3, [r2, #0]
 80079a6:	4633      	mov	r3, r6
 80079a8:	461e      	mov	r6, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80079b0:	2a39      	cmp	r2, #57	@ 0x39
 80079b2:	d052      	beq.n	8007a5a <_dtoa_r+0xb12>
 80079b4:	3201      	adds	r2, #1
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e612      	b.n	80075e0 <_dtoa_r+0x698>
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	dd07      	ble.n	80079ce <_dtoa_r+0xa86>
 80079be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079c2:	d0ed      	beq.n	80079a0 <_dtoa_r+0xa58>
 80079c4:	9a00      	ldr	r2, [sp, #0]
 80079c6:	f108 0301 	add.w	r3, r8, #1
 80079ca:	7013      	strb	r3, [r2, #0]
 80079cc:	e608      	b.n	80075e0 <_dtoa_r+0x698>
 80079ce:	9b07      	ldr	r3, [sp, #28]
 80079d0:	9a07      	ldr	r2, [sp, #28]
 80079d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80079d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079d8:	4293      	cmp	r3, r2
 80079da:	d028      	beq.n	8007a2e <_dtoa_r+0xae6>
 80079dc:	4649      	mov	r1, r9
 80079de:	2300      	movs	r3, #0
 80079e0:	220a      	movs	r2, #10
 80079e2:	4658      	mov	r0, fp
 80079e4:	f000 f9d6 	bl	8007d94 <__multadd>
 80079e8:	42af      	cmp	r7, r5
 80079ea:	4681      	mov	r9, r0
 80079ec:	f04f 0300 	mov.w	r3, #0
 80079f0:	f04f 020a 	mov.w	r2, #10
 80079f4:	4639      	mov	r1, r7
 80079f6:	4658      	mov	r0, fp
 80079f8:	d107      	bne.n	8007a0a <_dtoa_r+0xac2>
 80079fa:	f000 f9cb 	bl	8007d94 <__multadd>
 80079fe:	4607      	mov	r7, r0
 8007a00:	4605      	mov	r5, r0
 8007a02:	9b07      	ldr	r3, [sp, #28]
 8007a04:	3301      	adds	r3, #1
 8007a06:	9307      	str	r3, [sp, #28]
 8007a08:	e774      	b.n	80078f4 <_dtoa_r+0x9ac>
 8007a0a:	f000 f9c3 	bl	8007d94 <__multadd>
 8007a0e:	4629      	mov	r1, r5
 8007a10:	4607      	mov	r7, r0
 8007a12:	2300      	movs	r3, #0
 8007a14:	220a      	movs	r2, #10
 8007a16:	4658      	mov	r0, fp
 8007a18:	f000 f9bc 	bl	8007d94 <__multadd>
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	e7f0      	b.n	8007a02 <_dtoa_r+0xaba>
 8007a20:	9b00      	ldr	r3, [sp, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	bfcc      	ite	gt
 8007a26:	461e      	movgt	r6, r3
 8007a28:	2601      	movle	r6, #1
 8007a2a:	4456      	add	r6, sl
 8007a2c:	2700      	movs	r7, #0
 8007a2e:	4649      	mov	r1, r9
 8007a30:	2201      	movs	r2, #1
 8007a32:	4658      	mov	r0, fp
 8007a34:	f000 fb5a 	bl	80080ec <__lshift>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	4681      	mov	r9, r0
 8007a3c:	f000 fbc2 	bl	80081c4 <__mcmp>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	dcb0      	bgt.n	80079a6 <_dtoa_r+0xa5e>
 8007a44:	d102      	bne.n	8007a4c <_dtoa_r+0xb04>
 8007a46:	f018 0f01 	tst.w	r8, #1
 8007a4a:	d1ac      	bne.n	80079a6 <_dtoa_r+0xa5e>
 8007a4c:	4633      	mov	r3, r6
 8007a4e:	461e      	mov	r6, r3
 8007a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a54:	2a30      	cmp	r2, #48	@ 0x30
 8007a56:	d0fa      	beq.n	8007a4e <_dtoa_r+0xb06>
 8007a58:	e5c2      	b.n	80075e0 <_dtoa_r+0x698>
 8007a5a:	459a      	cmp	sl, r3
 8007a5c:	d1a4      	bne.n	80079a8 <_dtoa_r+0xa60>
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	3301      	adds	r3, #1
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	2331      	movs	r3, #49	@ 0x31
 8007a66:	f88a 3000 	strb.w	r3, [sl]
 8007a6a:	e5b9      	b.n	80075e0 <_dtoa_r+0x698>
 8007a6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007acc <_dtoa_r+0xb84>
 8007a72:	b11b      	cbz	r3, 8007a7c <_dtoa_r+0xb34>
 8007a74:	f10a 0308 	add.w	r3, sl, #8
 8007a78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	4650      	mov	r0, sl
 8007a7e:	b019      	add	sp, #100	@ 0x64
 8007a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	f77f ae37 	ble.w	80076fa <_dtoa_r+0x7b2>
 8007a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a90:	2001      	movs	r0, #1
 8007a92:	e655      	b.n	8007740 <_dtoa_r+0x7f8>
 8007a94:	9b00      	ldr	r3, [sp, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f77f aed6 	ble.w	8007848 <_dtoa_r+0x900>
 8007a9c:	4656      	mov	r6, sl
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4648      	mov	r0, r9
 8007aa2:	f7ff f9c6 	bl	8006e32 <quorem>
 8007aa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007aaa:	f806 8b01 	strb.w	r8, [r6], #1
 8007aae:	9b00      	ldr	r3, [sp, #0]
 8007ab0:	eba6 020a 	sub.w	r2, r6, sl
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	ddb3      	ble.n	8007a20 <_dtoa_r+0xad8>
 8007ab8:	4649      	mov	r1, r9
 8007aba:	2300      	movs	r3, #0
 8007abc:	220a      	movs	r2, #10
 8007abe:	4658      	mov	r0, fp
 8007ac0:	f000 f968 	bl	8007d94 <__multadd>
 8007ac4:	4681      	mov	r9, r0
 8007ac6:	e7ea      	b.n	8007a9e <_dtoa_r+0xb56>
 8007ac8:	08008ca8 	.word	0x08008ca8
 8007acc:	08008c2c 	.word	0x08008c2c

08007ad0 <_free_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	d041      	beq.n	8007b5c <_free_r+0x8c>
 8007ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007adc:	1f0c      	subs	r4, r1, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	bfb8      	it	lt
 8007ae2:	18e4      	addlt	r4, r4, r3
 8007ae4:	f000 f8e8 	bl	8007cb8 <__malloc_lock>
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b60 <_free_r+0x90>)
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	b933      	cbnz	r3, 8007afc <_free_r+0x2c>
 8007aee:	6063      	str	r3, [r4, #4]
 8007af0:	6014      	str	r4, [r2, #0]
 8007af2:	4628      	mov	r0, r5
 8007af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007af8:	f000 b8e4 	b.w	8007cc4 <__malloc_unlock>
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	d908      	bls.n	8007b12 <_free_r+0x42>
 8007b00:	6820      	ldr	r0, [r4, #0]
 8007b02:	1821      	adds	r1, r4, r0
 8007b04:	428b      	cmp	r3, r1
 8007b06:	bf01      	itttt	eq
 8007b08:	6819      	ldreq	r1, [r3, #0]
 8007b0a:	685b      	ldreq	r3, [r3, #4]
 8007b0c:	1809      	addeq	r1, r1, r0
 8007b0e:	6021      	streq	r1, [r4, #0]
 8007b10:	e7ed      	b.n	8007aee <_free_r+0x1e>
 8007b12:	461a      	mov	r2, r3
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	b10b      	cbz	r3, 8007b1c <_free_r+0x4c>
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	d9fa      	bls.n	8007b12 <_free_r+0x42>
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	1850      	adds	r0, r2, r1
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d10b      	bne.n	8007b3c <_free_r+0x6c>
 8007b24:	6820      	ldr	r0, [r4, #0]
 8007b26:	4401      	add	r1, r0
 8007b28:	1850      	adds	r0, r2, r1
 8007b2a:	4283      	cmp	r3, r0
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	d1e0      	bne.n	8007af2 <_free_r+0x22>
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	6053      	str	r3, [r2, #4]
 8007b36:	4408      	add	r0, r1
 8007b38:	6010      	str	r0, [r2, #0]
 8007b3a:	e7da      	b.n	8007af2 <_free_r+0x22>
 8007b3c:	d902      	bls.n	8007b44 <_free_r+0x74>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	602b      	str	r3, [r5, #0]
 8007b42:	e7d6      	b.n	8007af2 <_free_r+0x22>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	1821      	adds	r1, r4, r0
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf04      	itt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	bf04      	itt	eq
 8007b54:	1809      	addeq	r1, r1, r0
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	6054      	str	r4, [r2, #4]
 8007b5a:	e7ca      	b.n	8007af2 <_free_r+0x22>
 8007b5c:	bd38      	pop	{r3, r4, r5, pc}
 8007b5e:	bf00      	nop
 8007b60:	200004fc 	.word	0x200004fc

08007b64 <malloc>:
 8007b64:	4b02      	ldr	r3, [pc, #8]	@ (8007b70 <malloc+0xc>)
 8007b66:	4601      	mov	r1, r0
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	f000 b825 	b.w	8007bb8 <_malloc_r>
 8007b6e:	bf00      	nop
 8007b70:	20000018 	.word	0x20000018

08007b74 <sbrk_aligned>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	4e0f      	ldr	r6, [pc, #60]	@ (8007bb4 <sbrk_aligned+0x40>)
 8007b78:	460c      	mov	r4, r1
 8007b7a:	6831      	ldr	r1, [r6, #0]
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	b911      	cbnz	r1, 8007b86 <sbrk_aligned+0x12>
 8007b80:	f000 feaa 	bl	80088d8 <_sbrk_r>
 8007b84:	6030      	str	r0, [r6, #0]
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 fea5 	bl	80088d8 <_sbrk_r>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	d103      	bne.n	8007b9a <sbrk_aligned+0x26>
 8007b92:	f04f 34ff 	mov.w	r4, #4294967295
 8007b96:	4620      	mov	r0, r4
 8007b98:	bd70      	pop	{r4, r5, r6, pc}
 8007b9a:	1cc4      	adds	r4, r0, #3
 8007b9c:	f024 0403 	bic.w	r4, r4, #3
 8007ba0:	42a0      	cmp	r0, r4
 8007ba2:	d0f8      	beq.n	8007b96 <sbrk_aligned+0x22>
 8007ba4:	1a21      	subs	r1, r4, r0
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 fe96 	bl	80088d8 <_sbrk_r>
 8007bac:	3001      	adds	r0, #1
 8007bae:	d1f2      	bne.n	8007b96 <sbrk_aligned+0x22>
 8007bb0:	e7ef      	b.n	8007b92 <sbrk_aligned+0x1e>
 8007bb2:	bf00      	nop
 8007bb4:	200004f8 	.word	0x200004f8

08007bb8 <_malloc_r>:
 8007bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bbc:	1ccd      	adds	r5, r1, #3
 8007bbe:	f025 0503 	bic.w	r5, r5, #3
 8007bc2:	3508      	adds	r5, #8
 8007bc4:	2d0c      	cmp	r5, #12
 8007bc6:	bf38      	it	cc
 8007bc8:	250c      	movcc	r5, #12
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	4606      	mov	r6, r0
 8007bce:	db01      	blt.n	8007bd4 <_malloc_r+0x1c>
 8007bd0:	42a9      	cmp	r1, r5
 8007bd2:	d904      	bls.n	8007bde <_malloc_r+0x26>
 8007bd4:	230c      	movs	r3, #12
 8007bd6:	6033      	str	r3, [r6, #0]
 8007bd8:	2000      	movs	r0, #0
 8007bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cb4 <_malloc_r+0xfc>
 8007be2:	f000 f869 	bl	8007cb8 <__malloc_lock>
 8007be6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bea:	461c      	mov	r4, r3
 8007bec:	bb44      	cbnz	r4, 8007c40 <_malloc_r+0x88>
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff ffbf 	bl	8007b74 <sbrk_aligned>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	d158      	bne.n	8007cae <_malloc_r+0xf6>
 8007bfc:	f8d8 4000 	ldr.w	r4, [r8]
 8007c00:	4627      	mov	r7, r4
 8007c02:	2f00      	cmp	r7, #0
 8007c04:	d143      	bne.n	8007c8e <_malloc_r+0xd6>
 8007c06:	2c00      	cmp	r4, #0
 8007c08:	d04b      	beq.n	8007ca2 <_malloc_r+0xea>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	4630      	mov	r0, r6
 8007c10:	eb04 0903 	add.w	r9, r4, r3
 8007c14:	f000 fe60 	bl	80088d8 <_sbrk_r>
 8007c18:	4581      	cmp	r9, r0
 8007c1a:	d142      	bne.n	8007ca2 <_malloc_r+0xea>
 8007c1c:	6821      	ldr	r1, [r4, #0]
 8007c1e:	1a6d      	subs	r5, r5, r1
 8007c20:	4629      	mov	r1, r5
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff ffa6 	bl	8007b74 <sbrk_aligned>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d03a      	beq.n	8007ca2 <_malloc_r+0xea>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	442b      	add	r3, r5
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	f8d8 3000 	ldr.w	r3, [r8]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	bb62      	cbnz	r2, 8007c94 <_malloc_r+0xdc>
 8007c3a:	f8c8 7000 	str.w	r7, [r8]
 8007c3e:	e00f      	b.n	8007c60 <_malloc_r+0xa8>
 8007c40:	6822      	ldr	r2, [r4, #0]
 8007c42:	1b52      	subs	r2, r2, r5
 8007c44:	d420      	bmi.n	8007c88 <_malloc_r+0xd0>
 8007c46:	2a0b      	cmp	r2, #11
 8007c48:	d917      	bls.n	8007c7a <_malloc_r+0xc2>
 8007c4a:	1961      	adds	r1, r4, r5
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	6025      	str	r5, [r4, #0]
 8007c50:	bf18      	it	ne
 8007c52:	6059      	strne	r1, [r3, #4]
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	bf08      	it	eq
 8007c58:	f8c8 1000 	streq.w	r1, [r8]
 8007c5c:	5162      	str	r2, [r4, r5]
 8007c5e:	604b      	str	r3, [r1, #4]
 8007c60:	4630      	mov	r0, r6
 8007c62:	f000 f82f 	bl	8007cc4 <__malloc_unlock>
 8007c66:	f104 000b 	add.w	r0, r4, #11
 8007c6a:	1d23      	adds	r3, r4, #4
 8007c6c:	f020 0007 	bic.w	r0, r0, #7
 8007c70:	1ac2      	subs	r2, r0, r3
 8007c72:	bf1c      	itt	ne
 8007c74:	1a1b      	subne	r3, r3, r0
 8007c76:	50a3      	strne	r3, [r4, r2]
 8007c78:	e7af      	b.n	8007bda <_malloc_r+0x22>
 8007c7a:	6862      	ldr	r2, [r4, #4]
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	bf0c      	ite	eq
 8007c80:	f8c8 2000 	streq.w	r2, [r8]
 8007c84:	605a      	strne	r2, [r3, #4]
 8007c86:	e7eb      	b.n	8007c60 <_malloc_r+0xa8>
 8007c88:	4623      	mov	r3, r4
 8007c8a:	6864      	ldr	r4, [r4, #4]
 8007c8c:	e7ae      	b.n	8007bec <_malloc_r+0x34>
 8007c8e:	463c      	mov	r4, r7
 8007c90:	687f      	ldr	r7, [r7, #4]
 8007c92:	e7b6      	b.n	8007c02 <_malloc_r+0x4a>
 8007c94:	461a      	mov	r2, r3
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	d1fb      	bne.n	8007c94 <_malloc_r+0xdc>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	6053      	str	r3, [r2, #4]
 8007ca0:	e7de      	b.n	8007c60 <_malloc_r+0xa8>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	6033      	str	r3, [r6, #0]
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f80c 	bl	8007cc4 <__malloc_unlock>
 8007cac:	e794      	b.n	8007bd8 <_malloc_r+0x20>
 8007cae:	6005      	str	r5, [r0, #0]
 8007cb0:	e7d6      	b.n	8007c60 <_malloc_r+0xa8>
 8007cb2:	bf00      	nop
 8007cb4:	200004fc 	.word	0x200004fc

08007cb8 <__malloc_lock>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	@ (8007cc0 <__malloc_lock+0x8>)
 8007cba:	f7ff b8b8 	b.w	8006e2e <__retarget_lock_acquire_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	200004f4 	.word	0x200004f4

08007cc4 <__malloc_unlock>:
 8007cc4:	4801      	ldr	r0, [pc, #4]	@ (8007ccc <__malloc_unlock+0x8>)
 8007cc6:	f7ff b8b3 	b.w	8006e30 <__retarget_lock_release_recursive>
 8007cca:	bf00      	nop
 8007ccc:	200004f4 	.word	0x200004f4

08007cd0 <_Balloc>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	69c6      	ldr	r6, [r0, #28]
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	b976      	cbnz	r6, 8007cf8 <_Balloc+0x28>
 8007cda:	2010      	movs	r0, #16
 8007cdc:	f7ff ff42 	bl	8007b64 <malloc>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	61e0      	str	r0, [r4, #28]
 8007ce4:	b920      	cbnz	r0, 8007cf0 <_Balloc+0x20>
 8007ce6:	4b18      	ldr	r3, [pc, #96]	@ (8007d48 <_Balloc+0x78>)
 8007ce8:	4818      	ldr	r0, [pc, #96]	@ (8007d4c <_Balloc+0x7c>)
 8007cea:	216b      	movs	r1, #107	@ 0x6b
 8007cec:	f000 fe12 	bl	8008914 <__assert_func>
 8007cf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cf4:	6006      	str	r6, [r0, #0]
 8007cf6:	60c6      	str	r6, [r0, #12]
 8007cf8:	69e6      	ldr	r6, [r4, #28]
 8007cfa:	68f3      	ldr	r3, [r6, #12]
 8007cfc:	b183      	cbz	r3, 8007d20 <_Balloc+0x50>
 8007cfe:	69e3      	ldr	r3, [r4, #28]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d06:	b9b8      	cbnz	r0, 8007d38 <_Balloc+0x68>
 8007d08:	2101      	movs	r1, #1
 8007d0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007d0e:	1d72      	adds	r2, r6, #5
 8007d10:	0092      	lsls	r2, r2, #2
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fe1c 	bl	8008950 <_calloc_r>
 8007d18:	b160      	cbz	r0, 8007d34 <_Balloc+0x64>
 8007d1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d1e:	e00e      	b.n	8007d3e <_Balloc+0x6e>
 8007d20:	2221      	movs	r2, #33	@ 0x21
 8007d22:	2104      	movs	r1, #4
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 fe13 	bl	8008950 <_calloc_r>
 8007d2a:	69e3      	ldr	r3, [r4, #28]
 8007d2c:	60f0      	str	r0, [r6, #12]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e4      	bne.n	8007cfe <_Balloc+0x2e>
 8007d34:	2000      	movs	r0, #0
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	6802      	ldr	r2, [r0, #0]
 8007d3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d44:	e7f7      	b.n	8007d36 <_Balloc+0x66>
 8007d46:	bf00      	nop
 8007d48:	08008c39 	.word	0x08008c39
 8007d4c:	08008cb9 	.word	0x08008cb9

08007d50 <_Bfree>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	69c6      	ldr	r6, [r0, #28]
 8007d54:	4605      	mov	r5, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	b976      	cbnz	r6, 8007d78 <_Bfree+0x28>
 8007d5a:	2010      	movs	r0, #16
 8007d5c:	f7ff ff02 	bl	8007b64 <malloc>
 8007d60:	4602      	mov	r2, r0
 8007d62:	61e8      	str	r0, [r5, #28]
 8007d64:	b920      	cbnz	r0, 8007d70 <_Bfree+0x20>
 8007d66:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <_Bfree+0x3c>)
 8007d68:	4809      	ldr	r0, [pc, #36]	@ (8007d90 <_Bfree+0x40>)
 8007d6a:	218f      	movs	r1, #143	@ 0x8f
 8007d6c:	f000 fdd2 	bl	8008914 <__assert_func>
 8007d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d74:	6006      	str	r6, [r0, #0]
 8007d76:	60c6      	str	r6, [r0, #12]
 8007d78:	b13c      	cbz	r4, 8007d8a <_Bfree+0x3a>
 8007d7a:	69eb      	ldr	r3, [r5, #28]
 8007d7c:	6862      	ldr	r2, [r4, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d84:	6021      	str	r1, [r4, #0]
 8007d86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	08008c39 	.word	0x08008c39
 8007d90:	08008cb9 	.word	0x08008cb9

08007d94 <__multadd>:
 8007d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d98:	690d      	ldr	r5, [r1, #16]
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	461e      	mov	r6, r3
 8007da0:	f101 0c14 	add.w	ip, r1, #20
 8007da4:	2000      	movs	r0, #0
 8007da6:	f8dc 3000 	ldr.w	r3, [ip]
 8007daa:	b299      	uxth	r1, r3
 8007dac:	fb02 6101 	mla	r1, r2, r1, r6
 8007db0:	0c1e      	lsrs	r6, r3, #16
 8007db2:	0c0b      	lsrs	r3, r1, #16
 8007db4:	fb02 3306 	mla	r3, r2, r6, r3
 8007db8:	b289      	uxth	r1, r1
 8007dba:	3001      	adds	r0, #1
 8007dbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007dc0:	4285      	cmp	r5, r0
 8007dc2:	f84c 1b04 	str.w	r1, [ip], #4
 8007dc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dca:	dcec      	bgt.n	8007da6 <__multadd+0x12>
 8007dcc:	b30e      	cbz	r6, 8007e12 <__multadd+0x7e>
 8007dce:	68a3      	ldr	r3, [r4, #8]
 8007dd0:	42ab      	cmp	r3, r5
 8007dd2:	dc19      	bgt.n	8007e08 <__multadd+0x74>
 8007dd4:	6861      	ldr	r1, [r4, #4]
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	3101      	adds	r1, #1
 8007dda:	f7ff ff79 	bl	8007cd0 <_Balloc>
 8007dde:	4680      	mov	r8, r0
 8007de0:	b928      	cbnz	r0, 8007dee <__multadd+0x5a>
 8007de2:	4602      	mov	r2, r0
 8007de4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e18 <__multadd+0x84>)
 8007de6:	480d      	ldr	r0, [pc, #52]	@ (8007e1c <__multadd+0x88>)
 8007de8:	21ba      	movs	r1, #186	@ 0xba
 8007dea:	f000 fd93 	bl	8008914 <__assert_func>
 8007dee:	6922      	ldr	r2, [r4, #16]
 8007df0:	3202      	adds	r2, #2
 8007df2:	f104 010c 	add.w	r1, r4, #12
 8007df6:	0092      	lsls	r2, r2, #2
 8007df8:	300c      	adds	r0, #12
 8007dfa:	f000 fd7d 	bl	80088f8 <memcpy>
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4638      	mov	r0, r7
 8007e02:	f7ff ffa5 	bl	8007d50 <_Bfree>
 8007e06:	4644      	mov	r4, r8
 8007e08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e0c:	3501      	adds	r5, #1
 8007e0e:	615e      	str	r6, [r3, #20]
 8007e10:	6125      	str	r5, [r4, #16]
 8007e12:	4620      	mov	r0, r4
 8007e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e18:	08008ca8 	.word	0x08008ca8
 8007e1c:	08008cb9 	.word	0x08008cb9

08007e20 <__hi0bits>:
 8007e20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e24:	4603      	mov	r3, r0
 8007e26:	bf36      	itet	cc
 8007e28:	0403      	lslcc	r3, r0, #16
 8007e2a:	2000      	movcs	r0, #0
 8007e2c:	2010      	movcc	r0, #16
 8007e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e32:	bf3c      	itt	cc
 8007e34:	021b      	lslcc	r3, r3, #8
 8007e36:	3008      	addcc	r0, #8
 8007e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e3c:	bf3c      	itt	cc
 8007e3e:	011b      	lslcc	r3, r3, #4
 8007e40:	3004      	addcc	r0, #4
 8007e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e46:	bf3c      	itt	cc
 8007e48:	009b      	lslcc	r3, r3, #2
 8007e4a:	3002      	addcc	r0, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	db05      	blt.n	8007e5c <__hi0bits+0x3c>
 8007e50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e54:	f100 0001 	add.w	r0, r0, #1
 8007e58:	bf08      	it	eq
 8007e5a:	2020      	moveq	r0, #32
 8007e5c:	4770      	bx	lr

08007e5e <__lo0bits>:
 8007e5e:	6803      	ldr	r3, [r0, #0]
 8007e60:	4602      	mov	r2, r0
 8007e62:	f013 0007 	ands.w	r0, r3, #7
 8007e66:	d00b      	beq.n	8007e80 <__lo0bits+0x22>
 8007e68:	07d9      	lsls	r1, r3, #31
 8007e6a:	d421      	bmi.n	8007eb0 <__lo0bits+0x52>
 8007e6c:	0798      	lsls	r0, r3, #30
 8007e6e:	bf49      	itett	mi
 8007e70:	085b      	lsrmi	r3, r3, #1
 8007e72:	089b      	lsrpl	r3, r3, #2
 8007e74:	2001      	movmi	r0, #1
 8007e76:	6013      	strmi	r3, [r2, #0]
 8007e78:	bf5c      	itt	pl
 8007e7a:	6013      	strpl	r3, [r2, #0]
 8007e7c:	2002      	movpl	r0, #2
 8007e7e:	4770      	bx	lr
 8007e80:	b299      	uxth	r1, r3
 8007e82:	b909      	cbnz	r1, 8007e88 <__lo0bits+0x2a>
 8007e84:	0c1b      	lsrs	r3, r3, #16
 8007e86:	2010      	movs	r0, #16
 8007e88:	b2d9      	uxtb	r1, r3
 8007e8a:	b909      	cbnz	r1, 8007e90 <__lo0bits+0x32>
 8007e8c:	3008      	adds	r0, #8
 8007e8e:	0a1b      	lsrs	r3, r3, #8
 8007e90:	0719      	lsls	r1, r3, #28
 8007e92:	bf04      	itt	eq
 8007e94:	091b      	lsreq	r3, r3, #4
 8007e96:	3004      	addeq	r0, #4
 8007e98:	0799      	lsls	r1, r3, #30
 8007e9a:	bf04      	itt	eq
 8007e9c:	089b      	lsreq	r3, r3, #2
 8007e9e:	3002      	addeq	r0, #2
 8007ea0:	07d9      	lsls	r1, r3, #31
 8007ea2:	d403      	bmi.n	8007eac <__lo0bits+0x4e>
 8007ea4:	085b      	lsrs	r3, r3, #1
 8007ea6:	f100 0001 	add.w	r0, r0, #1
 8007eaa:	d003      	beq.n	8007eb4 <__lo0bits+0x56>
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4770      	bx	lr
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	4770      	bx	lr
 8007eb4:	2020      	movs	r0, #32
 8007eb6:	4770      	bx	lr

08007eb8 <__i2b>:
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	460c      	mov	r4, r1
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	f7ff ff07 	bl	8007cd0 <_Balloc>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	b928      	cbnz	r0, 8007ed2 <__i2b+0x1a>
 8007ec6:	4b05      	ldr	r3, [pc, #20]	@ (8007edc <__i2b+0x24>)
 8007ec8:	4805      	ldr	r0, [pc, #20]	@ (8007ee0 <__i2b+0x28>)
 8007eca:	f240 1145 	movw	r1, #325	@ 0x145
 8007ece:	f000 fd21 	bl	8008914 <__assert_func>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	6144      	str	r4, [r0, #20]
 8007ed6:	6103      	str	r3, [r0, #16]
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	bf00      	nop
 8007edc:	08008ca8 	.word	0x08008ca8
 8007ee0:	08008cb9 	.word	0x08008cb9

08007ee4 <__multiply>:
 8007ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee8:	4614      	mov	r4, r2
 8007eea:	690a      	ldr	r2, [r1, #16]
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	bfa8      	it	ge
 8007ef2:	4623      	movge	r3, r4
 8007ef4:	460f      	mov	r7, r1
 8007ef6:	bfa4      	itt	ge
 8007ef8:	460c      	movge	r4, r1
 8007efa:	461f      	movge	r7, r3
 8007efc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007f00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007f04:	68a3      	ldr	r3, [r4, #8]
 8007f06:	6861      	ldr	r1, [r4, #4]
 8007f08:	eb0a 0609 	add.w	r6, sl, r9
 8007f0c:	42b3      	cmp	r3, r6
 8007f0e:	b085      	sub	sp, #20
 8007f10:	bfb8      	it	lt
 8007f12:	3101      	addlt	r1, #1
 8007f14:	f7ff fedc 	bl	8007cd0 <_Balloc>
 8007f18:	b930      	cbnz	r0, 8007f28 <__multiply+0x44>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	4b44      	ldr	r3, [pc, #272]	@ (8008030 <__multiply+0x14c>)
 8007f1e:	4845      	ldr	r0, [pc, #276]	@ (8008034 <__multiply+0x150>)
 8007f20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f24:	f000 fcf6 	bl	8008914 <__assert_func>
 8007f28:	f100 0514 	add.w	r5, r0, #20
 8007f2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f30:	462b      	mov	r3, r5
 8007f32:	2200      	movs	r2, #0
 8007f34:	4543      	cmp	r3, r8
 8007f36:	d321      	bcc.n	8007f7c <__multiply+0x98>
 8007f38:	f107 0114 	add.w	r1, r7, #20
 8007f3c:	f104 0214 	add.w	r2, r4, #20
 8007f40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f48:	9302      	str	r3, [sp, #8]
 8007f4a:	1b13      	subs	r3, r2, r4
 8007f4c:	3b15      	subs	r3, #21
 8007f4e:	f023 0303 	bic.w	r3, r3, #3
 8007f52:	3304      	adds	r3, #4
 8007f54:	f104 0715 	add.w	r7, r4, #21
 8007f58:	42ba      	cmp	r2, r7
 8007f5a:	bf38      	it	cc
 8007f5c:	2304      	movcc	r3, #4
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	9b02      	ldr	r3, [sp, #8]
 8007f62:	9103      	str	r1, [sp, #12]
 8007f64:	428b      	cmp	r3, r1
 8007f66:	d80c      	bhi.n	8007f82 <__multiply+0x9e>
 8007f68:	2e00      	cmp	r6, #0
 8007f6a:	dd03      	ble.n	8007f74 <__multiply+0x90>
 8007f6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d05b      	beq.n	800802c <__multiply+0x148>
 8007f74:	6106      	str	r6, [r0, #16]
 8007f76:	b005      	add	sp, #20
 8007f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7c:	f843 2b04 	str.w	r2, [r3], #4
 8007f80:	e7d8      	b.n	8007f34 <__multiply+0x50>
 8007f82:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f86:	f1ba 0f00 	cmp.w	sl, #0
 8007f8a:	d024      	beq.n	8007fd6 <__multiply+0xf2>
 8007f8c:	f104 0e14 	add.w	lr, r4, #20
 8007f90:	46a9      	mov	r9, r5
 8007f92:	f04f 0c00 	mov.w	ip, #0
 8007f96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f9a:	f8d9 3000 	ldr.w	r3, [r9]
 8007f9e:	fa1f fb87 	uxth.w	fp, r7
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007fa8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007fac:	f8d9 7000 	ldr.w	r7, [r9]
 8007fb0:	4463      	add	r3, ip
 8007fb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fb6:	fb0a c70b 	mla	r7, sl, fp, ip
 8007fba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fc4:	4572      	cmp	r2, lr
 8007fc6:	f849 3b04 	str.w	r3, [r9], #4
 8007fca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fce:	d8e2      	bhi.n	8007f96 <__multiply+0xb2>
 8007fd0:	9b01      	ldr	r3, [sp, #4]
 8007fd2:	f845 c003 	str.w	ip, [r5, r3]
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fdc:	3104      	adds	r1, #4
 8007fde:	f1b9 0f00 	cmp.w	r9, #0
 8007fe2:	d021      	beq.n	8008028 <__multiply+0x144>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	f104 0c14 	add.w	ip, r4, #20
 8007fea:	46ae      	mov	lr, r5
 8007fec:	f04f 0a00 	mov.w	sl, #0
 8007ff0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ff4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ff8:	fb09 770b 	mla	r7, r9, fp, r7
 8007ffc:	4457      	add	r7, sl
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008004:	f84e 3b04 	str.w	r3, [lr], #4
 8008008:	f85c 3b04 	ldr.w	r3, [ip], #4
 800800c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008010:	f8be 3000 	ldrh.w	r3, [lr]
 8008014:	fb09 330a 	mla	r3, r9, sl, r3
 8008018:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800801c:	4562      	cmp	r2, ip
 800801e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008022:	d8e5      	bhi.n	8007ff0 <__multiply+0x10c>
 8008024:	9f01      	ldr	r7, [sp, #4]
 8008026:	51eb      	str	r3, [r5, r7]
 8008028:	3504      	adds	r5, #4
 800802a:	e799      	b.n	8007f60 <__multiply+0x7c>
 800802c:	3e01      	subs	r6, #1
 800802e:	e79b      	b.n	8007f68 <__multiply+0x84>
 8008030:	08008ca8 	.word	0x08008ca8
 8008034:	08008cb9 	.word	0x08008cb9

08008038 <__pow5mult>:
 8008038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800803c:	4615      	mov	r5, r2
 800803e:	f012 0203 	ands.w	r2, r2, #3
 8008042:	4607      	mov	r7, r0
 8008044:	460e      	mov	r6, r1
 8008046:	d007      	beq.n	8008058 <__pow5mult+0x20>
 8008048:	4c25      	ldr	r4, [pc, #148]	@ (80080e0 <__pow5mult+0xa8>)
 800804a:	3a01      	subs	r2, #1
 800804c:	2300      	movs	r3, #0
 800804e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008052:	f7ff fe9f 	bl	8007d94 <__multadd>
 8008056:	4606      	mov	r6, r0
 8008058:	10ad      	asrs	r5, r5, #2
 800805a:	d03d      	beq.n	80080d8 <__pow5mult+0xa0>
 800805c:	69fc      	ldr	r4, [r7, #28]
 800805e:	b97c      	cbnz	r4, 8008080 <__pow5mult+0x48>
 8008060:	2010      	movs	r0, #16
 8008062:	f7ff fd7f 	bl	8007b64 <malloc>
 8008066:	4602      	mov	r2, r0
 8008068:	61f8      	str	r0, [r7, #28]
 800806a:	b928      	cbnz	r0, 8008078 <__pow5mult+0x40>
 800806c:	4b1d      	ldr	r3, [pc, #116]	@ (80080e4 <__pow5mult+0xac>)
 800806e:	481e      	ldr	r0, [pc, #120]	@ (80080e8 <__pow5mult+0xb0>)
 8008070:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008074:	f000 fc4e 	bl	8008914 <__assert_func>
 8008078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800807c:	6004      	str	r4, [r0, #0]
 800807e:	60c4      	str	r4, [r0, #12]
 8008080:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008088:	b94c      	cbnz	r4, 800809e <__pow5mult+0x66>
 800808a:	f240 2171 	movw	r1, #625	@ 0x271
 800808e:	4638      	mov	r0, r7
 8008090:	f7ff ff12 	bl	8007eb8 <__i2b>
 8008094:	2300      	movs	r3, #0
 8008096:	f8c8 0008 	str.w	r0, [r8, #8]
 800809a:	4604      	mov	r4, r0
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	f04f 0900 	mov.w	r9, #0
 80080a2:	07eb      	lsls	r3, r5, #31
 80080a4:	d50a      	bpl.n	80080bc <__pow5mult+0x84>
 80080a6:	4631      	mov	r1, r6
 80080a8:	4622      	mov	r2, r4
 80080aa:	4638      	mov	r0, r7
 80080ac:	f7ff ff1a 	bl	8007ee4 <__multiply>
 80080b0:	4631      	mov	r1, r6
 80080b2:	4680      	mov	r8, r0
 80080b4:	4638      	mov	r0, r7
 80080b6:	f7ff fe4b 	bl	8007d50 <_Bfree>
 80080ba:	4646      	mov	r6, r8
 80080bc:	106d      	asrs	r5, r5, #1
 80080be:	d00b      	beq.n	80080d8 <__pow5mult+0xa0>
 80080c0:	6820      	ldr	r0, [r4, #0]
 80080c2:	b938      	cbnz	r0, 80080d4 <__pow5mult+0x9c>
 80080c4:	4622      	mov	r2, r4
 80080c6:	4621      	mov	r1, r4
 80080c8:	4638      	mov	r0, r7
 80080ca:	f7ff ff0b 	bl	8007ee4 <__multiply>
 80080ce:	6020      	str	r0, [r4, #0]
 80080d0:	f8c0 9000 	str.w	r9, [r0]
 80080d4:	4604      	mov	r4, r0
 80080d6:	e7e4      	b.n	80080a2 <__pow5mult+0x6a>
 80080d8:	4630      	mov	r0, r6
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	bf00      	nop
 80080e0:	08008d14 	.word	0x08008d14
 80080e4:	08008c39 	.word	0x08008c39
 80080e8:	08008cb9 	.word	0x08008cb9

080080ec <__lshift>:
 80080ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f0:	460c      	mov	r4, r1
 80080f2:	6849      	ldr	r1, [r1, #4]
 80080f4:	6923      	ldr	r3, [r4, #16]
 80080f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	4607      	mov	r7, r0
 80080fe:	4691      	mov	r9, r2
 8008100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008104:	f108 0601 	add.w	r6, r8, #1
 8008108:	42b3      	cmp	r3, r6
 800810a:	db0b      	blt.n	8008124 <__lshift+0x38>
 800810c:	4638      	mov	r0, r7
 800810e:	f7ff fddf 	bl	8007cd0 <_Balloc>
 8008112:	4605      	mov	r5, r0
 8008114:	b948      	cbnz	r0, 800812a <__lshift+0x3e>
 8008116:	4602      	mov	r2, r0
 8008118:	4b28      	ldr	r3, [pc, #160]	@ (80081bc <__lshift+0xd0>)
 800811a:	4829      	ldr	r0, [pc, #164]	@ (80081c0 <__lshift+0xd4>)
 800811c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008120:	f000 fbf8 	bl	8008914 <__assert_func>
 8008124:	3101      	adds	r1, #1
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	e7ee      	b.n	8008108 <__lshift+0x1c>
 800812a:	2300      	movs	r3, #0
 800812c:	f100 0114 	add.w	r1, r0, #20
 8008130:	f100 0210 	add.w	r2, r0, #16
 8008134:	4618      	mov	r0, r3
 8008136:	4553      	cmp	r3, sl
 8008138:	db33      	blt.n	80081a2 <__lshift+0xb6>
 800813a:	6920      	ldr	r0, [r4, #16]
 800813c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008140:	f104 0314 	add.w	r3, r4, #20
 8008144:	f019 091f 	ands.w	r9, r9, #31
 8008148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800814c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008150:	d02b      	beq.n	80081aa <__lshift+0xbe>
 8008152:	f1c9 0e20 	rsb	lr, r9, #32
 8008156:	468a      	mov	sl, r1
 8008158:	2200      	movs	r2, #0
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	fa00 f009 	lsl.w	r0, r0, r9
 8008160:	4310      	orrs	r0, r2
 8008162:	f84a 0b04 	str.w	r0, [sl], #4
 8008166:	f853 2b04 	ldr.w	r2, [r3], #4
 800816a:	459c      	cmp	ip, r3
 800816c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008170:	d8f3      	bhi.n	800815a <__lshift+0x6e>
 8008172:	ebac 0304 	sub.w	r3, ip, r4
 8008176:	3b15      	subs	r3, #21
 8008178:	f023 0303 	bic.w	r3, r3, #3
 800817c:	3304      	adds	r3, #4
 800817e:	f104 0015 	add.w	r0, r4, #21
 8008182:	4584      	cmp	ip, r0
 8008184:	bf38      	it	cc
 8008186:	2304      	movcc	r3, #4
 8008188:	50ca      	str	r2, [r1, r3]
 800818a:	b10a      	cbz	r2, 8008190 <__lshift+0xa4>
 800818c:	f108 0602 	add.w	r6, r8, #2
 8008190:	3e01      	subs	r6, #1
 8008192:	4638      	mov	r0, r7
 8008194:	612e      	str	r6, [r5, #16]
 8008196:	4621      	mov	r1, r4
 8008198:	f7ff fdda 	bl	8007d50 <_Bfree>
 800819c:	4628      	mov	r0, r5
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80081a6:	3301      	adds	r3, #1
 80081a8:	e7c5      	b.n	8008136 <__lshift+0x4a>
 80081aa:	3904      	subs	r1, #4
 80081ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80081b4:	459c      	cmp	ip, r3
 80081b6:	d8f9      	bhi.n	80081ac <__lshift+0xc0>
 80081b8:	e7ea      	b.n	8008190 <__lshift+0xa4>
 80081ba:	bf00      	nop
 80081bc:	08008ca8 	.word	0x08008ca8
 80081c0:	08008cb9 	.word	0x08008cb9

080081c4 <__mcmp>:
 80081c4:	690a      	ldr	r2, [r1, #16]
 80081c6:	4603      	mov	r3, r0
 80081c8:	6900      	ldr	r0, [r0, #16]
 80081ca:	1a80      	subs	r0, r0, r2
 80081cc:	b530      	push	{r4, r5, lr}
 80081ce:	d10e      	bne.n	80081ee <__mcmp+0x2a>
 80081d0:	3314      	adds	r3, #20
 80081d2:	3114      	adds	r1, #20
 80081d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081e4:	4295      	cmp	r5, r2
 80081e6:	d003      	beq.n	80081f0 <__mcmp+0x2c>
 80081e8:	d205      	bcs.n	80081f6 <__mcmp+0x32>
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295
 80081ee:	bd30      	pop	{r4, r5, pc}
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d3f3      	bcc.n	80081dc <__mcmp+0x18>
 80081f4:	e7fb      	b.n	80081ee <__mcmp+0x2a>
 80081f6:	2001      	movs	r0, #1
 80081f8:	e7f9      	b.n	80081ee <__mcmp+0x2a>
	...

080081fc <__mdiff>:
 80081fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	4689      	mov	r9, r1
 8008202:	4606      	mov	r6, r0
 8008204:	4611      	mov	r1, r2
 8008206:	4648      	mov	r0, r9
 8008208:	4614      	mov	r4, r2
 800820a:	f7ff ffdb 	bl	80081c4 <__mcmp>
 800820e:	1e05      	subs	r5, r0, #0
 8008210:	d112      	bne.n	8008238 <__mdiff+0x3c>
 8008212:	4629      	mov	r1, r5
 8008214:	4630      	mov	r0, r6
 8008216:	f7ff fd5b 	bl	8007cd0 <_Balloc>
 800821a:	4602      	mov	r2, r0
 800821c:	b928      	cbnz	r0, 800822a <__mdiff+0x2e>
 800821e:	4b3f      	ldr	r3, [pc, #252]	@ (800831c <__mdiff+0x120>)
 8008220:	f240 2137 	movw	r1, #567	@ 0x237
 8008224:	483e      	ldr	r0, [pc, #248]	@ (8008320 <__mdiff+0x124>)
 8008226:	f000 fb75 	bl	8008914 <__assert_func>
 800822a:	2301      	movs	r3, #1
 800822c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008230:	4610      	mov	r0, r2
 8008232:	b003      	add	sp, #12
 8008234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008238:	bfbc      	itt	lt
 800823a:	464b      	movlt	r3, r9
 800823c:	46a1      	movlt	r9, r4
 800823e:	4630      	mov	r0, r6
 8008240:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008244:	bfba      	itte	lt
 8008246:	461c      	movlt	r4, r3
 8008248:	2501      	movlt	r5, #1
 800824a:	2500      	movge	r5, #0
 800824c:	f7ff fd40 	bl	8007cd0 <_Balloc>
 8008250:	4602      	mov	r2, r0
 8008252:	b918      	cbnz	r0, 800825c <__mdiff+0x60>
 8008254:	4b31      	ldr	r3, [pc, #196]	@ (800831c <__mdiff+0x120>)
 8008256:	f240 2145 	movw	r1, #581	@ 0x245
 800825a:	e7e3      	b.n	8008224 <__mdiff+0x28>
 800825c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008260:	6926      	ldr	r6, [r4, #16]
 8008262:	60c5      	str	r5, [r0, #12]
 8008264:	f109 0310 	add.w	r3, r9, #16
 8008268:	f109 0514 	add.w	r5, r9, #20
 800826c:	f104 0e14 	add.w	lr, r4, #20
 8008270:	f100 0b14 	add.w	fp, r0, #20
 8008274:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008278:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	46d9      	mov	r9, fp
 8008280:	f04f 0c00 	mov.w	ip, #0
 8008284:	9b01      	ldr	r3, [sp, #4]
 8008286:	f85e 0b04 	ldr.w	r0, [lr], #4
 800828a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	fa1f f38a 	uxth.w	r3, sl
 8008294:	4619      	mov	r1, r3
 8008296:	b283      	uxth	r3, r0
 8008298:	1acb      	subs	r3, r1, r3
 800829a:	0c00      	lsrs	r0, r0, #16
 800829c:	4463      	add	r3, ip
 800829e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80082a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80082ac:	4576      	cmp	r6, lr
 80082ae:	f849 3b04 	str.w	r3, [r9], #4
 80082b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082b6:	d8e5      	bhi.n	8008284 <__mdiff+0x88>
 80082b8:	1b33      	subs	r3, r6, r4
 80082ba:	3b15      	subs	r3, #21
 80082bc:	f023 0303 	bic.w	r3, r3, #3
 80082c0:	3415      	adds	r4, #21
 80082c2:	3304      	adds	r3, #4
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	bf38      	it	cc
 80082c8:	2304      	movcc	r3, #4
 80082ca:	441d      	add	r5, r3
 80082cc:	445b      	add	r3, fp
 80082ce:	461e      	mov	r6, r3
 80082d0:	462c      	mov	r4, r5
 80082d2:	4544      	cmp	r4, r8
 80082d4:	d30e      	bcc.n	80082f4 <__mdiff+0xf8>
 80082d6:	f108 0103 	add.w	r1, r8, #3
 80082da:	1b49      	subs	r1, r1, r5
 80082dc:	f021 0103 	bic.w	r1, r1, #3
 80082e0:	3d03      	subs	r5, #3
 80082e2:	45a8      	cmp	r8, r5
 80082e4:	bf38      	it	cc
 80082e6:	2100      	movcc	r1, #0
 80082e8:	440b      	add	r3, r1
 80082ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082ee:	b191      	cbz	r1, 8008316 <__mdiff+0x11a>
 80082f0:	6117      	str	r7, [r2, #16]
 80082f2:	e79d      	b.n	8008230 <__mdiff+0x34>
 80082f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80082f8:	46e6      	mov	lr, ip
 80082fa:	0c08      	lsrs	r0, r1, #16
 80082fc:	fa1c fc81 	uxtah	ip, ip, r1
 8008300:	4471      	add	r1, lr
 8008302:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008306:	b289      	uxth	r1, r1
 8008308:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800830c:	f846 1b04 	str.w	r1, [r6], #4
 8008310:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008314:	e7dd      	b.n	80082d2 <__mdiff+0xd6>
 8008316:	3f01      	subs	r7, #1
 8008318:	e7e7      	b.n	80082ea <__mdiff+0xee>
 800831a:	bf00      	nop
 800831c:	08008ca8 	.word	0x08008ca8
 8008320:	08008cb9 	.word	0x08008cb9

08008324 <__d2b>:
 8008324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008328:	460f      	mov	r7, r1
 800832a:	2101      	movs	r1, #1
 800832c:	ec59 8b10 	vmov	r8, r9, d0
 8008330:	4616      	mov	r6, r2
 8008332:	f7ff fccd 	bl	8007cd0 <_Balloc>
 8008336:	4604      	mov	r4, r0
 8008338:	b930      	cbnz	r0, 8008348 <__d2b+0x24>
 800833a:	4602      	mov	r2, r0
 800833c:	4b23      	ldr	r3, [pc, #140]	@ (80083cc <__d2b+0xa8>)
 800833e:	4824      	ldr	r0, [pc, #144]	@ (80083d0 <__d2b+0xac>)
 8008340:	f240 310f 	movw	r1, #783	@ 0x30f
 8008344:	f000 fae6 	bl	8008914 <__assert_func>
 8008348:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800834c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008350:	b10d      	cbz	r5, 8008356 <__d2b+0x32>
 8008352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	f1b8 0300 	subs.w	r3, r8, #0
 800835c:	d023      	beq.n	80083a6 <__d2b+0x82>
 800835e:	4668      	mov	r0, sp
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	f7ff fd7c 	bl	8007e5e <__lo0bits>
 8008366:	e9dd 1200 	ldrd	r1, r2, [sp]
 800836a:	b1d0      	cbz	r0, 80083a2 <__d2b+0x7e>
 800836c:	f1c0 0320 	rsb	r3, r0, #32
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	430b      	orrs	r3, r1
 8008376:	40c2      	lsrs	r2, r0
 8008378:	6163      	str	r3, [r4, #20]
 800837a:	9201      	str	r2, [sp, #4]
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	61a3      	str	r3, [r4, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	bf0c      	ite	eq
 8008384:	2201      	moveq	r2, #1
 8008386:	2202      	movne	r2, #2
 8008388:	6122      	str	r2, [r4, #16]
 800838a:	b1a5      	cbz	r5, 80083b6 <__d2b+0x92>
 800838c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008390:	4405      	add	r5, r0
 8008392:	603d      	str	r5, [r7, #0]
 8008394:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008398:	6030      	str	r0, [r6, #0]
 800839a:	4620      	mov	r0, r4
 800839c:	b003      	add	sp, #12
 800839e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083a2:	6161      	str	r1, [r4, #20]
 80083a4:	e7ea      	b.n	800837c <__d2b+0x58>
 80083a6:	a801      	add	r0, sp, #4
 80083a8:	f7ff fd59 	bl	8007e5e <__lo0bits>
 80083ac:	9b01      	ldr	r3, [sp, #4]
 80083ae:	6163      	str	r3, [r4, #20]
 80083b0:	3020      	adds	r0, #32
 80083b2:	2201      	movs	r2, #1
 80083b4:	e7e8      	b.n	8008388 <__d2b+0x64>
 80083b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80083be:	6038      	str	r0, [r7, #0]
 80083c0:	6918      	ldr	r0, [r3, #16]
 80083c2:	f7ff fd2d 	bl	8007e20 <__hi0bits>
 80083c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083ca:	e7e5      	b.n	8008398 <__d2b+0x74>
 80083cc:	08008ca8 	.word	0x08008ca8
 80083d0:	08008cb9 	.word	0x08008cb9

080083d4 <__sfputc_r>:
 80083d4:	6893      	ldr	r3, [r2, #8]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	b410      	push	{r4}
 80083dc:	6093      	str	r3, [r2, #8]
 80083de:	da08      	bge.n	80083f2 <__sfputc_r+0x1e>
 80083e0:	6994      	ldr	r4, [r2, #24]
 80083e2:	42a3      	cmp	r3, r4
 80083e4:	db01      	blt.n	80083ea <__sfputc_r+0x16>
 80083e6:	290a      	cmp	r1, #10
 80083e8:	d103      	bne.n	80083f2 <__sfputc_r+0x1e>
 80083ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ee:	f000 b9df 	b.w	80087b0 <__swbuf_r>
 80083f2:	6813      	ldr	r3, [r2, #0]
 80083f4:	1c58      	adds	r0, r3, #1
 80083f6:	6010      	str	r0, [r2, #0]
 80083f8:	7019      	strb	r1, [r3, #0]
 80083fa:	4608      	mov	r0, r1
 80083fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008400:	4770      	bx	lr

08008402 <__sfputs_r>:
 8008402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008404:	4606      	mov	r6, r0
 8008406:	460f      	mov	r7, r1
 8008408:	4614      	mov	r4, r2
 800840a:	18d5      	adds	r5, r2, r3
 800840c:	42ac      	cmp	r4, r5
 800840e:	d101      	bne.n	8008414 <__sfputs_r+0x12>
 8008410:	2000      	movs	r0, #0
 8008412:	e007      	b.n	8008424 <__sfputs_r+0x22>
 8008414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008418:	463a      	mov	r2, r7
 800841a:	4630      	mov	r0, r6
 800841c:	f7ff ffda 	bl	80083d4 <__sfputc_r>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d1f3      	bne.n	800840c <__sfputs_r+0xa>
 8008424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008428 <_vfiprintf_r>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	460d      	mov	r5, r1
 800842e:	b09d      	sub	sp, #116	@ 0x74
 8008430:	4614      	mov	r4, r2
 8008432:	4698      	mov	r8, r3
 8008434:	4606      	mov	r6, r0
 8008436:	b118      	cbz	r0, 8008440 <_vfiprintf_r+0x18>
 8008438:	6a03      	ldr	r3, [r0, #32]
 800843a:	b90b      	cbnz	r3, 8008440 <_vfiprintf_r+0x18>
 800843c:	f7fe fbee 	bl	8006c1c <__sinit>
 8008440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008442:	07d9      	lsls	r1, r3, #31
 8008444:	d405      	bmi.n	8008452 <_vfiprintf_r+0x2a>
 8008446:	89ab      	ldrh	r3, [r5, #12]
 8008448:	059a      	lsls	r2, r3, #22
 800844a:	d402      	bmi.n	8008452 <_vfiprintf_r+0x2a>
 800844c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800844e:	f7fe fcee 	bl	8006e2e <__retarget_lock_acquire_recursive>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	071b      	lsls	r3, r3, #28
 8008456:	d501      	bpl.n	800845c <_vfiprintf_r+0x34>
 8008458:	692b      	ldr	r3, [r5, #16]
 800845a:	b99b      	cbnz	r3, 8008484 <_vfiprintf_r+0x5c>
 800845c:	4629      	mov	r1, r5
 800845e:	4630      	mov	r0, r6
 8008460:	f000 f9e4 	bl	800882c <__swsetup_r>
 8008464:	b170      	cbz	r0, 8008484 <_vfiprintf_r+0x5c>
 8008466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008468:	07dc      	lsls	r4, r3, #31
 800846a:	d504      	bpl.n	8008476 <_vfiprintf_r+0x4e>
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	b01d      	add	sp, #116	@ 0x74
 8008472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008476:	89ab      	ldrh	r3, [r5, #12]
 8008478:	0598      	lsls	r0, r3, #22
 800847a:	d4f7      	bmi.n	800846c <_vfiprintf_r+0x44>
 800847c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800847e:	f7fe fcd7 	bl	8006e30 <__retarget_lock_release_recursive>
 8008482:	e7f3      	b.n	800846c <_vfiprintf_r+0x44>
 8008484:	2300      	movs	r3, #0
 8008486:	9309      	str	r3, [sp, #36]	@ 0x24
 8008488:	2320      	movs	r3, #32
 800848a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800848e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008492:	2330      	movs	r3, #48	@ 0x30
 8008494:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008644 <_vfiprintf_r+0x21c>
 8008498:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800849c:	f04f 0901 	mov.w	r9, #1
 80084a0:	4623      	mov	r3, r4
 80084a2:	469a      	mov	sl, r3
 80084a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a8:	b10a      	cbz	r2, 80084ae <_vfiprintf_r+0x86>
 80084aa:	2a25      	cmp	r2, #37	@ 0x25
 80084ac:	d1f9      	bne.n	80084a2 <_vfiprintf_r+0x7a>
 80084ae:	ebba 0b04 	subs.w	fp, sl, r4
 80084b2:	d00b      	beq.n	80084cc <_vfiprintf_r+0xa4>
 80084b4:	465b      	mov	r3, fp
 80084b6:	4622      	mov	r2, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	4630      	mov	r0, r6
 80084bc:	f7ff ffa1 	bl	8008402 <__sfputs_r>
 80084c0:	3001      	adds	r0, #1
 80084c2:	f000 80a7 	beq.w	8008614 <_vfiprintf_r+0x1ec>
 80084c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084c8:	445a      	add	r2, fp
 80084ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80084cc:	f89a 3000 	ldrb.w	r3, [sl]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 809f 	beq.w	8008614 <_vfiprintf_r+0x1ec>
 80084d6:	2300      	movs	r3, #0
 80084d8:	f04f 32ff 	mov.w	r2, #4294967295
 80084dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084e0:	f10a 0a01 	add.w	sl, sl, #1
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80084ee:	4654      	mov	r4, sl
 80084f0:	2205      	movs	r2, #5
 80084f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f6:	4853      	ldr	r0, [pc, #332]	@ (8008644 <_vfiprintf_r+0x21c>)
 80084f8:	f7f7 fe7a 	bl	80001f0 <memchr>
 80084fc:	9a04      	ldr	r2, [sp, #16]
 80084fe:	b9d8      	cbnz	r0, 8008538 <_vfiprintf_r+0x110>
 8008500:	06d1      	lsls	r1, r2, #27
 8008502:	bf44      	itt	mi
 8008504:	2320      	movmi	r3, #32
 8008506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800850a:	0713      	lsls	r3, r2, #28
 800850c:	bf44      	itt	mi
 800850e:	232b      	movmi	r3, #43	@ 0x2b
 8008510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008514:	f89a 3000 	ldrb.w	r3, [sl]
 8008518:	2b2a      	cmp	r3, #42	@ 0x2a
 800851a:	d015      	beq.n	8008548 <_vfiprintf_r+0x120>
 800851c:	9a07      	ldr	r2, [sp, #28]
 800851e:	4654      	mov	r4, sl
 8008520:	2000      	movs	r0, #0
 8008522:	f04f 0c0a 	mov.w	ip, #10
 8008526:	4621      	mov	r1, r4
 8008528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800852c:	3b30      	subs	r3, #48	@ 0x30
 800852e:	2b09      	cmp	r3, #9
 8008530:	d94b      	bls.n	80085ca <_vfiprintf_r+0x1a2>
 8008532:	b1b0      	cbz	r0, 8008562 <_vfiprintf_r+0x13a>
 8008534:	9207      	str	r2, [sp, #28]
 8008536:	e014      	b.n	8008562 <_vfiprintf_r+0x13a>
 8008538:	eba0 0308 	sub.w	r3, r0, r8
 800853c:	fa09 f303 	lsl.w	r3, r9, r3
 8008540:	4313      	orrs	r3, r2
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	46a2      	mov	sl, r4
 8008546:	e7d2      	b.n	80084ee <_vfiprintf_r+0xc6>
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	1d19      	adds	r1, r3, #4
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	9103      	str	r1, [sp, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	bfbb      	ittet	lt
 8008554:	425b      	neglt	r3, r3
 8008556:	f042 0202 	orrlt.w	r2, r2, #2
 800855a:	9307      	strge	r3, [sp, #28]
 800855c:	9307      	strlt	r3, [sp, #28]
 800855e:	bfb8      	it	lt
 8008560:	9204      	strlt	r2, [sp, #16]
 8008562:	7823      	ldrb	r3, [r4, #0]
 8008564:	2b2e      	cmp	r3, #46	@ 0x2e
 8008566:	d10a      	bne.n	800857e <_vfiprintf_r+0x156>
 8008568:	7863      	ldrb	r3, [r4, #1]
 800856a:	2b2a      	cmp	r3, #42	@ 0x2a
 800856c:	d132      	bne.n	80085d4 <_vfiprintf_r+0x1ac>
 800856e:	9b03      	ldr	r3, [sp, #12]
 8008570:	1d1a      	adds	r2, r3, #4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	9203      	str	r2, [sp, #12]
 8008576:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800857a:	3402      	adds	r4, #2
 800857c:	9305      	str	r3, [sp, #20]
 800857e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008654 <_vfiprintf_r+0x22c>
 8008582:	7821      	ldrb	r1, [r4, #0]
 8008584:	2203      	movs	r2, #3
 8008586:	4650      	mov	r0, sl
 8008588:	f7f7 fe32 	bl	80001f0 <memchr>
 800858c:	b138      	cbz	r0, 800859e <_vfiprintf_r+0x176>
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	eba0 000a 	sub.w	r0, r0, sl
 8008594:	2240      	movs	r2, #64	@ 0x40
 8008596:	4082      	lsls	r2, r0
 8008598:	4313      	orrs	r3, r2
 800859a:	3401      	adds	r4, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a2:	4829      	ldr	r0, [pc, #164]	@ (8008648 <_vfiprintf_r+0x220>)
 80085a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085a8:	2206      	movs	r2, #6
 80085aa:	f7f7 fe21 	bl	80001f0 <memchr>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d03f      	beq.n	8008632 <_vfiprintf_r+0x20a>
 80085b2:	4b26      	ldr	r3, [pc, #152]	@ (800864c <_vfiprintf_r+0x224>)
 80085b4:	bb1b      	cbnz	r3, 80085fe <_vfiprintf_r+0x1d6>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	3307      	adds	r3, #7
 80085ba:	f023 0307 	bic.w	r3, r3, #7
 80085be:	3308      	adds	r3, #8
 80085c0:	9303      	str	r3, [sp, #12]
 80085c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c4:	443b      	add	r3, r7
 80085c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085c8:	e76a      	b.n	80084a0 <_vfiprintf_r+0x78>
 80085ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ce:	460c      	mov	r4, r1
 80085d0:	2001      	movs	r0, #1
 80085d2:	e7a8      	b.n	8008526 <_vfiprintf_r+0xfe>
 80085d4:	2300      	movs	r3, #0
 80085d6:	3401      	adds	r4, #1
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	4619      	mov	r1, r3
 80085dc:	f04f 0c0a 	mov.w	ip, #10
 80085e0:	4620      	mov	r0, r4
 80085e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e6:	3a30      	subs	r2, #48	@ 0x30
 80085e8:	2a09      	cmp	r2, #9
 80085ea:	d903      	bls.n	80085f4 <_vfiprintf_r+0x1cc>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0c6      	beq.n	800857e <_vfiprintf_r+0x156>
 80085f0:	9105      	str	r1, [sp, #20]
 80085f2:	e7c4      	b.n	800857e <_vfiprintf_r+0x156>
 80085f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f8:	4604      	mov	r4, r0
 80085fa:	2301      	movs	r3, #1
 80085fc:	e7f0      	b.n	80085e0 <_vfiprintf_r+0x1b8>
 80085fe:	ab03      	add	r3, sp, #12
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	462a      	mov	r2, r5
 8008604:	4b12      	ldr	r3, [pc, #72]	@ (8008650 <_vfiprintf_r+0x228>)
 8008606:	a904      	add	r1, sp, #16
 8008608:	4630      	mov	r0, r6
 800860a:	f7fd fec3 	bl	8006394 <_printf_float>
 800860e:	4607      	mov	r7, r0
 8008610:	1c78      	adds	r0, r7, #1
 8008612:	d1d6      	bne.n	80085c2 <_vfiprintf_r+0x19a>
 8008614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008616:	07d9      	lsls	r1, r3, #31
 8008618:	d405      	bmi.n	8008626 <_vfiprintf_r+0x1fe>
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	059a      	lsls	r2, r3, #22
 800861e:	d402      	bmi.n	8008626 <_vfiprintf_r+0x1fe>
 8008620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008622:	f7fe fc05 	bl	8006e30 <__retarget_lock_release_recursive>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	065b      	lsls	r3, r3, #25
 800862a:	f53f af1f 	bmi.w	800846c <_vfiprintf_r+0x44>
 800862e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008630:	e71e      	b.n	8008470 <_vfiprintf_r+0x48>
 8008632:	ab03      	add	r3, sp, #12
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	462a      	mov	r2, r5
 8008638:	4b05      	ldr	r3, [pc, #20]	@ (8008650 <_vfiprintf_r+0x228>)
 800863a:	a904      	add	r1, sp, #16
 800863c:	4630      	mov	r0, r6
 800863e:	f7fe f941 	bl	80068c4 <_printf_i>
 8008642:	e7e4      	b.n	800860e <_vfiprintf_r+0x1e6>
 8008644:	08008e10 	.word	0x08008e10
 8008648:	08008e1a 	.word	0x08008e1a
 800864c:	08006395 	.word	0x08006395
 8008650:	08008403 	.word	0x08008403
 8008654:	08008e16 	.word	0x08008e16

08008658 <__sflush_r>:
 8008658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	0716      	lsls	r6, r2, #28
 8008662:	4605      	mov	r5, r0
 8008664:	460c      	mov	r4, r1
 8008666:	d454      	bmi.n	8008712 <__sflush_r+0xba>
 8008668:	684b      	ldr	r3, [r1, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	dc02      	bgt.n	8008674 <__sflush_r+0x1c>
 800866e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	dd48      	ble.n	8008706 <__sflush_r+0xae>
 8008674:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008676:	2e00      	cmp	r6, #0
 8008678:	d045      	beq.n	8008706 <__sflush_r+0xae>
 800867a:	2300      	movs	r3, #0
 800867c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008680:	682f      	ldr	r7, [r5, #0]
 8008682:	6a21      	ldr	r1, [r4, #32]
 8008684:	602b      	str	r3, [r5, #0]
 8008686:	d030      	beq.n	80086ea <__sflush_r+0x92>
 8008688:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	0759      	lsls	r1, r3, #29
 800868e:	d505      	bpl.n	800869c <__sflush_r+0x44>
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008696:	b10b      	cbz	r3, 800869c <__sflush_r+0x44>
 8008698:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800869a:	1ad2      	subs	r2, r2, r3
 800869c:	2300      	movs	r3, #0
 800869e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086a0:	6a21      	ldr	r1, [r4, #32]
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b0      	blx	r6
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	d106      	bne.n	80086ba <__sflush_r+0x62>
 80086ac:	6829      	ldr	r1, [r5, #0]
 80086ae:	291d      	cmp	r1, #29
 80086b0:	d82b      	bhi.n	800870a <__sflush_r+0xb2>
 80086b2:	4a2a      	ldr	r2, [pc, #168]	@ (800875c <__sflush_r+0x104>)
 80086b4:	410a      	asrs	r2, r1
 80086b6:	07d6      	lsls	r6, r2, #31
 80086b8:	d427      	bmi.n	800870a <__sflush_r+0xb2>
 80086ba:	2200      	movs	r2, #0
 80086bc:	6062      	str	r2, [r4, #4]
 80086be:	04d9      	lsls	r1, r3, #19
 80086c0:	6922      	ldr	r2, [r4, #16]
 80086c2:	6022      	str	r2, [r4, #0]
 80086c4:	d504      	bpl.n	80086d0 <__sflush_r+0x78>
 80086c6:	1c42      	adds	r2, r0, #1
 80086c8:	d101      	bne.n	80086ce <__sflush_r+0x76>
 80086ca:	682b      	ldr	r3, [r5, #0]
 80086cc:	b903      	cbnz	r3, 80086d0 <__sflush_r+0x78>
 80086ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80086d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086d2:	602f      	str	r7, [r5, #0]
 80086d4:	b1b9      	cbz	r1, 8008706 <__sflush_r+0xae>
 80086d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086da:	4299      	cmp	r1, r3
 80086dc:	d002      	beq.n	80086e4 <__sflush_r+0x8c>
 80086de:	4628      	mov	r0, r5
 80086e0:	f7ff f9f6 	bl	8007ad0 <_free_r>
 80086e4:	2300      	movs	r3, #0
 80086e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80086e8:	e00d      	b.n	8008706 <__sflush_r+0xae>
 80086ea:	2301      	movs	r3, #1
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b0      	blx	r6
 80086f0:	4602      	mov	r2, r0
 80086f2:	1c50      	adds	r0, r2, #1
 80086f4:	d1c9      	bne.n	800868a <__sflush_r+0x32>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0c6      	beq.n	800868a <__sflush_r+0x32>
 80086fc:	2b1d      	cmp	r3, #29
 80086fe:	d001      	beq.n	8008704 <__sflush_r+0xac>
 8008700:	2b16      	cmp	r3, #22
 8008702:	d11e      	bne.n	8008742 <__sflush_r+0xea>
 8008704:	602f      	str	r7, [r5, #0]
 8008706:	2000      	movs	r0, #0
 8008708:	e022      	b.n	8008750 <__sflush_r+0xf8>
 800870a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870e:	b21b      	sxth	r3, r3
 8008710:	e01b      	b.n	800874a <__sflush_r+0xf2>
 8008712:	690f      	ldr	r7, [r1, #16]
 8008714:	2f00      	cmp	r7, #0
 8008716:	d0f6      	beq.n	8008706 <__sflush_r+0xae>
 8008718:	0793      	lsls	r3, r2, #30
 800871a:	680e      	ldr	r6, [r1, #0]
 800871c:	bf08      	it	eq
 800871e:	694b      	ldreq	r3, [r1, #20]
 8008720:	600f      	str	r7, [r1, #0]
 8008722:	bf18      	it	ne
 8008724:	2300      	movne	r3, #0
 8008726:	eba6 0807 	sub.w	r8, r6, r7
 800872a:	608b      	str	r3, [r1, #8]
 800872c:	f1b8 0f00 	cmp.w	r8, #0
 8008730:	dde9      	ble.n	8008706 <__sflush_r+0xae>
 8008732:	6a21      	ldr	r1, [r4, #32]
 8008734:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008736:	4643      	mov	r3, r8
 8008738:	463a      	mov	r2, r7
 800873a:	4628      	mov	r0, r5
 800873c:	47b0      	blx	r6
 800873e:	2800      	cmp	r0, #0
 8008740:	dc08      	bgt.n	8008754 <__sflush_r+0xfc>
 8008742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008754:	4407      	add	r7, r0
 8008756:	eba8 0800 	sub.w	r8, r8, r0
 800875a:	e7e7      	b.n	800872c <__sflush_r+0xd4>
 800875c:	dfbffffe 	.word	0xdfbffffe

08008760 <_fflush_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	690b      	ldr	r3, [r1, #16]
 8008764:	4605      	mov	r5, r0
 8008766:	460c      	mov	r4, r1
 8008768:	b913      	cbnz	r3, 8008770 <_fflush_r+0x10>
 800876a:	2500      	movs	r5, #0
 800876c:	4628      	mov	r0, r5
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	b118      	cbz	r0, 800877a <_fflush_r+0x1a>
 8008772:	6a03      	ldr	r3, [r0, #32]
 8008774:	b90b      	cbnz	r3, 800877a <_fflush_r+0x1a>
 8008776:	f7fe fa51 	bl	8006c1c <__sinit>
 800877a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f3      	beq.n	800876a <_fflush_r+0xa>
 8008782:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008784:	07d0      	lsls	r0, r2, #31
 8008786:	d404      	bmi.n	8008792 <_fflush_r+0x32>
 8008788:	0599      	lsls	r1, r3, #22
 800878a:	d402      	bmi.n	8008792 <_fflush_r+0x32>
 800878c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878e:	f7fe fb4e 	bl	8006e2e <__retarget_lock_acquire_recursive>
 8008792:	4628      	mov	r0, r5
 8008794:	4621      	mov	r1, r4
 8008796:	f7ff ff5f 	bl	8008658 <__sflush_r>
 800879a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800879c:	07da      	lsls	r2, r3, #31
 800879e:	4605      	mov	r5, r0
 80087a0:	d4e4      	bmi.n	800876c <_fflush_r+0xc>
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	059b      	lsls	r3, r3, #22
 80087a6:	d4e1      	bmi.n	800876c <_fflush_r+0xc>
 80087a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087aa:	f7fe fb41 	bl	8006e30 <__retarget_lock_release_recursive>
 80087ae:	e7dd      	b.n	800876c <_fflush_r+0xc>

080087b0 <__swbuf_r>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	460e      	mov	r6, r1
 80087b4:	4614      	mov	r4, r2
 80087b6:	4605      	mov	r5, r0
 80087b8:	b118      	cbz	r0, 80087c2 <__swbuf_r+0x12>
 80087ba:	6a03      	ldr	r3, [r0, #32]
 80087bc:	b90b      	cbnz	r3, 80087c2 <__swbuf_r+0x12>
 80087be:	f7fe fa2d 	bl	8006c1c <__sinit>
 80087c2:	69a3      	ldr	r3, [r4, #24]
 80087c4:	60a3      	str	r3, [r4, #8]
 80087c6:	89a3      	ldrh	r3, [r4, #12]
 80087c8:	071a      	lsls	r2, r3, #28
 80087ca:	d501      	bpl.n	80087d0 <__swbuf_r+0x20>
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	b943      	cbnz	r3, 80087e2 <__swbuf_r+0x32>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4628      	mov	r0, r5
 80087d4:	f000 f82a 	bl	800882c <__swsetup_r>
 80087d8:	b118      	cbz	r0, 80087e2 <__swbuf_r+0x32>
 80087da:	f04f 37ff 	mov.w	r7, #4294967295
 80087de:	4638      	mov	r0, r7
 80087e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	6922      	ldr	r2, [r4, #16]
 80087e6:	1a98      	subs	r0, r3, r2
 80087e8:	6963      	ldr	r3, [r4, #20]
 80087ea:	b2f6      	uxtb	r6, r6
 80087ec:	4283      	cmp	r3, r0
 80087ee:	4637      	mov	r7, r6
 80087f0:	dc05      	bgt.n	80087fe <__swbuf_r+0x4e>
 80087f2:	4621      	mov	r1, r4
 80087f4:	4628      	mov	r0, r5
 80087f6:	f7ff ffb3 	bl	8008760 <_fflush_r>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d1ed      	bne.n	80087da <__swbuf_r+0x2a>
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	3b01      	subs	r3, #1
 8008802:	60a3      	str	r3, [r4, #8]
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	6022      	str	r2, [r4, #0]
 800880a:	701e      	strb	r6, [r3, #0]
 800880c:	6962      	ldr	r2, [r4, #20]
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	429a      	cmp	r2, r3
 8008812:	d004      	beq.n	800881e <__swbuf_r+0x6e>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	07db      	lsls	r3, r3, #31
 8008818:	d5e1      	bpl.n	80087de <__swbuf_r+0x2e>
 800881a:	2e0a      	cmp	r6, #10
 800881c:	d1df      	bne.n	80087de <__swbuf_r+0x2e>
 800881e:	4621      	mov	r1, r4
 8008820:	4628      	mov	r0, r5
 8008822:	f7ff ff9d 	bl	8008760 <_fflush_r>
 8008826:	2800      	cmp	r0, #0
 8008828:	d0d9      	beq.n	80087de <__swbuf_r+0x2e>
 800882a:	e7d6      	b.n	80087da <__swbuf_r+0x2a>

0800882c <__swsetup_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4b29      	ldr	r3, [pc, #164]	@ (80088d4 <__swsetup_r+0xa8>)
 8008830:	4605      	mov	r5, r0
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	460c      	mov	r4, r1
 8008836:	b118      	cbz	r0, 8008840 <__swsetup_r+0x14>
 8008838:	6a03      	ldr	r3, [r0, #32]
 800883a:	b90b      	cbnz	r3, 8008840 <__swsetup_r+0x14>
 800883c:	f7fe f9ee 	bl	8006c1c <__sinit>
 8008840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008844:	0719      	lsls	r1, r3, #28
 8008846:	d422      	bmi.n	800888e <__swsetup_r+0x62>
 8008848:	06da      	lsls	r2, r3, #27
 800884a:	d407      	bmi.n	800885c <__swsetup_r+0x30>
 800884c:	2209      	movs	r2, #9
 800884e:	602a      	str	r2, [r5, #0]
 8008850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	f04f 30ff 	mov.w	r0, #4294967295
 800885a:	e033      	b.n	80088c4 <__swsetup_r+0x98>
 800885c:	0758      	lsls	r0, r3, #29
 800885e:	d512      	bpl.n	8008886 <__swsetup_r+0x5a>
 8008860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008862:	b141      	cbz	r1, 8008876 <__swsetup_r+0x4a>
 8008864:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008868:	4299      	cmp	r1, r3
 800886a:	d002      	beq.n	8008872 <__swsetup_r+0x46>
 800886c:	4628      	mov	r0, r5
 800886e:	f7ff f92f 	bl	8007ad0 <_free_r>
 8008872:	2300      	movs	r3, #0
 8008874:	6363      	str	r3, [r4, #52]	@ 0x34
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	2300      	movs	r3, #0
 8008880:	6063      	str	r3, [r4, #4]
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f043 0308 	orr.w	r3, r3, #8
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	b94b      	cbnz	r3, 80088a6 <__swsetup_r+0x7a>
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800889c:	d003      	beq.n	80088a6 <__swsetup_r+0x7a>
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f000 f8c1 	bl	8008a28 <__smakebuf_r>
 80088a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088aa:	f013 0201 	ands.w	r2, r3, #1
 80088ae:	d00a      	beq.n	80088c6 <__swsetup_r+0x9a>
 80088b0:	2200      	movs	r2, #0
 80088b2:	60a2      	str	r2, [r4, #8]
 80088b4:	6962      	ldr	r2, [r4, #20]
 80088b6:	4252      	negs	r2, r2
 80088b8:	61a2      	str	r2, [r4, #24]
 80088ba:	6922      	ldr	r2, [r4, #16]
 80088bc:	b942      	cbnz	r2, 80088d0 <__swsetup_r+0xa4>
 80088be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088c2:	d1c5      	bne.n	8008850 <__swsetup_r+0x24>
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	0799      	lsls	r1, r3, #30
 80088c8:	bf58      	it	pl
 80088ca:	6962      	ldrpl	r2, [r4, #20]
 80088cc:	60a2      	str	r2, [r4, #8]
 80088ce:	e7f4      	b.n	80088ba <__swsetup_r+0x8e>
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7f7      	b.n	80088c4 <__swsetup_r+0x98>
 80088d4:	20000018 	.word	0x20000018

080088d8 <_sbrk_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4d06      	ldr	r5, [pc, #24]	@ (80088f4 <_sbrk_r+0x1c>)
 80088dc:	2300      	movs	r3, #0
 80088de:	4604      	mov	r4, r0
 80088e0:	4608      	mov	r0, r1
 80088e2:	602b      	str	r3, [r5, #0]
 80088e4:	f7f9 f81a 	bl	800191c <_sbrk>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_sbrk_r+0x1a>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_sbrk_r+0x1a>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	200004f0 	.word	0x200004f0

080088f8 <memcpy>:
 80088f8:	440a      	add	r2, r1
 80088fa:	4291      	cmp	r1, r2
 80088fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008900:	d100      	bne.n	8008904 <memcpy+0xc>
 8008902:	4770      	bx	lr
 8008904:	b510      	push	{r4, lr}
 8008906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800890a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800890e:	4291      	cmp	r1, r2
 8008910:	d1f9      	bne.n	8008906 <memcpy+0xe>
 8008912:	bd10      	pop	{r4, pc}

08008914 <__assert_func>:
 8008914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008916:	4614      	mov	r4, r2
 8008918:	461a      	mov	r2, r3
 800891a:	4b09      	ldr	r3, [pc, #36]	@ (8008940 <__assert_func+0x2c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4605      	mov	r5, r0
 8008920:	68d8      	ldr	r0, [r3, #12]
 8008922:	b954      	cbnz	r4, 800893a <__assert_func+0x26>
 8008924:	4b07      	ldr	r3, [pc, #28]	@ (8008944 <__assert_func+0x30>)
 8008926:	461c      	mov	r4, r3
 8008928:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800892c:	9100      	str	r1, [sp, #0]
 800892e:	462b      	mov	r3, r5
 8008930:	4905      	ldr	r1, [pc, #20]	@ (8008948 <__assert_func+0x34>)
 8008932:	f000 f841 	bl	80089b8 <fiprintf>
 8008936:	f000 f8d5 	bl	8008ae4 <abort>
 800893a:	4b04      	ldr	r3, [pc, #16]	@ (800894c <__assert_func+0x38>)
 800893c:	e7f4      	b.n	8008928 <__assert_func+0x14>
 800893e:	bf00      	nop
 8008940:	20000018 	.word	0x20000018
 8008944:	08008e66 	.word	0x08008e66
 8008948:	08008e38 	.word	0x08008e38
 800894c:	08008e2b 	.word	0x08008e2b

08008950 <_calloc_r>:
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	fba1 5402 	umull	r5, r4, r1, r2
 8008956:	b93c      	cbnz	r4, 8008968 <_calloc_r+0x18>
 8008958:	4629      	mov	r1, r5
 800895a:	f7ff f92d 	bl	8007bb8 <_malloc_r>
 800895e:	4606      	mov	r6, r0
 8008960:	b928      	cbnz	r0, 800896e <_calloc_r+0x1e>
 8008962:	2600      	movs	r6, #0
 8008964:	4630      	mov	r0, r6
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	220c      	movs	r2, #12
 800896a:	6002      	str	r2, [r0, #0]
 800896c:	e7f9      	b.n	8008962 <_calloc_r+0x12>
 800896e:	462a      	mov	r2, r5
 8008970:	4621      	mov	r1, r4
 8008972:	f7fe f9de 	bl	8006d32 <memset>
 8008976:	e7f5      	b.n	8008964 <_calloc_r+0x14>

08008978 <__ascii_mbtowc>:
 8008978:	b082      	sub	sp, #8
 800897a:	b901      	cbnz	r1, 800897e <__ascii_mbtowc+0x6>
 800897c:	a901      	add	r1, sp, #4
 800897e:	b142      	cbz	r2, 8008992 <__ascii_mbtowc+0x1a>
 8008980:	b14b      	cbz	r3, 8008996 <__ascii_mbtowc+0x1e>
 8008982:	7813      	ldrb	r3, [r2, #0]
 8008984:	600b      	str	r3, [r1, #0]
 8008986:	7812      	ldrb	r2, [r2, #0]
 8008988:	1e10      	subs	r0, r2, #0
 800898a:	bf18      	it	ne
 800898c:	2001      	movne	r0, #1
 800898e:	b002      	add	sp, #8
 8008990:	4770      	bx	lr
 8008992:	4610      	mov	r0, r2
 8008994:	e7fb      	b.n	800898e <__ascii_mbtowc+0x16>
 8008996:	f06f 0001 	mvn.w	r0, #1
 800899a:	e7f8      	b.n	800898e <__ascii_mbtowc+0x16>

0800899c <__ascii_wctomb>:
 800899c:	4603      	mov	r3, r0
 800899e:	4608      	mov	r0, r1
 80089a0:	b141      	cbz	r1, 80089b4 <__ascii_wctomb+0x18>
 80089a2:	2aff      	cmp	r2, #255	@ 0xff
 80089a4:	d904      	bls.n	80089b0 <__ascii_wctomb+0x14>
 80089a6:	228a      	movs	r2, #138	@ 0x8a
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	f04f 30ff 	mov.w	r0, #4294967295
 80089ae:	4770      	bx	lr
 80089b0:	700a      	strb	r2, [r1, #0]
 80089b2:	2001      	movs	r0, #1
 80089b4:	4770      	bx	lr
	...

080089b8 <fiprintf>:
 80089b8:	b40e      	push	{r1, r2, r3}
 80089ba:	b503      	push	{r0, r1, lr}
 80089bc:	4601      	mov	r1, r0
 80089be:	ab03      	add	r3, sp, #12
 80089c0:	4805      	ldr	r0, [pc, #20]	@ (80089d8 <fiprintf+0x20>)
 80089c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c6:	6800      	ldr	r0, [r0, #0]
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	f7ff fd2d 	bl	8008428 <_vfiprintf_r>
 80089ce:	b002      	add	sp, #8
 80089d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d4:	b003      	add	sp, #12
 80089d6:	4770      	bx	lr
 80089d8:	20000018 	.word	0x20000018

080089dc <__swhatbuf_r>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	460c      	mov	r4, r1
 80089e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e4:	2900      	cmp	r1, #0
 80089e6:	b096      	sub	sp, #88	@ 0x58
 80089e8:	4615      	mov	r5, r2
 80089ea:	461e      	mov	r6, r3
 80089ec:	da0d      	bge.n	8008a0a <__swhatbuf_r+0x2e>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089f4:	f04f 0100 	mov.w	r1, #0
 80089f8:	bf14      	ite	ne
 80089fa:	2340      	movne	r3, #64	@ 0x40
 80089fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a00:	2000      	movs	r0, #0
 8008a02:	6031      	str	r1, [r6, #0]
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	b016      	add	sp, #88	@ 0x58
 8008a08:	bd70      	pop	{r4, r5, r6, pc}
 8008a0a:	466a      	mov	r2, sp
 8008a0c:	f000 f848 	bl	8008aa0 <_fstat_r>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	dbec      	blt.n	80089ee <__swhatbuf_r+0x12>
 8008a14:	9901      	ldr	r1, [sp, #4]
 8008a16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a1e:	4259      	negs	r1, r3
 8008a20:	4159      	adcs	r1, r3
 8008a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a26:	e7eb      	b.n	8008a00 <__swhatbuf_r+0x24>

08008a28 <__smakebuf_r>:
 8008a28:	898b      	ldrh	r3, [r1, #12]
 8008a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a2c:	079d      	lsls	r5, r3, #30
 8008a2e:	4606      	mov	r6, r0
 8008a30:	460c      	mov	r4, r1
 8008a32:	d507      	bpl.n	8008a44 <__smakebuf_r+0x1c>
 8008a34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	6123      	str	r3, [r4, #16]
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	6163      	str	r3, [r4, #20]
 8008a40:	b003      	add	sp, #12
 8008a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a44:	ab01      	add	r3, sp, #4
 8008a46:	466a      	mov	r2, sp
 8008a48:	f7ff ffc8 	bl	80089dc <__swhatbuf_r>
 8008a4c:	9f00      	ldr	r7, [sp, #0]
 8008a4e:	4605      	mov	r5, r0
 8008a50:	4639      	mov	r1, r7
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7ff f8b0 	bl	8007bb8 <_malloc_r>
 8008a58:	b948      	cbnz	r0, 8008a6e <__smakebuf_r+0x46>
 8008a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5e:	059a      	lsls	r2, r3, #22
 8008a60:	d4ee      	bmi.n	8008a40 <__smakebuf_r+0x18>
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	f043 0302 	orr.w	r3, r3, #2
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	e7e2      	b.n	8008a34 <__smakebuf_r+0xc>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	6020      	str	r0, [r4, #0]
 8008a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	9b01      	ldr	r3, [sp, #4]
 8008a7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a7e:	b15b      	cbz	r3, 8008a98 <__smakebuf_r+0x70>
 8008a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a84:	4630      	mov	r0, r6
 8008a86:	f000 f81d 	bl	8008ac4 <_isatty_r>
 8008a8a:	b128      	cbz	r0, 8008a98 <__smakebuf_r+0x70>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	f043 0301 	orr.w	r3, r3, #1
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	431d      	orrs	r5, r3
 8008a9c:	81a5      	strh	r5, [r4, #12]
 8008a9e:	e7cf      	b.n	8008a40 <__smakebuf_r+0x18>

08008aa0 <_fstat_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	@ (8008ac0 <_fstat_r+0x20>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	f7f8 ff0d 	bl	80018cc <_fstat>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d102      	bne.n	8008abc <_fstat_r+0x1c>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	b103      	cbz	r3, 8008abc <_fstat_r+0x1c>
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	bf00      	nop
 8008ac0:	200004f0 	.word	0x200004f0

08008ac4 <_isatty_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	@ (8008ae0 <_isatty_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f8 ff0c 	bl	80018ec <_isatty>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_isatty_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_isatty_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	200004f0 	.word	0x200004f0

08008ae4 <abort>:
 8008ae4:	b508      	push	{r3, lr}
 8008ae6:	2006      	movs	r0, #6
 8008ae8:	f000 f82c 	bl	8008b44 <raise>
 8008aec:	2001      	movs	r0, #1
 8008aee:	f7f8 fe9d 	bl	800182c <_exit>

08008af2 <_raise_r>:
 8008af2:	291f      	cmp	r1, #31
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4605      	mov	r5, r0
 8008af8:	460c      	mov	r4, r1
 8008afa:	d904      	bls.n	8008b06 <_raise_r+0x14>
 8008afc:	2316      	movs	r3, #22
 8008afe:	6003      	str	r3, [r0, #0]
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	bd38      	pop	{r3, r4, r5, pc}
 8008b06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b08:	b112      	cbz	r2, 8008b10 <_raise_r+0x1e>
 8008b0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b0e:	b94b      	cbnz	r3, 8008b24 <_raise_r+0x32>
 8008b10:	4628      	mov	r0, r5
 8008b12:	f000 f831 	bl	8008b78 <_getpid_r>
 8008b16:	4622      	mov	r2, r4
 8008b18:	4601      	mov	r1, r0
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b20:	f000 b818 	b.w	8008b54 <_kill_r>
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d00a      	beq.n	8008b3e <_raise_r+0x4c>
 8008b28:	1c59      	adds	r1, r3, #1
 8008b2a:	d103      	bne.n	8008b34 <_raise_r+0x42>
 8008b2c:	2316      	movs	r3, #22
 8008b2e:	6003      	str	r3, [r0, #0]
 8008b30:	2001      	movs	r0, #1
 8008b32:	e7e7      	b.n	8008b04 <_raise_r+0x12>
 8008b34:	2100      	movs	r1, #0
 8008b36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	4798      	blx	r3
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e7e0      	b.n	8008b04 <_raise_r+0x12>
	...

08008b44 <raise>:
 8008b44:	4b02      	ldr	r3, [pc, #8]	@ (8008b50 <raise+0xc>)
 8008b46:	4601      	mov	r1, r0
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	f7ff bfd2 	b.w	8008af2 <_raise_r>
 8008b4e:	bf00      	nop
 8008b50:	20000018 	.word	0x20000018

08008b54 <_kill_r>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4d07      	ldr	r5, [pc, #28]	@ (8008b74 <_kill_r+0x20>)
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	4611      	mov	r1, r2
 8008b60:	602b      	str	r3, [r5, #0]
 8008b62:	f7f8 fe53 	bl	800180c <_kill>
 8008b66:	1c43      	adds	r3, r0, #1
 8008b68:	d102      	bne.n	8008b70 <_kill_r+0x1c>
 8008b6a:	682b      	ldr	r3, [r5, #0]
 8008b6c:	b103      	cbz	r3, 8008b70 <_kill_r+0x1c>
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	bd38      	pop	{r3, r4, r5, pc}
 8008b72:	bf00      	nop
 8008b74:	200004f0 	.word	0x200004f0

08008b78 <_getpid_r>:
 8008b78:	f7f8 be40 	b.w	80017fc <_getpid>

08008b7c <_init>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr

08008b88 <_fini>:
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	bf00      	nop
 8008b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8e:	bc08      	pop	{r3}
 8008b90:	469e      	mov	lr, r3
 8008b92:	4770      	bx	lr
